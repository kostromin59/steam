// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v6.32.0
// source: service_voicechat.proto

package webuipb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CVoiceChat_AllMembersStatus_Notification struct {
	state         protoimpl.MessageState                     `protogen:"open.v1"`
	VoiceChatid   *uint64                                    `protobuf:"fixed64,1,opt,name=voice_chatid,json=voiceChatid" json:"voice_chatid,omitempty"`
	Users         []*CVoiceChat_UserVoiceStatus_Notification `protobuf:"bytes,2,rep,name=users" json:"users,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CVoiceChat_AllMembersStatus_Notification) Reset() {
	*x = CVoiceChat_AllMembersStatus_Notification{}
	mi := &file_service_voicechat_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CVoiceChat_AllMembersStatus_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVoiceChat_AllMembersStatus_Notification) ProtoMessage() {}

func (x *CVoiceChat_AllMembersStatus_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_service_voicechat_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVoiceChat_AllMembersStatus_Notification.ProtoReflect.Descriptor instead.
func (*CVoiceChat_AllMembersStatus_Notification) Descriptor() ([]byte, []int) {
	return file_service_voicechat_proto_rawDescGZIP(), []int{0}
}

func (x *CVoiceChat_AllMembersStatus_Notification) GetVoiceChatid() uint64 {
	if x != nil && x.VoiceChatid != nil {
		return *x.VoiceChatid
	}
	return 0
}

func (x *CVoiceChat_AllMembersStatus_Notification) GetUsers() []*CVoiceChat_UserVoiceStatus_Notification {
	if x != nil {
		return x.Users
	}
	return nil
}

type CVoiceChat_AnswerOneOnOneChat_Request struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	VoiceChatid     *uint64                `protobuf:"fixed64,1,opt,name=voice_chatid,json=voiceChatid" json:"voice_chatid,omitempty"`
	SteamidPartner  *uint64                `protobuf:"fixed64,2,opt,name=steamid_partner,json=steamidPartner" json:"steamid_partner,omitempty"`
	AcceptedRequest *bool                  `protobuf:"varint,3,opt,name=accepted_request,json=acceptedRequest" json:"accepted_request,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CVoiceChat_AnswerOneOnOneChat_Request) Reset() {
	*x = CVoiceChat_AnswerOneOnOneChat_Request{}
	mi := &file_service_voicechat_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CVoiceChat_AnswerOneOnOneChat_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVoiceChat_AnswerOneOnOneChat_Request) ProtoMessage() {}

func (x *CVoiceChat_AnswerOneOnOneChat_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_voicechat_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVoiceChat_AnswerOneOnOneChat_Request.ProtoReflect.Descriptor instead.
func (*CVoiceChat_AnswerOneOnOneChat_Request) Descriptor() ([]byte, []int) {
	return file_service_voicechat_proto_rawDescGZIP(), []int{1}
}

func (x *CVoiceChat_AnswerOneOnOneChat_Request) GetVoiceChatid() uint64 {
	if x != nil && x.VoiceChatid != nil {
		return *x.VoiceChatid
	}
	return 0
}

func (x *CVoiceChat_AnswerOneOnOneChat_Request) GetSteamidPartner() uint64 {
	if x != nil && x.SteamidPartner != nil {
		return *x.SteamidPartner
	}
	return 0
}

func (x *CVoiceChat_AnswerOneOnOneChat_Request) GetAcceptedRequest() bool {
	if x != nil && x.AcceptedRequest != nil {
		return *x.AcceptedRequest
	}
	return false
}

type CVoiceChat_AnswerOneOnOneChat_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CVoiceChat_AnswerOneOnOneChat_Response) Reset() {
	*x = CVoiceChat_AnswerOneOnOneChat_Response{}
	mi := &file_service_voicechat_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CVoiceChat_AnswerOneOnOneChat_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVoiceChat_AnswerOneOnOneChat_Response) ProtoMessage() {}

func (x *CVoiceChat_AnswerOneOnOneChat_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_voicechat_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVoiceChat_AnswerOneOnOneChat_Response.ProtoReflect.Descriptor instead.
func (*CVoiceChat_AnswerOneOnOneChat_Response) Descriptor() ([]byte, []int) {
	return file_service_voicechat_proto_rawDescGZIP(), []int{2}
}

type CVoiceChat_EndOneOnOneChat_Request struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	SteamidPartner *uint64                `protobuf:"fixed64,1,opt,name=steamid_partner,json=steamidPartner" json:"steamid_partner,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CVoiceChat_EndOneOnOneChat_Request) Reset() {
	*x = CVoiceChat_EndOneOnOneChat_Request{}
	mi := &file_service_voicechat_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CVoiceChat_EndOneOnOneChat_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVoiceChat_EndOneOnOneChat_Request) ProtoMessage() {}

func (x *CVoiceChat_EndOneOnOneChat_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_voicechat_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVoiceChat_EndOneOnOneChat_Request.ProtoReflect.Descriptor instead.
func (*CVoiceChat_EndOneOnOneChat_Request) Descriptor() ([]byte, []int) {
	return file_service_voicechat_proto_rawDescGZIP(), []int{3}
}

func (x *CVoiceChat_EndOneOnOneChat_Request) GetSteamidPartner() uint64 {
	if x != nil && x.SteamidPartner != nil {
		return *x.SteamidPartner
	}
	return 0
}

type CVoiceChat_EndOneOnOneChat_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CVoiceChat_EndOneOnOneChat_Response) Reset() {
	*x = CVoiceChat_EndOneOnOneChat_Response{}
	mi := &file_service_voicechat_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CVoiceChat_EndOneOnOneChat_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVoiceChat_EndOneOnOneChat_Response) ProtoMessage() {}

func (x *CVoiceChat_EndOneOnOneChat_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_voicechat_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVoiceChat_EndOneOnOneChat_Response.ProtoReflect.Descriptor instead.
func (*CVoiceChat_EndOneOnOneChat_Response) Descriptor() ([]byte, []int) {
	return file_service_voicechat_proto_rawDescGZIP(), []int{4}
}

type CVoiceChat_LeaveOneOnOneChat_Request struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	SteamidPartner *uint64                `protobuf:"fixed64,1,opt,name=steamid_partner,json=steamidPartner" json:"steamid_partner,omitempty"`
	VoiceChatid    *uint64                `protobuf:"fixed64,2,opt,name=voice_chatid,json=voiceChatid" json:"voice_chatid,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CVoiceChat_LeaveOneOnOneChat_Request) Reset() {
	*x = CVoiceChat_LeaveOneOnOneChat_Request{}
	mi := &file_service_voicechat_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CVoiceChat_LeaveOneOnOneChat_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVoiceChat_LeaveOneOnOneChat_Request) ProtoMessage() {}

func (x *CVoiceChat_LeaveOneOnOneChat_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_voicechat_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVoiceChat_LeaveOneOnOneChat_Request.ProtoReflect.Descriptor instead.
func (*CVoiceChat_LeaveOneOnOneChat_Request) Descriptor() ([]byte, []int) {
	return file_service_voicechat_proto_rawDescGZIP(), []int{5}
}

func (x *CVoiceChat_LeaveOneOnOneChat_Request) GetSteamidPartner() uint64 {
	if x != nil && x.SteamidPartner != nil {
		return *x.SteamidPartner
	}
	return 0
}

func (x *CVoiceChat_LeaveOneOnOneChat_Request) GetVoiceChatid() uint64 {
	if x != nil && x.VoiceChatid != nil {
		return *x.VoiceChatid
	}
	return 0
}

type CVoiceChat_LeaveOneOnOneChat_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CVoiceChat_LeaveOneOnOneChat_Response) Reset() {
	*x = CVoiceChat_LeaveOneOnOneChat_Response{}
	mi := &file_service_voicechat_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CVoiceChat_LeaveOneOnOneChat_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVoiceChat_LeaveOneOnOneChat_Response) ProtoMessage() {}

func (x *CVoiceChat_LeaveOneOnOneChat_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_voicechat_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVoiceChat_LeaveOneOnOneChat_Response.ProtoReflect.Descriptor instead.
func (*CVoiceChat_LeaveOneOnOneChat_Response) Descriptor() ([]byte, []int) {
	return file_service_voicechat_proto_rawDescGZIP(), []int{6}
}

type CVoiceChat_LeaveVoiceChat_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	VoiceChatid   *uint64                `protobuf:"fixed64,1,opt,name=voice_chatid,json=voiceChatid" json:"voice_chatid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CVoiceChat_LeaveVoiceChat_Request) Reset() {
	*x = CVoiceChat_LeaveVoiceChat_Request{}
	mi := &file_service_voicechat_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CVoiceChat_LeaveVoiceChat_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVoiceChat_LeaveVoiceChat_Request) ProtoMessage() {}

func (x *CVoiceChat_LeaveVoiceChat_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_voicechat_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVoiceChat_LeaveVoiceChat_Request.ProtoReflect.Descriptor instead.
func (*CVoiceChat_LeaveVoiceChat_Request) Descriptor() ([]byte, []int) {
	return file_service_voicechat_proto_rawDescGZIP(), []int{7}
}

func (x *CVoiceChat_LeaveVoiceChat_Request) GetVoiceChatid() uint64 {
	if x != nil && x.VoiceChatid != nil {
		return *x.VoiceChatid
	}
	return 0
}

type CVoiceChat_LeaveVoiceChat_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CVoiceChat_LeaveVoiceChat_Response) Reset() {
	*x = CVoiceChat_LeaveVoiceChat_Response{}
	mi := &file_service_voicechat_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CVoiceChat_LeaveVoiceChat_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVoiceChat_LeaveVoiceChat_Response) ProtoMessage() {}

func (x *CVoiceChat_LeaveVoiceChat_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_voicechat_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVoiceChat_LeaveVoiceChat_Response.ProtoReflect.Descriptor instead.
func (*CVoiceChat_LeaveVoiceChat_Response) Descriptor() ([]byte, []int) {
	return file_service_voicechat_proto_rawDescGZIP(), []int{8}
}

type CVoiceChat_OneOnOneChatRequested_Notification struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	VoiceChatid    *uint64                `protobuf:"fixed64,1,opt,name=voice_chatid,json=voiceChatid" json:"voice_chatid,omitempty"`
	SteamidPartner *uint64                `protobuf:"fixed64,2,opt,name=steamid_partner,json=steamidPartner" json:"steamid_partner,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CVoiceChat_OneOnOneChatRequested_Notification) Reset() {
	*x = CVoiceChat_OneOnOneChatRequested_Notification{}
	mi := &file_service_voicechat_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CVoiceChat_OneOnOneChatRequested_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVoiceChat_OneOnOneChatRequested_Notification) ProtoMessage() {}

func (x *CVoiceChat_OneOnOneChatRequested_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_service_voicechat_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVoiceChat_OneOnOneChatRequested_Notification.ProtoReflect.Descriptor instead.
func (*CVoiceChat_OneOnOneChatRequested_Notification) Descriptor() ([]byte, []int) {
	return file_service_voicechat_proto_rawDescGZIP(), []int{9}
}

func (x *CVoiceChat_OneOnOneChatRequested_Notification) GetVoiceChatid() uint64 {
	if x != nil && x.VoiceChatid != nil {
		return *x.VoiceChatid
	}
	return 0
}

func (x *CVoiceChat_OneOnOneChatRequested_Notification) GetSteamidPartner() uint64 {
	if x != nil && x.SteamidPartner != nil {
		return *x.SteamidPartner
	}
	return 0
}

type CVoiceChat_OneOnOneChatRequestResponse_Notification struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	VoicechatId     *uint64                `protobuf:"fixed64,1,opt,name=voicechat_id,json=voicechatId" json:"voicechat_id,omitempty"`
	SteamidPartner  *uint64                `protobuf:"fixed64,2,opt,name=steamid_partner,json=steamidPartner" json:"steamid_partner,omitempty"`
	AcceptedRequest *bool                  `protobuf:"varint,3,opt,name=accepted_request,json=acceptedRequest" json:"accepted_request,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CVoiceChat_OneOnOneChatRequestResponse_Notification) Reset() {
	*x = CVoiceChat_OneOnOneChatRequestResponse_Notification{}
	mi := &file_service_voicechat_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CVoiceChat_OneOnOneChatRequestResponse_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVoiceChat_OneOnOneChatRequestResponse_Notification) ProtoMessage() {}

func (x *CVoiceChat_OneOnOneChatRequestResponse_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_service_voicechat_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVoiceChat_OneOnOneChatRequestResponse_Notification.ProtoReflect.Descriptor instead.
func (*CVoiceChat_OneOnOneChatRequestResponse_Notification) Descriptor() ([]byte, []int) {
	return file_service_voicechat_proto_rawDescGZIP(), []int{10}
}

func (x *CVoiceChat_OneOnOneChatRequestResponse_Notification) GetVoicechatId() uint64 {
	if x != nil && x.VoicechatId != nil {
		return *x.VoicechatId
	}
	return 0
}

func (x *CVoiceChat_OneOnOneChatRequestResponse_Notification) GetSteamidPartner() uint64 {
	if x != nil && x.SteamidPartner != nil {
		return *x.SteamidPartner
	}
	return 0
}

func (x *CVoiceChat_OneOnOneChatRequestResponse_Notification) GetAcceptedRequest() bool {
	if x != nil && x.AcceptedRequest != nil {
		return *x.AcceptedRequest
	}
	return false
}

type CVoiceChat_RequestOneOnOneChat_Request struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	SteamidPartner *uint64                `protobuf:"fixed64,1,opt,name=steamid_partner,json=steamidPartner" json:"steamid_partner,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CVoiceChat_RequestOneOnOneChat_Request) Reset() {
	*x = CVoiceChat_RequestOneOnOneChat_Request{}
	mi := &file_service_voicechat_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CVoiceChat_RequestOneOnOneChat_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVoiceChat_RequestOneOnOneChat_Request) ProtoMessage() {}

func (x *CVoiceChat_RequestOneOnOneChat_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_voicechat_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVoiceChat_RequestOneOnOneChat_Request.ProtoReflect.Descriptor instead.
func (*CVoiceChat_RequestOneOnOneChat_Request) Descriptor() ([]byte, []int) {
	return file_service_voicechat_proto_rawDescGZIP(), []int{11}
}

func (x *CVoiceChat_RequestOneOnOneChat_Request) GetSteamidPartner() uint64 {
	if x != nil && x.SteamidPartner != nil {
		return *x.SteamidPartner
	}
	return 0
}

type CVoiceChat_RequestOneOnOneChat_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	VoiceChatid   *uint64                `protobuf:"fixed64,1,opt,name=voice_chatid,json=voiceChatid" json:"voice_chatid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CVoiceChat_RequestOneOnOneChat_Response) Reset() {
	*x = CVoiceChat_RequestOneOnOneChat_Response{}
	mi := &file_service_voicechat_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CVoiceChat_RequestOneOnOneChat_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVoiceChat_RequestOneOnOneChat_Response) ProtoMessage() {}

func (x *CVoiceChat_RequestOneOnOneChat_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_voicechat_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVoiceChat_RequestOneOnOneChat_Response.ProtoReflect.Descriptor instead.
func (*CVoiceChat_RequestOneOnOneChat_Response) Descriptor() ([]byte, []int) {
	return file_service_voicechat_proto_rawDescGZIP(), []int{12}
}

func (x *CVoiceChat_RequestOneOnOneChat_Response) GetVoiceChatid() uint64 {
	if x != nil && x.VoiceChatid != nil {
		return *x.VoiceChatid
	}
	return 0
}

type CVoiceChat_UpdateUserVideoStatus_Request struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	VoiceChatid       *uint64                `protobuf:"fixed64,1,opt,name=voice_chatid,json=voiceChatid" json:"voice_chatid,omitempty"`
	UserSteamid       *uint64                `protobuf:"fixed64,2,opt,name=user_steamid,json=userSteamid" json:"user_steamid,omitempty"`
	AcceptWebrtcVideo *bool                  `protobuf:"varint,3,opt,name=accept_webrtc_video,json=acceptWebrtcVideo" json:"accept_webrtc_video,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *CVoiceChat_UpdateUserVideoStatus_Request) Reset() {
	*x = CVoiceChat_UpdateUserVideoStatus_Request{}
	mi := &file_service_voicechat_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CVoiceChat_UpdateUserVideoStatus_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVoiceChat_UpdateUserVideoStatus_Request) ProtoMessage() {}

func (x *CVoiceChat_UpdateUserVideoStatus_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_voicechat_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVoiceChat_UpdateUserVideoStatus_Request.ProtoReflect.Descriptor instead.
func (*CVoiceChat_UpdateUserVideoStatus_Request) Descriptor() ([]byte, []int) {
	return file_service_voicechat_proto_rawDescGZIP(), []int{13}
}

func (x *CVoiceChat_UpdateUserVideoStatus_Request) GetVoiceChatid() uint64 {
	if x != nil && x.VoiceChatid != nil {
		return *x.VoiceChatid
	}
	return 0
}

func (x *CVoiceChat_UpdateUserVideoStatus_Request) GetUserSteamid() uint64 {
	if x != nil && x.UserSteamid != nil {
		return *x.UserSteamid
	}
	return 0
}

func (x *CVoiceChat_UpdateUserVideoStatus_Request) GetAcceptWebrtcVideo() bool {
	if x != nil && x.AcceptWebrtcVideo != nil {
		return *x.AcceptWebrtcVideo
	}
	return false
}

type CVoiceChat_UpdateUserVideoStatus_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CVoiceChat_UpdateUserVideoStatus_Response) Reset() {
	*x = CVoiceChat_UpdateUserVideoStatus_Response{}
	mi := &file_service_voicechat_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CVoiceChat_UpdateUserVideoStatus_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVoiceChat_UpdateUserVideoStatus_Response) ProtoMessage() {}

func (x *CVoiceChat_UpdateUserVideoStatus_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_voicechat_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVoiceChat_UpdateUserVideoStatus_Response.ProtoReflect.Descriptor instead.
func (*CVoiceChat_UpdateUserVideoStatus_Response) Descriptor() ([]byte, []int) {
	return file_service_voicechat_proto_rawDescGZIP(), []int{14}
}

type CVoiceChat_UpdateVoiceChatWebRTCData_Request struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	VoiceChatid             *uint64                `protobuf:"fixed64,1,opt,name=voice_chatid,json=voiceChatid" json:"voice_chatid,omitempty"`
	IpWebrtcServer          *uint32                `protobuf:"varint,2,opt,name=ip_webrtc_server,json=ipWebrtcServer" json:"ip_webrtc_server,omitempty"`
	PortWebrtcServer        *uint32                `protobuf:"varint,3,opt,name=port_webrtc_server,json=portWebrtcServer" json:"port_webrtc_server,omitempty"`
	IpWebrtcClient          *uint32                `protobuf:"varint,4,opt,name=ip_webrtc_client,json=ipWebrtcClient" json:"ip_webrtc_client,omitempty"`
	PortWebrtcClient        *uint32                `protobuf:"varint,5,opt,name=port_webrtc_client,json=portWebrtcClient" json:"port_webrtc_client,omitempty"`
	SsrcMySendingStream     *uint32                `protobuf:"varint,6,opt,name=ssrc_my_sending_stream,json=ssrcMySendingStream" json:"ssrc_my_sending_stream,omitempty"`
	UserAgent               *string                `protobuf:"bytes,7,opt,name=user_agent,json=userAgent" json:"user_agent,omitempty"`
	HasAudioWorkletsSupport *bool                  `protobuf:"varint,8,opt,name=has_audio_worklets_support,json=hasAudioWorkletsSupport" json:"has_audio_worklets_support,omitempty"`
	HasWebrtcDataChannel    *bool                  `protobuf:"varint,9,opt,name=has_webrtc_data_channel,json=hasWebrtcDataChannel" json:"has_webrtc_data_channel,omitempty"`
	AcceptsWebrtcVideo      *bool                  `protobuf:"varint,10,opt,name=accepts_webrtc_video,json=acceptsWebrtcVideo" json:"accepts_webrtc_video,omitempty"`
	SendsWebrtcVideo        *bool                  `protobuf:"varint,11,opt,name=sends_webrtc_video,json=sendsWebrtcVideo" json:"sends_webrtc_video,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *CVoiceChat_UpdateVoiceChatWebRTCData_Request) Reset() {
	*x = CVoiceChat_UpdateVoiceChatWebRTCData_Request{}
	mi := &file_service_voicechat_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CVoiceChat_UpdateVoiceChatWebRTCData_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVoiceChat_UpdateVoiceChatWebRTCData_Request) ProtoMessage() {}

func (x *CVoiceChat_UpdateVoiceChatWebRTCData_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_voicechat_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVoiceChat_UpdateVoiceChatWebRTCData_Request.ProtoReflect.Descriptor instead.
func (*CVoiceChat_UpdateVoiceChatWebRTCData_Request) Descriptor() ([]byte, []int) {
	return file_service_voicechat_proto_rawDescGZIP(), []int{15}
}

func (x *CVoiceChat_UpdateVoiceChatWebRTCData_Request) GetVoiceChatid() uint64 {
	if x != nil && x.VoiceChatid != nil {
		return *x.VoiceChatid
	}
	return 0
}

func (x *CVoiceChat_UpdateVoiceChatWebRTCData_Request) GetIpWebrtcServer() uint32 {
	if x != nil && x.IpWebrtcServer != nil {
		return *x.IpWebrtcServer
	}
	return 0
}

func (x *CVoiceChat_UpdateVoiceChatWebRTCData_Request) GetPortWebrtcServer() uint32 {
	if x != nil && x.PortWebrtcServer != nil {
		return *x.PortWebrtcServer
	}
	return 0
}

func (x *CVoiceChat_UpdateVoiceChatWebRTCData_Request) GetIpWebrtcClient() uint32 {
	if x != nil && x.IpWebrtcClient != nil {
		return *x.IpWebrtcClient
	}
	return 0
}

func (x *CVoiceChat_UpdateVoiceChatWebRTCData_Request) GetPortWebrtcClient() uint32 {
	if x != nil && x.PortWebrtcClient != nil {
		return *x.PortWebrtcClient
	}
	return 0
}

func (x *CVoiceChat_UpdateVoiceChatWebRTCData_Request) GetSsrcMySendingStream() uint32 {
	if x != nil && x.SsrcMySendingStream != nil {
		return *x.SsrcMySendingStream
	}
	return 0
}

func (x *CVoiceChat_UpdateVoiceChatWebRTCData_Request) GetUserAgent() string {
	if x != nil && x.UserAgent != nil {
		return *x.UserAgent
	}
	return ""
}

func (x *CVoiceChat_UpdateVoiceChatWebRTCData_Request) GetHasAudioWorkletsSupport() bool {
	if x != nil && x.HasAudioWorkletsSupport != nil {
		return *x.HasAudioWorkletsSupport
	}
	return false
}

func (x *CVoiceChat_UpdateVoiceChatWebRTCData_Request) GetHasWebrtcDataChannel() bool {
	if x != nil && x.HasWebrtcDataChannel != nil {
		return *x.HasWebrtcDataChannel
	}
	return false
}

func (x *CVoiceChat_UpdateVoiceChatWebRTCData_Request) GetAcceptsWebrtcVideo() bool {
	if x != nil && x.AcceptsWebrtcVideo != nil {
		return *x.AcceptsWebrtcVideo
	}
	return false
}

func (x *CVoiceChat_UpdateVoiceChatWebRTCData_Request) GetSendsWebrtcVideo() bool {
	if x != nil && x.SendsWebrtcVideo != nil {
		return *x.SendsWebrtcVideo
	}
	return false
}

type CVoiceChat_UpdateVoiceChatWebRTCData_Response struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	SendClientVoiceLogs *bool                  `protobuf:"varint,1,opt,name=send_client_voice_logs,json=sendClientVoiceLogs" json:"send_client_voice_logs,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *CVoiceChat_UpdateVoiceChatWebRTCData_Response) Reset() {
	*x = CVoiceChat_UpdateVoiceChatWebRTCData_Response{}
	mi := &file_service_voicechat_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CVoiceChat_UpdateVoiceChatWebRTCData_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVoiceChat_UpdateVoiceChatWebRTCData_Response) ProtoMessage() {}

func (x *CVoiceChat_UpdateVoiceChatWebRTCData_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_voicechat_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVoiceChat_UpdateVoiceChatWebRTCData_Response.ProtoReflect.Descriptor instead.
func (*CVoiceChat_UpdateVoiceChatWebRTCData_Response) Descriptor() ([]byte, []int) {
	return file_service_voicechat_proto_rawDescGZIP(), []int{16}
}

func (x *CVoiceChat_UpdateVoiceChatWebRTCData_Response) GetSendClientVoiceLogs() bool {
	if x != nil && x.SendClientVoiceLogs != nil {
		return *x.SendClientVoiceLogs
	}
	return false
}

type CVoiceChat_UploadClientVoiceChatLogs_Request struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	VoiceChatid             *uint64                `protobuf:"fixed64,1,opt,name=voice_chatid,json=voiceChatid" json:"voice_chatid,omitempty"`
	ClientVoiceLogsNewLines *string                `protobuf:"bytes,2,opt,name=client_voice_logs_new_lines,json=clientVoiceLogsNewLines" json:"client_voice_logs_new_lines,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *CVoiceChat_UploadClientVoiceChatLogs_Request) Reset() {
	*x = CVoiceChat_UploadClientVoiceChatLogs_Request{}
	mi := &file_service_voicechat_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CVoiceChat_UploadClientVoiceChatLogs_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVoiceChat_UploadClientVoiceChatLogs_Request) ProtoMessage() {}

func (x *CVoiceChat_UploadClientVoiceChatLogs_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_voicechat_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVoiceChat_UploadClientVoiceChatLogs_Request.ProtoReflect.Descriptor instead.
func (*CVoiceChat_UploadClientVoiceChatLogs_Request) Descriptor() ([]byte, []int) {
	return file_service_voicechat_proto_rawDescGZIP(), []int{17}
}

func (x *CVoiceChat_UploadClientVoiceChatLogs_Request) GetVoiceChatid() uint64 {
	if x != nil && x.VoiceChatid != nil {
		return *x.VoiceChatid
	}
	return 0
}

func (x *CVoiceChat_UploadClientVoiceChatLogs_Request) GetClientVoiceLogsNewLines() string {
	if x != nil && x.ClientVoiceLogsNewLines != nil {
		return *x.ClientVoiceLogsNewLines
	}
	return ""
}

type CVoiceChat_UploadClientVoiceChatLogs_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CVoiceChat_UploadClientVoiceChatLogs_Response) Reset() {
	*x = CVoiceChat_UploadClientVoiceChatLogs_Response{}
	mi := &file_service_voicechat_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CVoiceChat_UploadClientVoiceChatLogs_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVoiceChat_UploadClientVoiceChatLogs_Response) ProtoMessage() {}

func (x *CVoiceChat_UploadClientVoiceChatLogs_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_voicechat_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVoiceChat_UploadClientVoiceChatLogs_Response.ProtoReflect.Descriptor instead.
func (*CVoiceChat_UploadClientVoiceChatLogs_Response) Descriptor() ([]byte, []int) {
	return file_service_voicechat_proto_rawDescGZIP(), []int{18}
}

type CVoiceChat_UserJoinedVoiceChat_Notification struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	VoiceChatid           *uint64                `protobuf:"fixed64,1,opt,name=voice_chatid,json=voiceChatid" json:"voice_chatid,omitempty"`
	UserSteamid           *uint64                `protobuf:"fixed64,2,opt,name=user_steamid,json=userSteamid" json:"user_steamid,omitempty"`
	Chatid                *uint64                `protobuf:"varint,3,opt,name=chatid" json:"chatid,omitempty"`
	OneOnOneSteamidLower  *uint64                `protobuf:"fixed64,4,opt,name=one_on_one_steamid_lower,json=oneOnOneSteamidLower" json:"one_on_one_steamid_lower,omitempty"`
	OneOnOneSteamidHigher *uint64                `protobuf:"fixed64,5,opt,name=one_on_one_steamid_higher,json=oneOnOneSteamidHigher" json:"one_on_one_steamid_higher,omitempty"`
	ChatGroupId           *uint64                `protobuf:"varint,6,opt,name=chat_group_id,json=chatGroupId" json:"chat_group_id,omitempty"`
	UserSessionid         *uint32                `protobuf:"varint,7,opt,name=user_sessionid,json=userSessionid" json:"user_sessionid,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *CVoiceChat_UserJoinedVoiceChat_Notification) Reset() {
	*x = CVoiceChat_UserJoinedVoiceChat_Notification{}
	mi := &file_service_voicechat_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CVoiceChat_UserJoinedVoiceChat_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVoiceChat_UserJoinedVoiceChat_Notification) ProtoMessage() {}

func (x *CVoiceChat_UserJoinedVoiceChat_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_service_voicechat_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVoiceChat_UserJoinedVoiceChat_Notification.ProtoReflect.Descriptor instead.
func (*CVoiceChat_UserJoinedVoiceChat_Notification) Descriptor() ([]byte, []int) {
	return file_service_voicechat_proto_rawDescGZIP(), []int{19}
}

func (x *CVoiceChat_UserJoinedVoiceChat_Notification) GetVoiceChatid() uint64 {
	if x != nil && x.VoiceChatid != nil {
		return *x.VoiceChatid
	}
	return 0
}

func (x *CVoiceChat_UserJoinedVoiceChat_Notification) GetUserSteamid() uint64 {
	if x != nil && x.UserSteamid != nil {
		return *x.UserSteamid
	}
	return 0
}

func (x *CVoiceChat_UserJoinedVoiceChat_Notification) GetChatid() uint64 {
	if x != nil && x.Chatid != nil {
		return *x.Chatid
	}
	return 0
}

func (x *CVoiceChat_UserJoinedVoiceChat_Notification) GetOneOnOneSteamidLower() uint64 {
	if x != nil && x.OneOnOneSteamidLower != nil {
		return *x.OneOnOneSteamidLower
	}
	return 0
}

func (x *CVoiceChat_UserJoinedVoiceChat_Notification) GetOneOnOneSteamidHigher() uint64 {
	if x != nil && x.OneOnOneSteamidHigher != nil {
		return *x.OneOnOneSteamidHigher
	}
	return 0
}

func (x *CVoiceChat_UserJoinedVoiceChat_Notification) GetChatGroupId() uint64 {
	if x != nil && x.ChatGroupId != nil {
		return *x.ChatGroupId
	}
	return 0
}

func (x *CVoiceChat_UserJoinedVoiceChat_Notification) GetUserSessionid() uint32 {
	if x != nil && x.UserSessionid != nil {
		return *x.UserSessionid
	}
	return 0
}

type CVoiceChat_UserLeftVoiceChat_Notification struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	VoiceChatid           *uint64                `protobuf:"fixed64,1,opt,name=voice_chatid,json=voiceChatid" json:"voice_chatid,omitempty"`
	UserSteamid           *uint64                `protobuf:"fixed64,2,opt,name=user_steamid,json=userSteamid" json:"user_steamid,omitempty"`
	Chatid                *uint64                `protobuf:"varint,3,opt,name=chatid" json:"chatid,omitempty"`
	OneOnOneSteamidLower  *uint64                `protobuf:"fixed64,4,opt,name=one_on_one_steamid_lower,json=oneOnOneSteamidLower" json:"one_on_one_steamid_lower,omitempty"`
	OneOnOneSteamidHigher *uint64                `protobuf:"fixed64,5,opt,name=one_on_one_steamid_higher,json=oneOnOneSteamidHigher" json:"one_on_one_steamid_higher,omitempty"`
	ChatGroupId           *uint64                `protobuf:"varint,6,opt,name=chat_group_id,json=chatGroupId" json:"chat_group_id,omitempty"`
	UserSessionid         *uint32                `protobuf:"varint,7,opt,name=user_sessionid,json=userSessionid" json:"user_sessionid,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *CVoiceChat_UserLeftVoiceChat_Notification) Reset() {
	*x = CVoiceChat_UserLeftVoiceChat_Notification{}
	mi := &file_service_voicechat_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CVoiceChat_UserLeftVoiceChat_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVoiceChat_UserLeftVoiceChat_Notification) ProtoMessage() {}

func (x *CVoiceChat_UserLeftVoiceChat_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_service_voicechat_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVoiceChat_UserLeftVoiceChat_Notification.ProtoReflect.Descriptor instead.
func (*CVoiceChat_UserLeftVoiceChat_Notification) Descriptor() ([]byte, []int) {
	return file_service_voicechat_proto_rawDescGZIP(), []int{20}
}

func (x *CVoiceChat_UserLeftVoiceChat_Notification) GetVoiceChatid() uint64 {
	if x != nil && x.VoiceChatid != nil {
		return *x.VoiceChatid
	}
	return 0
}

func (x *CVoiceChat_UserLeftVoiceChat_Notification) GetUserSteamid() uint64 {
	if x != nil && x.UserSteamid != nil {
		return *x.UserSteamid
	}
	return 0
}

func (x *CVoiceChat_UserLeftVoiceChat_Notification) GetChatid() uint64 {
	if x != nil && x.Chatid != nil {
		return *x.Chatid
	}
	return 0
}

func (x *CVoiceChat_UserLeftVoiceChat_Notification) GetOneOnOneSteamidLower() uint64 {
	if x != nil && x.OneOnOneSteamidLower != nil {
		return *x.OneOnOneSteamidLower
	}
	return 0
}

func (x *CVoiceChat_UserLeftVoiceChat_Notification) GetOneOnOneSteamidHigher() uint64 {
	if x != nil && x.OneOnOneSteamidHigher != nil {
		return *x.OneOnOneSteamidHigher
	}
	return 0
}

func (x *CVoiceChat_UserLeftVoiceChat_Notification) GetChatGroupId() uint64 {
	if x != nil && x.ChatGroupId != nil {
		return *x.ChatGroupId
	}
	return 0
}

func (x *CVoiceChat_UserLeftVoiceChat_Notification) GetUserSessionid() uint32 {
	if x != nil && x.UserSessionid != nil {
		return *x.UserSessionid
	}
	return 0
}

type CVoiceChat_UserVoiceStatus_Notification struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	VoiceChatid            *uint64                `protobuf:"fixed64,1,opt,name=voice_chatid,json=voiceChatid" json:"voice_chatid,omitempty"`
	UserSteamid            *uint64                `protobuf:"fixed64,2,opt,name=user_steamid,json=userSteamid" json:"user_steamid,omitempty"`
	UserMutedMicLocally    *bool                  `protobuf:"varint,3,opt,name=user_muted_mic_locally,json=userMutedMicLocally" json:"user_muted_mic_locally,omitempty"`
	UserMutedOutputLocally *bool                  `protobuf:"varint,4,opt,name=user_muted_output_locally,json=userMutedOutputLocally" json:"user_muted_output_locally,omitempty"`
	UserHasNoMicForSession *bool                  `protobuf:"varint,5,opt,name=user_has_no_mic_for_session,json=userHasNoMicForSession" json:"user_has_no_mic_for_session,omitempty"`
	UserWebaudioSampleRate *int32                 `protobuf:"varint,6,opt,name=user_webaudio_sample_rate,json=userWebaudioSampleRate" json:"user_webaudio_sample_rate,omitempty"`
	UserSendsVideo         *bool                  `protobuf:"varint,7,opt,name=user_sends_video,json=userSendsVideo" json:"user_sends_video,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *CVoiceChat_UserVoiceStatus_Notification) Reset() {
	*x = CVoiceChat_UserVoiceStatus_Notification{}
	mi := &file_service_voicechat_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CVoiceChat_UserVoiceStatus_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVoiceChat_UserVoiceStatus_Notification) ProtoMessage() {}

func (x *CVoiceChat_UserVoiceStatus_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_service_voicechat_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVoiceChat_UserVoiceStatus_Notification.ProtoReflect.Descriptor instead.
func (*CVoiceChat_UserVoiceStatus_Notification) Descriptor() ([]byte, []int) {
	return file_service_voicechat_proto_rawDescGZIP(), []int{21}
}

func (x *CVoiceChat_UserVoiceStatus_Notification) GetVoiceChatid() uint64 {
	if x != nil && x.VoiceChatid != nil {
		return *x.VoiceChatid
	}
	return 0
}

func (x *CVoiceChat_UserVoiceStatus_Notification) GetUserSteamid() uint64 {
	if x != nil && x.UserSteamid != nil {
		return *x.UserSteamid
	}
	return 0
}

func (x *CVoiceChat_UserVoiceStatus_Notification) GetUserMutedMicLocally() bool {
	if x != nil && x.UserMutedMicLocally != nil {
		return *x.UserMutedMicLocally
	}
	return false
}

func (x *CVoiceChat_UserVoiceStatus_Notification) GetUserMutedOutputLocally() bool {
	if x != nil && x.UserMutedOutputLocally != nil {
		return *x.UserMutedOutputLocally
	}
	return false
}

func (x *CVoiceChat_UserVoiceStatus_Notification) GetUserHasNoMicForSession() bool {
	if x != nil && x.UserHasNoMicForSession != nil {
		return *x.UserHasNoMicForSession
	}
	return false
}

func (x *CVoiceChat_UserVoiceStatus_Notification) GetUserWebaudioSampleRate() int32 {
	if x != nil && x.UserWebaudioSampleRate != nil {
		return *x.UserWebaudioSampleRate
	}
	return 0
}

func (x *CVoiceChat_UserVoiceStatus_Notification) GetUserSendsVideo() bool {
	if x != nil && x.UserSendsVideo != nil {
		return *x.UserSendsVideo
	}
	return false
}

type CVoiceChat_VoiceChatEnded_Notification struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	VoiceChatid           *uint64                `protobuf:"fixed64,1,opt,name=voice_chatid,json=voiceChatid" json:"voice_chatid,omitempty"`
	OneOnOneSteamidLower  *uint64                `protobuf:"fixed64,2,opt,name=one_on_one_steamid_lower,json=oneOnOneSteamidLower" json:"one_on_one_steamid_lower,omitempty"`
	OneOnOneSteamidHigher *uint64                `protobuf:"fixed64,3,opt,name=one_on_one_steamid_higher,json=oneOnOneSteamidHigher" json:"one_on_one_steamid_higher,omitempty"`
	Chatid                *uint64                `protobuf:"varint,4,opt,name=chatid" json:"chatid,omitempty"`
	ChatGroupId           *uint64                `protobuf:"varint,5,opt,name=chat_group_id,json=chatGroupId" json:"chat_group_id,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *CVoiceChat_VoiceChatEnded_Notification) Reset() {
	*x = CVoiceChat_VoiceChatEnded_Notification{}
	mi := &file_service_voicechat_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CVoiceChat_VoiceChatEnded_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVoiceChat_VoiceChatEnded_Notification) ProtoMessage() {}

func (x *CVoiceChat_VoiceChatEnded_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_service_voicechat_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVoiceChat_VoiceChatEnded_Notification.ProtoReflect.Descriptor instead.
func (*CVoiceChat_VoiceChatEnded_Notification) Descriptor() ([]byte, []int) {
	return file_service_voicechat_proto_rawDescGZIP(), []int{22}
}

func (x *CVoiceChat_VoiceChatEnded_Notification) GetVoiceChatid() uint64 {
	if x != nil && x.VoiceChatid != nil {
		return *x.VoiceChatid
	}
	return 0
}

func (x *CVoiceChat_VoiceChatEnded_Notification) GetOneOnOneSteamidLower() uint64 {
	if x != nil && x.OneOnOneSteamidLower != nil {
		return *x.OneOnOneSteamidLower
	}
	return 0
}

func (x *CVoiceChat_VoiceChatEnded_Notification) GetOneOnOneSteamidHigher() uint64 {
	if x != nil && x.OneOnOneSteamidHigher != nil {
		return *x.OneOnOneSteamidHigher
	}
	return 0
}

func (x *CVoiceChat_VoiceChatEnded_Notification) GetChatid() uint64 {
	if x != nil && x.Chatid != nil {
		return *x.Chatid
	}
	return 0
}

func (x *CVoiceChat_VoiceChatEnded_Notification) GetChatGroupId() uint64 {
	if x != nil && x.ChatGroupId != nil {
		return *x.ChatGroupId
	}
	return 0
}

var File_service_voicechat_proto protoreflect.FileDescriptor

const file_service_voicechat_proto_rawDesc = "" +
	"\n" +
	"\x17service_voicechat.proto\x1a\x11common_base.proto\"\x8d\x01\n" +
	"(CVoiceChat_AllMembersStatus_Notification\x12!\n" +
	"\fvoice_chatid\x18\x01 \x01(\x06R\vvoiceChatid\x12>\n" +
	"\x05users\x18\x02 \x03(\v2(.CVoiceChat_UserVoiceStatus_NotificationR\x05users\"\x9e\x01\n" +
	"%CVoiceChat_AnswerOneOnOneChat_Request\x12!\n" +
	"\fvoice_chatid\x18\x01 \x01(\x06R\vvoiceChatid\x12'\n" +
	"\x0fsteamid_partner\x18\x02 \x01(\x06R\x0esteamidPartner\x12)\n" +
	"\x10accepted_request\x18\x03 \x01(\bR\x0facceptedRequest\"(\n" +
	"&CVoiceChat_AnswerOneOnOneChat_Response\"M\n" +
	"\"CVoiceChat_EndOneOnOneChat_Request\x12'\n" +
	"\x0fsteamid_partner\x18\x01 \x01(\x06R\x0esteamidPartner\"%\n" +
	"#CVoiceChat_EndOneOnOneChat_Response\"r\n" +
	"$CVoiceChat_LeaveOneOnOneChat_Request\x12'\n" +
	"\x0fsteamid_partner\x18\x01 \x01(\x06R\x0esteamidPartner\x12!\n" +
	"\fvoice_chatid\x18\x02 \x01(\x06R\vvoiceChatid\"'\n" +
	"%CVoiceChat_LeaveOneOnOneChat_Response\"F\n" +
	"!CVoiceChat_LeaveVoiceChat_Request\x12!\n" +
	"\fvoice_chatid\x18\x01 \x01(\x06R\vvoiceChatid\"$\n" +
	"\"CVoiceChat_LeaveVoiceChat_Response\"{\n" +
	"-CVoiceChat_OneOnOneChatRequested_Notification\x12!\n" +
	"\fvoice_chatid\x18\x01 \x01(\x06R\vvoiceChatid\x12'\n" +
	"\x0fsteamid_partner\x18\x02 \x01(\x06R\x0esteamidPartner\"\xac\x01\n" +
	"3CVoiceChat_OneOnOneChatRequestResponse_Notification\x12!\n" +
	"\fvoicechat_id\x18\x01 \x01(\x06R\vvoicechatId\x12'\n" +
	"\x0fsteamid_partner\x18\x02 \x01(\x06R\x0esteamidPartner\x12)\n" +
	"\x10accepted_request\x18\x03 \x01(\bR\x0facceptedRequest\"Q\n" +
	"&CVoiceChat_RequestOneOnOneChat_Request\x12'\n" +
	"\x0fsteamid_partner\x18\x01 \x01(\x06R\x0esteamidPartner\"L\n" +
	"'CVoiceChat_RequestOneOnOneChat_Response\x12!\n" +
	"\fvoice_chatid\x18\x01 \x01(\x06R\vvoiceChatid\"\xa0\x01\n" +
	"(CVoiceChat_UpdateUserVideoStatus_Request\x12!\n" +
	"\fvoice_chatid\x18\x01 \x01(\x06R\vvoiceChatid\x12!\n" +
	"\fuser_steamid\x18\x02 \x01(\x06R\vuserSteamid\x12.\n" +
	"\x13accept_webrtc_video\x18\x03 \x01(\bR\x11acceptWebrtcVideo\"+\n" +
	")CVoiceChat_UpdateUserVideoStatus_Response\"\xa9\x04\n" +
	",CVoiceChat_UpdateVoiceChatWebRTCData_Request\x12!\n" +
	"\fvoice_chatid\x18\x01 \x01(\x06R\vvoiceChatid\x12(\n" +
	"\x10ip_webrtc_server\x18\x02 \x01(\rR\x0eipWebrtcServer\x12,\n" +
	"\x12port_webrtc_server\x18\x03 \x01(\rR\x10portWebrtcServer\x12(\n" +
	"\x10ip_webrtc_client\x18\x04 \x01(\rR\x0eipWebrtcClient\x12,\n" +
	"\x12port_webrtc_client\x18\x05 \x01(\rR\x10portWebrtcClient\x123\n" +
	"\x16ssrc_my_sending_stream\x18\x06 \x01(\rR\x13ssrcMySendingStream\x12\x1d\n" +
	"\n" +
	"user_agent\x18\a \x01(\tR\tuserAgent\x12;\n" +
	"\x1ahas_audio_worklets_support\x18\b \x01(\bR\x17hasAudioWorkletsSupport\x125\n" +
	"\x17has_webrtc_data_channel\x18\t \x01(\bR\x14hasWebrtcDataChannel\x120\n" +
	"\x14accepts_webrtc_video\x18\n" +
	" \x01(\bR\x12acceptsWebrtcVideo\x12,\n" +
	"\x12sends_webrtc_video\x18\v \x01(\bR\x10sendsWebrtcVideo\"d\n" +
	"-CVoiceChat_UpdateVoiceChatWebRTCData_Response\x123\n" +
	"\x16send_client_voice_logs\x18\x01 \x01(\bR\x13sendClientVoiceLogs\"\x8f\x01\n" +
	",CVoiceChat_UploadClientVoiceChatLogs_Request\x12!\n" +
	"\fvoice_chatid\x18\x01 \x01(\x06R\vvoiceChatid\x12<\n" +
	"\x1bclient_voice_logs_new_lines\x18\x02 \x01(\tR\x17clientVoiceLogsNewLines\"/\n" +
	"-CVoiceChat_UploadClientVoiceChatLogs_Response\"\xc8\x02\n" +
	"+CVoiceChat_UserJoinedVoiceChat_Notification\x12!\n" +
	"\fvoice_chatid\x18\x01 \x01(\x06R\vvoiceChatid\x12!\n" +
	"\fuser_steamid\x18\x02 \x01(\x06R\vuserSteamid\x12\x16\n" +
	"\x06chatid\x18\x03 \x01(\x04R\x06chatid\x126\n" +
	"\x18one_on_one_steamid_lower\x18\x04 \x01(\x06R\x14oneOnOneSteamidLower\x128\n" +
	"\x19one_on_one_steamid_higher\x18\x05 \x01(\x06R\x15oneOnOneSteamidHigher\x12\"\n" +
	"\rchat_group_id\x18\x06 \x01(\x04R\vchatGroupId\x12%\n" +
	"\x0euser_sessionid\x18\a \x01(\rR\ruserSessionid\"\xc6\x02\n" +
	")CVoiceChat_UserLeftVoiceChat_Notification\x12!\n" +
	"\fvoice_chatid\x18\x01 \x01(\x06R\vvoiceChatid\x12!\n" +
	"\fuser_steamid\x18\x02 \x01(\x06R\vuserSteamid\x12\x16\n" +
	"\x06chatid\x18\x03 \x01(\x04R\x06chatid\x126\n" +
	"\x18one_on_one_steamid_lower\x18\x04 \x01(\x06R\x14oneOnOneSteamidLower\x128\n" +
	"\x19one_on_one_steamid_higher\x18\x05 \x01(\x06R\x15oneOnOneSteamidHigher\x12\"\n" +
	"\rchat_group_id\x18\x06 \x01(\x04R\vchatGroupId\x12%\n" +
	"\x0euser_sessionid\x18\a \x01(\rR\ruserSessionid\"\x81\x03\n" +
	"'CVoiceChat_UserVoiceStatus_Notification\x12!\n" +
	"\fvoice_chatid\x18\x01 \x01(\x06R\vvoiceChatid\x12!\n" +
	"\fuser_steamid\x18\x02 \x01(\x06R\vuserSteamid\x123\n" +
	"\x16user_muted_mic_locally\x18\x03 \x01(\bR\x13userMutedMicLocally\x129\n" +
	"\x19user_muted_output_locally\x18\x04 \x01(\bR\x16userMutedOutputLocally\x12;\n" +
	"\x1buser_has_no_mic_for_session\x18\x05 \x01(\bR\x16userHasNoMicForSession\x129\n" +
	"\x19user_webaudio_sample_rate\x18\x06 \x01(\x05R\x16userWebaudioSampleRate\x12(\n" +
	"\x10user_sends_video\x18\a \x01(\bR\x0euserSendsVideo\"\xf9\x01\n" +
	"&CVoiceChat_VoiceChatEnded_Notification\x12!\n" +
	"\fvoice_chatid\x18\x01 \x01(\x06R\vvoiceChatid\x126\n" +
	"\x18one_on_one_steamid_lower\x18\x02 \x01(\x06R\x14oneOnOneSteamidLower\x128\n" +
	"\x19one_on_one_steamid_higher\x18\x03 \x01(\x06R\x15oneOnOneSteamidHigher\x12\x16\n" +
	"\x06chatid\x18\x04 \x01(\x04R\x06chatid\x12\"\n" +
	"\rchat_group_id\x18\x05 \x01(\x04R\vchatGroupId2\xb1\a\n" +
	"\tVoiceChat\x12e\n" +
	"\x12AnswerOneOnOneChat\x12&.CVoiceChat_AnswerOneOnOneChat_Request\x1a'.CVoiceChat_AnswerOneOnOneChat_Response\x12\\\n" +
	"\x0fEndOneOnOneChat\x12#.CVoiceChat_EndOneOnOneChat_Request\x1a$.CVoiceChat_EndOneOnOneChat_Response\x12b\n" +
	"\x11LeaveOneOnOneChat\x12%.CVoiceChat_LeaveOneOnOneChat_Request\x1a&.CVoiceChat_LeaveOneOnOneChat_Response\x12Y\n" +
	"\x0eLeaveVoiceChat\x12\".CVoiceChat_LeaveVoiceChat_Request\x1a#.CVoiceChat_LeaveVoiceChat_Response\x12N\n" +
	"\x15NotifyUserVoiceStatus\x12(.CVoiceChat_UserVoiceStatus_Notification\x1a\v.NoResponse\x12h\n" +
	"\x13RequestOneOnOneChat\x12'.CVoiceChat_RequestOneOnOneChat_Request\x1a(.CVoiceChat_RequestOneOnOneChat_Response\x12n\n" +
	"\x15UpdateUserVideoStatus\x12).CVoiceChat_UpdateUserVideoStatus_Request\x1a*.CVoiceChat_UpdateUserVideoStatus_Response\x12z\n" +
	"\x19UpdateVoiceChatWebRTCData\x12-.CVoiceChat_UpdateVoiceChatWebRTCData_Request\x1a..CVoiceChat_UpdateVoiceChatWebRTCData_Response\x12z\n" +
	"\x19UploadClientVoiceChatLogs\x12-.CVoiceChat_UploadClientVoiceChatLogs_Request\x1a..CVoiceChat_UploadClientVoiceChatLogs_Response2\xed\x04\n" +
	"\x0fVoiceChatClient\x12S\n" +
	"\x19NotifyAllUsersVoiceStatus\x12).CVoiceChat_AllMembersStatus_Notification\x1a\v.NoResponse\x12Z\n" +
	"\x1bNotifyOneOnOneChatRequested\x12..CVoiceChat_OneOnOneChatRequested_Notification\x1a\v.NoResponse\x12_\n" +
	"\x1aNotifyOneOnOneChatResponse\x124.CVoiceChat_OneOnOneChatRequestResponse_Notification\x1a\v.NoResponse\x12V\n" +
	"\x19NotifyUserJoinedVoiceChat\x12,.CVoiceChat_UserJoinedVoiceChat_Notification\x1a\v.NoResponse\x12R\n" +
	"\x17NotifyUserLeftVoiceChat\x12*.CVoiceChat_UserLeftVoiceChat_Notification\x1a\v.NoResponse\x12N\n" +
	"\x15NotifyUserVoiceStatus\x12(.CVoiceChat_UserVoiceStatus_Notification\x1a\v.NoResponse\x12L\n" +
	"\x14NotifyVoiceChatEnded\x12'.CVoiceChat_VoiceChatEnded_Notification\x1a\v.NoResponse"

var (
	file_service_voicechat_proto_rawDescOnce sync.Once
	file_service_voicechat_proto_rawDescData []byte
)

func file_service_voicechat_proto_rawDescGZIP() []byte {
	file_service_voicechat_proto_rawDescOnce.Do(func() {
		file_service_voicechat_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_service_voicechat_proto_rawDesc), len(file_service_voicechat_proto_rawDesc)))
	})
	return file_service_voicechat_proto_rawDescData
}

var file_service_voicechat_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_service_voicechat_proto_goTypes = []any{
	(*CVoiceChat_AllMembersStatus_Notification)(nil),            // 0: CVoiceChat_AllMembersStatus_Notification
	(*CVoiceChat_AnswerOneOnOneChat_Request)(nil),               // 1: CVoiceChat_AnswerOneOnOneChat_Request
	(*CVoiceChat_AnswerOneOnOneChat_Response)(nil),              // 2: CVoiceChat_AnswerOneOnOneChat_Response
	(*CVoiceChat_EndOneOnOneChat_Request)(nil),                  // 3: CVoiceChat_EndOneOnOneChat_Request
	(*CVoiceChat_EndOneOnOneChat_Response)(nil),                 // 4: CVoiceChat_EndOneOnOneChat_Response
	(*CVoiceChat_LeaveOneOnOneChat_Request)(nil),                // 5: CVoiceChat_LeaveOneOnOneChat_Request
	(*CVoiceChat_LeaveOneOnOneChat_Response)(nil),               // 6: CVoiceChat_LeaveOneOnOneChat_Response
	(*CVoiceChat_LeaveVoiceChat_Request)(nil),                   // 7: CVoiceChat_LeaveVoiceChat_Request
	(*CVoiceChat_LeaveVoiceChat_Response)(nil),                  // 8: CVoiceChat_LeaveVoiceChat_Response
	(*CVoiceChat_OneOnOneChatRequested_Notification)(nil),       // 9: CVoiceChat_OneOnOneChatRequested_Notification
	(*CVoiceChat_OneOnOneChatRequestResponse_Notification)(nil), // 10: CVoiceChat_OneOnOneChatRequestResponse_Notification
	(*CVoiceChat_RequestOneOnOneChat_Request)(nil),              // 11: CVoiceChat_RequestOneOnOneChat_Request
	(*CVoiceChat_RequestOneOnOneChat_Response)(nil),             // 12: CVoiceChat_RequestOneOnOneChat_Response
	(*CVoiceChat_UpdateUserVideoStatus_Request)(nil),            // 13: CVoiceChat_UpdateUserVideoStatus_Request
	(*CVoiceChat_UpdateUserVideoStatus_Response)(nil),           // 14: CVoiceChat_UpdateUserVideoStatus_Response
	(*CVoiceChat_UpdateVoiceChatWebRTCData_Request)(nil),        // 15: CVoiceChat_UpdateVoiceChatWebRTCData_Request
	(*CVoiceChat_UpdateVoiceChatWebRTCData_Response)(nil),       // 16: CVoiceChat_UpdateVoiceChatWebRTCData_Response
	(*CVoiceChat_UploadClientVoiceChatLogs_Request)(nil),        // 17: CVoiceChat_UploadClientVoiceChatLogs_Request
	(*CVoiceChat_UploadClientVoiceChatLogs_Response)(nil),       // 18: CVoiceChat_UploadClientVoiceChatLogs_Response
	(*CVoiceChat_UserJoinedVoiceChat_Notification)(nil),         // 19: CVoiceChat_UserJoinedVoiceChat_Notification
	(*CVoiceChat_UserLeftVoiceChat_Notification)(nil),           // 20: CVoiceChat_UserLeftVoiceChat_Notification
	(*CVoiceChat_UserVoiceStatus_Notification)(nil),             // 21: CVoiceChat_UserVoiceStatus_Notification
	(*CVoiceChat_VoiceChatEnded_Notification)(nil),              // 22: CVoiceChat_VoiceChatEnded_Notification
	(*NoResponse)(nil), // 23: NoResponse
}
var file_service_voicechat_proto_depIdxs = []int32{
	21, // 0: CVoiceChat_AllMembersStatus_Notification.users:type_name -> CVoiceChat_UserVoiceStatus_Notification
	1,  // 1: VoiceChat.AnswerOneOnOneChat:input_type -> CVoiceChat_AnswerOneOnOneChat_Request
	3,  // 2: VoiceChat.EndOneOnOneChat:input_type -> CVoiceChat_EndOneOnOneChat_Request
	5,  // 3: VoiceChat.LeaveOneOnOneChat:input_type -> CVoiceChat_LeaveOneOnOneChat_Request
	7,  // 4: VoiceChat.LeaveVoiceChat:input_type -> CVoiceChat_LeaveVoiceChat_Request
	21, // 5: VoiceChat.NotifyUserVoiceStatus:input_type -> CVoiceChat_UserVoiceStatus_Notification
	11, // 6: VoiceChat.RequestOneOnOneChat:input_type -> CVoiceChat_RequestOneOnOneChat_Request
	13, // 7: VoiceChat.UpdateUserVideoStatus:input_type -> CVoiceChat_UpdateUserVideoStatus_Request
	15, // 8: VoiceChat.UpdateVoiceChatWebRTCData:input_type -> CVoiceChat_UpdateVoiceChatWebRTCData_Request
	17, // 9: VoiceChat.UploadClientVoiceChatLogs:input_type -> CVoiceChat_UploadClientVoiceChatLogs_Request
	0,  // 10: VoiceChatClient.NotifyAllUsersVoiceStatus:input_type -> CVoiceChat_AllMembersStatus_Notification
	9,  // 11: VoiceChatClient.NotifyOneOnOneChatRequested:input_type -> CVoiceChat_OneOnOneChatRequested_Notification
	10, // 12: VoiceChatClient.NotifyOneOnOneChatResponse:input_type -> CVoiceChat_OneOnOneChatRequestResponse_Notification
	19, // 13: VoiceChatClient.NotifyUserJoinedVoiceChat:input_type -> CVoiceChat_UserJoinedVoiceChat_Notification
	20, // 14: VoiceChatClient.NotifyUserLeftVoiceChat:input_type -> CVoiceChat_UserLeftVoiceChat_Notification
	21, // 15: VoiceChatClient.NotifyUserVoiceStatus:input_type -> CVoiceChat_UserVoiceStatus_Notification
	22, // 16: VoiceChatClient.NotifyVoiceChatEnded:input_type -> CVoiceChat_VoiceChatEnded_Notification
	2,  // 17: VoiceChat.AnswerOneOnOneChat:output_type -> CVoiceChat_AnswerOneOnOneChat_Response
	4,  // 18: VoiceChat.EndOneOnOneChat:output_type -> CVoiceChat_EndOneOnOneChat_Response
	6,  // 19: VoiceChat.LeaveOneOnOneChat:output_type -> CVoiceChat_LeaveOneOnOneChat_Response
	8,  // 20: VoiceChat.LeaveVoiceChat:output_type -> CVoiceChat_LeaveVoiceChat_Response
	23, // 21: VoiceChat.NotifyUserVoiceStatus:output_type -> NoResponse
	12, // 22: VoiceChat.RequestOneOnOneChat:output_type -> CVoiceChat_RequestOneOnOneChat_Response
	14, // 23: VoiceChat.UpdateUserVideoStatus:output_type -> CVoiceChat_UpdateUserVideoStatus_Response
	16, // 24: VoiceChat.UpdateVoiceChatWebRTCData:output_type -> CVoiceChat_UpdateVoiceChatWebRTCData_Response
	18, // 25: VoiceChat.UploadClientVoiceChatLogs:output_type -> CVoiceChat_UploadClientVoiceChatLogs_Response
	23, // 26: VoiceChatClient.NotifyAllUsersVoiceStatus:output_type -> NoResponse
	23, // 27: VoiceChatClient.NotifyOneOnOneChatRequested:output_type -> NoResponse
	23, // 28: VoiceChatClient.NotifyOneOnOneChatResponse:output_type -> NoResponse
	23, // 29: VoiceChatClient.NotifyUserJoinedVoiceChat:output_type -> NoResponse
	23, // 30: VoiceChatClient.NotifyUserLeftVoiceChat:output_type -> NoResponse
	23, // 31: VoiceChatClient.NotifyUserVoiceStatus:output_type -> NoResponse
	23, // 32: VoiceChatClient.NotifyVoiceChatEnded:output_type -> NoResponse
	17, // [17:33] is the sub-list for method output_type
	1,  // [1:17] is the sub-list for method input_type
	1,  // [1:1] is the sub-list for extension type_name
	1,  // [1:1] is the sub-list for extension extendee
	0,  // [0:1] is the sub-list for field type_name
}

func init() { file_service_voicechat_proto_init() }
func file_service_voicechat_proto_init() {
	if File_service_voicechat_proto != nil {
		return
	}
	file_common_base_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_service_voicechat_proto_rawDesc), len(file_service_voicechat_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_service_voicechat_proto_goTypes,
		DependencyIndexes: file_service_voicechat_proto_depIdxs,
		MessageInfos:      file_service_voicechat_proto_msgTypes,
	}.Build()
	File_service_voicechat_proto = out.File
	file_service_voicechat_proto_goTypes = nil
	file_service_voicechat_proto_depIdxs = nil
}
