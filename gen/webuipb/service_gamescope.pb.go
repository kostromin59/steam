// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v6.32.0
// source: service_gamescope.proto

package webuipb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CGamescope_GetState_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CGamescope_GetState_Request) Reset() {
	*x = CGamescope_GetState_Request{}
	mi := &file_service_gamescope_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGamescope_GetState_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGamescope_GetState_Request) ProtoMessage() {}

func (x *CGamescope_GetState_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_gamescope_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGamescope_GetState_Request.ProtoReflect.Descriptor instead.
func (*CGamescope_GetState_Request) Descriptor() ([]byte, []int) {
	return file_service_gamescope_proto_rawDescGZIP(), []int{0}
}

type CGamescope_GetState_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	State         *CMsgGamescopeState    `protobuf:"bytes,1,opt,name=state" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CGamescope_GetState_Response) Reset() {
	*x = CGamescope_GetState_Response{}
	mi := &file_service_gamescope_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGamescope_GetState_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGamescope_GetState_Response) ProtoMessage() {}

func (x *CGamescope_GetState_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_gamescope_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGamescope_GetState_Response.ProtoReflect.Descriptor instead.
func (*CGamescope_GetState_Response) Descriptor() ([]byte, []int) {
	return file_service_gamescope_proto_rawDescGZIP(), []int{1}
}

func (x *CGamescope_GetState_Response) GetState() *CMsgGamescopeState {
	if x != nil {
		return x.State
	}
	return nil
}

type CGamescope_ReArmMuraCalibration_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CGamescope_ReArmMuraCalibration_Request) Reset() {
	*x = CGamescope_ReArmMuraCalibration_Request{}
	mi := &file_service_gamescope_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGamescope_ReArmMuraCalibration_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGamescope_ReArmMuraCalibration_Request) ProtoMessage() {}

func (x *CGamescope_ReArmMuraCalibration_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_gamescope_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGamescope_ReArmMuraCalibration_Request.ProtoReflect.Descriptor instead.
func (*CGamescope_ReArmMuraCalibration_Request) Descriptor() ([]byte, []int) {
	return file_service_gamescope_proto_rawDescGZIP(), []int{2}
}

type CGamescope_ReArmMuraCalibration_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CGamescope_ReArmMuraCalibration_Response) Reset() {
	*x = CGamescope_ReArmMuraCalibration_Response{}
	mi := &file_service_gamescope_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGamescope_ReArmMuraCalibration_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGamescope_ReArmMuraCalibration_Response) ProtoMessage() {}

func (x *CGamescope_ReArmMuraCalibration_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_gamescope_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGamescope_ReArmMuraCalibration_Response.ProtoReflect.Descriptor instead.
func (*CGamescope_ReArmMuraCalibration_Response) Descriptor() ([]byte, []int) {
	return file_service_gamescope_proto_rawDescGZIP(), []int{3}
}

type CGamescope_SetBlurParams_Request struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Mode           *int32                 `protobuf:"varint,1,opt,name=mode" json:"mode,omitempty"`
	Radius         *int32                 `protobuf:"varint,2,opt,name=radius" json:"radius,omitempty"`
	FadeDurationMs *int32                 `protobuf:"varint,3,opt,name=fade_duration_ms,json=fadeDurationMs" json:"fade_duration_ms,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CGamescope_SetBlurParams_Request) Reset() {
	*x = CGamescope_SetBlurParams_Request{}
	mi := &file_service_gamescope_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGamescope_SetBlurParams_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGamescope_SetBlurParams_Request) ProtoMessage() {}

func (x *CGamescope_SetBlurParams_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_gamescope_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGamescope_SetBlurParams_Request.ProtoReflect.Descriptor instead.
func (*CGamescope_SetBlurParams_Request) Descriptor() ([]byte, []int) {
	return file_service_gamescope_proto_rawDescGZIP(), []int{4}
}

func (x *CGamescope_SetBlurParams_Request) GetMode() int32 {
	if x != nil && x.Mode != nil {
		return *x.Mode
	}
	return 0
}

func (x *CGamescope_SetBlurParams_Request) GetRadius() int32 {
	if x != nil && x.Radius != nil {
		return *x.Radius
	}
	return 0
}

func (x *CGamescope_SetBlurParams_Request) GetFadeDurationMs() int32 {
	if x != nil && x.FadeDurationMs != nil {
		return *x.FadeDurationMs
	}
	return 0
}

type CGamescope_SetBlurParams_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CGamescope_SetBlurParams_Response) Reset() {
	*x = CGamescope_SetBlurParams_Response{}
	mi := &file_service_gamescope_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGamescope_SetBlurParams_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGamescope_SetBlurParams_Response) ProtoMessage() {}

func (x *CGamescope_SetBlurParams_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_gamescope_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGamescope_SetBlurParams_Response.ProtoReflect.Descriptor instead.
func (*CGamescope_SetBlurParams_Response) Descriptor() ([]byte, []int) {
	return file_service_gamescope_proto_rawDescGZIP(), []int{5}
}

type CGamescope_StateChanged_Notification struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CGamescope_StateChanged_Notification) Reset() {
	*x = CGamescope_StateChanged_Notification{}
	mi := &file_service_gamescope_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGamescope_StateChanged_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGamescope_StateChanged_Notification) ProtoMessage() {}

func (x *CGamescope_StateChanged_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_service_gamescope_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGamescope_StateChanged_Notification.ProtoReflect.Descriptor instead.
func (*CGamescope_StateChanged_Notification) Descriptor() ([]byte, []int) {
	return file_service_gamescope_proto_rawDescGZIP(), []int{6}
}

type CMsgDisplayInfo struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	Make                  *string                `protobuf:"bytes,1,opt,name=make" json:"make,omitempty"`
	Model                 *string                `protobuf:"bytes,2,opt,name=model" json:"model,omitempty"`
	ConnectorName         *string                `protobuf:"bytes,3,opt,name=connector_name,json=connectorName" json:"connector_name,omitempty"`
	SupportedRefreshRates []int32                `protobuf:"varint,4,rep,name=supported_refresh_rates,json=supportedRefreshRates" json:"supported_refresh_rates,omitempty"`
	SupportedFrameRates   []int32                `protobuf:"varint,5,rep,name=supported_frame_rates,json=supportedFrameRates" json:"supported_frame_rates,omitempty"`
	IsExternal            *bool                  `protobuf:"varint,6,opt,name=is_external,json=isExternal" json:"is_external,omitempty"`
	IsHdrCapable          *bool                  `protobuf:"varint,7,opt,name=is_hdr_capable,json=isHdrCapable" json:"is_hdr_capable,omitempty"`
	IsVrrCapable          *bool                  `protobuf:"varint,8,opt,name=is_vrr_capable,json=isVrrCapable" json:"is_vrr_capable,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *CMsgDisplayInfo) Reset() {
	*x = CMsgDisplayInfo{}
	mi := &file_service_gamescope_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgDisplayInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgDisplayInfo) ProtoMessage() {}

func (x *CMsgDisplayInfo) ProtoReflect() protoreflect.Message {
	mi := &file_service_gamescope_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgDisplayInfo.ProtoReflect.Descriptor instead.
func (*CMsgDisplayInfo) Descriptor() ([]byte, []int) {
	return file_service_gamescope_proto_rawDescGZIP(), []int{7}
}

func (x *CMsgDisplayInfo) GetMake() string {
	if x != nil && x.Make != nil {
		return *x.Make
	}
	return ""
}

func (x *CMsgDisplayInfo) GetModel() string {
	if x != nil && x.Model != nil {
		return *x.Model
	}
	return ""
}

func (x *CMsgDisplayInfo) GetConnectorName() string {
	if x != nil && x.ConnectorName != nil {
		return *x.ConnectorName
	}
	return ""
}

func (x *CMsgDisplayInfo) GetSupportedRefreshRates() []int32 {
	if x != nil {
		return x.SupportedRefreshRates
	}
	return nil
}

func (x *CMsgDisplayInfo) GetSupportedFrameRates() []int32 {
	if x != nil {
		return x.SupportedFrameRates
	}
	return nil
}

func (x *CMsgDisplayInfo) GetIsExternal() bool {
	if x != nil && x.IsExternal != nil {
		return *x.IsExternal
	}
	return false
}

func (x *CMsgDisplayInfo) GetIsHdrCapable() bool {
	if x != nil && x.IsHdrCapable != nil {
		return *x.IsHdrCapable
	}
	return false
}

func (x *CMsgDisplayInfo) GetIsVrrCapable() bool {
	if x != nil && x.IsVrrCapable != nil {
		return *x.IsVrrCapable
	}
	return false
}

type CMsgGamescopeState struct {
	state                            protoimpl.MessageState `protogen:"open.v1"`
	IsServiceAvailable               *bool                  `protobuf:"varint,1,opt,name=is_service_available,json=isServiceAvailable" json:"is_service_available,omitempty"`
	IsReshadeSupported               *bool                  `protobuf:"varint,2,opt,name=is_reshade_supported,json=isReshadeSupported" json:"is_reshade_supported,omitempty"`
	IsAppHdrEnabled                  *bool                  `protobuf:"varint,3,opt,name=is_app_hdr_enabled,json=isAppHdrEnabled" json:"is_app_hdr_enabled,omitempty"`
	IsAppRefreshRateSupported        *bool                  `protobuf:"varint,4,opt,name=is_app_refresh_rate_supported,json=isAppRefreshRateSupported" json:"is_app_refresh_rate_supported,omitempty"`
	ActiveDisplayInfo                *CMsgDisplayInfo       `protobuf:"bytes,5,opt,name=active_display_info,json=activeDisplayInfo" json:"active_display_info,omitempty"`
	IsAppRefreshRateCapable          *bool                  `protobuf:"varint,6,opt,name=is_app_refresh_rate_capable,json=isAppRefreshRateCapable" json:"is_app_refresh_rate_capable,omitempty"`
	IsRefreshRateSwitchingSupported  *bool                  `protobuf:"varint,7,opt,name=is_refresh_rate_switching_supported,json=isRefreshRateSwitchingSupported" json:"is_refresh_rate_switching_supported,omitempty"`
	IsRefreshRateSwitchingRestricted *bool                  `protobuf:"varint,8,opt,name=is_refresh_rate_switching_restricted,json=isRefreshRateSwitchingRestricted" json:"is_refresh_rate_switching_restricted,omitempty"`
	IsHdrVisualizationSupported      *bool                  `protobuf:"varint,9,opt,name=is_hdr_visualization_supported,json=isHdrVisualizationSupported" json:"is_hdr_visualization_supported,omitempty"`
	IsMuraCorrectionSupported        *bool                  `protobuf:"varint,10,opt,name=is_mura_correction_supported,json=isMuraCorrectionSupported" json:"is_mura_correction_supported,omitempty"`
	IsGlobalActionBindingSupported   *bool                  `protobuf:"varint,11,opt,name=is_global_action_binding_supported,json=isGlobalActionBindingSupported" json:"is_global_action_binding_supported,omitempty"`
	IsLookSupported                  *bool                  `protobuf:"varint,12,opt,name=is_look_supported,json=isLookSupported" json:"is_look_supported,omitempty"`
	LookNames                        []string               `protobuf:"bytes,13,rep,name=look_names,json=lookNames" json:"look_names,omitempty"`
	unknownFields                    protoimpl.UnknownFields
	sizeCache                        protoimpl.SizeCache
}

func (x *CMsgGamescopeState) Reset() {
	*x = CMsgGamescopeState{}
	mi := &file_service_gamescope_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGamescopeState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGamescopeState) ProtoMessage() {}

func (x *CMsgGamescopeState) ProtoReflect() protoreflect.Message {
	mi := &file_service_gamescope_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGamescopeState.ProtoReflect.Descriptor instead.
func (*CMsgGamescopeState) Descriptor() ([]byte, []int) {
	return file_service_gamescope_proto_rawDescGZIP(), []int{8}
}

func (x *CMsgGamescopeState) GetIsServiceAvailable() bool {
	if x != nil && x.IsServiceAvailable != nil {
		return *x.IsServiceAvailable
	}
	return false
}

func (x *CMsgGamescopeState) GetIsReshadeSupported() bool {
	if x != nil && x.IsReshadeSupported != nil {
		return *x.IsReshadeSupported
	}
	return false
}

func (x *CMsgGamescopeState) GetIsAppHdrEnabled() bool {
	if x != nil && x.IsAppHdrEnabled != nil {
		return *x.IsAppHdrEnabled
	}
	return false
}

func (x *CMsgGamescopeState) GetIsAppRefreshRateSupported() bool {
	if x != nil && x.IsAppRefreshRateSupported != nil {
		return *x.IsAppRefreshRateSupported
	}
	return false
}

func (x *CMsgGamescopeState) GetActiveDisplayInfo() *CMsgDisplayInfo {
	if x != nil {
		return x.ActiveDisplayInfo
	}
	return nil
}

func (x *CMsgGamescopeState) GetIsAppRefreshRateCapable() bool {
	if x != nil && x.IsAppRefreshRateCapable != nil {
		return *x.IsAppRefreshRateCapable
	}
	return false
}

func (x *CMsgGamescopeState) GetIsRefreshRateSwitchingSupported() bool {
	if x != nil && x.IsRefreshRateSwitchingSupported != nil {
		return *x.IsRefreshRateSwitchingSupported
	}
	return false
}

func (x *CMsgGamescopeState) GetIsRefreshRateSwitchingRestricted() bool {
	if x != nil && x.IsRefreshRateSwitchingRestricted != nil {
		return *x.IsRefreshRateSwitchingRestricted
	}
	return false
}

func (x *CMsgGamescopeState) GetIsHdrVisualizationSupported() bool {
	if x != nil && x.IsHdrVisualizationSupported != nil {
		return *x.IsHdrVisualizationSupported
	}
	return false
}

func (x *CMsgGamescopeState) GetIsMuraCorrectionSupported() bool {
	if x != nil && x.IsMuraCorrectionSupported != nil {
		return *x.IsMuraCorrectionSupported
	}
	return false
}

func (x *CMsgGamescopeState) GetIsGlobalActionBindingSupported() bool {
	if x != nil && x.IsGlobalActionBindingSupported != nil {
		return *x.IsGlobalActionBindingSupported
	}
	return false
}

func (x *CMsgGamescopeState) GetIsLookSupported() bool {
	if x != nil && x.IsLookSupported != nil {
		return *x.IsLookSupported
	}
	return false
}

func (x *CMsgGamescopeState) GetLookNames() []string {
	if x != nil {
		return x.LookNames
	}
	return nil
}

var File_service_gamescope_proto protoreflect.FileDescriptor

const file_service_gamescope_proto_rawDesc = "" +
	"\n" +
	"\x17service_gamescope.proto\x1a\x11common_base.proto\"\x1d\n" +
	"\x1bCGamescope_GetState_Request\"I\n" +
	"\x1cCGamescope_GetState_Response\x12)\n" +
	"\x05state\x18\x01 \x01(\v2\x13.CMsgGamescopeStateR\x05state\")\n" +
	"'CGamescope_ReArmMuraCalibration_Request\"*\n" +
	"(CGamescope_ReArmMuraCalibration_Response\"\x82\x01\n" +
	" CGamescope_SetBlurParams_Request\x12\x1c\n" +
	"\x04mode\x18\x01 \x01(\x05B\b\x82\xb5\x18\x04enumR\x04mode\x12\x16\n" +
	"\x06radius\x18\x02 \x01(\x05R\x06radius\x12(\n" +
	"\x10fade_duration_ms\x18\x03 \x01(\x05R\x0efadeDurationMs\"#\n" +
	"!CGamescope_SetBlurParams_Response\"&\n" +
	"$CGamescope_StateChanged_Notification\"\xbb\x02\n" +
	"\x0fCMsgDisplayInfo\x12\x12\n" +
	"\x04make\x18\x01 \x01(\tR\x04make\x12\x14\n" +
	"\x05model\x18\x02 \x01(\tR\x05model\x12%\n" +
	"\x0econnector_name\x18\x03 \x01(\tR\rconnectorName\x126\n" +
	"\x17supported_refresh_rates\x18\x04 \x03(\x05R\x15supportedRefreshRates\x122\n" +
	"\x15supported_frame_rates\x18\x05 \x03(\x05R\x13supportedFrameRates\x12\x1f\n" +
	"\vis_external\x18\x06 \x01(\bR\n" +
	"isExternal\x12$\n" +
	"\x0eis_hdr_capable\x18\a \x01(\bR\fisHdrCapable\x12$\n" +
	"\x0eis_vrr_capable\x18\b \x01(\bR\fisVrrCapable\"\xa2\x06\n" +
	"\x12CMsgGamescopeState\x120\n" +
	"\x14is_service_available\x18\x01 \x01(\bR\x12isServiceAvailable\x120\n" +
	"\x14is_reshade_supported\x18\x02 \x01(\bR\x12isReshadeSupported\x12+\n" +
	"\x12is_app_hdr_enabled\x18\x03 \x01(\bR\x0fisAppHdrEnabled\x12@\n" +
	"\x1dis_app_refresh_rate_supported\x18\x04 \x01(\bR\x19isAppRefreshRateSupported\x12@\n" +
	"\x13active_display_info\x18\x05 \x01(\v2\x10.CMsgDisplayInfoR\x11activeDisplayInfo\x12<\n" +
	"\x1bis_app_refresh_rate_capable\x18\x06 \x01(\bR\x17isAppRefreshRateCapable\x12L\n" +
	"#is_refresh_rate_switching_supported\x18\a \x01(\bR\x1fisRefreshRateSwitchingSupported\x12N\n" +
	"$is_refresh_rate_switching_restricted\x18\b \x01(\bR isRefreshRateSwitchingRestricted\x12C\n" +
	"\x1eis_hdr_visualization_supported\x18\t \x01(\bR\x1bisHdrVisualizationSupported\x12?\n" +
	"\x1cis_mura_correction_supported\x18\n" +
	" \x01(\bR\x19isMuraCorrectionSupported\x12J\n" +
	"\"is_global_action_binding_supported\x18\v \x01(\bR\x1eisGlobalActionBindingSupported\x12*\n" +
	"\x11is_look_supported\x18\f \x01(\bR\x0fisLookSupported\x12\x1d\n" +
	"\n" +
	"look_names\x18\r \x03(\tR\tlookNames2\xe3\x02\n" +
	"\tGamescope\x12G\n" +
	"\bGetState\x12\x1c.CGamescope_GetState_Request\x1a\x1d.CGamescope_GetState_Response\x12H\n" +
	"\x12NotifyStateChanged\x12%.CGamescope_StateChanged_Notification\x1a\v.NoResponse\x12k\n" +
	"\x14ReArmMuraCalibration\x12(.CGamescope_ReArmMuraCalibration_Request\x1a).CGamescope_ReArmMuraCalibration_Response\x12V\n" +
	"\rSetBlurParams\x12!.CGamescope_SetBlurParams_Request\x1a\".CGamescope_SetBlurParams_Response"

var (
	file_service_gamescope_proto_rawDescOnce sync.Once
	file_service_gamescope_proto_rawDescData []byte
)

func file_service_gamescope_proto_rawDescGZIP() []byte {
	file_service_gamescope_proto_rawDescOnce.Do(func() {
		file_service_gamescope_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_service_gamescope_proto_rawDesc), len(file_service_gamescope_proto_rawDesc)))
	})
	return file_service_gamescope_proto_rawDescData
}

var file_service_gamescope_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_service_gamescope_proto_goTypes = []any{
	(*CGamescope_GetState_Request)(nil),              // 0: CGamescope_GetState_Request
	(*CGamescope_GetState_Response)(nil),             // 1: CGamescope_GetState_Response
	(*CGamescope_ReArmMuraCalibration_Request)(nil),  // 2: CGamescope_ReArmMuraCalibration_Request
	(*CGamescope_ReArmMuraCalibration_Response)(nil), // 3: CGamescope_ReArmMuraCalibration_Response
	(*CGamescope_SetBlurParams_Request)(nil),         // 4: CGamescope_SetBlurParams_Request
	(*CGamescope_SetBlurParams_Response)(nil),        // 5: CGamescope_SetBlurParams_Response
	(*CGamescope_StateChanged_Notification)(nil),     // 6: CGamescope_StateChanged_Notification
	(*CMsgDisplayInfo)(nil),                          // 7: CMsgDisplayInfo
	(*CMsgGamescopeState)(nil),                       // 8: CMsgGamescopeState
	(*NoResponse)(nil),                               // 9: NoResponse
}
var file_service_gamescope_proto_depIdxs = []int32{
	8, // 0: CGamescope_GetState_Response.state:type_name -> CMsgGamescopeState
	7, // 1: CMsgGamescopeState.active_display_info:type_name -> CMsgDisplayInfo
	0, // 2: Gamescope.GetState:input_type -> CGamescope_GetState_Request
	6, // 3: Gamescope.NotifyStateChanged:input_type -> CGamescope_StateChanged_Notification
	2, // 4: Gamescope.ReArmMuraCalibration:input_type -> CGamescope_ReArmMuraCalibration_Request
	4, // 5: Gamescope.SetBlurParams:input_type -> CGamescope_SetBlurParams_Request
	1, // 6: Gamescope.GetState:output_type -> CGamescope_GetState_Response
	9, // 7: Gamescope.NotifyStateChanged:output_type -> NoResponse
	3, // 8: Gamescope.ReArmMuraCalibration:output_type -> CGamescope_ReArmMuraCalibration_Response
	5, // 9: Gamescope.SetBlurParams:output_type -> CGamescope_SetBlurParams_Response
	6, // [6:10] is the sub-list for method output_type
	2, // [2:6] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_service_gamescope_proto_init() }
func file_service_gamescope_proto_init() {
	if File_service_gamescope_proto != nil {
		return
	}
	file_common_base_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_service_gamescope_proto_rawDesc), len(file_service_gamescope_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_gamescope_proto_goTypes,
		DependencyIndexes: file_service_gamescope_proto_depIdxs,
		MessageInfos:      file_service_gamescope_proto_msgTypes,
	}.Build()
	File_service_gamescope_proto = out.File
	file_service_gamescope_proto_goTypes = nil
	file_service_gamescope_proto_depIdxs = nil
}
