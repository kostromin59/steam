// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v6.32.0
// source: service_steamtv.proto

package webuipb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CSteamTV_AddChatBan_Request struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	BroadcastChannelId *uint64                `protobuf:"fixed64,1,opt,name=broadcast_channel_id,json=broadcastChannelId" json:"broadcast_channel_id,omitempty"`
	ChatterSteamid     *uint64                `protobuf:"fixed64,2,opt,name=chatter_steamid,json=chatterSteamid" json:"chatter_steamid,omitempty"`
	Duration           *uint32                `protobuf:"varint,3,opt,name=duration" json:"duration,omitempty"`
	Permanent          *bool                  `protobuf:"varint,4,opt,name=permanent" json:"permanent,omitempty"`
	Undo               *bool                  `protobuf:"varint,5,opt,name=undo" json:"undo,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *CSteamTV_AddChatBan_Request) Reset() {
	*x = CSteamTV_AddChatBan_Request{}
	mi := &file_service_steamtv_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamTV_AddChatBan_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_AddChatBan_Request) ProtoMessage() {}

func (x *CSteamTV_AddChatBan_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamtv_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_AddChatBan_Request.ProtoReflect.Descriptor instead.
func (*CSteamTV_AddChatBan_Request) Descriptor() ([]byte, []int) {
	return file_service_steamtv_proto_rawDescGZIP(), []int{0}
}

func (x *CSteamTV_AddChatBan_Request) GetBroadcastChannelId() uint64 {
	if x != nil && x.BroadcastChannelId != nil {
		return *x.BroadcastChannelId
	}
	return 0
}

func (x *CSteamTV_AddChatBan_Request) GetChatterSteamid() uint64 {
	if x != nil && x.ChatterSteamid != nil {
		return *x.ChatterSteamid
	}
	return 0
}

func (x *CSteamTV_AddChatBan_Request) GetDuration() uint32 {
	if x != nil && x.Duration != nil {
		return *x.Duration
	}
	return 0
}

func (x *CSteamTV_AddChatBan_Request) GetPermanent() bool {
	if x != nil && x.Permanent != nil {
		return *x.Permanent
	}
	return false
}

func (x *CSteamTV_AddChatBan_Request) GetUndo() bool {
	if x != nil && x.Undo != nil {
		return *x.Undo
	}
	return false
}

type CSteamTV_AddChatBan_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CSteamTV_AddChatBan_Response) Reset() {
	*x = CSteamTV_AddChatBan_Response{}
	mi := &file_service_steamtv_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamTV_AddChatBan_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_AddChatBan_Response) ProtoMessage() {}

func (x *CSteamTV_AddChatBan_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamtv_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_AddChatBan_Response.ProtoReflect.Descriptor instead.
func (*CSteamTV_AddChatBan_Response) Descriptor() ([]byte, []int) {
	return file_service_steamtv_proto_rawDescGZIP(), []int{1}
}

type CSteamTV_AddChatModerator_Request struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	BroadcastChannelId *uint64                `protobuf:"fixed64,1,opt,name=broadcast_channel_id,json=broadcastChannelId" json:"broadcast_channel_id,omitempty"`
	ModeratorSteamid   *uint64                `protobuf:"fixed64,2,opt,name=moderator_steamid,json=moderatorSteamid" json:"moderator_steamid,omitempty"`
	Undo               *bool                  `protobuf:"varint,3,opt,name=undo" json:"undo,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *CSteamTV_AddChatModerator_Request) Reset() {
	*x = CSteamTV_AddChatModerator_Request{}
	mi := &file_service_steamtv_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamTV_AddChatModerator_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_AddChatModerator_Request) ProtoMessage() {}

func (x *CSteamTV_AddChatModerator_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamtv_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_AddChatModerator_Request.ProtoReflect.Descriptor instead.
func (*CSteamTV_AddChatModerator_Request) Descriptor() ([]byte, []int) {
	return file_service_steamtv_proto_rawDescGZIP(), []int{2}
}

func (x *CSteamTV_AddChatModerator_Request) GetBroadcastChannelId() uint64 {
	if x != nil && x.BroadcastChannelId != nil {
		return *x.BroadcastChannelId
	}
	return 0
}

func (x *CSteamTV_AddChatModerator_Request) GetModeratorSteamid() uint64 {
	if x != nil && x.ModeratorSteamid != nil {
		return *x.ModeratorSteamid
	}
	return 0
}

func (x *CSteamTV_AddChatModerator_Request) GetUndo() bool {
	if x != nil && x.Undo != nil {
		return *x.Undo
	}
	return false
}

type CSteamTV_AddChatModerator_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CSteamTV_AddChatModerator_Response) Reset() {
	*x = CSteamTV_AddChatModerator_Response{}
	mi := &file_service_steamtv_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamTV_AddChatModerator_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_AddChatModerator_Response) ProtoMessage() {}

func (x *CSteamTV_AddChatModerator_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamtv_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_AddChatModerator_Response.ProtoReflect.Descriptor instead.
func (*CSteamTV_AddChatModerator_Response) Descriptor() ([]byte, []int) {
	return file_service_steamtv_proto_rawDescGZIP(), []int{3}
}

type CSteamTV_AddWordBan_Request struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	BroadcastChannelId *uint64                `protobuf:"fixed64,1,opt,name=broadcast_channel_id,json=broadcastChannelId" json:"broadcast_channel_id,omitempty"`
	Word               *string                `protobuf:"bytes,2,opt,name=word" json:"word,omitempty"`
	Undo               *bool                  `protobuf:"varint,3,opt,name=undo" json:"undo,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *CSteamTV_AddWordBan_Request) Reset() {
	*x = CSteamTV_AddWordBan_Request{}
	mi := &file_service_steamtv_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamTV_AddWordBan_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_AddWordBan_Request) ProtoMessage() {}

func (x *CSteamTV_AddWordBan_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamtv_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_AddWordBan_Request.ProtoReflect.Descriptor instead.
func (*CSteamTV_AddWordBan_Request) Descriptor() ([]byte, []int) {
	return file_service_steamtv_proto_rawDescGZIP(), []int{4}
}

func (x *CSteamTV_AddWordBan_Request) GetBroadcastChannelId() uint64 {
	if x != nil && x.BroadcastChannelId != nil {
		return *x.BroadcastChannelId
	}
	return 0
}

func (x *CSteamTV_AddWordBan_Request) GetWord() string {
	if x != nil && x.Word != nil {
		return *x.Word
	}
	return ""
}

func (x *CSteamTV_AddWordBan_Request) GetUndo() bool {
	if x != nil && x.Undo != nil {
		return *x.Undo
	}
	return false
}

type CSteamTV_AddWordBan_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CSteamTV_AddWordBan_Response) Reset() {
	*x = CSteamTV_AddWordBan_Response{}
	mi := &file_service_steamtv_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamTV_AddWordBan_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_AddWordBan_Response) ProtoMessage() {}

func (x *CSteamTV_AddWordBan_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamtv_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_AddWordBan_Response.ProtoReflect.Descriptor instead.
func (*CSteamTV_AddWordBan_Response) Descriptor() ([]byte, []int) {
	return file_service_steamtv_proto_rawDescGZIP(), []int{5}
}

type CSteamTV_AppCheer_Request struct {
	state         protoimpl.MessageState               `protogen:"open.v1"`
	AppId         *uint32                              `protobuf:"varint,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	CheerTargetId *uint64                              `protobuf:"fixed64,2,opt,name=cheer_target_id,json=cheerTargetId" json:"cheer_target_id,omitempty"`
	Cheers        []*CSteamTV_AppCheer_SingleCheerType `protobuf:"bytes,3,rep,name=cheers" json:"cheers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CSteamTV_AppCheer_Request) Reset() {
	*x = CSteamTV_AppCheer_Request{}
	mi := &file_service_steamtv_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamTV_AppCheer_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_AppCheer_Request) ProtoMessage() {}

func (x *CSteamTV_AppCheer_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamtv_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_AppCheer_Request.ProtoReflect.Descriptor instead.
func (*CSteamTV_AppCheer_Request) Descriptor() ([]byte, []int) {
	return file_service_steamtv_proto_rawDescGZIP(), []int{6}
}

func (x *CSteamTV_AppCheer_Request) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CSteamTV_AppCheer_Request) GetCheerTargetId() uint64 {
	if x != nil && x.CheerTargetId != nil {
		return *x.CheerTargetId
	}
	return 0
}

func (x *CSteamTV_AppCheer_Request) GetCheers() []*CSteamTV_AppCheer_SingleCheerType {
	if x != nil {
		return x.Cheers
	}
	return nil
}

type CSteamTV_AppCheer_Response struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	AggregationDelayMs *uint32                `protobuf:"varint,1,opt,name=aggregation_delay_ms,json=aggregationDelayMs" json:"aggregation_delay_ms,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *CSteamTV_AppCheer_Response) Reset() {
	*x = CSteamTV_AppCheer_Response{}
	mi := &file_service_steamtv_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamTV_AppCheer_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_AppCheer_Response) ProtoMessage() {}

func (x *CSteamTV_AppCheer_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamtv_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_AppCheer_Response.ProtoReflect.Descriptor instead.
func (*CSteamTV_AppCheer_Response) Descriptor() ([]byte, []int) {
	return file_service_steamtv_proto_rawDescGZIP(), []int{7}
}

func (x *CSteamTV_AppCheer_Response) GetAggregationDelayMs() uint32 {
	if x != nil && x.AggregationDelayMs != nil {
		return *x.AggregationDelayMs
	}
	return 0
}

type CSteamTV_AppCheer_SingleCheerType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CheerType     *uint32                `protobuf:"varint,1,opt,name=cheer_type,json=cheerType" json:"cheer_type,omitempty"`
	CheerAmount   *uint32                `protobuf:"varint,2,opt,name=cheer_amount,json=cheerAmount" json:"cheer_amount,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CSteamTV_AppCheer_SingleCheerType) Reset() {
	*x = CSteamTV_AppCheer_SingleCheerType{}
	mi := &file_service_steamtv_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamTV_AppCheer_SingleCheerType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_AppCheer_SingleCheerType) ProtoMessage() {}

func (x *CSteamTV_AppCheer_SingleCheerType) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamtv_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_AppCheer_SingleCheerType.ProtoReflect.Descriptor instead.
func (*CSteamTV_AppCheer_SingleCheerType) Descriptor() ([]byte, []int) {
	return file_service_steamtv_proto_rawDescGZIP(), []int{8}
}

func (x *CSteamTV_AppCheer_SingleCheerType) GetCheerType() uint32 {
	if x != nil && x.CheerType != nil {
		return *x.CheerType
	}
	return 0
}

func (x *CSteamTV_AppCheer_SingleCheerType) GetCheerAmount() uint32 {
	if x != nil && x.CheerAmount != nil {
		return *x.CheerAmount
	}
	return 0
}

type CSteamTV_BroadcastClipInfo struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	BroadcastClipId    *uint64                `protobuf:"varint,1,opt,name=broadcast_clip_id,json=broadcastClipId" json:"broadcast_clip_id,omitempty"`
	ChannelId          *uint64                `protobuf:"varint,2,opt,name=channel_id,json=channelId" json:"channel_id,omitempty"`
	AppId              *uint32                `protobuf:"varint,3,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	BroadcasterSteamid *uint64                `protobuf:"fixed64,4,opt,name=broadcaster_steamid,json=broadcasterSteamid" json:"broadcaster_steamid,omitempty"`
	CreatorSteamid     *uint64                `protobuf:"fixed64,5,opt,name=creator_steamid,json=creatorSteamid" json:"creator_steamid,omitempty"`
	VideoDescription   *string                `protobuf:"bytes,6,opt,name=video_description,json=videoDescription" json:"video_description,omitempty"`
	LiveTime           *uint32                `protobuf:"varint,7,opt,name=live_time,json=liveTime" json:"live_time,omitempty"`
	LengthMs           *uint32                `protobuf:"varint,8,opt,name=length_ms,json=lengthMs" json:"length_ms,omitempty"`
	ThumbnailPath      *string                `protobuf:"bytes,9,opt,name=thumbnail_path,json=thumbnailPath" json:"thumbnail_path,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *CSteamTV_BroadcastClipInfo) Reset() {
	*x = CSteamTV_BroadcastClipInfo{}
	mi := &file_service_steamtv_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamTV_BroadcastClipInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_BroadcastClipInfo) ProtoMessage() {}

func (x *CSteamTV_BroadcastClipInfo) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamtv_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_BroadcastClipInfo.ProtoReflect.Descriptor instead.
func (*CSteamTV_BroadcastClipInfo) Descriptor() ([]byte, []int) {
	return file_service_steamtv_proto_rawDescGZIP(), []int{9}
}

func (x *CSteamTV_BroadcastClipInfo) GetBroadcastClipId() uint64 {
	if x != nil && x.BroadcastClipId != nil {
		return *x.BroadcastClipId
	}
	return 0
}

func (x *CSteamTV_BroadcastClipInfo) GetChannelId() uint64 {
	if x != nil && x.ChannelId != nil {
		return *x.ChannelId
	}
	return 0
}

func (x *CSteamTV_BroadcastClipInfo) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CSteamTV_BroadcastClipInfo) GetBroadcasterSteamid() uint64 {
	if x != nil && x.BroadcasterSteamid != nil {
		return *x.BroadcasterSteamid
	}
	return 0
}

func (x *CSteamTV_BroadcastClipInfo) GetCreatorSteamid() uint64 {
	if x != nil && x.CreatorSteamid != nil {
		return *x.CreatorSteamid
	}
	return 0
}

func (x *CSteamTV_BroadcastClipInfo) GetVideoDescription() string {
	if x != nil && x.VideoDescription != nil {
		return *x.VideoDescription
	}
	return ""
}

func (x *CSteamTV_BroadcastClipInfo) GetLiveTime() uint32 {
	if x != nil && x.LiveTime != nil {
		return *x.LiveTime
	}
	return 0
}

func (x *CSteamTV_BroadcastClipInfo) GetLengthMs() uint32 {
	if x != nil && x.LengthMs != nil {
		return *x.LengthMs
	}
	return 0
}

func (x *CSteamTV_BroadcastClipInfo) GetThumbnailPath() string {
	if x != nil && x.ThumbnailPath != nil {
		return *x.ThumbnailPath
	}
	return ""
}

type CSteamTV_ChatBan struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	IssuerSteamid  *uint64                `protobuf:"fixed64,1,opt,name=issuer_steamid,json=issuerSteamid" json:"issuer_steamid,omitempty"`
	ChatterSteamid *uint64                `protobuf:"fixed64,2,opt,name=chatter_steamid,json=chatterSteamid" json:"chatter_steamid,omitempty"`
	TimeExpires    *string                `protobuf:"bytes,3,opt,name=time_expires,json=timeExpires" json:"time_expires,omitempty"`
	Permanent      *bool                  `protobuf:"varint,4,opt,name=permanent" json:"permanent,omitempty"`
	Name           *string                `protobuf:"bytes,5,opt,name=name" json:"name,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CSteamTV_ChatBan) Reset() {
	*x = CSteamTV_ChatBan{}
	mi := &file_service_steamtv_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamTV_ChatBan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_ChatBan) ProtoMessage() {}

func (x *CSteamTV_ChatBan) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamtv_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_ChatBan.ProtoReflect.Descriptor instead.
func (*CSteamTV_ChatBan) Descriptor() ([]byte, []int) {
	return file_service_steamtv_proto_rawDescGZIP(), []int{10}
}

func (x *CSteamTV_ChatBan) GetIssuerSteamid() uint64 {
	if x != nil && x.IssuerSteamid != nil {
		return *x.IssuerSteamid
	}
	return 0
}

func (x *CSteamTV_ChatBan) GetChatterSteamid() uint64 {
	if x != nil && x.ChatterSteamid != nil {
		return *x.ChatterSteamid
	}
	return 0
}

func (x *CSteamTV_ChatBan) GetTimeExpires() string {
	if x != nil && x.TimeExpires != nil {
		return *x.TimeExpires
	}
	return ""
}

func (x *CSteamTV_ChatBan) GetPermanent() bool {
	if x != nil && x.Permanent != nil {
		return *x.Permanent
	}
	return false
}

func (x *CSteamTV_ChatBan) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type CSteamTV_ChatModerator struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Steamid       *uint64                `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	Name          *string                `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CSteamTV_ChatModerator) Reset() {
	*x = CSteamTV_ChatModerator{}
	mi := &file_service_steamtv_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamTV_ChatModerator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_ChatModerator) ProtoMessage() {}

func (x *CSteamTV_ChatModerator) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamtv_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_ChatModerator.ProtoReflect.Descriptor instead.
func (*CSteamTV_ChatModerator) Descriptor() ([]byte, []int) {
	return file_service_steamtv_proto_rawDescGZIP(), []int{11}
}

func (x *CSteamTV_ChatModerator) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CSteamTV_ChatModerator) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type CSteamTV_CreateBroadcastChannel_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UniqueName    *string                `protobuf:"bytes,1,opt,name=unique_name,json=uniqueName" json:"unique_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CSteamTV_CreateBroadcastChannel_Request) Reset() {
	*x = CSteamTV_CreateBroadcastChannel_Request{}
	mi := &file_service_steamtv_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamTV_CreateBroadcastChannel_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_CreateBroadcastChannel_Request) ProtoMessage() {}

func (x *CSteamTV_CreateBroadcastChannel_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamtv_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_CreateBroadcastChannel_Request.ProtoReflect.Descriptor instead.
func (*CSteamTV_CreateBroadcastChannel_Request) Descriptor() ([]byte, []int) {
	return file_service_steamtv_proto_rawDescGZIP(), []int{12}
}

func (x *CSteamTV_CreateBroadcastChannel_Request) GetUniqueName() string {
	if x != nil && x.UniqueName != nil {
		return *x.UniqueName
	}
	return ""
}

type CSteamTV_CreateBroadcastChannel_Response struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	BroadcastChannelId *uint64                `protobuf:"fixed64,1,opt,name=broadcast_channel_id,json=broadcastChannelId" json:"broadcast_channel_id,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *CSteamTV_CreateBroadcastChannel_Response) Reset() {
	*x = CSteamTV_CreateBroadcastChannel_Response{}
	mi := &file_service_steamtv_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamTV_CreateBroadcastChannel_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_CreateBroadcastChannel_Response) ProtoMessage() {}

func (x *CSteamTV_CreateBroadcastChannel_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamtv_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_CreateBroadcastChannel_Response.ProtoReflect.Descriptor instead.
func (*CSteamTV_CreateBroadcastChannel_Response) Descriptor() ([]byte, []int) {
	return file_service_steamtv_proto_rawDescGZIP(), []int{13}
}

func (x *CSteamTV_CreateBroadcastChannel_Response) GetBroadcastChannelId() uint64 {
	if x != nil && x.BroadcastChannelId != nil {
		return *x.BroadcastChannelId
	}
	return 0
}

type CSteamTV_FollowBroadcastChannel_Request struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	BroadcastChannelId *uint64                `protobuf:"fixed64,1,opt,name=broadcast_channel_id,json=broadcastChannelId" json:"broadcast_channel_id,omitempty"`
	Undo               *bool                  `protobuf:"varint,2,opt,name=undo" json:"undo,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *CSteamTV_FollowBroadcastChannel_Request) Reset() {
	*x = CSteamTV_FollowBroadcastChannel_Request{}
	mi := &file_service_steamtv_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamTV_FollowBroadcastChannel_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_FollowBroadcastChannel_Request) ProtoMessage() {}

func (x *CSteamTV_FollowBroadcastChannel_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamtv_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_FollowBroadcastChannel_Request.ProtoReflect.Descriptor instead.
func (*CSteamTV_FollowBroadcastChannel_Request) Descriptor() ([]byte, []int) {
	return file_service_steamtv_proto_rawDescGZIP(), []int{14}
}

func (x *CSteamTV_FollowBroadcastChannel_Request) GetBroadcastChannelId() uint64 {
	if x != nil && x.BroadcastChannelId != nil {
		return *x.BroadcastChannelId
	}
	return 0
}

func (x *CSteamTV_FollowBroadcastChannel_Request) GetUndo() bool {
	if x != nil && x.Undo != nil {
		return *x.Undo
	}
	return false
}

type CSteamTV_FollowBroadcastChannel_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IsFollowed    *bool                  `protobuf:"varint,1,opt,name=is_followed,json=isFollowed" json:"is_followed,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CSteamTV_FollowBroadcastChannel_Response) Reset() {
	*x = CSteamTV_FollowBroadcastChannel_Response{}
	mi := &file_service_steamtv_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamTV_FollowBroadcastChannel_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_FollowBroadcastChannel_Response) ProtoMessage() {}

func (x *CSteamTV_FollowBroadcastChannel_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamtv_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_FollowBroadcastChannel_Response.ProtoReflect.Descriptor instead.
func (*CSteamTV_FollowBroadcastChannel_Response) Descriptor() ([]byte, []int) {
	return file_service_steamtv_proto_rawDescGZIP(), []int{15}
}

func (x *CSteamTV_FollowBroadcastChannel_Response) GetIsFollowed() bool {
	if x != nil && x.IsFollowed != nil {
		return *x.IsFollowed
	}
	return false
}

type CSteamTV_Game struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	Appid         *uint32                     `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	Name          *string                     `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Image         *string                     `protobuf:"bytes,3,opt,name=image" json:"image,omitempty"`
	Viewers       *uint64                     `protobuf:"varint,4,opt,name=viewers" json:"viewers,omitempty"`
	Channels      []*GetBroadcastChannelEntry `protobuf:"bytes,5,rep,name=channels" json:"channels,omitempty"`
	ReleaseDate   *string                     `protobuf:"bytes,6,opt,name=release_date,json=releaseDate" json:"release_date,omitempty"`
	Developer     *string                     `protobuf:"bytes,7,opt,name=developer" json:"developer,omitempty"`
	Publisher     *string                     `protobuf:"bytes,8,opt,name=publisher" json:"publisher,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CSteamTV_Game) Reset() {
	*x = CSteamTV_Game{}
	mi := &file_service_steamtv_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamTV_Game) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_Game) ProtoMessage() {}

func (x *CSteamTV_Game) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamtv_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_Game.ProtoReflect.Descriptor instead.
func (*CSteamTV_Game) Descriptor() ([]byte, []int) {
	return file_service_steamtv_proto_rawDescGZIP(), []int{16}
}

func (x *CSteamTV_Game) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CSteamTV_Game) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CSteamTV_Game) GetImage() string {
	if x != nil && x.Image != nil {
		return *x.Image
	}
	return ""
}

func (x *CSteamTV_Game) GetViewers() uint64 {
	if x != nil && x.Viewers != nil {
		return *x.Viewers
	}
	return 0
}

func (x *CSteamTV_Game) GetChannels() []*GetBroadcastChannelEntry {
	if x != nil {
		return x.Channels
	}
	return nil
}

func (x *CSteamTV_Game) GetReleaseDate() string {
	if x != nil && x.ReleaseDate != nil {
		return *x.ReleaseDate
	}
	return ""
}

func (x *CSteamTV_Game) GetDeveloper() string {
	if x != nil && x.Developer != nil {
		return *x.Developer
	}
	return ""
}

func (x *CSteamTV_Game) GetPublisher() string {
	if x != nil && x.Publisher != nil {
		return *x.Publisher
	}
	return ""
}

type CSteamTV_GetBroadcastChannelBroadcasters_Request struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	BroadcastChannelId *uint64                `protobuf:"fixed64,1,opt,name=broadcast_channel_id,json=broadcastChannelId" json:"broadcast_channel_id,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *CSteamTV_GetBroadcastChannelBroadcasters_Request) Reset() {
	*x = CSteamTV_GetBroadcastChannelBroadcasters_Request{}
	mi := &file_service_steamtv_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamTV_GetBroadcastChannelBroadcasters_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_GetBroadcastChannelBroadcasters_Request) ProtoMessage() {}

func (x *CSteamTV_GetBroadcastChannelBroadcasters_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamtv_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_GetBroadcastChannelBroadcasters_Request.ProtoReflect.Descriptor instead.
func (*CSteamTV_GetBroadcastChannelBroadcasters_Request) Descriptor() ([]byte, []int) {
	return file_service_steamtv_proto_rawDescGZIP(), []int{17}
}

func (x *CSteamTV_GetBroadcastChannelBroadcasters_Request) GetBroadcastChannelId() uint64 {
	if x != nil && x.BroadcastChannelId != nil {
		return *x.BroadcastChannelId
	}
	return 0
}

type CSteamTV_GetBroadcastChannelBroadcasters_Response struct {
	state         protoimpl.MessageState                                           `protogen:"open.v1"`
	Broadcasters  []*CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster `protobuf:"bytes,1,rep,name=broadcasters" json:"broadcasters,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CSteamTV_GetBroadcastChannelBroadcasters_Response) Reset() {
	*x = CSteamTV_GetBroadcastChannelBroadcasters_Response{}
	mi := &file_service_steamtv_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamTV_GetBroadcastChannelBroadcasters_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_GetBroadcastChannelBroadcasters_Response) ProtoMessage() {}

func (x *CSteamTV_GetBroadcastChannelBroadcasters_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamtv_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_GetBroadcastChannelBroadcasters_Response.ProtoReflect.Descriptor instead.
func (*CSteamTV_GetBroadcastChannelBroadcasters_Response) Descriptor() ([]byte, []int) {
	return file_service_steamtv_proto_rawDescGZIP(), []int{18}
}

func (x *CSteamTV_GetBroadcastChannelBroadcasters_Response) GetBroadcasters() []*CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster {
	if x != nil {
		return x.Broadcasters
	}
	return nil
}

type CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Steamid       *uint64                `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	Name          *string                `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	RtmpToken     *string                `protobuf:"bytes,3,opt,name=rtmp_token,json=rtmpToken" json:"rtmp_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster) Reset() {
	*x = CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster{}
	mi := &file_service_steamtv_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster) ProtoMessage() {}

func (x *CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamtv_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster.ProtoReflect.Descriptor instead.
func (*CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster) Descriptor() ([]byte, []int) {
	return file_service_steamtv_proto_rawDescGZIP(), []int{19}
}

func (x *CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster) GetRtmpToken() string {
	if x != nil && x.RtmpToken != nil {
		return *x.RtmpToken
	}
	return ""
}

type CSteamTV_GetBroadcastChannelClips_Request struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	BroadcastChannelId *uint64                `protobuf:"fixed64,1,opt,name=broadcast_channel_id,json=broadcastChannelId" json:"broadcast_channel_id,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *CSteamTV_GetBroadcastChannelClips_Request) Reset() {
	*x = CSteamTV_GetBroadcastChannelClips_Request{}
	mi := &file_service_steamtv_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamTV_GetBroadcastChannelClips_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_GetBroadcastChannelClips_Request) ProtoMessage() {}

func (x *CSteamTV_GetBroadcastChannelClips_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamtv_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_GetBroadcastChannelClips_Request.ProtoReflect.Descriptor instead.
func (*CSteamTV_GetBroadcastChannelClips_Request) Descriptor() ([]byte, []int) {
	return file_service_steamtv_proto_rawDescGZIP(), []int{20}
}

func (x *CSteamTV_GetBroadcastChannelClips_Request) GetBroadcastChannelId() uint64 {
	if x != nil && x.BroadcastChannelId != nil {
		return *x.BroadcastChannelId
	}
	return 0
}

type CSteamTV_GetBroadcastChannelClips_Response struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	Clips         []*CSteamTV_BroadcastClipInfo `protobuf:"bytes,1,rep,name=clips" json:"clips,omitempty"`
	ThumbnailHost *string                       `protobuf:"bytes,2,opt,name=thumbnail_host,json=thumbnailHost" json:"thumbnail_host,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CSteamTV_GetBroadcastChannelClips_Response) Reset() {
	*x = CSteamTV_GetBroadcastChannelClips_Response{}
	mi := &file_service_steamtv_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamTV_GetBroadcastChannelClips_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_GetBroadcastChannelClips_Response) ProtoMessage() {}

func (x *CSteamTV_GetBroadcastChannelClips_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamtv_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_GetBroadcastChannelClips_Response.ProtoReflect.Descriptor instead.
func (*CSteamTV_GetBroadcastChannelClips_Response) Descriptor() ([]byte, []int) {
	return file_service_steamtv_proto_rawDescGZIP(), []int{21}
}

func (x *CSteamTV_GetBroadcastChannelClips_Response) GetClips() []*CSteamTV_BroadcastClipInfo {
	if x != nil {
		return x.Clips
	}
	return nil
}

func (x *CSteamTV_GetBroadcastChannelClips_Response) GetThumbnailHost() string {
	if x != nil && x.ThumbnailHost != nil {
		return *x.ThumbnailHost
	}
	return ""
}

type CSteamTV_GetBroadcastChannelID_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UniqueName    *string                `protobuf:"bytes,1,opt,name=unique_name,json=uniqueName" json:"unique_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CSteamTV_GetBroadcastChannelID_Request) Reset() {
	*x = CSteamTV_GetBroadcastChannelID_Request{}
	mi := &file_service_steamtv_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamTV_GetBroadcastChannelID_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_GetBroadcastChannelID_Request) ProtoMessage() {}

func (x *CSteamTV_GetBroadcastChannelID_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamtv_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_GetBroadcastChannelID_Request.ProtoReflect.Descriptor instead.
func (*CSteamTV_GetBroadcastChannelID_Request) Descriptor() ([]byte, []int) {
	return file_service_steamtv_proto_rawDescGZIP(), []int{22}
}

func (x *CSteamTV_GetBroadcastChannelID_Request) GetUniqueName() string {
	if x != nil && x.UniqueName != nil {
		return *x.UniqueName
	}
	return ""
}

type CSteamTV_GetBroadcastChannelID_Response struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	BroadcastChannelId *uint64                `protobuf:"fixed64,1,opt,name=broadcast_channel_id,json=broadcastChannelId" json:"broadcast_channel_id,omitempty"`
	UniqueName         *string                `protobuf:"bytes,2,opt,name=unique_name,json=uniqueName" json:"unique_name,omitempty"`
	Steamid            *uint64                `protobuf:"fixed64,3,opt,name=steamid" json:"steamid,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *CSteamTV_GetBroadcastChannelID_Response) Reset() {
	*x = CSteamTV_GetBroadcastChannelID_Response{}
	mi := &file_service_steamtv_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamTV_GetBroadcastChannelID_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_GetBroadcastChannelID_Response) ProtoMessage() {}

func (x *CSteamTV_GetBroadcastChannelID_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamtv_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_GetBroadcastChannelID_Response.ProtoReflect.Descriptor instead.
func (*CSteamTV_GetBroadcastChannelID_Response) Descriptor() ([]byte, []int) {
	return file_service_steamtv_proto_rawDescGZIP(), []int{23}
}

func (x *CSteamTV_GetBroadcastChannelID_Response) GetBroadcastChannelId() uint64 {
	if x != nil && x.BroadcastChannelId != nil {
		return *x.BroadcastChannelId
	}
	return 0
}

func (x *CSteamTV_GetBroadcastChannelID_Response) GetUniqueName() string {
	if x != nil && x.UniqueName != nil {
		return *x.UniqueName
	}
	return ""
}

func (x *CSteamTV_GetBroadcastChannelID_Response) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

type CSteamTV_GetBroadcastChannelImages_Request struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	BroadcastChannelId *uint64                `protobuf:"fixed64,1,opt,name=broadcast_channel_id,json=broadcastChannelId" json:"broadcast_channel_id,omitempty"`
	ImageTypes         []int32                `protobuf:"varint,2,rep,name=image_types,json=imageTypes" json:"image_types,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *CSteamTV_GetBroadcastChannelImages_Request) Reset() {
	*x = CSteamTV_GetBroadcastChannelImages_Request{}
	mi := &file_service_steamtv_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamTV_GetBroadcastChannelImages_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_GetBroadcastChannelImages_Request) ProtoMessage() {}

func (x *CSteamTV_GetBroadcastChannelImages_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamtv_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_GetBroadcastChannelImages_Request.ProtoReflect.Descriptor instead.
func (*CSteamTV_GetBroadcastChannelImages_Request) Descriptor() ([]byte, []int) {
	return file_service_steamtv_proto_rawDescGZIP(), []int{24}
}

func (x *CSteamTV_GetBroadcastChannelImages_Request) GetBroadcastChannelId() uint64 {
	if x != nil && x.BroadcastChannelId != nil {
		return *x.BroadcastChannelId
	}
	return 0
}

func (x *CSteamTV_GetBroadcastChannelImages_Request) GetImageTypes() []int32 {
	if x != nil {
		return x.ImageTypes
	}
	return nil
}

type CSteamTV_GetBroadcastChannelImages_Response struct {
	state         protoimpl.MessageState                                `protogen:"open.v1"`
	Images        []*CSteamTV_GetBroadcastChannelImages_Response_Images `protobuf:"bytes,1,rep,name=images" json:"images,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CSteamTV_GetBroadcastChannelImages_Response) Reset() {
	*x = CSteamTV_GetBroadcastChannelImages_Response{}
	mi := &file_service_steamtv_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamTV_GetBroadcastChannelImages_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_GetBroadcastChannelImages_Response) ProtoMessage() {}

func (x *CSteamTV_GetBroadcastChannelImages_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamtv_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_GetBroadcastChannelImages_Response.ProtoReflect.Descriptor instead.
func (*CSteamTV_GetBroadcastChannelImages_Response) Descriptor() ([]byte, []int) {
	return file_service_steamtv_proto_rawDescGZIP(), []int{25}
}

func (x *CSteamTV_GetBroadcastChannelImages_Response) GetImages() []*CSteamTV_GetBroadcastChannelImages_Response_Images {
	if x != nil {
		return x.Images
	}
	return nil
}

type CSteamTV_GetBroadcastChannelImages_Response_Images struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ImageType     *int32                 `protobuf:"varint,1,opt,name=image_type,json=imageType" json:"image_type,omitempty"`
	ImagePath     *string                `protobuf:"bytes,2,opt,name=image_path,json=imagePath" json:"image_path,omitempty"`
	ImageIndex    *uint32                `protobuf:"varint,3,opt,name=image_index,json=imageIndex" json:"image_index,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CSteamTV_GetBroadcastChannelImages_Response_Images) Reset() {
	*x = CSteamTV_GetBroadcastChannelImages_Response_Images{}
	mi := &file_service_steamtv_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamTV_GetBroadcastChannelImages_Response_Images) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_GetBroadcastChannelImages_Response_Images) ProtoMessage() {}

func (x *CSteamTV_GetBroadcastChannelImages_Response_Images) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamtv_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_GetBroadcastChannelImages_Response_Images.ProtoReflect.Descriptor instead.
func (*CSteamTV_GetBroadcastChannelImages_Response_Images) Descriptor() ([]byte, []int) {
	return file_service_steamtv_proto_rawDescGZIP(), []int{26}
}

func (x *CSteamTV_GetBroadcastChannelImages_Response_Images) GetImageType() int32 {
	if x != nil && x.ImageType != nil {
		return *x.ImageType
	}
	return 0
}

func (x *CSteamTV_GetBroadcastChannelImages_Response_Images) GetImagePath() string {
	if x != nil && x.ImagePath != nil {
		return *x.ImagePath
	}
	return ""
}

func (x *CSteamTV_GetBroadcastChannelImages_Response_Images) GetImageIndex() uint32 {
	if x != nil && x.ImageIndex != nil {
		return *x.ImageIndex
	}
	return 0
}

type CSteamTV_GetBroadcastChannelInteraction_Request struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	BroadcastChannelId *uint64                `protobuf:"fixed64,1,opt,name=broadcast_channel_id,json=broadcastChannelId" json:"broadcast_channel_id,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *CSteamTV_GetBroadcastChannelInteraction_Request) Reset() {
	*x = CSteamTV_GetBroadcastChannelInteraction_Request{}
	mi := &file_service_steamtv_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamTV_GetBroadcastChannelInteraction_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_GetBroadcastChannelInteraction_Request) ProtoMessage() {}

func (x *CSteamTV_GetBroadcastChannelInteraction_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamtv_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_GetBroadcastChannelInteraction_Request.ProtoReflect.Descriptor instead.
func (*CSteamTV_GetBroadcastChannelInteraction_Request) Descriptor() ([]byte, []int) {
	return file_service_steamtv_proto_rawDescGZIP(), []int{27}
}

func (x *CSteamTV_GetBroadcastChannelInteraction_Request) GetBroadcastChannelId() uint64 {
	if x != nil && x.BroadcastChannelId != nil {
		return *x.BroadcastChannelId
	}
	return 0
}

type CSteamTV_GetBroadcastChannelInteraction_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IsFollowed    *bool                  `protobuf:"varint,1,opt,name=is_followed,json=isFollowed" json:"is_followed,omitempty"`
	IsSubscribed  *bool                  `protobuf:"varint,2,opt,name=is_subscribed,json=isSubscribed" json:"is_subscribed,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CSteamTV_GetBroadcastChannelInteraction_Response) Reset() {
	*x = CSteamTV_GetBroadcastChannelInteraction_Response{}
	mi := &file_service_steamtv_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamTV_GetBroadcastChannelInteraction_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_GetBroadcastChannelInteraction_Response) ProtoMessage() {}

func (x *CSteamTV_GetBroadcastChannelInteraction_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamtv_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_GetBroadcastChannelInteraction_Response.ProtoReflect.Descriptor instead.
func (*CSteamTV_GetBroadcastChannelInteraction_Response) Descriptor() ([]byte, []int) {
	return file_service_steamtv_proto_rawDescGZIP(), []int{28}
}

func (x *CSteamTV_GetBroadcastChannelInteraction_Response) GetIsFollowed() bool {
	if x != nil && x.IsFollowed != nil {
		return *x.IsFollowed
	}
	return false
}

func (x *CSteamTV_GetBroadcastChannelInteraction_Response) GetIsSubscribed() bool {
	if x != nil && x.IsSubscribed != nil {
		return *x.IsSubscribed
	}
	return false
}

type CSteamTV_GetBroadcastChannelLinks_Request struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	BroadcastChannelId *uint64                `protobuf:"fixed64,1,opt,name=broadcast_channel_id,json=broadcastChannelId" json:"broadcast_channel_id,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *CSteamTV_GetBroadcastChannelLinks_Request) Reset() {
	*x = CSteamTV_GetBroadcastChannelLinks_Request{}
	mi := &file_service_steamtv_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamTV_GetBroadcastChannelLinks_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_GetBroadcastChannelLinks_Request) ProtoMessage() {}

func (x *CSteamTV_GetBroadcastChannelLinks_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamtv_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_GetBroadcastChannelLinks_Request.ProtoReflect.Descriptor instead.
func (*CSteamTV_GetBroadcastChannelLinks_Request) Descriptor() ([]byte, []int) {
	return file_service_steamtv_proto_rawDescGZIP(), []int{29}
}

func (x *CSteamTV_GetBroadcastChannelLinks_Request) GetBroadcastChannelId() uint64 {
	if x != nil && x.BroadcastChannelId != nil {
		return *x.BroadcastChannelId
	}
	return 0
}

type CSteamTV_GetBroadcastChannelLinks_Response struct {
	state         protoimpl.MessageState                              `protogen:"open.v1"`
	Links         []*CSteamTV_GetBroadcastChannelLinks_Response_Links `protobuf:"bytes,1,rep,name=links" json:"links,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CSteamTV_GetBroadcastChannelLinks_Response) Reset() {
	*x = CSteamTV_GetBroadcastChannelLinks_Response{}
	mi := &file_service_steamtv_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamTV_GetBroadcastChannelLinks_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_GetBroadcastChannelLinks_Response) ProtoMessage() {}

func (x *CSteamTV_GetBroadcastChannelLinks_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamtv_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_GetBroadcastChannelLinks_Response.ProtoReflect.Descriptor instead.
func (*CSteamTV_GetBroadcastChannelLinks_Response) Descriptor() ([]byte, []int) {
	return file_service_steamtv_proto_rawDescGZIP(), []int{30}
}

func (x *CSteamTV_GetBroadcastChannelLinks_Response) GetLinks() []*CSteamTV_GetBroadcastChannelLinks_Response_Links {
	if x != nil {
		return x.Links
	}
	return nil
}

type CSteamTV_GetBroadcastChannelLinks_Response_Links struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	LinkIndex       *uint32                `protobuf:"varint,1,opt,name=link_index,json=linkIndex" json:"link_index,omitempty"`
	Url             *string                `protobuf:"bytes,2,opt,name=url" json:"url,omitempty"`
	LinkDescription *string                `protobuf:"bytes,3,opt,name=link_description,json=linkDescription" json:"link_description,omitempty"`
	Left            *uint32                `protobuf:"varint,4,opt,name=left" json:"left,omitempty"`
	Top             *uint32                `protobuf:"varint,5,opt,name=top" json:"top,omitempty"`
	Width           *uint32                `protobuf:"varint,6,opt,name=width" json:"width,omitempty"`
	Height          *uint32                `protobuf:"varint,7,opt,name=height" json:"height,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CSteamTV_GetBroadcastChannelLinks_Response_Links) Reset() {
	*x = CSteamTV_GetBroadcastChannelLinks_Response_Links{}
	mi := &file_service_steamtv_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamTV_GetBroadcastChannelLinks_Response_Links) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_GetBroadcastChannelLinks_Response_Links) ProtoMessage() {}

func (x *CSteamTV_GetBroadcastChannelLinks_Response_Links) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamtv_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_GetBroadcastChannelLinks_Response_Links.ProtoReflect.Descriptor instead.
func (*CSteamTV_GetBroadcastChannelLinks_Response_Links) Descriptor() ([]byte, []int) {
	return file_service_steamtv_proto_rawDescGZIP(), []int{31}
}

func (x *CSteamTV_GetBroadcastChannelLinks_Response_Links) GetLinkIndex() uint32 {
	if x != nil && x.LinkIndex != nil {
		return *x.LinkIndex
	}
	return 0
}

func (x *CSteamTV_GetBroadcastChannelLinks_Response_Links) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *CSteamTV_GetBroadcastChannelLinks_Response_Links) GetLinkDescription() string {
	if x != nil && x.LinkDescription != nil {
		return *x.LinkDescription
	}
	return ""
}

func (x *CSteamTV_GetBroadcastChannelLinks_Response_Links) GetLeft() uint32 {
	if x != nil && x.Left != nil {
		return *x.Left
	}
	return 0
}

func (x *CSteamTV_GetBroadcastChannelLinks_Response_Links) GetTop() uint32 {
	if x != nil && x.Top != nil {
		return *x.Top
	}
	return 0
}

func (x *CSteamTV_GetBroadcastChannelLinks_Response_Links) GetWidth() uint32 {
	if x != nil && x.Width != nil {
		return *x.Width
	}
	return 0
}

func (x *CSteamTV_GetBroadcastChannelLinks_Response_Links) GetHeight() uint32 {
	if x != nil && x.Height != nil {
		return *x.Height
	}
	return 0
}

type CSteamTV_GetBroadcastChannelProfile_Request struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	BroadcastChannelId *uint64                `protobuf:"fixed64,1,opt,name=broadcast_channel_id,json=broadcastChannelId" json:"broadcast_channel_id,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *CSteamTV_GetBroadcastChannelProfile_Request) Reset() {
	*x = CSteamTV_GetBroadcastChannelProfile_Request{}
	mi := &file_service_steamtv_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamTV_GetBroadcastChannelProfile_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_GetBroadcastChannelProfile_Request) ProtoMessage() {}

func (x *CSteamTV_GetBroadcastChannelProfile_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamtv_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_GetBroadcastChannelProfile_Request.ProtoReflect.Descriptor instead.
func (*CSteamTV_GetBroadcastChannelProfile_Request) Descriptor() ([]byte, []int) {
	return file_service_steamtv_proto_rawDescGZIP(), []int{32}
}

func (x *CSteamTV_GetBroadcastChannelProfile_Request) GetBroadcastChannelId() uint64 {
	if x != nil && x.BroadcastChannelId != nil {
		return *x.BroadcastChannelId
	}
	return 0
}

type CSteamTV_GetBroadcastChannelProfile_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UniqueName    *string                `protobuf:"bytes,1,opt,name=unique_name,json=uniqueName" json:"unique_name,omitempty"`
	OwnerSteamid  *uint64                `protobuf:"fixed64,2,opt,name=owner_steamid,json=ownerSteamid" json:"owner_steamid,omitempty"`
	Name          *string                `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Language      *string                `protobuf:"bytes,4,opt,name=language" json:"language,omitempty"`
	Headline      *string                `protobuf:"bytes,5,opt,name=headline" json:"headline,omitempty"`
	Summary       *string                `protobuf:"bytes,6,opt,name=summary" json:"summary,omitempty"`
	Schedule      *string                `protobuf:"bytes,7,opt,name=schedule" json:"schedule,omitempty"`
	Rules         *string                `protobuf:"bytes,8,opt,name=rules" json:"rules,omitempty"`
	Panels        *string                `protobuf:"bytes,9,opt,name=panels" json:"panels,omitempty"`
	IsPartnered   *bool                  `protobuf:"varint,10,opt,name=is_partnered,json=isPartnered" json:"is_partnered,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CSteamTV_GetBroadcastChannelProfile_Response) Reset() {
	*x = CSteamTV_GetBroadcastChannelProfile_Response{}
	mi := &file_service_steamtv_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamTV_GetBroadcastChannelProfile_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_GetBroadcastChannelProfile_Response) ProtoMessage() {}

func (x *CSteamTV_GetBroadcastChannelProfile_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamtv_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_GetBroadcastChannelProfile_Response.ProtoReflect.Descriptor instead.
func (*CSteamTV_GetBroadcastChannelProfile_Response) Descriptor() ([]byte, []int) {
	return file_service_steamtv_proto_rawDescGZIP(), []int{33}
}

func (x *CSteamTV_GetBroadcastChannelProfile_Response) GetUniqueName() string {
	if x != nil && x.UniqueName != nil {
		return *x.UniqueName
	}
	return ""
}

func (x *CSteamTV_GetBroadcastChannelProfile_Response) GetOwnerSteamid() uint64 {
	if x != nil && x.OwnerSteamid != nil {
		return *x.OwnerSteamid
	}
	return 0
}

func (x *CSteamTV_GetBroadcastChannelProfile_Response) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CSteamTV_GetBroadcastChannelProfile_Response) GetLanguage() string {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return ""
}

func (x *CSteamTV_GetBroadcastChannelProfile_Response) GetHeadline() string {
	if x != nil && x.Headline != nil {
		return *x.Headline
	}
	return ""
}

func (x *CSteamTV_GetBroadcastChannelProfile_Response) GetSummary() string {
	if x != nil && x.Summary != nil {
		return *x.Summary
	}
	return ""
}

func (x *CSteamTV_GetBroadcastChannelProfile_Response) GetSchedule() string {
	if x != nil && x.Schedule != nil {
		return *x.Schedule
	}
	return ""
}

func (x *CSteamTV_GetBroadcastChannelProfile_Response) GetRules() string {
	if x != nil && x.Rules != nil {
		return *x.Rules
	}
	return ""
}

func (x *CSteamTV_GetBroadcastChannelProfile_Response) GetPanels() string {
	if x != nil && x.Panels != nil {
		return *x.Panels
	}
	return ""
}

func (x *CSteamTV_GetBroadcastChannelProfile_Response) GetIsPartnered() bool {
	if x != nil && x.IsPartnered != nil {
		return *x.IsPartnered
	}
	return false
}

type CSteamTV_GetBroadcastChannelStatus_Request struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	BroadcastChannelId *uint64                `protobuf:"fixed64,1,opt,name=broadcast_channel_id,json=broadcastChannelId" json:"broadcast_channel_id,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *CSteamTV_GetBroadcastChannelStatus_Request) Reset() {
	*x = CSteamTV_GetBroadcastChannelStatus_Request{}
	mi := &file_service_steamtv_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamTV_GetBroadcastChannelStatus_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_GetBroadcastChannelStatus_Request) ProtoMessage() {}

func (x *CSteamTV_GetBroadcastChannelStatus_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamtv_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_GetBroadcastChannelStatus_Request.ProtoReflect.Descriptor instead.
func (*CSteamTV_GetBroadcastChannelStatus_Request) Descriptor() ([]byte, []int) {
	return file_service_steamtv_proto_rawDescGZIP(), []int{34}
}

func (x *CSteamTV_GetBroadcastChannelStatus_Request) GetBroadcastChannelId() uint64 {
	if x != nil && x.BroadcastChannelId != nil {
		return *x.BroadcastChannelId
	}
	return 0
}

type CSteamTV_GetBroadcastChannelStatus_Response struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	IsLive             *bool                  `protobuf:"varint,1,opt,name=is_live,json=isLive" json:"is_live,omitempty"`
	IsDisabled         *bool                  `protobuf:"varint,2,opt,name=is_disabled,json=isDisabled" json:"is_disabled,omitempty"`
	Appid              *uint32                `protobuf:"varint,3,opt,name=appid" json:"appid,omitempty"`
	Viewers            *uint64                `protobuf:"varint,4,opt,name=viewers" json:"viewers,omitempty"`
	Views              *uint64                `protobuf:"varint,5,opt,name=views" json:"views,omitempty"`
	BroadcasterSteamid *uint64                `protobuf:"fixed64,6,opt,name=broadcaster_steamid,json=broadcasterSteamid" json:"broadcaster_steamid,omitempty"`
	ThumbnailUrl       *string                `protobuf:"bytes,7,opt,name=thumbnail_url,json=thumbnailUrl" json:"thumbnail_url,omitempty"`
	Followers          *uint64                `protobuf:"varint,8,opt,name=followers" json:"followers,omitempty"`
	Subscribers        *uint64                `protobuf:"varint,9,opt,name=subscribers" json:"subscribers,omitempty"`
	UniqueName         *string                `protobuf:"bytes,10,opt,name=unique_name,json=uniqueName" json:"unique_name,omitempty"`
	BroadcastSessionId *uint64                `protobuf:"varint,11,opt,name=broadcast_session_id,json=broadcastSessionId" json:"broadcast_session_id,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *CSteamTV_GetBroadcastChannelStatus_Response) Reset() {
	*x = CSteamTV_GetBroadcastChannelStatus_Response{}
	mi := &file_service_steamtv_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamTV_GetBroadcastChannelStatus_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_GetBroadcastChannelStatus_Response) ProtoMessage() {}

func (x *CSteamTV_GetBroadcastChannelStatus_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamtv_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_GetBroadcastChannelStatus_Response.ProtoReflect.Descriptor instead.
func (*CSteamTV_GetBroadcastChannelStatus_Response) Descriptor() ([]byte, []int) {
	return file_service_steamtv_proto_rawDescGZIP(), []int{35}
}

func (x *CSteamTV_GetBroadcastChannelStatus_Response) GetIsLive() bool {
	if x != nil && x.IsLive != nil {
		return *x.IsLive
	}
	return false
}

func (x *CSteamTV_GetBroadcastChannelStatus_Response) GetIsDisabled() bool {
	if x != nil && x.IsDisabled != nil {
		return *x.IsDisabled
	}
	return false
}

func (x *CSteamTV_GetBroadcastChannelStatus_Response) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CSteamTV_GetBroadcastChannelStatus_Response) GetViewers() uint64 {
	if x != nil && x.Viewers != nil {
		return *x.Viewers
	}
	return 0
}

func (x *CSteamTV_GetBroadcastChannelStatus_Response) GetViews() uint64 {
	if x != nil && x.Views != nil {
		return *x.Views
	}
	return 0
}

func (x *CSteamTV_GetBroadcastChannelStatus_Response) GetBroadcasterSteamid() uint64 {
	if x != nil && x.BroadcasterSteamid != nil {
		return *x.BroadcasterSteamid
	}
	return 0
}

func (x *CSteamTV_GetBroadcastChannelStatus_Response) GetThumbnailUrl() string {
	if x != nil && x.ThumbnailUrl != nil {
		return *x.ThumbnailUrl
	}
	return ""
}

func (x *CSteamTV_GetBroadcastChannelStatus_Response) GetFollowers() uint64 {
	if x != nil && x.Followers != nil {
		return *x.Followers
	}
	return 0
}

func (x *CSteamTV_GetBroadcastChannelStatus_Response) GetSubscribers() uint64 {
	if x != nil && x.Subscribers != nil {
		return *x.Subscribers
	}
	return 0
}

func (x *CSteamTV_GetBroadcastChannelStatus_Response) GetUniqueName() string {
	if x != nil && x.UniqueName != nil {
		return *x.UniqueName
	}
	return ""
}

func (x *CSteamTV_GetBroadcastChannelStatus_Response) GetBroadcastSessionId() uint64 {
	if x != nil && x.BroadcastSessionId != nil {
		return *x.BroadcastSessionId
	}
	return 0
}

type CSteamTV_GetChannels_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Algorithm     *int32                 `protobuf:"varint,1,opt,name=algorithm" json:"algorithm,omitempty"`
	Count         *uint32                `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
	Appid         *uint32                `protobuf:"varint,3,opt,name=appid" json:"appid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CSteamTV_GetChannels_Request) Reset() {
	*x = CSteamTV_GetChannels_Request{}
	mi := &file_service_steamtv_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamTV_GetChannels_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_GetChannels_Request) ProtoMessage() {}

func (x *CSteamTV_GetChannels_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamtv_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_GetChannels_Request.ProtoReflect.Descriptor instead.
func (*CSteamTV_GetChannels_Request) Descriptor() ([]byte, []int) {
	return file_service_steamtv_proto_rawDescGZIP(), []int{36}
}

func (x *CSteamTV_GetChannels_Request) GetAlgorithm() int32 {
	if x != nil && x.Algorithm != nil {
		return *x.Algorithm
	}
	return 0
}

func (x *CSteamTV_GetChannels_Request) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *CSteamTV_GetChannels_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

type CSteamTV_GetChannels_Response struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	Results       []*GetBroadcastChannelEntry `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CSteamTV_GetChannels_Response) Reset() {
	*x = CSteamTV_GetChannels_Response{}
	mi := &file_service_steamtv_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamTV_GetChannels_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_GetChannels_Response) ProtoMessage() {}

func (x *CSteamTV_GetChannels_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamtv_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_GetChannels_Response.ProtoReflect.Descriptor instead.
func (*CSteamTV_GetChannels_Response) Descriptor() ([]byte, []int) {
	return file_service_steamtv_proto_rawDescGZIP(), []int{37}
}

func (x *CSteamTV_GetChannels_Response) GetResults() []*GetBroadcastChannelEntry {
	if x != nil {
		return x.Results
	}
	return nil
}

type CSteamTV_GetChatBans_Request struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	BroadcastChannelId *uint64                `protobuf:"fixed64,1,opt,name=broadcast_channel_id,json=broadcastChannelId" json:"broadcast_channel_id,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *CSteamTV_GetChatBans_Request) Reset() {
	*x = CSteamTV_GetChatBans_Request{}
	mi := &file_service_steamtv_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamTV_GetChatBans_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_GetChatBans_Request) ProtoMessage() {}

func (x *CSteamTV_GetChatBans_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamtv_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_GetChatBans_Request.ProtoReflect.Descriptor instead.
func (*CSteamTV_GetChatBans_Request) Descriptor() ([]byte, []int) {
	return file_service_steamtv_proto_rawDescGZIP(), []int{38}
}

func (x *CSteamTV_GetChatBans_Request) GetBroadcastChannelId() uint64 {
	if x != nil && x.BroadcastChannelId != nil {
		return *x.BroadcastChannelId
	}
	return 0
}

type CSteamTV_GetChatBans_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Results       []*CSteamTV_ChatBan    `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CSteamTV_GetChatBans_Response) Reset() {
	*x = CSteamTV_GetChatBans_Response{}
	mi := &file_service_steamtv_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamTV_GetChatBans_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_GetChatBans_Response) ProtoMessage() {}

func (x *CSteamTV_GetChatBans_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamtv_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_GetChatBans_Response.ProtoReflect.Descriptor instead.
func (*CSteamTV_GetChatBans_Response) Descriptor() ([]byte, []int) {
	return file_service_steamtv_proto_rawDescGZIP(), []int{39}
}

func (x *CSteamTV_GetChatBans_Response) GetResults() []*CSteamTV_ChatBan {
	if x != nil {
		return x.Results
	}
	return nil
}

type CSteamTV_GetChatModerators_Request struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	BroadcastChannelId *uint64                `protobuf:"fixed64,1,opt,name=broadcast_channel_id,json=broadcastChannelId" json:"broadcast_channel_id,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *CSteamTV_GetChatModerators_Request) Reset() {
	*x = CSteamTV_GetChatModerators_Request{}
	mi := &file_service_steamtv_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamTV_GetChatModerators_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_GetChatModerators_Request) ProtoMessage() {}

func (x *CSteamTV_GetChatModerators_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamtv_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_GetChatModerators_Request.ProtoReflect.Descriptor instead.
func (*CSteamTV_GetChatModerators_Request) Descriptor() ([]byte, []int) {
	return file_service_steamtv_proto_rawDescGZIP(), []int{40}
}

func (x *CSteamTV_GetChatModerators_Request) GetBroadcastChannelId() uint64 {
	if x != nil && x.BroadcastChannelId != nil {
		return *x.BroadcastChannelId
	}
	return 0
}

type CSteamTV_GetChatModerators_Response struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Results       []*CSteamTV_ChatModerator `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CSteamTV_GetChatModerators_Response) Reset() {
	*x = CSteamTV_GetChatModerators_Response{}
	mi := &file_service_steamtv_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamTV_GetChatModerators_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_GetChatModerators_Response) ProtoMessage() {}

func (x *CSteamTV_GetChatModerators_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamtv_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_GetChatModerators_Response.ProtoReflect.Descriptor instead.
func (*CSteamTV_GetChatModerators_Response) Descriptor() ([]byte, []int) {
	return file_service_steamtv_proto_rawDescGZIP(), []int{41}
}

func (x *CSteamTV_GetChatModerators_Response) GetResults() []*CSteamTV_ChatModerator {
	if x != nil {
		return x.Results
	}
	return nil
}

type CSteamTV_GetFollowedChannels_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CSteamTV_GetFollowedChannels_Request) Reset() {
	*x = CSteamTV_GetFollowedChannels_Request{}
	mi := &file_service_steamtv_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamTV_GetFollowedChannels_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_GetFollowedChannels_Request) ProtoMessage() {}

func (x *CSteamTV_GetFollowedChannels_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamtv_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_GetFollowedChannels_Request.ProtoReflect.Descriptor instead.
func (*CSteamTV_GetFollowedChannels_Request) Descriptor() ([]byte, []int) {
	return file_service_steamtv_proto_rawDescGZIP(), []int{42}
}

type CSteamTV_GetFollowedChannels_Response struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	Results       []*GetBroadcastChannelEntry `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CSteamTV_GetFollowedChannels_Response) Reset() {
	*x = CSteamTV_GetFollowedChannels_Response{}
	mi := &file_service_steamtv_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamTV_GetFollowedChannels_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_GetFollowedChannels_Response) ProtoMessage() {}

func (x *CSteamTV_GetFollowedChannels_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamtv_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_GetFollowedChannels_Response.ProtoReflect.Descriptor instead.
func (*CSteamTV_GetFollowedChannels_Response) Descriptor() ([]byte, []int) {
	return file_service_steamtv_proto_rawDescGZIP(), []int{43}
}

func (x *CSteamTV_GetFollowedChannels_Response) GetResults() []*GetBroadcastChannelEntry {
	if x != nil {
		return x.Results
	}
	return nil
}

type CSteamTV_GetGames_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Appid         *uint32                `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	Algorithm     *int32                 `protobuf:"varint,2,opt,name=algorithm" json:"algorithm,omitempty"`
	Count         *uint32                `protobuf:"varint,3,opt,name=count" json:"count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CSteamTV_GetGames_Request) Reset() {
	*x = CSteamTV_GetGames_Request{}
	mi := &file_service_steamtv_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamTV_GetGames_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_GetGames_Request) ProtoMessage() {}

func (x *CSteamTV_GetGames_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamtv_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_GetGames_Request.ProtoReflect.Descriptor instead.
func (*CSteamTV_GetGames_Request) Descriptor() ([]byte, []int) {
	return file_service_steamtv_proto_rawDescGZIP(), []int{44}
}

func (x *CSteamTV_GetGames_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CSteamTV_GetGames_Request) GetAlgorithm() int32 {
	if x != nil && x.Algorithm != nil {
		return *x.Algorithm
	}
	return 0
}

func (x *CSteamTV_GetGames_Request) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

type CSteamTV_GetGames_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Results       []*CSteamTV_Game       `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CSteamTV_GetGames_Response) Reset() {
	*x = CSteamTV_GetGames_Response{}
	mi := &file_service_steamtv_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamTV_GetGames_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_GetGames_Response) ProtoMessage() {}

func (x *CSteamTV_GetGames_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamtv_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_GetGames_Response.ProtoReflect.Descriptor instead.
func (*CSteamTV_GetGames_Response) Descriptor() ([]byte, []int) {
	return file_service_steamtv_proto_rawDescGZIP(), []int{45}
}

func (x *CSteamTV_GetGames_Response) GetResults() []*CSteamTV_Game {
	if x != nil {
		return x.Results
	}
	return nil
}

type CSteamTV_GetHomePageContents_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CSteamTV_GetHomePageContents_Request) Reset() {
	*x = CSteamTV_GetHomePageContents_Request{}
	mi := &file_service_steamtv_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamTV_GetHomePageContents_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_GetHomePageContents_Request) ProtoMessage() {}

func (x *CSteamTV_GetHomePageContents_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamtv_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_GetHomePageContents_Request.ProtoReflect.Descriptor instead.
func (*CSteamTV_GetHomePageContents_Request) Descriptor() ([]byte, []int) {
	return file_service_steamtv_proto_rawDescGZIP(), []int{46}
}

type CSteamTV_GetHomePageContents_Response struct {
	state         protoimpl.MessageState         `protogen:"open.v1"`
	Rows          []*CSteamTV_HomePageContentRow `protobuf:"bytes,1,rep,name=rows" json:"rows,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CSteamTV_GetHomePageContents_Response) Reset() {
	*x = CSteamTV_GetHomePageContents_Response{}
	mi := &file_service_steamtv_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamTV_GetHomePageContents_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_GetHomePageContents_Response) ProtoMessage() {}

func (x *CSteamTV_GetHomePageContents_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamtv_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_GetHomePageContents_Response.ProtoReflect.Descriptor instead.
func (*CSteamTV_GetHomePageContents_Response) Descriptor() ([]byte, []int) {
	return file_service_steamtv_proto_rawDescGZIP(), []int{47}
}

func (x *CSteamTV_GetHomePageContents_Response) GetRows() []*CSteamTV_HomePageContentRow {
	if x != nil {
		return x.Rows
	}
	return nil
}

type CSteamTV_GetMyBroadcastChannels_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CSteamTV_GetMyBroadcastChannels_Request) Reset() {
	*x = CSteamTV_GetMyBroadcastChannels_Request{}
	mi := &file_service_steamtv_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamTV_GetMyBroadcastChannels_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_GetMyBroadcastChannels_Request) ProtoMessage() {}

func (x *CSteamTV_GetMyBroadcastChannels_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamtv_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_GetMyBroadcastChannels_Request.ProtoReflect.Descriptor instead.
func (*CSteamTV_GetMyBroadcastChannels_Request) Descriptor() ([]byte, []int) {
	return file_service_steamtv_proto_rawDescGZIP(), []int{48}
}

type CSteamTV_GetMyBroadcastChannels_Response struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	Results       []*GetBroadcastChannelEntry `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CSteamTV_GetMyBroadcastChannels_Response) Reset() {
	*x = CSteamTV_GetMyBroadcastChannels_Response{}
	mi := &file_service_steamtv_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamTV_GetMyBroadcastChannels_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_GetMyBroadcastChannels_Response) ProtoMessage() {}

func (x *CSteamTV_GetMyBroadcastChannels_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamtv_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_GetMyBroadcastChannels_Response.ProtoReflect.Descriptor instead.
func (*CSteamTV_GetMyBroadcastChannels_Response) Descriptor() ([]byte, []int) {
	return file_service_steamtv_proto_rawDescGZIP(), []int{49}
}

func (x *CSteamTV_GetMyBroadcastChannels_Response) GetResults() []*GetBroadcastChannelEntry {
	if x != nil {
		return x.Results
	}
	return nil
}

type CSteamTV_GetSteamTVUserSettings_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CSteamTV_GetSteamTVUserSettings_Request) Reset() {
	*x = CSteamTV_GetSteamTVUserSettings_Request{}
	mi := &file_service_steamtv_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamTV_GetSteamTVUserSettings_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_GetSteamTVUserSettings_Request) ProtoMessage() {}

func (x *CSteamTV_GetSteamTVUserSettings_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamtv_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_GetSteamTVUserSettings_Request.ProtoReflect.Descriptor instead.
func (*CSteamTV_GetSteamTVUserSettings_Request) Descriptor() ([]byte, []int) {
	return file_service_steamtv_proto_rawDescGZIP(), []int{50}
}

type CSteamTV_GetSteamTVUserSettings_Response struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	StreamLiveEmail        *bool                  `protobuf:"varint,1,opt,name=stream_live_email,json=streamLiveEmail" json:"stream_live_email,omitempty"`
	StreamLiveNotification *bool                  `protobuf:"varint,2,opt,name=stream_live_notification,json=streamLiveNotification" json:"stream_live_notification,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *CSteamTV_GetSteamTVUserSettings_Response) Reset() {
	*x = CSteamTV_GetSteamTVUserSettings_Response{}
	mi := &file_service_steamtv_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamTV_GetSteamTVUserSettings_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_GetSteamTVUserSettings_Response) ProtoMessage() {}

func (x *CSteamTV_GetSteamTVUserSettings_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamtv_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_GetSteamTVUserSettings_Response.ProtoReflect.Descriptor instead.
func (*CSteamTV_GetSteamTVUserSettings_Response) Descriptor() ([]byte, []int) {
	return file_service_steamtv_proto_rawDescGZIP(), []int{51}
}

func (x *CSteamTV_GetSteamTVUserSettings_Response) GetStreamLiveEmail() bool {
	if x != nil && x.StreamLiveEmail != nil {
		return *x.StreamLiveEmail
	}
	return false
}

func (x *CSteamTV_GetSteamTVUserSettings_Response) GetStreamLiveNotification() bool {
	if x != nil && x.StreamLiveNotification != nil {
		return *x.StreamLiveNotification
	}
	return false
}

type CSteamTV_GetSubscribedChannels_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CSteamTV_GetSubscribedChannels_Request) Reset() {
	*x = CSteamTV_GetSubscribedChannels_Request{}
	mi := &file_service_steamtv_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamTV_GetSubscribedChannels_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_GetSubscribedChannels_Request) ProtoMessage() {}

func (x *CSteamTV_GetSubscribedChannels_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamtv_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_GetSubscribedChannels_Request.ProtoReflect.Descriptor instead.
func (*CSteamTV_GetSubscribedChannels_Request) Descriptor() ([]byte, []int) {
	return file_service_steamtv_proto_rawDescGZIP(), []int{52}
}

type CSteamTV_GetSubscribedChannels_Response struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	Results       []*GetBroadcastChannelEntry `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CSteamTV_GetSubscribedChannels_Response) Reset() {
	*x = CSteamTV_GetSubscribedChannels_Response{}
	mi := &file_service_steamtv_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamTV_GetSubscribedChannels_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_GetSubscribedChannels_Response) ProtoMessage() {}

func (x *CSteamTV_GetSubscribedChannels_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamtv_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_GetSubscribedChannels_Response.ProtoReflect.Descriptor instead.
func (*CSteamTV_GetSubscribedChannels_Response) Descriptor() ([]byte, []int) {
	return file_service_steamtv_proto_rawDescGZIP(), []int{53}
}

func (x *CSteamTV_GetSubscribedChannels_Response) GetResults() []*GetBroadcastChannelEntry {
	if x != nil {
		return x.Results
	}
	return nil
}

type CSteamTV_GetWordBans_Request struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	BroadcastChannelId *uint64                `protobuf:"fixed64,1,opt,name=broadcast_channel_id,json=broadcastChannelId" json:"broadcast_channel_id,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *CSteamTV_GetWordBans_Request) Reset() {
	*x = CSteamTV_GetWordBans_Request{}
	mi := &file_service_steamtv_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamTV_GetWordBans_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_GetWordBans_Request) ProtoMessage() {}

func (x *CSteamTV_GetWordBans_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamtv_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_GetWordBans_Request.ProtoReflect.Descriptor instead.
func (*CSteamTV_GetWordBans_Request) Descriptor() ([]byte, []int) {
	return file_service_steamtv_proto_rawDescGZIP(), []int{54}
}

func (x *CSteamTV_GetWordBans_Request) GetBroadcastChannelId() uint64 {
	if x != nil && x.BroadcastChannelId != nil {
		return *x.BroadcastChannelId
	}
	return 0
}

type CSteamTV_GetWordBans_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Results       []string               `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CSteamTV_GetWordBans_Response) Reset() {
	*x = CSteamTV_GetWordBans_Response{}
	mi := &file_service_steamtv_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamTV_GetWordBans_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_GetWordBans_Response) ProtoMessage() {}

func (x *CSteamTV_GetWordBans_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamtv_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_GetWordBans_Response.ProtoReflect.Descriptor instead.
func (*CSteamTV_GetWordBans_Response) Descriptor() ([]byte, []int) {
	return file_service_steamtv_proto_rawDescGZIP(), []int{55}
}

func (x *CSteamTV_GetWordBans_Response) GetResults() []string {
	if x != nil {
		return x.Results
	}
	return nil
}

type CSteamTV_HomePageContentRow struct {
	state         protoimpl.MessageState                  `protogen:"open.v1"`
	TemplateType  *int32                                  `protobuf:"varint,1,opt,name=template_type,json=templateType" json:"template_type,omitempty"`
	Takeover      *CSteamTV_HomePageTemplate_Takeover     `protobuf:"bytes,2,opt,name=takeover" json:"takeover,omitempty"`
	SingleGame    *CSteamTV_HomePageTemplate_SingleGame   `protobuf:"bytes,3,opt,name=single_game,json=singleGame" json:"single_game,omitempty"`
	GameList      *CSteamTV_HomePageTemplate_GameList     `protobuf:"bytes,4,opt,name=game_list,json=gameList" json:"game_list,omitempty"`
	QuickExplore  *CSteamTV_HomePageTemplate_QuickExplore `protobuf:"bytes,5,opt,name=quick_explore,json=quickExplore" json:"quick_explore,omitempty"`
	ConveyorBelt  *CSteamTV_HomePageTemplate_ConveyorBelt `protobuf:"bytes,6,opt,name=conveyor_belt,json=conveyorBelt" json:"conveyor_belt,omitempty"`
	WatchParty    *CSteamTV_HomePageTemplate_WatchParty   `protobuf:"bytes,7,opt,name=watch_party,json=watchParty" json:"watch_party,omitempty"`
	Developer     *CSteamTV_HomePageTemplate_Developer    `protobuf:"bytes,8,opt,name=developer" json:"developer,omitempty"`
	Event         *CSteamTV_HomePageTemplate_Event        `protobuf:"bytes,9,opt,name=event" json:"event,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CSteamTV_HomePageContentRow) Reset() {
	*x = CSteamTV_HomePageContentRow{}
	mi := &file_service_steamtv_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamTV_HomePageContentRow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_HomePageContentRow) ProtoMessage() {}

func (x *CSteamTV_HomePageContentRow) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamtv_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_HomePageContentRow.ProtoReflect.Descriptor instead.
func (*CSteamTV_HomePageContentRow) Descriptor() ([]byte, []int) {
	return file_service_steamtv_proto_rawDescGZIP(), []int{56}
}

func (x *CSteamTV_HomePageContentRow) GetTemplateType() int32 {
	if x != nil && x.TemplateType != nil {
		return *x.TemplateType
	}
	return 0
}

func (x *CSteamTV_HomePageContentRow) GetTakeover() *CSteamTV_HomePageTemplate_Takeover {
	if x != nil {
		return x.Takeover
	}
	return nil
}

func (x *CSteamTV_HomePageContentRow) GetSingleGame() *CSteamTV_HomePageTemplate_SingleGame {
	if x != nil {
		return x.SingleGame
	}
	return nil
}

func (x *CSteamTV_HomePageContentRow) GetGameList() *CSteamTV_HomePageTemplate_GameList {
	if x != nil {
		return x.GameList
	}
	return nil
}

func (x *CSteamTV_HomePageContentRow) GetQuickExplore() *CSteamTV_HomePageTemplate_QuickExplore {
	if x != nil {
		return x.QuickExplore
	}
	return nil
}

func (x *CSteamTV_HomePageContentRow) GetConveyorBelt() *CSteamTV_HomePageTemplate_ConveyorBelt {
	if x != nil {
		return x.ConveyorBelt
	}
	return nil
}

func (x *CSteamTV_HomePageContentRow) GetWatchParty() *CSteamTV_HomePageTemplate_WatchParty {
	if x != nil {
		return x.WatchParty
	}
	return nil
}

func (x *CSteamTV_HomePageContentRow) GetDeveloper() *CSteamTV_HomePageTemplate_Developer {
	if x != nil {
		return x.Developer
	}
	return nil
}

func (x *CSteamTV_HomePageContentRow) GetEvent() *CSteamTV_HomePageTemplate_Event {
	if x != nil {
		return x.Event
	}
	return nil
}

type CSteamTV_HomePageTemplate_ConveyorBelt struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	Broadcasts    []*GetBroadcastChannelEntry `protobuf:"bytes,1,rep,name=broadcasts" json:"broadcasts,omitempty"`
	Title         *string                     `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CSteamTV_HomePageTemplate_ConveyorBelt) Reset() {
	*x = CSteamTV_HomePageTemplate_ConveyorBelt{}
	mi := &file_service_steamtv_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamTV_HomePageTemplate_ConveyorBelt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_HomePageTemplate_ConveyorBelt) ProtoMessage() {}

func (x *CSteamTV_HomePageTemplate_ConveyorBelt) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamtv_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_HomePageTemplate_ConveyorBelt.ProtoReflect.Descriptor instead.
func (*CSteamTV_HomePageTemplate_ConveyorBelt) Descriptor() ([]byte, []int) {
	return file_service_steamtv_proto_rawDescGZIP(), []int{57}
}

func (x *CSteamTV_HomePageTemplate_ConveyorBelt) GetBroadcasts() []*GetBroadcastChannelEntry {
	if x != nil {
		return x.Broadcasts
	}
	return nil
}

func (x *CSteamTV_HomePageTemplate_ConveyorBelt) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

type CSteamTV_HomePageTemplate_Developer struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Broadcast     *GetBroadcastChannelEntry `protobuf:"bytes,1,opt,name=broadcast" json:"broadcast,omitempty"`
	Title         *string                   `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CSteamTV_HomePageTemplate_Developer) Reset() {
	*x = CSteamTV_HomePageTemplate_Developer{}
	mi := &file_service_steamtv_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamTV_HomePageTemplate_Developer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_HomePageTemplate_Developer) ProtoMessage() {}

func (x *CSteamTV_HomePageTemplate_Developer) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamtv_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_HomePageTemplate_Developer.ProtoReflect.Descriptor instead.
func (*CSteamTV_HomePageTemplate_Developer) Descriptor() ([]byte, []int) {
	return file_service_steamtv_proto_rawDescGZIP(), []int{58}
}

func (x *CSteamTV_HomePageTemplate_Developer) GetBroadcast() *GetBroadcastChannelEntry {
	if x != nil {
		return x.Broadcast
	}
	return nil
}

func (x *CSteamTV_HomePageTemplate_Developer) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

type CSteamTV_HomePageTemplate_Event struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Title         *string                `protobuf:"bytes,1,opt,name=title" json:"title,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CSteamTV_HomePageTemplate_Event) Reset() {
	*x = CSteamTV_HomePageTemplate_Event{}
	mi := &file_service_steamtv_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamTV_HomePageTemplate_Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_HomePageTemplate_Event) ProtoMessage() {}

func (x *CSteamTV_HomePageTemplate_Event) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamtv_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_HomePageTemplate_Event.ProtoReflect.Descriptor instead.
func (*CSteamTV_HomePageTemplate_Event) Descriptor() ([]byte, []int) {
	return file_service_steamtv_proto_rawDescGZIP(), []int{59}
}

func (x *CSteamTV_HomePageTemplate_Event) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

type CSteamTV_HomePageTemplate_GameList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Entries       []*GameListEntry       `protobuf:"bytes,1,rep,name=entries" json:"entries,omitempty"`
	Title         *string                `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CSteamTV_HomePageTemplate_GameList) Reset() {
	*x = CSteamTV_HomePageTemplate_GameList{}
	mi := &file_service_steamtv_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamTV_HomePageTemplate_GameList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_HomePageTemplate_GameList) ProtoMessage() {}

func (x *CSteamTV_HomePageTemplate_GameList) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamtv_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_HomePageTemplate_GameList.ProtoReflect.Descriptor instead.
func (*CSteamTV_HomePageTemplate_GameList) Descriptor() ([]byte, []int) {
	return file_service_steamtv_proto_rawDescGZIP(), []int{60}
}

func (x *CSteamTV_HomePageTemplate_GameList) GetEntries() []*GameListEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

func (x *CSteamTV_HomePageTemplate_GameList) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

type CSteamTV_HomePageTemplate_QuickExplore struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	Broadcasts    []*GetBroadcastChannelEntry `protobuf:"bytes,1,rep,name=broadcasts" json:"broadcasts,omitempty"`
	Title         *string                     `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CSteamTV_HomePageTemplate_QuickExplore) Reset() {
	*x = CSteamTV_HomePageTemplate_QuickExplore{}
	mi := &file_service_steamtv_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamTV_HomePageTemplate_QuickExplore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_HomePageTemplate_QuickExplore) ProtoMessage() {}

func (x *CSteamTV_HomePageTemplate_QuickExplore) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamtv_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_HomePageTemplate_QuickExplore.ProtoReflect.Descriptor instead.
func (*CSteamTV_HomePageTemplate_QuickExplore) Descriptor() ([]byte, []int) {
	return file_service_steamtv_proto_rawDescGZIP(), []int{61}
}

func (x *CSteamTV_HomePageTemplate_QuickExplore) GetBroadcasts() []*GetBroadcastChannelEntry {
	if x != nil {
		return x.Broadcasts
	}
	return nil
}

func (x *CSteamTV_HomePageTemplate_QuickExplore) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

type CSteamTV_HomePageTemplate_SingleGame struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	Broadcasts    []*GetBroadcastChannelEntry `protobuf:"bytes,1,rep,name=broadcasts" json:"broadcasts,omitempty"`
	Appid         *uint32                     `protobuf:"varint,2,opt,name=appid" json:"appid,omitempty"`
	Title         *string                     `protobuf:"bytes,3,opt,name=title" json:"title,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CSteamTV_HomePageTemplate_SingleGame) Reset() {
	*x = CSteamTV_HomePageTemplate_SingleGame{}
	mi := &file_service_steamtv_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamTV_HomePageTemplate_SingleGame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_HomePageTemplate_SingleGame) ProtoMessage() {}

func (x *CSteamTV_HomePageTemplate_SingleGame) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamtv_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_HomePageTemplate_SingleGame.ProtoReflect.Descriptor instead.
func (*CSteamTV_HomePageTemplate_SingleGame) Descriptor() ([]byte, []int) {
	return file_service_steamtv_proto_rawDescGZIP(), []int{62}
}

func (x *CSteamTV_HomePageTemplate_SingleGame) GetBroadcasts() []*GetBroadcastChannelEntry {
	if x != nil {
		return x.Broadcasts
	}
	return nil
}

func (x *CSteamTV_HomePageTemplate_SingleGame) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CSteamTV_HomePageTemplate_SingleGame) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

type CSteamTV_HomePageTemplate_Takeover struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	Broadcasts    []*GetBroadcastChannelEntry `protobuf:"bytes,1,rep,name=broadcasts" json:"broadcasts,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CSteamTV_HomePageTemplate_Takeover) Reset() {
	*x = CSteamTV_HomePageTemplate_Takeover{}
	mi := &file_service_steamtv_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamTV_HomePageTemplate_Takeover) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_HomePageTemplate_Takeover) ProtoMessage() {}

func (x *CSteamTV_HomePageTemplate_Takeover) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamtv_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_HomePageTemplate_Takeover.ProtoReflect.Descriptor instead.
func (*CSteamTV_HomePageTemplate_Takeover) Descriptor() ([]byte, []int) {
	return file_service_steamtv_proto_rawDescGZIP(), []int{63}
}

func (x *CSteamTV_HomePageTemplate_Takeover) GetBroadcasts() []*GetBroadcastChannelEntry {
	if x != nil {
		return x.Broadcasts
	}
	return nil
}

type CSteamTV_HomePageTemplate_WatchParty struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Broadcast     *GetBroadcastChannelEntry `protobuf:"bytes,1,opt,name=broadcast" json:"broadcast,omitempty"`
	Title         *string                   `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	ChatGroupId   *uint64                   `protobuf:"varint,3,opt,name=chat_group_id,json=chatGroupId" json:"chat_group_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CSteamTV_HomePageTemplate_WatchParty) Reset() {
	*x = CSteamTV_HomePageTemplate_WatchParty{}
	mi := &file_service_steamtv_proto_msgTypes[64]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamTV_HomePageTemplate_WatchParty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_HomePageTemplate_WatchParty) ProtoMessage() {}

func (x *CSteamTV_HomePageTemplate_WatchParty) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamtv_proto_msgTypes[64]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_HomePageTemplate_WatchParty.ProtoReflect.Descriptor instead.
func (*CSteamTV_HomePageTemplate_WatchParty) Descriptor() ([]byte, []int) {
	return file_service_steamtv_proto_rawDescGZIP(), []int{64}
}

func (x *CSteamTV_HomePageTemplate_WatchParty) GetBroadcast() *GetBroadcastChannelEntry {
	if x != nil {
		return x.Broadcast
	}
	return nil
}

func (x *CSteamTV_HomePageTemplate_WatchParty) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *CSteamTV_HomePageTemplate_WatchParty) GetChatGroupId() uint64 {
	if x != nil && x.ChatGroupId != nil {
		return *x.ChatGroupId
	}
	return 0
}

type CSteamTV_JoinChat_Request struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	BroadcastChannelId *uint64                `protobuf:"fixed64,1,opt,name=broadcast_channel_id,json=broadcastChannelId" json:"broadcast_channel_id,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *CSteamTV_JoinChat_Request) Reset() {
	*x = CSteamTV_JoinChat_Request{}
	mi := &file_service_steamtv_proto_msgTypes[65]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamTV_JoinChat_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_JoinChat_Request) ProtoMessage() {}

func (x *CSteamTV_JoinChat_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamtv_proto_msgTypes[65]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_JoinChat_Request.ProtoReflect.Descriptor instead.
func (*CSteamTV_JoinChat_Request) Descriptor() ([]byte, []int) {
	return file_service_steamtv_proto_rawDescGZIP(), []int{65}
}

func (x *CSteamTV_JoinChat_Request) GetBroadcastChannelId() uint64 {
	if x != nil && x.BroadcastChannelId != nil {
		return *x.BroadcastChannelId
	}
	return 0
}

type CSteamTV_JoinChat_Response struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	ChatId          *uint64                `protobuf:"fixed64,1,opt,name=chat_id,json=chatId" json:"chat_id,omitempty"`
	ViewUrlTemplate *string                `protobuf:"bytes,2,opt,name=view_url_template,json=viewUrlTemplate" json:"view_url_template,omitempty"`
	FlairGroupIds   []uint64               `protobuf:"varint,3,rep,name=flair_group_ids,json=flairGroupIds" json:"flair_group_ids,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CSteamTV_JoinChat_Response) Reset() {
	*x = CSteamTV_JoinChat_Response{}
	mi := &file_service_steamtv_proto_msgTypes[66]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamTV_JoinChat_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_JoinChat_Response) ProtoMessage() {}

func (x *CSteamTV_JoinChat_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamtv_proto_msgTypes[66]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_JoinChat_Response.ProtoReflect.Descriptor instead.
func (*CSteamTV_JoinChat_Response) Descriptor() ([]byte, []int) {
	return file_service_steamtv_proto_rawDescGZIP(), []int{66}
}

func (x *CSteamTV_JoinChat_Response) GetChatId() uint64 {
	if x != nil && x.ChatId != nil {
		return *x.ChatId
	}
	return 0
}

func (x *CSteamTV_JoinChat_Response) GetViewUrlTemplate() string {
	if x != nil && x.ViewUrlTemplate != nil {
		return *x.ViewUrlTemplate
	}
	return ""
}

func (x *CSteamTV_JoinChat_Response) GetFlairGroupIds() []uint64 {
	if x != nil {
		return x.FlairGroupIds
	}
	return nil
}

type CSteamTV_ReportBroadcastChannel_Request struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	BroadcastChannelId *uint64                `protobuf:"fixed64,1,opt,name=broadcast_channel_id,json=broadcastChannelId" json:"broadcast_channel_id,omitempty"`
	Reason             *string                `protobuf:"bytes,2,opt,name=reason" json:"reason,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *CSteamTV_ReportBroadcastChannel_Request) Reset() {
	*x = CSteamTV_ReportBroadcastChannel_Request{}
	mi := &file_service_steamtv_proto_msgTypes[67]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamTV_ReportBroadcastChannel_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_ReportBroadcastChannel_Request) ProtoMessage() {}

func (x *CSteamTV_ReportBroadcastChannel_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamtv_proto_msgTypes[67]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_ReportBroadcastChannel_Request.ProtoReflect.Descriptor instead.
func (*CSteamTV_ReportBroadcastChannel_Request) Descriptor() ([]byte, []int) {
	return file_service_steamtv_proto_rawDescGZIP(), []int{67}
}

func (x *CSteamTV_ReportBroadcastChannel_Request) GetBroadcastChannelId() uint64 {
	if x != nil && x.BroadcastChannelId != nil {
		return *x.BroadcastChannelId
	}
	return 0
}

func (x *CSteamTV_ReportBroadcastChannel_Request) GetReason() string {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return ""
}

type CSteamTV_ReportBroadcastChannel_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CSteamTV_ReportBroadcastChannel_Response) Reset() {
	*x = CSteamTV_ReportBroadcastChannel_Response{}
	mi := &file_service_steamtv_proto_msgTypes[68]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamTV_ReportBroadcastChannel_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_ReportBroadcastChannel_Response) ProtoMessage() {}

func (x *CSteamTV_ReportBroadcastChannel_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamtv_proto_msgTypes[68]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_ReportBroadcastChannel_Response.ProtoReflect.Descriptor instead.
func (*CSteamTV_ReportBroadcastChannel_Response) Descriptor() ([]byte, []int) {
	return file_service_steamtv_proto_rawDescGZIP(), []int{68}
}

type CSteamTV_Search_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Term          *string                `protobuf:"bytes,1,opt,name=term" json:"term,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CSteamTV_Search_Request) Reset() {
	*x = CSteamTV_Search_Request{}
	mi := &file_service_steamtv_proto_msgTypes[69]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamTV_Search_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_Search_Request) ProtoMessage() {}

func (x *CSteamTV_Search_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamtv_proto_msgTypes[69]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_Search_Request.ProtoReflect.Descriptor instead.
func (*CSteamTV_Search_Request) Descriptor() ([]byte, []int) {
	return file_service_steamtv_proto_rawDescGZIP(), []int{69}
}

func (x *CSteamTV_Search_Request) GetTerm() string {
	if x != nil && x.Term != nil {
		return *x.Term
	}
	return ""
}

type CSteamTV_Search_Response struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	Results       []*GetBroadcastChannelEntry `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CSteamTV_Search_Response) Reset() {
	*x = CSteamTV_Search_Response{}
	mi := &file_service_steamtv_proto_msgTypes[70]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamTV_Search_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_Search_Response) ProtoMessage() {}

func (x *CSteamTV_Search_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamtv_proto_msgTypes[70]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_Search_Response.ProtoReflect.Descriptor instead.
func (*CSteamTV_Search_Response) Descriptor() ([]byte, []int) {
	return file_service_steamtv_proto_rawDescGZIP(), []int{70}
}

func (x *CSteamTV_Search_Response) GetResults() []*GetBroadcastChannelEntry {
	if x != nil {
		return x.Results
	}
	return nil
}

type CSteamTV_SetBroadcastChannelImage_Request struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	BroadcastChannelId *uint64                `protobuf:"fixed64,1,opt,name=broadcast_channel_id,json=broadcastChannelId" json:"broadcast_channel_id,omitempty"`
	ImageType          *int32                 `protobuf:"varint,2,opt,name=image_type,json=imageType" json:"image_type,omitempty"`
	ImageIndex         *uint32                `protobuf:"varint,3,opt,name=image_index,json=imageIndex" json:"image_index,omitempty"`
	ImageWidth         *uint32                `protobuf:"varint,4,opt,name=image_width,json=imageWidth" json:"image_width,omitempty"`
	ImageHeight        *uint32                `protobuf:"varint,5,opt,name=image_height,json=imageHeight" json:"image_height,omitempty"`
	FileSize           *uint32                `protobuf:"varint,6,opt,name=file_size,json=fileSize" json:"file_size,omitempty"`
	FileExtension      *string                `protobuf:"bytes,7,opt,name=file_extension,json=fileExtension" json:"file_extension,omitempty"`
	FileHash           *string                `protobuf:"bytes,8,opt,name=file_hash,json=fileHash" json:"file_hash,omitempty"`
	Undo               *bool                  `protobuf:"varint,9,opt,name=undo" json:"undo,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *CSteamTV_SetBroadcastChannelImage_Request) Reset() {
	*x = CSteamTV_SetBroadcastChannelImage_Request{}
	mi := &file_service_steamtv_proto_msgTypes[71]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamTV_SetBroadcastChannelImage_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_SetBroadcastChannelImage_Request) ProtoMessage() {}

func (x *CSteamTV_SetBroadcastChannelImage_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamtv_proto_msgTypes[71]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_SetBroadcastChannelImage_Request.ProtoReflect.Descriptor instead.
func (*CSteamTV_SetBroadcastChannelImage_Request) Descriptor() ([]byte, []int) {
	return file_service_steamtv_proto_rawDescGZIP(), []int{71}
}

func (x *CSteamTV_SetBroadcastChannelImage_Request) GetBroadcastChannelId() uint64 {
	if x != nil && x.BroadcastChannelId != nil {
		return *x.BroadcastChannelId
	}
	return 0
}

func (x *CSteamTV_SetBroadcastChannelImage_Request) GetImageType() int32 {
	if x != nil && x.ImageType != nil {
		return *x.ImageType
	}
	return 0
}

func (x *CSteamTV_SetBroadcastChannelImage_Request) GetImageIndex() uint32 {
	if x != nil && x.ImageIndex != nil {
		return *x.ImageIndex
	}
	return 0
}

func (x *CSteamTV_SetBroadcastChannelImage_Request) GetImageWidth() uint32 {
	if x != nil && x.ImageWidth != nil {
		return *x.ImageWidth
	}
	return 0
}

func (x *CSteamTV_SetBroadcastChannelImage_Request) GetImageHeight() uint32 {
	if x != nil && x.ImageHeight != nil {
		return *x.ImageHeight
	}
	return 0
}

func (x *CSteamTV_SetBroadcastChannelImage_Request) GetFileSize() uint32 {
	if x != nil && x.FileSize != nil {
		return *x.FileSize
	}
	return 0
}

func (x *CSteamTV_SetBroadcastChannelImage_Request) GetFileExtension() string {
	if x != nil && x.FileExtension != nil {
		return *x.FileExtension
	}
	return ""
}

func (x *CSteamTV_SetBroadcastChannelImage_Request) GetFileHash() string {
	if x != nil && x.FileHash != nil {
		return *x.FileHash
	}
	return ""
}

func (x *CSteamTV_SetBroadcastChannelImage_Request) GetUndo() bool {
	if x != nil && x.Undo != nil {
		return *x.Undo
	}
	return false
}

type CSteamTV_SetBroadcastChannelImage_Response struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	ReplaceImageHash *string                `protobuf:"bytes,1,opt,name=replace_image_hash,json=replaceImageHash" json:"replace_image_hash,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CSteamTV_SetBroadcastChannelImage_Response) Reset() {
	*x = CSteamTV_SetBroadcastChannelImage_Response{}
	mi := &file_service_steamtv_proto_msgTypes[72]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamTV_SetBroadcastChannelImage_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_SetBroadcastChannelImage_Response) ProtoMessage() {}

func (x *CSteamTV_SetBroadcastChannelImage_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamtv_proto_msgTypes[72]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_SetBroadcastChannelImage_Response.ProtoReflect.Descriptor instead.
func (*CSteamTV_SetBroadcastChannelImage_Response) Descriptor() ([]byte, []int) {
	return file_service_steamtv_proto_rawDescGZIP(), []int{72}
}

func (x *CSteamTV_SetBroadcastChannelImage_Response) GetReplaceImageHash() string {
	if x != nil && x.ReplaceImageHash != nil {
		return *x.ReplaceImageHash
	}
	return ""
}

type CSteamTV_SetBroadcastChannelLinkRegions_Request struct {
	state              protoimpl.MessageState                                   `protogen:"open.v1"`
	BroadcastChannelId *uint64                                                  `protobuf:"fixed64,1,opt,name=broadcast_channel_id,json=broadcastChannelId" json:"broadcast_channel_id,omitempty"`
	Links              []*CSteamTV_SetBroadcastChannelLinkRegions_Request_Links `protobuf:"bytes,2,rep,name=links" json:"links,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *CSteamTV_SetBroadcastChannelLinkRegions_Request) Reset() {
	*x = CSteamTV_SetBroadcastChannelLinkRegions_Request{}
	mi := &file_service_steamtv_proto_msgTypes[73]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamTV_SetBroadcastChannelLinkRegions_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_SetBroadcastChannelLinkRegions_Request) ProtoMessage() {}

func (x *CSteamTV_SetBroadcastChannelLinkRegions_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamtv_proto_msgTypes[73]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_SetBroadcastChannelLinkRegions_Request.ProtoReflect.Descriptor instead.
func (*CSteamTV_SetBroadcastChannelLinkRegions_Request) Descriptor() ([]byte, []int) {
	return file_service_steamtv_proto_rawDescGZIP(), []int{73}
}

func (x *CSteamTV_SetBroadcastChannelLinkRegions_Request) GetBroadcastChannelId() uint64 {
	if x != nil && x.BroadcastChannelId != nil {
		return *x.BroadcastChannelId
	}
	return 0
}

func (x *CSteamTV_SetBroadcastChannelLinkRegions_Request) GetLinks() []*CSteamTV_SetBroadcastChannelLinkRegions_Request_Links {
	if x != nil {
		return x.Links
	}
	return nil
}

type CSteamTV_SetBroadcastChannelLinkRegions_Request_Links struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	LinkIndex       *uint32                `protobuf:"varint,1,opt,name=link_index,json=linkIndex" json:"link_index,omitempty"`
	Url             *string                `protobuf:"bytes,2,opt,name=url" json:"url,omitempty"`
	LinkDescription *string                `protobuf:"bytes,3,opt,name=link_description,json=linkDescription" json:"link_description,omitempty"`
	Left            *uint32                `protobuf:"varint,4,opt,name=left" json:"left,omitempty"`
	Top             *uint32                `protobuf:"varint,5,opt,name=top" json:"top,omitempty"`
	Width           *uint32                `protobuf:"varint,6,opt,name=width" json:"width,omitempty"`
	Height          *uint32                `protobuf:"varint,7,opt,name=height" json:"height,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CSteamTV_SetBroadcastChannelLinkRegions_Request_Links) Reset() {
	*x = CSteamTV_SetBroadcastChannelLinkRegions_Request_Links{}
	mi := &file_service_steamtv_proto_msgTypes[74]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamTV_SetBroadcastChannelLinkRegions_Request_Links) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_SetBroadcastChannelLinkRegions_Request_Links) ProtoMessage() {}

func (x *CSteamTV_SetBroadcastChannelLinkRegions_Request_Links) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamtv_proto_msgTypes[74]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_SetBroadcastChannelLinkRegions_Request_Links.ProtoReflect.Descriptor instead.
func (*CSteamTV_SetBroadcastChannelLinkRegions_Request_Links) Descriptor() ([]byte, []int) {
	return file_service_steamtv_proto_rawDescGZIP(), []int{74}
}

func (x *CSteamTV_SetBroadcastChannelLinkRegions_Request_Links) GetLinkIndex() uint32 {
	if x != nil && x.LinkIndex != nil {
		return *x.LinkIndex
	}
	return 0
}

func (x *CSteamTV_SetBroadcastChannelLinkRegions_Request_Links) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *CSteamTV_SetBroadcastChannelLinkRegions_Request_Links) GetLinkDescription() string {
	if x != nil && x.LinkDescription != nil {
		return *x.LinkDescription
	}
	return ""
}

func (x *CSteamTV_SetBroadcastChannelLinkRegions_Request_Links) GetLeft() uint32 {
	if x != nil && x.Left != nil {
		return *x.Left
	}
	return 0
}

func (x *CSteamTV_SetBroadcastChannelLinkRegions_Request_Links) GetTop() uint32 {
	if x != nil && x.Top != nil {
		return *x.Top
	}
	return 0
}

func (x *CSteamTV_SetBroadcastChannelLinkRegions_Request_Links) GetWidth() uint32 {
	if x != nil && x.Width != nil {
		return *x.Width
	}
	return 0
}

func (x *CSteamTV_SetBroadcastChannelLinkRegions_Request_Links) GetHeight() uint32 {
	if x != nil && x.Height != nil {
		return *x.Height
	}
	return 0
}

type CSteamTV_SetBroadcastChannelLinkRegions_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CSteamTV_SetBroadcastChannelLinkRegions_Response) Reset() {
	*x = CSteamTV_SetBroadcastChannelLinkRegions_Response{}
	mi := &file_service_steamtv_proto_msgTypes[75]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamTV_SetBroadcastChannelLinkRegions_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_SetBroadcastChannelLinkRegions_Response) ProtoMessage() {}

func (x *CSteamTV_SetBroadcastChannelLinkRegions_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamtv_proto_msgTypes[75]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_SetBroadcastChannelLinkRegions_Response.ProtoReflect.Descriptor instead.
func (*CSteamTV_SetBroadcastChannelLinkRegions_Response) Descriptor() ([]byte, []int) {
	return file_service_steamtv_proto_rawDescGZIP(), []int{75}
}

type CSteamTV_SetBroadcastChannelProfile_Request struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	BroadcastChannelId *uint64                `protobuf:"fixed64,1,opt,name=broadcast_channel_id,json=broadcastChannelId" json:"broadcast_channel_id,omitempty"`
	Name               *string                `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Language           *string                `protobuf:"bytes,3,opt,name=language" json:"language,omitempty"`
	Headline           *string                `protobuf:"bytes,4,opt,name=headline" json:"headline,omitempty"`
	Summary            *string                `protobuf:"bytes,5,opt,name=summary" json:"summary,omitempty"`
	AvatarHash         *string                `protobuf:"bytes,6,opt,name=avatar_hash,json=avatarHash" json:"avatar_hash,omitempty"`
	Schedule           *string                `protobuf:"bytes,7,opt,name=schedule" json:"schedule,omitempty"`
	Rules              *string                `protobuf:"bytes,8,opt,name=rules" json:"rules,omitempty"`
	Panels             *string                `protobuf:"bytes,9,opt,name=panels" json:"panels,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *CSteamTV_SetBroadcastChannelProfile_Request) Reset() {
	*x = CSteamTV_SetBroadcastChannelProfile_Request{}
	mi := &file_service_steamtv_proto_msgTypes[76]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamTV_SetBroadcastChannelProfile_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_SetBroadcastChannelProfile_Request) ProtoMessage() {}

func (x *CSteamTV_SetBroadcastChannelProfile_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamtv_proto_msgTypes[76]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_SetBroadcastChannelProfile_Request.ProtoReflect.Descriptor instead.
func (*CSteamTV_SetBroadcastChannelProfile_Request) Descriptor() ([]byte, []int) {
	return file_service_steamtv_proto_rawDescGZIP(), []int{76}
}

func (x *CSteamTV_SetBroadcastChannelProfile_Request) GetBroadcastChannelId() uint64 {
	if x != nil && x.BroadcastChannelId != nil {
		return *x.BroadcastChannelId
	}
	return 0
}

func (x *CSteamTV_SetBroadcastChannelProfile_Request) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CSteamTV_SetBroadcastChannelProfile_Request) GetLanguage() string {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return ""
}

func (x *CSteamTV_SetBroadcastChannelProfile_Request) GetHeadline() string {
	if x != nil && x.Headline != nil {
		return *x.Headline
	}
	return ""
}

func (x *CSteamTV_SetBroadcastChannelProfile_Request) GetSummary() string {
	if x != nil && x.Summary != nil {
		return *x.Summary
	}
	return ""
}

func (x *CSteamTV_SetBroadcastChannelProfile_Request) GetAvatarHash() string {
	if x != nil && x.AvatarHash != nil {
		return *x.AvatarHash
	}
	return ""
}

func (x *CSteamTV_SetBroadcastChannelProfile_Request) GetSchedule() string {
	if x != nil && x.Schedule != nil {
		return *x.Schedule
	}
	return ""
}

func (x *CSteamTV_SetBroadcastChannelProfile_Request) GetRules() string {
	if x != nil && x.Rules != nil {
		return *x.Rules
	}
	return ""
}

func (x *CSteamTV_SetBroadcastChannelProfile_Request) GetPanels() string {
	if x != nil && x.Panels != nil {
		return *x.Panels
	}
	return ""
}

type CSteamTV_SetBroadcastChannelProfile_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CSteamTV_SetBroadcastChannelProfile_Response) Reset() {
	*x = CSteamTV_SetBroadcastChannelProfile_Response{}
	mi := &file_service_steamtv_proto_msgTypes[77]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamTV_SetBroadcastChannelProfile_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_SetBroadcastChannelProfile_Response) ProtoMessage() {}

func (x *CSteamTV_SetBroadcastChannelProfile_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamtv_proto_msgTypes[77]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_SetBroadcastChannelProfile_Response.ProtoReflect.Descriptor instead.
func (*CSteamTV_SetBroadcastChannelProfile_Response) Descriptor() ([]byte, []int) {
	return file_service_steamtv_proto_rawDescGZIP(), []int{77}
}

type CSteamTV_SetSteamTVUserSettings_Request struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	StreamLiveEmail        *bool                  `protobuf:"varint,1,opt,name=stream_live_email,json=streamLiveEmail" json:"stream_live_email,omitempty"`
	StreamLiveNotification *bool                  `protobuf:"varint,2,opt,name=stream_live_notification,json=streamLiveNotification" json:"stream_live_notification,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *CSteamTV_SetSteamTVUserSettings_Request) Reset() {
	*x = CSteamTV_SetSteamTVUserSettings_Request{}
	mi := &file_service_steamtv_proto_msgTypes[78]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamTV_SetSteamTVUserSettings_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_SetSteamTVUserSettings_Request) ProtoMessage() {}

func (x *CSteamTV_SetSteamTVUserSettings_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamtv_proto_msgTypes[78]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_SetSteamTVUserSettings_Request.ProtoReflect.Descriptor instead.
func (*CSteamTV_SetSteamTVUserSettings_Request) Descriptor() ([]byte, []int) {
	return file_service_steamtv_proto_rawDescGZIP(), []int{78}
}

func (x *CSteamTV_SetSteamTVUserSettings_Request) GetStreamLiveEmail() bool {
	if x != nil && x.StreamLiveEmail != nil {
		return *x.StreamLiveEmail
	}
	return false
}

func (x *CSteamTV_SetSteamTVUserSettings_Request) GetStreamLiveNotification() bool {
	if x != nil && x.StreamLiveNotification != nil {
		return *x.StreamLiveNotification
	}
	return false
}

type CSteamTV_SetSteamTVUserSettings_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CSteamTV_SetSteamTVUserSettings_Response) Reset() {
	*x = CSteamTV_SetSteamTVUserSettings_Response{}
	mi := &file_service_steamtv_proto_msgTypes[79]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamTV_SetSteamTVUserSettings_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_SetSteamTVUserSettings_Response) ProtoMessage() {}

func (x *CSteamTV_SetSteamTVUserSettings_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamtv_proto_msgTypes[79]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_SetSteamTVUserSettings_Response.ProtoReflect.Descriptor instead.
func (*CSteamTV_SetSteamTVUserSettings_Response) Descriptor() ([]byte, []int) {
	return file_service_steamtv_proto_rawDescGZIP(), []int{79}
}

type CSteamTV_SubscribeBroadcastChannel_Request struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	BroadcastChannelId *uint64                `protobuf:"fixed64,1,opt,name=broadcast_channel_id,json=broadcastChannelId" json:"broadcast_channel_id,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *CSteamTV_SubscribeBroadcastChannel_Request) Reset() {
	*x = CSteamTV_SubscribeBroadcastChannel_Request{}
	mi := &file_service_steamtv_proto_msgTypes[80]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamTV_SubscribeBroadcastChannel_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_SubscribeBroadcastChannel_Request) ProtoMessage() {}

func (x *CSteamTV_SubscribeBroadcastChannel_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamtv_proto_msgTypes[80]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_SubscribeBroadcastChannel_Request.ProtoReflect.Descriptor instead.
func (*CSteamTV_SubscribeBroadcastChannel_Request) Descriptor() ([]byte, []int) {
	return file_service_steamtv_proto_rawDescGZIP(), []int{80}
}

func (x *CSteamTV_SubscribeBroadcastChannel_Request) GetBroadcastChannelId() uint64 {
	if x != nil && x.BroadcastChannelId != nil {
		return *x.BroadcastChannelId
	}
	return 0
}

type CSteamTV_SubscribeBroadcastChannel_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IsSubscribed  *bool                  `protobuf:"varint,1,opt,name=is_subscribed,json=isSubscribed" json:"is_subscribed,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CSteamTV_SubscribeBroadcastChannel_Response) Reset() {
	*x = CSteamTV_SubscribeBroadcastChannel_Response{}
	mi := &file_service_steamtv_proto_msgTypes[81]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamTV_SubscribeBroadcastChannel_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_SubscribeBroadcastChannel_Response) ProtoMessage() {}

func (x *CSteamTV_SubscribeBroadcastChannel_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamtv_proto_msgTypes[81]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_SubscribeBroadcastChannel_Response.ProtoReflect.Descriptor instead.
func (*CSteamTV_SubscribeBroadcastChannel_Response) Descriptor() ([]byte, []int) {
	return file_service_steamtv_proto_rawDescGZIP(), []int{81}
}

func (x *CSteamTV_SubscribeBroadcastChannel_Response) GetIsSubscribed() bool {
	if x != nil && x.IsSubscribed != nil {
		return *x.IsSubscribed
	}
	return false
}

type GameListEntry struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Appid         *uint32                   `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	GameName      *string                   `protobuf:"bytes,2,opt,name=game_name,json=gameName" json:"game_name,omitempty"`
	Broadcast     *GetBroadcastChannelEntry `protobuf:"bytes,3,opt,name=broadcast" json:"broadcast,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GameListEntry) Reset() {
	*x = GameListEntry{}
	mi := &file_service_steamtv_proto_msgTypes[82]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GameListEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameListEntry) ProtoMessage() {}

func (x *GameListEntry) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamtv_proto_msgTypes[82]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameListEntry.ProtoReflect.Descriptor instead.
func (*GameListEntry) Descriptor() ([]byte, []int) {
	return file_service_steamtv_proto_rawDescGZIP(), []int{82}
}

func (x *GameListEntry) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *GameListEntry) GetGameName() string {
	if x != nil && x.GameName != nil {
		return *x.GameName
	}
	return ""
}

func (x *GameListEntry) GetBroadcast() *GetBroadcastChannelEntry {
	if x != nil {
		return x.Broadcast
	}
	return nil
}

type GetBroadcastChannelEntry struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	BroadcastChannelId *uint64                `protobuf:"fixed64,1,opt,name=broadcast_channel_id,json=broadcastChannelId" json:"broadcast_channel_id,omitempty"`
	UniqueName         *string                `protobuf:"bytes,2,opt,name=unique_name,json=uniqueName" json:"unique_name,omitempty"`
	Name               *string                `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Appid              *uint32                `protobuf:"varint,4,opt,name=appid" json:"appid,omitempty"`
	Viewers            *uint64                `protobuf:"varint,5,opt,name=viewers" json:"viewers,omitempty"`
	Views              *uint64                `protobuf:"varint,6,opt,name=views" json:"views,omitempty"`
	ThumbnailUrl       *string                `protobuf:"bytes,7,opt,name=thumbnail_url,json=thumbnailUrl" json:"thumbnail_url,omitempty"`
	Followers          *uint64                `protobuf:"varint,8,opt,name=followers" json:"followers,omitempty"`
	Headline           *string                `protobuf:"bytes,9,opt,name=headline" json:"headline,omitempty"`
	AvatarUrl          *string                `protobuf:"bytes,10,opt,name=avatar_url,json=avatarUrl" json:"avatar_url,omitempty"`
	BroadcasterSteamid *uint64                `protobuf:"fixed64,11,opt,name=broadcaster_steamid,json=broadcasterSteamid" json:"broadcaster_steamid,omitempty"`
	Subscribers        *uint64                `protobuf:"varint,12,opt,name=subscribers" json:"subscribers,omitempty"`
	BackgroundUrl      *string                `protobuf:"bytes,13,opt,name=background_url,json=backgroundUrl" json:"background_url,omitempty"`
	IsFeatured         *bool                  `protobuf:"varint,14,opt,name=is_featured,json=isFeatured" json:"is_featured,omitempty"`
	IsDisabled         *bool                  `protobuf:"varint,15,opt,name=is_disabled,json=isDisabled" json:"is_disabled,omitempty"`
	IsLive             *bool                  `protobuf:"varint,16,opt,name=is_live,json=isLive" json:"is_live,omitempty"`
	Language           *string                `protobuf:"bytes,17,opt,name=language" json:"language,omitempty"`
	Reports            *uint32                `protobuf:"varint,18,opt,name=reports" json:"reports,omitempty"`
	IsPartnered        *bool                  `protobuf:"varint,19,opt,name=is_partnered,json=isPartnered" json:"is_partnered,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *GetBroadcastChannelEntry) Reset() {
	*x = GetBroadcastChannelEntry{}
	mi := &file_service_steamtv_proto_msgTypes[83]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBroadcastChannelEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBroadcastChannelEntry) ProtoMessage() {}

func (x *GetBroadcastChannelEntry) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamtv_proto_msgTypes[83]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBroadcastChannelEntry.ProtoReflect.Descriptor instead.
func (*GetBroadcastChannelEntry) Descriptor() ([]byte, []int) {
	return file_service_steamtv_proto_rawDescGZIP(), []int{83}
}

func (x *GetBroadcastChannelEntry) GetBroadcastChannelId() uint64 {
	if x != nil && x.BroadcastChannelId != nil {
		return *x.BroadcastChannelId
	}
	return 0
}

func (x *GetBroadcastChannelEntry) GetUniqueName() string {
	if x != nil && x.UniqueName != nil {
		return *x.UniqueName
	}
	return ""
}

func (x *GetBroadcastChannelEntry) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *GetBroadcastChannelEntry) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *GetBroadcastChannelEntry) GetViewers() uint64 {
	if x != nil && x.Viewers != nil {
		return *x.Viewers
	}
	return 0
}

func (x *GetBroadcastChannelEntry) GetViews() uint64 {
	if x != nil && x.Views != nil {
		return *x.Views
	}
	return 0
}

func (x *GetBroadcastChannelEntry) GetThumbnailUrl() string {
	if x != nil && x.ThumbnailUrl != nil {
		return *x.ThumbnailUrl
	}
	return ""
}

func (x *GetBroadcastChannelEntry) GetFollowers() uint64 {
	if x != nil && x.Followers != nil {
		return *x.Followers
	}
	return 0
}

func (x *GetBroadcastChannelEntry) GetHeadline() string {
	if x != nil && x.Headline != nil {
		return *x.Headline
	}
	return ""
}

func (x *GetBroadcastChannelEntry) GetAvatarUrl() string {
	if x != nil && x.AvatarUrl != nil {
		return *x.AvatarUrl
	}
	return ""
}

func (x *GetBroadcastChannelEntry) GetBroadcasterSteamid() uint64 {
	if x != nil && x.BroadcasterSteamid != nil {
		return *x.BroadcasterSteamid
	}
	return 0
}

func (x *GetBroadcastChannelEntry) GetSubscribers() uint64 {
	if x != nil && x.Subscribers != nil {
		return *x.Subscribers
	}
	return 0
}

func (x *GetBroadcastChannelEntry) GetBackgroundUrl() string {
	if x != nil && x.BackgroundUrl != nil {
		return *x.BackgroundUrl
	}
	return ""
}

func (x *GetBroadcastChannelEntry) GetIsFeatured() bool {
	if x != nil && x.IsFeatured != nil {
		return *x.IsFeatured
	}
	return false
}

func (x *GetBroadcastChannelEntry) GetIsDisabled() bool {
	if x != nil && x.IsDisabled != nil {
		return *x.IsDisabled
	}
	return false
}

func (x *GetBroadcastChannelEntry) GetIsLive() bool {
	if x != nil && x.IsLive != nil {
		return *x.IsLive
	}
	return false
}

func (x *GetBroadcastChannelEntry) GetLanguage() string {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return ""
}

func (x *GetBroadcastChannelEntry) GetReports() uint32 {
	if x != nil && x.Reports != nil {
		return *x.Reports
	}
	return 0
}

func (x *GetBroadcastChannelEntry) GetIsPartnered() bool {
	if x != nil && x.IsPartnered != nil {
		return *x.IsPartnered
	}
	return false
}

var File_service_steamtv_proto protoreflect.FileDescriptor

const file_service_steamtv_proto_rawDesc = "" +
	"\n" +
	"\x15service_steamtv.proto\x1a\x11common_base.proto\"\xc6\x01\n" +
	"\x1bCSteamTV_AddChatBan_Request\x120\n" +
	"\x14broadcast_channel_id\x18\x01 \x01(\x06R\x12broadcastChannelId\x12'\n" +
	"\x0fchatter_steamid\x18\x02 \x01(\x06R\x0echatterSteamid\x12\x1a\n" +
	"\bduration\x18\x03 \x01(\rR\bduration\x12\x1c\n" +
	"\tpermanent\x18\x04 \x01(\bR\tpermanent\x12\x12\n" +
	"\x04undo\x18\x05 \x01(\bR\x04undo\"\x1e\n" +
	"\x1cCSteamTV_AddChatBan_Response\"\x96\x01\n" +
	"!CSteamTV_AddChatModerator_Request\x120\n" +
	"\x14broadcast_channel_id\x18\x01 \x01(\x06R\x12broadcastChannelId\x12+\n" +
	"\x11moderator_steamid\x18\x02 \x01(\x06R\x10moderatorSteamid\x12\x12\n" +
	"\x04undo\x18\x03 \x01(\bR\x04undo\"$\n" +
	"\"CSteamTV_AddChatModerator_Response\"w\n" +
	"\x1bCSteamTV_AddWordBan_Request\x120\n" +
	"\x14broadcast_channel_id\x18\x01 \x01(\x06R\x12broadcastChannelId\x12\x12\n" +
	"\x04word\x18\x02 \x01(\tR\x04word\x12\x12\n" +
	"\x04undo\x18\x03 \x01(\bR\x04undo\"\x1e\n" +
	"\x1cCSteamTV_AddWordBan_Response\"\x96\x01\n" +
	"\x19CSteamTV_AppCheer_Request\x12\x15\n" +
	"\x06app_id\x18\x01 \x01(\rR\x05appId\x12&\n" +
	"\x0fcheer_target_id\x18\x02 \x01(\x06R\rcheerTargetId\x12:\n" +
	"\x06cheers\x18\x03 \x03(\v2\".CSteamTV_AppCheer_SingleCheerTypeR\x06cheers\"N\n" +
	"\x1aCSteamTV_AppCheer_Response\x120\n" +
	"\x14aggregation_delay_ms\x18\x01 \x01(\rR\x12aggregationDelayMs\"e\n" +
	"!CSteamTV_AppCheer_SingleCheerType\x12\x1d\n" +
	"\n" +
	"cheer_type\x18\x01 \x01(\rR\tcheerType\x12!\n" +
	"\fcheer_amount\x18\x02 \x01(\rR\vcheerAmount\"\xe6\x02\n" +
	"\x1aCSteamTV_BroadcastClipInfo\x12*\n" +
	"\x11broadcast_clip_id\x18\x01 \x01(\x04R\x0fbroadcastClipId\x12\x1d\n" +
	"\n" +
	"channel_id\x18\x02 \x01(\x04R\tchannelId\x12\x15\n" +
	"\x06app_id\x18\x03 \x01(\rR\x05appId\x12/\n" +
	"\x13broadcaster_steamid\x18\x04 \x01(\x06R\x12broadcasterSteamid\x12'\n" +
	"\x0fcreator_steamid\x18\x05 \x01(\x06R\x0ecreatorSteamid\x12+\n" +
	"\x11video_description\x18\x06 \x01(\tR\x10videoDescription\x12\x1b\n" +
	"\tlive_time\x18\a \x01(\rR\bliveTime\x12\x1b\n" +
	"\tlength_ms\x18\b \x01(\rR\blengthMs\x12%\n" +
	"\x0ethumbnail_path\x18\t \x01(\tR\rthumbnailPath\"\xb7\x01\n" +
	"\x10CSteamTV_ChatBan\x12%\n" +
	"\x0eissuer_steamid\x18\x01 \x01(\x06R\rissuerSteamid\x12'\n" +
	"\x0fchatter_steamid\x18\x02 \x01(\x06R\x0echatterSteamid\x12!\n" +
	"\ftime_expires\x18\x03 \x01(\tR\vtimeExpires\x12\x1c\n" +
	"\tpermanent\x18\x04 \x01(\bR\tpermanent\x12\x12\n" +
	"\x04name\x18\x05 \x01(\tR\x04name\"F\n" +
	"\x16CSteamTV_ChatModerator\x12\x18\n" +
	"\asteamid\x18\x01 \x01(\x06R\asteamid\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\"J\n" +
	"'CSteamTV_CreateBroadcastChannel_Request\x12\x1f\n" +
	"\vunique_name\x18\x01 \x01(\tR\n" +
	"uniqueName\"\\\n" +
	"(CSteamTV_CreateBroadcastChannel_Response\x120\n" +
	"\x14broadcast_channel_id\x18\x01 \x01(\x06R\x12broadcastChannelId\"o\n" +
	"'CSteamTV_FollowBroadcastChannel_Request\x120\n" +
	"\x14broadcast_channel_id\x18\x01 \x01(\x06R\x12broadcastChannelId\x12\x12\n" +
	"\x04undo\x18\x02 \x01(\bR\x04undo\"K\n" +
	"(CSteamTV_FollowBroadcastChannel_Response\x12\x1f\n" +
	"\vis_followed\x18\x01 \x01(\bR\n" +
	"isFollowed\"\xff\x01\n" +
	"\rCSteamTV_Game\x12\x14\n" +
	"\x05appid\x18\x01 \x01(\rR\x05appid\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x14\n" +
	"\x05image\x18\x03 \x01(\tR\x05image\x12\x18\n" +
	"\aviewers\x18\x04 \x01(\x04R\aviewers\x125\n" +
	"\bchannels\x18\x05 \x03(\v2\x19.GetBroadcastChannelEntryR\bchannels\x12!\n" +
	"\frelease_date\x18\x06 \x01(\tR\vreleaseDate\x12\x1c\n" +
	"\tdeveloper\x18\a \x01(\tR\tdeveloper\x12\x1c\n" +
	"\tpublisher\x18\b \x01(\tR\tpublisher\"d\n" +
	"0CSteamTV_GetBroadcastChannelBroadcasters_Request\x120\n" +
	"\x14broadcast_channel_id\x18\x01 \x01(\x06R\x12broadcastChannelId\"\x97\x01\n" +
	"1CSteamTV_GetBroadcastChannelBroadcasters_Response\x12b\n" +
	"\fbroadcasters\x18\x01 \x03(\v2>.CSteamTV_GetBroadcastChannelBroadcasters_Response_BroadcasterR\fbroadcasters\"\x8c\x01\n" +
	"=CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster\x12\x18\n" +
	"\asteamid\x18\x01 \x01(\x06R\asteamid\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x1d\n" +
	"\n" +
	"rtmp_token\x18\x03 \x01(\tR\trtmpToken\"]\n" +
	")CSteamTV_GetBroadcastChannelClips_Request\x120\n" +
	"\x14broadcast_channel_id\x18\x01 \x01(\x06R\x12broadcastChannelId\"\x86\x01\n" +
	"*CSteamTV_GetBroadcastChannelClips_Response\x121\n" +
	"\x05clips\x18\x01 \x03(\v2\x1b.CSteamTV_BroadcastClipInfoR\x05clips\x12%\n" +
	"\x0ethumbnail_host\x18\x02 \x01(\tR\rthumbnailHost\"I\n" +
	"&CSteamTV_GetBroadcastChannelID_Request\x12\x1f\n" +
	"\vunique_name\x18\x01 \x01(\tR\n" +
	"uniqueName\"\x96\x01\n" +
	"'CSteamTV_GetBroadcastChannelID_Response\x120\n" +
	"\x14broadcast_channel_id\x18\x01 \x01(\x06R\x12broadcastChannelId\x12\x1f\n" +
	"\vunique_name\x18\x02 \x01(\tR\n" +
	"uniqueName\x12\x18\n" +
	"\asteamid\x18\x03 \x01(\x06R\asteamid\"\x89\x01\n" +
	"*CSteamTV_GetBroadcastChannelImages_Request\x120\n" +
	"\x14broadcast_channel_id\x18\x01 \x01(\x06R\x12broadcastChannelId\x12)\n" +
	"\vimage_types\x18\x02 \x03(\x05B\b\x82\xb5\x18\x04enumR\n" +
	"imageTypes\"z\n" +
	"+CSteamTV_GetBroadcastChannelImages_Response\x12K\n" +
	"\x06images\x18\x01 \x03(\v23.CSteamTV_GetBroadcastChannelImages_Response_ImagesR\x06images\"\x9d\x01\n" +
	"2CSteamTV_GetBroadcastChannelImages_Response_Images\x12'\n" +
	"\n" +
	"image_type\x18\x01 \x01(\x05B\b\x82\xb5\x18\x04enumR\timageType\x12\x1d\n" +
	"\n" +
	"image_path\x18\x02 \x01(\tR\timagePath\x12\x1f\n" +
	"\vimage_index\x18\x03 \x01(\rR\n" +
	"imageIndex\"c\n" +
	"/CSteamTV_GetBroadcastChannelInteraction_Request\x120\n" +
	"\x14broadcast_channel_id\x18\x01 \x01(\x06R\x12broadcastChannelId\"x\n" +
	"0CSteamTV_GetBroadcastChannelInteraction_Response\x12\x1f\n" +
	"\vis_followed\x18\x01 \x01(\bR\n" +
	"isFollowed\x12#\n" +
	"\ris_subscribed\x18\x02 \x01(\bR\fisSubscribed\"]\n" +
	")CSteamTV_GetBroadcastChannelLinks_Request\x120\n" +
	"\x14broadcast_channel_id\x18\x01 \x01(\x06R\x12broadcastChannelId\"u\n" +
	"*CSteamTV_GetBroadcastChannelLinks_Response\x12G\n" +
	"\x05links\x18\x01 \x03(\v21.CSteamTV_GetBroadcastChannelLinks_Response_LinksR\x05links\"\xe2\x01\n" +
	"0CSteamTV_GetBroadcastChannelLinks_Response_Links\x12\x1d\n" +
	"\n" +
	"link_index\x18\x01 \x01(\rR\tlinkIndex\x12\x10\n" +
	"\x03url\x18\x02 \x01(\tR\x03url\x12)\n" +
	"\x10link_description\x18\x03 \x01(\tR\x0flinkDescription\x12\x12\n" +
	"\x04left\x18\x04 \x01(\rR\x04left\x12\x10\n" +
	"\x03top\x18\x05 \x01(\rR\x03top\x12\x14\n" +
	"\x05width\x18\x06 \x01(\rR\x05width\x12\x16\n" +
	"\x06height\x18\a \x01(\rR\x06height\"_\n" +
	"+CSteamTV_GetBroadcastChannelProfile_Request\x120\n" +
	"\x14broadcast_channel_id\x18\x01 \x01(\x06R\x12broadcastChannelId\"\xc7\x02\n" +
	",CSteamTV_GetBroadcastChannelProfile_Response\x12\x1f\n" +
	"\vunique_name\x18\x01 \x01(\tR\n" +
	"uniqueName\x12#\n" +
	"\rowner_steamid\x18\x02 \x01(\x06R\fownerSteamid\x12\x12\n" +
	"\x04name\x18\x03 \x01(\tR\x04name\x12\x1a\n" +
	"\blanguage\x18\x04 \x01(\tR\blanguage\x12\x1a\n" +
	"\bheadline\x18\x05 \x01(\tR\bheadline\x12\x18\n" +
	"\asummary\x18\x06 \x01(\tR\asummary\x12\x1a\n" +
	"\bschedule\x18\a \x01(\tR\bschedule\x12\x14\n" +
	"\x05rules\x18\b \x01(\tR\x05rules\x12\x16\n" +
	"\x06panels\x18\t \x01(\tR\x06panels\x12!\n" +
	"\fis_partnered\x18\n" +
	" \x01(\bR\visPartnered\"^\n" +
	"*CSteamTV_GetBroadcastChannelStatus_Request\x120\n" +
	"\x14broadcast_channel_id\x18\x01 \x01(\x06R\x12broadcastChannelId\"\x96\x03\n" +
	"+CSteamTV_GetBroadcastChannelStatus_Response\x12\x17\n" +
	"\ais_live\x18\x01 \x01(\bR\x06isLive\x12\x1f\n" +
	"\vis_disabled\x18\x02 \x01(\bR\n" +
	"isDisabled\x12\x14\n" +
	"\x05appid\x18\x03 \x01(\rR\x05appid\x12\x18\n" +
	"\aviewers\x18\x04 \x01(\x04R\aviewers\x12\x14\n" +
	"\x05views\x18\x05 \x01(\x04R\x05views\x12/\n" +
	"\x13broadcaster_steamid\x18\x06 \x01(\x06R\x12broadcasterSteamid\x12#\n" +
	"\rthumbnail_url\x18\a \x01(\tR\fthumbnailUrl\x12\x1c\n" +
	"\tfollowers\x18\b \x01(\x04R\tfollowers\x12 \n" +
	"\vsubscribers\x18\t \x01(\x04R\vsubscribers\x12\x1f\n" +
	"\vunique_name\x18\n" +
	" \x01(\tR\n" +
	"uniqueName\x120\n" +
	"\x14broadcast_session_id\x18\v \x01(\x04R\x12broadcastSessionId\"r\n" +
	"\x1cCSteamTV_GetChannels_Request\x12&\n" +
	"\talgorithm\x18\x01 \x01(\x05B\b\x82\xb5\x18\x04enumR\talgorithm\x12\x14\n" +
	"\x05count\x18\x02 \x01(\rR\x05count\x12\x14\n" +
	"\x05appid\x18\x03 \x01(\rR\x05appid\"T\n" +
	"\x1dCSteamTV_GetChannels_Response\x123\n" +
	"\aresults\x18\x01 \x03(\v2\x19.GetBroadcastChannelEntryR\aresults\"P\n" +
	"\x1cCSteamTV_GetChatBans_Request\x120\n" +
	"\x14broadcast_channel_id\x18\x01 \x01(\x06R\x12broadcastChannelId\"L\n" +
	"\x1dCSteamTV_GetChatBans_Response\x12+\n" +
	"\aresults\x18\x01 \x03(\v2\x11.CSteamTV_ChatBanR\aresults\"V\n" +
	"\"CSteamTV_GetChatModerators_Request\x120\n" +
	"\x14broadcast_channel_id\x18\x01 \x01(\x06R\x12broadcastChannelId\"X\n" +
	"#CSteamTV_GetChatModerators_Response\x121\n" +
	"\aresults\x18\x01 \x03(\v2\x17.CSteamTV_ChatModeratorR\aresults\"&\n" +
	"$CSteamTV_GetFollowedChannels_Request\"\\\n" +
	"%CSteamTV_GetFollowedChannels_Response\x123\n" +
	"\aresults\x18\x01 \x03(\v2\x19.GetBroadcastChannelEntryR\aresults\"o\n" +
	"\x19CSteamTV_GetGames_Request\x12\x14\n" +
	"\x05appid\x18\x01 \x01(\rR\x05appid\x12&\n" +
	"\talgorithm\x18\x02 \x01(\x05B\b\x82\xb5\x18\x04enumR\talgorithm\x12\x14\n" +
	"\x05count\x18\x03 \x01(\rR\x05count\"F\n" +
	"\x1aCSteamTV_GetGames_Response\x12(\n" +
	"\aresults\x18\x01 \x03(\v2\x0e.CSteamTV_GameR\aresults\"&\n" +
	"$CSteamTV_GetHomePageContents_Request\"Y\n" +
	"%CSteamTV_GetHomePageContents_Response\x120\n" +
	"\x04rows\x18\x01 \x03(\v2\x1c.CSteamTV_HomePageContentRowR\x04rows\")\n" +
	"'CSteamTV_GetMyBroadcastChannels_Request\"_\n" +
	"(CSteamTV_GetMyBroadcastChannels_Response\x123\n" +
	"\aresults\x18\x01 \x03(\v2\x19.GetBroadcastChannelEntryR\aresults\")\n" +
	"'CSteamTV_GetSteamTVUserSettings_Request\"\x90\x01\n" +
	"(CSteamTV_GetSteamTVUserSettings_Response\x12*\n" +
	"\x11stream_live_email\x18\x01 \x01(\bR\x0fstreamLiveEmail\x128\n" +
	"\x18stream_live_notification\x18\x02 \x01(\bR\x16streamLiveNotification\"(\n" +
	"&CSteamTV_GetSubscribedChannels_Request\"^\n" +
	"'CSteamTV_GetSubscribedChannels_Response\x123\n" +
	"\aresults\x18\x01 \x03(\v2\x19.GetBroadcastChannelEntryR\aresults\"P\n" +
	"\x1cCSteamTV_GetWordBans_Request\x120\n" +
	"\x14broadcast_channel_id\x18\x01 \x01(\x06R\x12broadcastChannelId\"9\n" +
	"\x1dCSteamTV_GetWordBans_Response\x12\x18\n" +
	"\aresults\x18\x01 \x03(\tR\aresults\"\xf7\x04\n" +
	"\x1bCSteamTV_HomePageContentRow\x12-\n" +
	"\rtemplate_type\x18\x01 \x01(\x05B\b\x82\xb5\x18\x04enumR\ftemplateType\x12?\n" +
	"\btakeover\x18\x02 \x01(\v2#.CSteamTV_HomePageTemplate_TakeoverR\btakeover\x12F\n" +
	"\vsingle_game\x18\x03 \x01(\v2%.CSteamTV_HomePageTemplate_SingleGameR\n" +
	"singleGame\x12@\n" +
	"\tgame_list\x18\x04 \x01(\v2#.CSteamTV_HomePageTemplate_GameListR\bgameList\x12L\n" +
	"\rquick_explore\x18\x05 \x01(\v2'.CSteamTV_HomePageTemplate_QuickExploreR\fquickExplore\x12L\n" +
	"\rconveyor_belt\x18\x06 \x01(\v2'.CSteamTV_HomePageTemplate_ConveyorBeltR\fconveyorBelt\x12F\n" +
	"\vwatch_party\x18\a \x01(\v2%.CSteamTV_HomePageTemplate_WatchPartyR\n" +
	"watchParty\x12B\n" +
	"\tdeveloper\x18\b \x01(\v2$.CSteamTV_HomePageTemplate_DeveloperR\tdeveloper\x126\n" +
	"\x05event\x18\t \x01(\v2 .CSteamTV_HomePageTemplate_EventR\x05event\"y\n" +
	"&CSteamTV_HomePageTemplate_ConveyorBelt\x129\n" +
	"\n" +
	"broadcasts\x18\x01 \x03(\v2\x19.GetBroadcastChannelEntryR\n" +
	"broadcasts\x12\x14\n" +
	"\x05title\x18\x02 \x01(\tR\x05title\"t\n" +
	"#CSteamTV_HomePageTemplate_Developer\x127\n" +
	"\tbroadcast\x18\x01 \x01(\v2\x19.GetBroadcastChannelEntryR\tbroadcast\x12\x14\n" +
	"\x05title\x18\x02 \x01(\tR\x05title\"7\n" +
	"\x1fCSteamTV_HomePageTemplate_Event\x12\x14\n" +
	"\x05title\x18\x01 \x01(\tR\x05title\"d\n" +
	"\"CSteamTV_HomePageTemplate_GameList\x12(\n" +
	"\aentries\x18\x01 \x03(\v2\x0e.GameListEntryR\aentries\x12\x14\n" +
	"\x05title\x18\x02 \x01(\tR\x05title\"y\n" +
	"&CSteamTV_HomePageTemplate_QuickExplore\x129\n" +
	"\n" +
	"broadcasts\x18\x01 \x03(\v2\x19.GetBroadcastChannelEntryR\n" +
	"broadcasts\x12\x14\n" +
	"\x05title\x18\x02 \x01(\tR\x05title\"\x8d\x01\n" +
	"$CSteamTV_HomePageTemplate_SingleGame\x129\n" +
	"\n" +
	"broadcasts\x18\x01 \x03(\v2\x19.GetBroadcastChannelEntryR\n" +
	"broadcasts\x12\x14\n" +
	"\x05appid\x18\x02 \x01(\rR\x05appid\x12\x14\n" +
	"\x05title\x18\x03 \x01(\tR\x05title\"_\n" +
	"\"CSteamTV_HomePageTemplate_Takeover\x129\n" +
	"\n" +
	"broadcasts\x18\x01 \x03(\v2\x19.GetBroadcastChannelEntryR\n" +
	"broadcasts\"\x99\x01\n" +
	"$CSteamTV_HomePageTemplate_WatchParty\x127\n" +
	"\tbroadcast\x18\x01 \x01(\v2\x19.GetBroadcastChannelEntryR\tbroadcast\x12\x14\n" +
	"\x05title\x18\x02 \x01(\tR\x05title\x12\"\n" +
	"\rchat_group_id\x18\x03 \x01(\x04R\vchatGroupId\"M\n" +
	"\x19CSteamTV_JoinChat_Request\x120\n" +
	"\x14broadcast_channel_id\x18\x01 \x01(\x06R\x12broadcastChannelId\"\x89\x01\n" +
	"\x1aCSteamTV_JoinChat_Response\x12\x17\n" +
	"\achat_id\x18\x01 \x01(\x06R\x06chatId\x12*\n" +
	"\x11view_url_template\x18\x02 \x01(\tR\x0fviewUrlTemplate\x12&\n" +
	"\x0fflair_group_ids\x18\x03 \x03(\x04R\rflairGroupIds\"s\n" +
	"'CSteamTV_ReportBroadcastChannel_Request\x120\n" +
	"\x14broadcast_channel_id\x18\x01 \x01(\x06R\x12broadcastChannelId\x12\x16\n" +
	"\x06reason\x18\x02 \x01(\tR\x06reason\"*\n" +
	"(CSteamTV_ReportBroadcastChannel_Response\"-\n" +
	"\x17CSteamTV_Search_Request\x12\x12\n" +
	"\x04term\x18\x01 \x01(\tR\x04term\"O\n" +
	"\x18CSteamTV_Search_Response\x123\n" +
	"\aresults\x18\x01 \x03(\v2\x19.GetBroadcastChannelEntryR\aresults\"\xe0\x02\n" +
	")CSteamTV_SetBroadcastChannelImage_Request\x120\n" +
	"\x14broadcast_channel_id\x18\x01 \x01(\x06R\x12broadcastChannelId\x12'\n" +
	"\n" +
	"image_type\x18\x02 \x01(\x05B\b\x82\xb5\x18\x04enumR\timageType\x12\x1f\n" +
	"\vimage_index\x18\x03 \x01(\rR\n" +
	"imageIndex\x12\x1f\n" +
	"\vimage_width\x18\x04 \x01(\rR\n" +
	"imageWidth\x12!\n" +
	"\fimage_height\x18\x05 \x01(\rR\vimageHeight\x12\x1b\n" +
	"\tfile_size\x18\x06 \x01(\rR\bfileSize\x12%\n" +
	"\x0efile_extension\x18\a \x01(\tR\rfileExtension\x12\x1b\n" +
	"\tfile_hash\x18\b \x01(\tR\bfileHash\x12\x12\n" +
	"\x04undo\x18\t \x01(\bR\x04undo\"Z\n" +
	"*CSteamTV_SetBroadcastChannelImage_Response\x12,\n" +
	"\x12replace_image_hash\x18\x01 \x01(\tR\x10replaceImageHash\"\xb1\x01\n" +
	"/CSteamTV_SetBroadcastChannelLinkRegions_Request\x120\n" +
	"\x14broadcast_channel_id\x18\x01 \x01(\x06R\x12broadcastChannelId\x12L\n" +
	"\x05links\x18\x02 \x03(\v26.CSteamTV_SetBroadcastChannelLinkRegions_Request_LinksR\x05links\"\xe7\x01\n" +
	"5CSteamTV_SetBroadcastChannelLinkRegions_Request_Links\x12\x1d\n" +
	"\n" +
	"link_index\x18\x01 \x01(\rR\tlinkIndex\x12\x10\n" +
	"\x03url\x18\x02 \x01(\tR\x03url\x12)\n" +
	"\x10link_description\x18\x03 \x01(\tR\x0flinkDescription\x12\x12\n" +
	"\x04left\x18\x04 \x01(\rR\x04left\x12\x10\n" +
	"\x03top\x18\x05 \x01(\rR\x03top\x12\x14\n" +
	"\x05width\x18\x06 \x01(\rR\x05width\x12\x16\n" +
	"\x06height\x18\a \x01(\rR\x06height\"2\n" +
	"0CSteamTV_SetBroadcastChannelLinkRegions_Response\"\xb0\x02\n" +
	"+CSteamTV_SetBroadcastChannelProfile_Request\x120\n" +
	"\x14broadcast_channel_id\x18\x01 \x01(\x06R\x12broadcastChannelId\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x1a\n" +
	"\blanguage\x18\x03 \x01(\tR\blanguage\x12\x1a\n" +
	"\bheadline\x18\x04 \x01(\tR\bheadline\x12\x18\n" +
	"\asummary\x18\x05 \x01(\tR\asummary\x12\x1f\n" +
	"\vavatar_hash\x18\x06 \x01(\tR\n" +
	"avatarHash\x12\x1a\n" +
	"\bschedule\x18\a \x01(\tR\bschedule\x12\x14\n" +
	"\x05rules\x18\b \x01(\tR\x05rules\x12\x16\n" +
	"\x06panels\x18\t \x01(\tR\x06panels\".\n" +
	",CSteamTV_SetBroadcastChannelProfile_Response\"\x8f\x01\n" +
	"'CSteamTV_SetSteamTVUserSettings_Request\x12*\n" +
	"\x11stream_live_email\x18\x01 \x01(\bR\x0fstreamLiveEmail\x128\n" +
	"\x18stream_live_notification\x18\x02 \x01(\bR\x16streamLiveNotification\"*\n" +
	"(CSteamTV_SetSteamTVUserSettings_Response\"^\n" +
	"*CSteamTV_SubscribeBroadcastChannel_Request\x120\n" +
	"\x14broadcast_channel_id\x18\x01 \x01(\x06R\x12broadcastChannelId\"R\n" +
	"+CSteamTV_SubscribeBroadcastChannel_Response\x12#\n" +
	"\ris_subscribed\x18\x01 \x01(\bR\fisSubscribed\"{\n" +
	"\rGameListEntry\x12\x14\n" +
	"\x05appid\x18\x01 \x01(\rR\x05appid\x12\x1b\n" +
	"\tgame_name\x18\x02 \x01(\tR\bgameName\x127\n" +
	"\tbroadcast\x18\x03 \x01(\v2\x19.GetBroadcastChannelEntryR\tbroadcast\"\xf3\x04\n" +
	"\x18GetBroadcastChannelEntry\x120\n" +
	"\x14broadcast_channel_id\x18\x01 \x01(\x06R\x12broadcastChannelId\x12\x1f\n" +
	"\vunique_name\x18\x02 \x01(\tR\n" +
	"uniqueName\x12\x12\n" +
	"\x04name\x18\x03 \x01(\tR\x04name\x12\x14\n" +
	"\x05appid\x18\x04 \x01(\rR\x05appid\x12\x18\n" +
	"\aviewers\x18\x05 \x01(\x04R\aviewers\x12\x14\n" +
	"\x05views\x18\x06 \x01(\x04R\x05views\x12#\n" +
	"\rthumbnail_url\x18\a \x01(\tR\fthumbnailUrl\x12\x1c\n" +
	"\tfollowers\x18\b \x01(\x04R\tfollowers\x12\x1a\n" +
	"\bheadline\x18\t \x01(\tR\bheadline\x12\x1d\n" +
	"\n" +
	"avatar_url\x18\n" +
	" \x01(\tR\tavatarUrl\x12/\n" +
	"\x13broadcaster_steamid\x18\v \x01(\x06R\x12broadcasterSteamid\x12 \n" +
	"\vsubscribers\x18\f \x01(\x04R\vsubscribers\x12%\n" +
	"\x0ebackground_url\x18\r \x01(\tR\rbackgroundUrl\x12\x1f\n" +
	"\vis_featured\x18\x0e \x01(\bR\n" +
	"isFeatured\x12\x1f\n" +
	"\vis_disabled\x18\x0f \x01(\bR\n" +
	"isDisabled\x12\x17\n" +
	"\ais_live\x18\x10 \x01(\bR\x06isLive\x12\x1a\n" +
	"\blanguage\x18\x11 \x01(\tR\blanguage\x12\x18\n" +
	"\areports\x18\x12 \x01(\rR\areports\x12!\n" +
	"\fis_partnered\x18\x13 \x01(\bR\visPartnered2\xea\x19\n" +
	"\aSteamTV\x12I\n" +
	"\n" +
	"AddChatBan\x12\x1c.CSteamTV_AddChatBan_Request\x1a\x1d.CSteamTV_AddChatBan_Response\x12[\n" +
	"\x10AddChatModerator\x12\".CSteamTV_AddChatModerator_Request\x1a#.CSteamTV_AddChatModerator_Response\x12I\n" +
	"\n" +
	"AddWordBan\x12\x1c.CSteamTV_AddWordBan_Request\x1a\x1d.CSteamTV_AddWordBan_Response\x12C\n" +
	"\bAppCheer\x12\x1a.CSteamTV_AppCheer_Request\x1a\x1b.CSteamTV_AppCheer_Response\x12m\n" +
	"\x16CreateBroadcastChannel\x12(.CSteamTV_CreateBroadcastChannel_Request\x1a).CSteamTV_CreateBroadcastChannel_Response\x12m\n" +
	"\x16FollowBroadcastChannel\x12(.CSteamTV_FollowBroadcastChannel_Request\x1a).CSteamTV_FollowBroadcastChannel_Response\x12\x88\x01\n" +
	"\x1fGetBroadcastChannelBroadcasters\x121.CSteamTV_GetBroadcastChannelBroadcasters_Request\x1a2.CSteamTV_GetBroadcastChannelBroadcasters_Response\x12s\n" +
	"\x18GetBroadcastChannelClips\x12*.CSteamTV_GetBroadcastChannelClips_Request\x1a+.CSteamTV_GetBroadcastChannelClips_Response\x12j\n" +
	"\x15GetBroadcastChannelID\x12'.CSteamTV_GetBroadcastChannelID_Request\x1a(.CSteamTV_GetBroadcastChannelID_Response\x12v\n" +
	"\x19GetBroadcastChannelImages\x12+.CSteamTV_GetBroadcastChannelImages_Request\x1a,.CSteamTV_GetBroadcastChannelImages_Response\x12\x85\x01\n" +
	"\x1eGetBroadcastChannelInteraction\x120.CSteamTV_GetBroadcastChannelInteraction_Request\x1a1.CSteamTV_GetBroadcastChannelInteraction_Response\x12s\n" +
	"\x18GetBroadcastChannelLinks\x12*.CSteamTV_GetBroadcastChannelLinks_Request\x1a+.CSteamTV_GetBroadcastChannelLinks_Response\x12y\n" +
	"\x1aGetBroadcastChannelProfile\x12,.CSteamTV_GetBroadcastChannelProfile_Request\x1a-.CSteamTV_GetBroadcastChannelProfile_Response\x12v\n" +
	"\x19GetBroadcastChannelStatus\x12+.CSteamTV_GetBroadcastChannelStatus_Request\x1a,.CSteamTV_GetBroadcastChannelStatus_Response\x12L\n" +
	"\vGetChannels\x12\x1d.CSteamTV_GetChannels_Request\x1a\x1e.CSteamTV_GetChannels_Response\x12L\n" +
	"\vGetChatBans\x12\x1d.CSteamTV_GetChatBans_Request\x1a\x1e.CSteamTV_GetChatBans_Response\x12^\n" +
	"\x11GetChatModerators\x12#.CSteamTV_GetChatModerators_Request\x1a$.CSteamTV_GetChatModerators_Response\x12d\n" +
	"\x13GetFollowedChannels\x12%.CSteamTV_GetFollowedChannels_Request\x1a&.CSteamTV_GetFollowedChannels_Response\x12C\n" +
	"\bGetGames\x12\x1a.CSteamTV_GetGames_Request\x1a\x1b.CSteamTV_GetGames_Response\x12d\n" +
	"\x13GetHomePageContents\x12%.CSteamTV_GetHomePageContents_Request\x1a&.CSteamTV_GetHomePageContents_Response\x12m\n" +
	"\x16GetMyBroadcastChannels\x12(.CSteamTV_GetMyBroadcastChannels_Request\x1a).CSteamTV_GetMyBroadcastChannels_Response\x12m\n" +
	"\x16GetSteamTVUserSettings\x12(.CSteamTV_GetSteamTVUserSettings_Request\x1a).CSteamTV_GetSteamTVUserSettings_Response\x12j\n" +
	"\x15GetSubscribedChannels\x12'.CSteamTV_GetSubscribedChannels_Request\x1a(.CSteamTV_GetSubscribedChannels_Response\x12L\n" +
	"\vGetWordBans\x12\x1d.CSteamTV_GetWordBans_Request\x1a\x1e.CSteamTV_GetWordBans_Response\x12C\n" +
	"\bJoinChat\x12\x1a.CSteamTV_JoinChat_Request\x1a\x1b.CSteamTV_JoinChat_Response\x12m\n" +
	"\x16ReportBroadcastChannel\x12(.CSteamTV_ReportBroadcastChannel_Request\x1a).CSteamTV_ReportBroadcastChannel_Response\x12=\n" +
	"\x06Search\x12\x18.CSteamTV_Search_Request\x1a\x19.CSteamTV_Search_Response\x12s\n" +
	"\x18SetBroadcastChannelImage\x12*.CSteamTV_SetBroadcastChannelImage_Request\x1a+.CSteamTV_SetBroadcastChannelImage_Response\x12\x85\x01\n" +
	"\x1eSetBroadcastChannelLinkRegions\x120.CSteamTV_SetBroadcastChannelLinkRegions_Request\x1a1.CSteamTV_SetBroadcastChannelLinkRegions_Response\x12y\n" +
	"\x1aSetBroadcastChannelProfile\x12,.CSteamTV_SetBroadcastChannelProfile_Request\x1a-.CSteamTV_SetBroadcastChannelProfile_Response\x12m\n" +
	"\x16SetSteamTVUserSettings\x12(.CSteamTV_SetSteamTVUserSettings_Request\x1a).CSteamTV_SetSteamTVUserSettings_Response\x12v\n" +
	"\x19SubscribeBroadcastChannel\x12+.CSteamTV_SubscribeBroadcastChannel_Request\x1a,.CSteamTV_SubscribeBroadcastChannel_Response"

var (
	file_service_steamtv_proto_rawDescOnce sync.Once
	file_service_steamtv_proto_rawDescData []byte
)

func file_service_steamtv_proto_rawDescGZIP() []byte {
	file_service_steamtv_proto_rawDescOnce.Do(func() {
		file_service_steamtv_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_service_steamtv_proto_rawDesc), len(file_service_steamtv_proto_rawDesc)))
	})
	return file_service_steamtv_proto_rawDescData
}

var file_service_steamtv_proto_msgTypes = make([]protoimpl.MessageInfo, 84)
var file_service_steamtv_proto_goTypes = []any{
	(*CSteamTV_AddChatBan_Request)(nil),                                   // 0: CSteamTV_AddChatBan_Request
	(*CSteamTV_AddChatBan_Response)(nil),                                  // 1: CSteamTV_AddChatBan_Response
	(*CSteamTV_AddChatModerator_Request)(nil),                             // 2: CSteamTV_AddChatModerator_Request
	(*CSteamTV_AddChatModerator_Response)(nil),                            // 3: CSteamTV_AddChatModerator_Response
	(*CSteamTV_AddWordBan_Request)(nil),                                   // 4: CSteamTV_AddWordBan_Request
	(*CSteamTV_AddWordBan_Response)(nil),                                  // 5: CSteamTV_AddWordBan_Response
	(*CSteamTV_AppCheer_Request)(nil),                                     // 6: CSteamTV_AppCheer_Request
	(*CSteamTV_AppCheer_Response)(nil),                                    // 7: CSteamTV_AppCheer_Response
	(*CSteamTV_AppCheer_SingleCheerType)(nil),                             // 8: CSteamTV_AppCheer_SingleCheerType
	(*CSteamTV_BroadcastClipInfo)(nil),                                    // 9: CSteamTV_BroadcastClipInfo
	(*CSteamTV_ChatBan)(nil),                                              // 10: CSteamTV_ChatBan
	(*CSteamTV_ChatModerator)(nil),                                        // 11: CSteamTV_ChatModerator
	(*CSteamTV_CreateBroadcastChannel_Request)(nil),                       // 12: CSteamTV_CreateBroadcastChannel_Request
	(*CSteamTV_CreateBroadcastChannel_Response)(nil),                      // 13: CSteamTV_CreateBroadcastChannel_Response
	(*CSteamTV_FollowBroadcastChannel_Request)(nil),                       // 14: CSteamTV_FollowBroadcastChannel_Request
	(*CSteamTV_FollowBroadcastChannel_Response)(nil),                      // 15: CSteamTV_FollowBroadcastChannel_Response
	(*CSteamTV_Game)(nil),                                                 // 16: CSteamTV_Game
	(*CSteamTV_GetBroadcastChannelBroadcasters_Request)(nil),              // 17: CSteamTV_GetBroadcastChannelBroadcasters_Request
	(*CSteamTV_GetBroadcastChannelBroadcasters_Response)(nil),             // 18: CSteamTV_GetBroadcastChannelBroadcasters_Response
	(*CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster)(nil), // 19: CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster
	(*CSteamTV_GetBroadcastChannelClips_Request)(nil),                     // 20: CSteamTV_GetBroadcastChannelClips_Request
	(*CSteamTV_GetBroadcastChannelClips_Response)(nil),                    // 21: CSteamTV_GetBroadcastChannelClips_Response
	(*CSteamTV_GetBroadcastChannelID_Request)(nil),                        // 22: CSteamTV_GetBroadcastChannelID_Request
	(*CSteamTV_GetBroadcastChannelID_Response)(nil),                       // 23: CSteamTV_GetBroadcastChannelID_Response
	(*CSteamTV_GetBroadcastChannelImages_Request)(nil),                    // 24: CSteamTV_GetBroadcastChannelImages_Request
	(*CSteamTV_GetBroadcastChannelImages_Response)(nil),                   // 25: CSteamTV_GetBroadcastChannelImages_Response
	(*CSteamTV_GetBroadcastChannelImages_Response_Images)(nil),            // 26: CSteamTV_GetBroadcastChannelImages_Response_Images
	(*CSteamTV_GetBroadcastChannelInteraction_Request)(nil),               // 27: CSteamTV_GetBroadcastChannelInteraction_Request
	(*CSteamTV_GetBroadcastChannelInteraction_Response)(nil),              // 28: CSteamTV_GetBroadcastChannelInteraction_Response
	(*CSteamTV_GetBroadcastChannelLinks_Request)(nil),                     // 29: CSteamTV_GetBroadcastChannelLinks_Request
	(*CSteamTV_GetBroadcastChannelLinks_Response)(nil),                    // 30: CSteamTV_GetBroadcastChannelLinks_Response
	(*CSteamTV_GetBroadcastChannelLinks_Response_Links)(nil),              // 31: CSteamTV_GetBroadcastChannelLinks_Response_Links
	(*CSteamTV_GetBroadcastChannelProfile_Request)(nil),                   // 32: CSteamTV_GetBroadcastChannelProfile_Request
	(*CSteamTV_GetBroadcastChannelProfile_Response)(nil),                  // 33: CSteamTV_GetBroadcastChannelProfile_Response
	(*CSteamTV_GetBroadcastChannelStatus_Request)(nil),                    // 34: CSteamTV_GetBroadcastChannelStatus_Request
	(*CSteamTV_GetBroadcastChannelStatus_Response)(nil),                   // 35: CSteamTV_GetBroadcastChannelStatus_Response
	(*CSteamTV_GetChannels_Request)(nil),                                  // 36: CSteamTV_GetChannels_Request
	(*CSteamTV_GetChannels_Response)(nil),                                 // 37: CSteamTV_GetChannels_Response
	(*CSteamTV_GetChatBans_Request)(nil),                                  // 38: CSteamTV_GetChatBans_Request
	(*CSteamTV_GetChatBans_Response)(nil),                                 // 39: CSteamTV_GetChatBans_Response
	(*CSteamTV_GetChatModerators_Request)(nil),                            // 40: CSteamTV_GetChatModerators_Request
	(*CSteamTV_GetChatModerators_Response)(nil),                           // 41: CSteamTV_GetChatModerators_Response
	(*CSteamTV_GetFollowedChannels_Request)(nil),                          // 42: CSteamTV_GetFollowedChannels_Request
	(*CSteamTV_GetFollowedChannels_Response)(nil),                         // 43: CSteamTV_GetFollowedChannels_Response
	(*CSteamTV_GetGames_Request)(nil),                                     // 44: CSteamTV_GetGames_Request
	(*CSteamTV_GetGames_Response)(nil),                                    // 45: CSteamTV_GetGames_Response
	(*CSteamTV_GetHomePageContents_Request)(nil),                          // 46: CSteamTV_GetHomePageContents_Request
	(*CSteamTV_GetHomePageContents_Response)(nil),                         // 47: CSteamTV_GetHomePageContents_Response
	(*CSteamTV_GetMyBroadcastChannels_Request)(nil),                       // 48: CSteamTV_GetMyBroadcastChannels_Request
	(*CSteamTV_GetMyBroadcastChannels_Response)(nil),                      // 49: CSteamTV_GetMyBroadcastChannels_Response
	(*CSteamTV_GetSteamTVUserSettings_Request)(nil),                       // 50: CSteamTV_GetSteamTVUserSettings_Request
	(*CSteamTV_GetSteamTVUserSettings_Response)(nil),                      // 51: CSteamTV_GetSteamTVUserSettings_Response
	(*CSteamTV_GetSubscribedChannels_Request)(nil),                        // 52: CSteamTV_GetSubscribedChannels_Request
	(*CSteamTV_GetSubscribedChannels_Response)(nil),                       // 53: CSteamTV_GetSubscribedChannels_Response
	(*CSteamTV_GetWordBans_Request)(nil),                                  // 54: CSteamTV_GetWordBans_Request
	(*CSteamTV_GetWordBans_Response)(nil),                                 // 55: CSteamTV_GetWordBans_Response
	(*CSteamTV_HomePageContentRow)(nil),                                   // 56: CSteamTV_HomePageContentRow
	(*CSteamTV_HomePageTemplate_ConveyorBelt)(nil),                        // 57: CSteamTV_HomePageTemplate_ConveyorBelt
	(*CSteamTV_HomePageTemplate_Developer)(nil),                           // 58: CSteamTV_HomePageTemplate_Developer
	(*CSteamTV_HomePageTemplate_Event)(nil),                               // 59: CSteamTV_HomePageTemplate_Event
	(*CSteamTV_HomePageTemplate_GameList)(nil),                            // 60: CSteamTV_HomePageTemplate_GameList
	(*CSteamTV_HomePageTemplate_QuickExplore)(nil),                        // 61: CSteamTV_HomePageTemplate_QuickExplore
	(*CSteamTV_HomePageTemplate_SingleGame)(nil),                          // 62: CSteamTV_HomePageTemplate_SingleGame
	(*CSteamTV_HomePageTemplate_Takeover)(nil),                            // 63: CSteamTV_HomePageTemplate_Takeover
	(*CSteamTV_HomePageTemplate_WatchParty)(nil),                          // 64: CSteamTV_HomePageTemplate_WatchParty
	(*CSteamTV_JoinChat_Request)(nil),                                     // 65: CSteamTV_JoinChat_Request
	(*CSteamTV_JoinChat_Response)(nil),                                    // 66: CSteamTV_JoinChat_Response
	(*CSteamTV_ReportBroadcastChannel_Request)(nil),                       // 67: CSteamTV_ReportBroadcastChannel_Request
	(*CSteamTV_ReportBroadcastChannel_Response)(nil),                      // 68: CSteamTV_ReportBroadcastChannel_Response
	(*CSteamTV_Search_Request)(nil),                                       // 69: CSteamTV_Search_Request
	(*CSteamTV_Search_Response)(nil),                                      // 70: CSteamTV_Search_Response
	(*CSteamTV_SetBroadcastChannelImage_Request)(nil),                     // 71: CSteamTV_SetBroadcastChannelImage_Request
	(*CSteamTV_SetBroadcastChannelImage_Response)(nil),                    // 72: CSteamTV_SetBroadcastChannelImage_Response
	(*CSteamTV_SetBroadcastChannelLinkRegions_Request)(nil),               // 73: CSteamTV_SetBroadcastChannelLinkRegions_Request
	(*CSteamTV_SetBroadcastChannelLinkRegions_Request_Links)(nil),         // 74: CSteamTV_SetBroadcastChannelLinkRegions_Request_Links
	(*CSteamTV_SetBroadcastChannelLinkRegions_Response)(nil),              // 75: CSteamTV_SetBroadcastChannelLinkRegions_Response
	(*CSteamTV_SetBroadcastChannelProfile_Request)(nil),                   // 76: CSteamTV_SetBroadcastChannelProfile_Request
	(*CSteamTV_SetBroadcastChannelProfile_Response)(nil),                  // 77: CSteamTV_SetBroadcastChannelProfile_Response
	(*CSteamTV_SetSteamTVUserSettings_Request)(nil),                       // 78: CSteamTV_SetSteamTVUserSettings_Request
	(*CSteamTV_SetSteamTVUserSettings_Response)(nil),                      // 79: CSteamTV_SetSteamTVUserSettings_Response
	(*CSteamTV_SubscribeBroadcastChannel_Request)(nil),                    // 80: CSteamTV_SubscribeBroadcastChannel_Request
	(*CSteamTV_SubscribeBroadcastChannel_Response)(nil),                   // 81: CSteamTV_SubscribeBroadcastChannel_Response
	(*GameListEntry)(nil),                                                 // 82: GameListEntry
	(*GetBroadcastChannelEntry)(nil),                                      // 83: GetBroadcastChannelEntry
}
var file_service_steamtv_proto_depIdxs = []int32{
	8,  // 0: CSteamTV_AppCheer_Request.cheers:type_name -> CSteamTV_AppCheer_SingleCheerType
	83, // 1: CSteamTV_Game.channels:type_name -> GetBroadcastChannelEntry
	19, // 2: CSteamTV_GetBroadcastChannelBroadcasters_Response.broadcasters:type_name -> CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster
	9,  // 3: CSteamTV_GetBroadcastChannelClips_Response.clips:type_name -> CSteamTV_BroadcastClipInfo
	26, // 4: CSteamTV_GetBroadcastChannelImages_Response.images:type_name -> CSteamTV_GetBroadcastChannelImages_Response_Images
	31, // 5: CSteamTV_GetBroadcastChannelLinks_Response.links:type_name -> CSteamTV_GetBroadcastChannelLinks_Response_Links
	83, // 6: CSteamTV_GetChannels_Response.results:type_name -> GetBroadcastChannelEntry
	10, // 7: CSteamTV_GetChatBans_Response.results:type_name -> CSteamTV_ChatBan
	11, // 8: CSteamTV_GetChatModerators_Response.results:type_name -> CSteamTV_ChatModerator
	83, // 9: CSteamTV_GetFollowedChannels_Response.results:type_name -> GetBroadcastChannelEntry
	16, // 10: CSteamTV_GetGames_Response.results:type_name -> CSteamTV_Game
	56, // 11: CSteamTV_GetHomePageContents_Response.rows:type_name -> CSteamTV_HomePageContentRow
	83, // 12: CSteamTV_GetMyBroadcastChannels_Response.results:type_name -> GetBroadcastChannelEntry
	83, // 13: CSteamTV_GetSubscribedChannels_Response.results:type_name -> GetBroadcastChannelEntry
	63, // 14: CSteamTV_HomePageContentRow.takeover:type_name -> CSteamTV_HomePageTemplate_Takeover
	62, // 15: CSteamTV_HomePageContentRow.single_game:type_name -> CSteamTV_HomePageTemplate_SingleGame
	60, // 16: CSteamTV_HomePageContentRow.game_list:type_name -> CSteamTV_HomePageTemplate_GameList
	61, // 17: CSteamTV_HomePageContentRow.quick_explore:type_name -> CSteamTV_HomePageTemplate_QuickExplore
	57, // 18: CSteamTV_HomePageContentRow.conveyor_belt:type_name -> CSteamTV_HomePageTemplate_ConveyorBelt
	64, // 19: CSteamTV_HomePageContentRow.watch_party:type_name -> CSteamTV_HomePageTemplate_WatchParty
	58, // 20: CSteamTV_HomePageContentRow.developer:type_name -> CSteamTV_HomePageTemplate_Developer
	59, // 21: CSteamTV_HomePageContentRow.event:type_name -> CSteamTV_HomePageTemplate_Event
	83, // 22: CSteamTV_HomePageTemplate_ConveyorBelt.broadcasts:type_name -> GetBroadcastChannelEntry
	83, // 23: CSteamTV_HomePageTemplate_Developer.broadcast:type_name -> GetBroadcastChannelEntry
	82, // 24: CSteamTV_HomePageTemplate_GameList.entries:type_name -> GameListEntry
	83, // 25: CSteamTV_HomePageTemplate_QuickExplore.broadcasts:type_name -> GetBroadcastChannelEntry
	83, // 26: CSteamTV_HomePageTemplate_SingleGame.broadcasts:type_name -> GetBroadcastChannelEntry
	83, // 27: CSteamTV_HomePageTemplate_Takeover.broadcasts:type_name -> GetBroadcastChannelEntry
	83, // 28: CSteamTV_HomePageTemplate_WatchParty.broadcast:type_name -> GetBroadcastChannelEntry
	83, // 29: CSteamTV_Search_Response.results:type_name -> GetBroadcastChannelEntry
	74, // 30: CSteamTV_SetBroadcastChannelLinkRegions_Request.links:type_name -> CSteamTV_SetBroadcastChannelLinkRegions_Request_Links
	83, // 31: GameListEntry.broadcast:type_name -> GetBroadcastChannelEntry
	0,  // 32: SteamTV.AddChatBan:input_type -> CSteamTV_AddChatBan_Request
	2,  // 33: SteamTV.AddChatModerator:input_type -> CSteamTV_AddChatModerator_Request
	4,  // 34: SteamTV.AddWordBan:input_type -> CSteamTV_AddWordBan_Request
	6,  // 35: SteamTV.AppCheer:input_type -> CSteamTV_AppCheer_Request
	12, // 36: SteamTV.CreateBroadcastChannel:input_type -> CSteamTV_CreateBroadcastChannel_Request
	14, // 37: SteamTV.FollowBroadcastChannel:input_type -> CSteamTV_FollowBroadcastChannel_Request
	17, // 38: SteamTV.GetBroadcastChannelBroadcasters:input_type -> CSteamTV_GetBroadcastChannelBroadcasters_Request
	20, // 39: SteamTV.GetBroadcastChannelClips:input_type -> CSteamTV_GetBroadcastChannelClips_Request
	22, // 40: SteamTV.GetBroadcastChannelID:input_type -> CSteamTV_GetBroadcastChannelID_Request
	24, // 41: SteamTV.GetBroadcastChannelImages:input_type -> CSteamTV_GetBroadcastChannelImages_Request
	27, // 42: SteamTV.GetBroadcastChannelInteraction:input_type -> CSteamTV_GetBroadcastChannelInteraction_Request
	29, // 43: SteamTV.GetBroadcastChannelLinks:input_type -> CSteamTV_GetBroadcastChannelLinks_Request
	32, // 44: SteamTV.GetBroadcastChannelProfile:input_type -> CSteamTV_GetBroadcastChannelProfile_Request
	34, // 45: SteamTV.GetBroadcastChannelStatus:input_type -> CSteamTV_GetBroadcastChannelStatus_Request
	36, // 46: SteamTV.GetChannels:input_type -> CSteamTV_GetChannels_Request
	38, // 47: SteamTV.GetChatBans:input_type -> CSteamTV_GetChatBans_Request
	40, // 48: SteamTV.GetChatModerators:input_type -> CSteamTV_GetChatModerators_Request
	42, // 49: SteamTV.GetFollowedChannels:input_type -> CSteamTV_GetFollowedChannels_Request
	44, // 50: SteamTV.GetGames:input_type -> CSteamTV_GetGames_Request
	46, // 51: SteamTV.GetHomePageContents:input_type -> CSteamTV_GetHomePageContents_Request
	48, // 52: SteamTV.GetMyBroadcastChannels:input_type -> CSteamTV_GetMyBroadcastChannels_Request
	50, // 53: SteamTV.GetSteamTVUserSettings:input_type -> CSteamTV_GetSteamTVUserSettings_Request
	52, // 54: SteamTV.GetSubscribedChannels:input_type -> CSteamTV_GetSubscribedChannels_Request
	54, // 55: SteamTV.GetWordBans:input_type -> CSteamTV_GetWordBans_Request
	65, // 56: SteamTV.JoinChat:input_type -> CSteamTV_JoinChat_Request
	67, // 57: SteamTV.ReportBroadcastChannel:input_type -> CSteamTV_ReportBroadcastChannel_Request
	69, // 58: SteamTV.Search:input_type -> CSteamTV_Search_Request
	71, // 59: SteamTV.SetBroadcastChannelImage:input_type -> CSteamTV_SetBroadcastChannelImage_Request
	73, // 60: SteamTV.SetBroadcastChannelLinkRegions:input_type -> CSteamTV_SetBroadcastChannelLinkRegions_Request
	76, // 61: SteamTV.SetBroadcastChannelProfile:input_type -> CSteamTV_SetBroadcastChannelProfile_Request
	78, // 62: SteamTV.SetSteamTVUserSettings:input_type -> CSteamTV_SetSteamTVUserSettings_Request
	80, // 63: SteamTV.SubscribeBroadcastChannel:input_type -> CSteamTV_SubscribeBroadcastChannel_Request
	1,  // 64: SteamTV.AddChatBan:output_type -> CSteamTV_AddChatBan_Response
	3,  // 65: SteamTV.AddChatModerator:output_type -> CSteamTV_AddChatModerator_Response
	5,  // 66: SteamTV.AddWordBan:output_type -> CSteamTV_AddWordBan_Response
	7,  // 67: SteamTV.AppCheer:output_type -> CSteamTV_AppCheer_Response
	13, // 68: SteamTV.CreateBroadcastChannel:output_type -> CSteamTV_CreateBroadcastChannel_Response
	15, // 69: SteamTV.FollowBroadcastChannel:output_type -> CSteamTV_FollowBroadcastChannel_Response
	18, // 70: SteamTV.GetBroadcastChannelBroadcasters:output_type -> CSteamTV_GetBroadcastChannelBroadcasters_Response
	21, // 71: SteamTV.GetBroadcastChannelClips:output_type -> CSteamTV_GetBroadcastChannelClips_Response
	23, // 72: SteamTV.GetBroadcastChannelID:output_type -> CSteamTV_GetBroadcastChannelID_Response
	25, // 73: SteamTV.GetBroadcastChannelImages:output_type -> CSteamTV_GetBroadcastChannelImages_Response
	28, // 74: SteamTV.GetBroadcastChannelInteraction:output_type -> CSteamTV_GetBroadcastChannelInteraction_Response
	30, // 75: SteamTV.GetBroadcastChannelLinks:output_type -> CSteamTV_GetBroadcastChannelLinks_Response
	33, // 76: SteamTV.GetBroadcastChannelProfile:output_type -> CSteamTV_GetBroadcastChannelProfile_Response
	35, // 77: SteamTV.GetBroadcastChannelStatus:output_type -> CSteamTV_GetBroadcastChannelStatus_Response
	37, // 78: SteamTV.GetChannels:output_type -> CSteamTV_GetChannels_Response
	39, // 79: SteamTV.GetChatBans:output_type -> CSteamTV_GetChatBans_Response
	41, // 80: SteamTV.GetChatModerators:output_type -> CSteamTV_GetChatModerators_Response
	43, // 81: SteamTV.GetFollowedChannels:output_type -> CSteamTV_GetFollowedChannels_Response
	45, // 82: SteamTV.GetGames:output_type -> CSteamTV_GetGames_Response
	47, // 83: SteamTV.GetHomePageContents:output_type -> CSteamTV_GetHomePageContents_Response
	49, // 84: SteamTV.GetMyBroadcastChannels:output_type -> CSteamTV_GetMyBroadcastChannels_Response
	51, // 85: SteamTV.GetSteamTVUserSettings:output_type -> CSteamTV_GetSteamTVUserSettings_Response
	53, // 86: SteamTV.GetSubscribedChannels:output_type -> CSteamTV_GetSubscribedChannels_Response
	55, // 87: SteamTV.GetWordBans:output_type -> CSteamTV_GetWordBans_Response
	66, // 88: SteamTV.JoinChat:output_type -> CSteamTV_JoinChat_Response
	68, // 89: SteamTV.ReportBroadcastChannel:output_type -> CSteamTV_ReportBroadcastChannel_Response
	70, // 90: SteamTV.Search:output_type -> CSteamTV_Search_Response
	72, // 91: SteamTV.SetBroadcastChannelImage:output_type -> CSteamTV_SetBroadcastChannelImage_Response
	75, // 92: SteamTV.SetBroadcastChannelLinkRegions:output_type -> CSteamTV_SetBroadcastChannelLinkRegions_Response
	77, // 93: SteamTV.SetBroadcastChannelProfile:output_type -> CSteamTV_SetBroadcastChannelProfile_Response
	79, // 94: SteamTV.SetSteamTVUserSettings:output_type -> CSteamTV_SetSteamTVUserSettings_Response
	81, // 95: SteamTV.SubscribeBroadcastChannel:output_type -> CSteamTV_SubscribeBroadcastChannel_Response
	64, // [64:96] is the sub-list for method output_type
	32, // [32:64] is the sub-list for method input_type
	32, // [32:32] is the sub-list for extension type_name
	32, // [32:32] is the sub-list for extension extendee
	0,  // [0:32] is the sub-list for field type_name
}

func init() { file_service_steamtv_proto_init() }
func file_service_steamtv_proto_init() {
	if File_service_steamtv_proto != nil {
		return
	}
	file_common_base_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_service_steamtv_proto_rawDesc), len(file_service_steamtv_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   84,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_steamtv_proto_goTypes,
		DependencyIndexes: file_service_steamtv_proto_depIdxs,
		MessageInfos:      file_service_steamtv_proto_msgTypes,
	}.Build()
	File_service_steamtv_proto = out.File
	file_service_steamtv_proto_goTypes = nil
	file_service_steamtv_proto_depIdxs = nil
}
