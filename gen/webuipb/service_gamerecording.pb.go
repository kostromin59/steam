// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v6.32.0
// source: service_gamerecording.proto

package webuipb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CGameRecording_CleanupBackgroundRecordings_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CGameRecording_CleanupBackgroundRecordings_Request) Reset() {
	*x = CGameRecording_CleanupBackgroundRecordings_Request{}
	mi := &file_service_gamerecording_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameRecording_CleanupBackgroundRecordings_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_CleanupBackgroundRecordings_Request) ProtoMessage() {}

func (x *CGameRecording_CleanupBackgroundRecordings_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_gamerecording_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_CleanupBackgroundRecordings_Request.ProtoReflect.Descriptor instead.
func (*CGameRecording_CleanupBackgroundRecordings_Request) Descriptor() ([]byte, []int) {
	return file_service_gamerecording_proto_rawDescGZIP(), []int{0}
}

type CGameRecording_CleanupBackgroundRecordings_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CGameRecording_CleanupBackgroundRecordings_Response) Reset() {
	*x = CGameRecording_CleanupBackgroundRecordings_Response{}
	mi := &file_service_gamerecording_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameRecording_CleanupBackgroundRecordings_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_CleanupBackgroundRecordings_Response) ProtoMessage() {}

func (x *CGameRecording_CleanupBackgroundRecordings_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_gamerecording_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_CleanupBackgroundRecordings_Response.ProtoReflect.Descriptor instead.
func (*CGameRecording_CleanupBackgroundRecordings_Response) Descriptor() ([]byte, []int) {
	return file_service_gamerecording_proto_rawDescGZIP(), []int{1}
}

type CGameRecording_ClipCreated_Notification struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	Summary       *CGameRecording_ClipSummary `protobuf:"bytes,1,opt,name=summary" json:"summary,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CGameRecording_ClipCreated_Notification) Reset() {
	*x = CGameRecording_ClipCreated_Notification{}
	mi := &file_service_gamerecording_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameRecording_ClipCreated_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_ClipCreated_Notification) ProtoMessage() {}

func (x *CGameRecording_ClipCreated_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_service_gamerecording_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_ClipCreated_Notification.ProtoReflect.Descriptor instead.
func (*CGameRecording_ClipCreated_Notification) Descriptor() ([]byte, []int) {
	return file_service_gamerecording_proto_rawDescGZIP(), []int{2}
}

func (x *CGameRecording_ClipCreated_Notification) GetSummary() *CGameRecording_ClipSummary {
	if x != nil {
		return x.Summary
	}
	return nil
}

type CGameRecording_ClipDeleted_Notification struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ClipId        *string                `protobuf:"bytes,1,opt,name=clip_id,json=clipId" json:"clip_id,omitempty"`
	GameId        *uint64                `protobuf:"varint,2,opt,name=game_id,json=gameId" json:"game_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CGameRecording_ClipDeleted_Notification) Reset() {
	*x = CGameRecording_ClipDeleted_Notification{}
	mi := &file_service_gamerecording_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameRecording_ClipDeleted_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_ClipDeleted_Notification) ProtoMessage() {}

func (x *CGameRecording_ClipDeleted_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_service_gamerecording_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_ClipDeleted_Notification.ProtoReflect.Descriptor instead.
func (*CGameRecording_ClipDeleted_Notification) Descriptor() ([]byte, []int) {
	return file_service_gamerecording_proto_rawDescGZIP(), []int{3}
}

func (x *CGameRecording_ClipDeleted_Notification) GetClipId() string {
	if x != nil && x.ClipId != nil {
		return *x.ClipId
	}
	return ""
}

func (x *CGameRecording_ClipDeleted_Notification) GetGameId() uint64 {
	if x != nil && x.GameId != nil {
		return *x.GameId
	}
	return 0
}

type CGameRecording_ClipSummary struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	ClipId                   *string                `protobuf:"bytes,1,opt,name=clip_id,json=clipId" json:"clip_id,omitempty"`
	GameId                   *uint64                `protobuf:"varint,2,opt,name=game_id,json=gameId" json:"game_id,omitempty"`
	DurationMs               *uint64                `protobuf:"varint,3,opt,name=duration_ms,json=durationMs" json:"duration_ms,omitempty"`
	DateRecorded             *uint32                `protobuf:"varint,4,opt,name=date_recorded,json=dateRecorded" json:"date_recorded,omitempty"`
	StartTimelineId          *string                `protobuf:"bytes,5,opt,name=start_timeline_id,json=startTimelineId" json:"start_timeline_id,omitempty"`
	StartOffsetMs            *uint64                `protobuf:"varint,6,opt,name=start_offset_ms,json=startOffsetMs" json:"start_offset_ms,omitempty"`
	PublishedFileId          *uint64                `protobuf:"varint,7,opt,name=published_file_id,json=publishedFileId" json:"published_file_id,omitempty"`
	FileSize                 *uint64                `protobuf:"varint,8,opt,name=file_size,json=fileSize" json:"file_size,omitempty"`
	Name                     *string                `protobuf:"bytes,9,opt,name=name" json:"name,omitempty"`
	DateClipped              *uint32                `protobuf:"varint,10,opt,name=date_clipped,json=dateClipped" json:"date_clipped,omitempty"`
	Temporary                *bool                  `protobuf:"varint,11,opt,name=temporary" json:"temporary,omitempty"`
	OriginalDevice           *string                `protobuf:"bytes,12,opt,name=original_device,json=originalDevice" json:"original_device,omitempty"`
	OriginalGamingDeviceType *uint32                `protobuf:"varint,13,opt,name=original_gaming_device_type,json=originalGamingDeviceType" json:"original_gaming_device_type,omitempty"`
	DateDownloaded           *uint32                `protobuf:"varint,14,opt,name=date_downloaded,json=dateDownloaded" json:"date_downloaded,omitempty"`
	ThumbnailUrl             *string                `protobuf:"bytes,15,opt,name=thumbnail_url,json=thumbnailUrl" json:"thumbnail_url,omitempty"`
	ThumbnailWidth           *uint32                `protobuf:"varint,16,opt,name=thumbnail_width,json=thumbnailWidth" json:"thumbnail_width,omitempty"`
	ThumbnailHeight          *uint32                `protobuf:"varint,17,opt,name=thumbnail_height,json=thumbnailHeight" json:"thumbnail_height,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *CGameRecording_ClipSummary) Reset() {
	*x = CGameRecording_ClipSummary{}
	mi := &file_service_gamerecording_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameRecording_ClipSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_ClipSummary) ProtoMessage() {}

func (x *CGameRecording_ClipSummary) ProtoReflect() protoreflect.Message {
	mi := &file_service_gamerecording_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_ClipSummary.ProtoReflect.Descriptor instead.
func (*CGameRecording_ClipSummary) Descriptor() ([]byte, []int) {
	return file_service_gamerecording_proto_rawDescGZIP(), []int{4}
}

func (x *CGameRecording_ClipSummary) GetClipId() string {
	if x != nil && x.ClipId != nil {
		return *x.ClipId
	}
	return ""
}

func (x *CGameRecording_ClipSummary) GetGameId() uint64 {
	if x != nil && x.GameId != nil {
		return *x.GameId
	}
	return 0
}

func (x *CGameRecording_ClipSummary) GetDurationMs() uint64 {
	if x != nil && x.DurationMs != nil {
		return *x.DurationMs
	}
	return 0
}

func (x *CGameRecording_ClipSummary) GetDateRecorded() uint32 {
	if x != nil && x.DateRecorded != nil {
		return *x.DateRecorded
	}
	return 0
}

func (x *CGameRecording_ClipSummary) GetStartTimelineId() string {
	if x != nil && x.StartTimelineId != nil {
		return *x.StartTimelineId
	}
	return ""
}

func (x *CGameRecording_ClipSummary) GetStartOffsetMs() uint64 {
	if x != nil && x.StartOffsetMs != nil {
		return *x.StartOffsetMs
	}
	return 0
}

func (x *CGameRecording_ClipSummary) GetPublishedFileId() uint64 {
	if x != nil && x.PublishedFileId != nil {
		return *x.PublishedFileId
	}
	return 0
}

func (x *CGameRecording_ClipSummary) GetFileSize() uint64 {
	if x != nil && x.FileSize != nil {
		return *x.FileSize
	}
	return 0
}

func (x *CGameRecording_ClipSummary) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CGameRecording_ClipSummary) GetDateClipped() uint32 {
	if x != nil && x.DateClipped != nil {
		return *x.DateClipped
	}
	return 0
}

func (x *CGameRecording_ClipSummary) GetTemporary() bool {
	if x != nil && x.Temporary != nil {
		return *x.Temporary
	}
	return false
}

func (x *CGameRecording_ClipSummary) GetOriginalDevice() string {
	if x != nil && x.OriginalDevice != nil {
		return *x.OriginalDevice
	}
	return ""
}

func (x *CGameRecording_ClipSummary) GetOriginalGamingDeviceType() uint32 {
	if x != nil && x.OriginalGamingDeviceType != nil {
		return *x.OriginalGamingDeviceType
	}
	return 0
}

func (x *CGameRecording_ClipSummary) GetDateDownloaded() uint32 {
	if x != nil && x.DateDownloaded != nil {
		return *x.DateDownloaded
	}
	return 0
}

func (x *CGameRecording_ClipSummary) GetThumbnailUrl() string {
	if x != nil && x.ThumbnailUrl != nil {
		return *x.ThumbnailUrl
	}
	return ""
}

func (x *CGameRecording_ClipSummary) GetThumbnailWidth() uint32 {
	if x != nil && x.ThumbnailWidth != nil {
		return *x.ThumbnailWidth
	}
	return 0
}

func (x *CGameRecording_ClipSummary) GetThumbnailHeight() uint32 {
	if x != nil && x.ThumbnailHeight != nil {
		return *x.ThumbnailHeight
	}
	return 0
}

type CGameRecording_DeleteClip_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ClipId        *string                `protobuf:"bytes,1,opt,name=clip_id,json=clipId" json:"clip_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CGameRecording_DeleteClip_Request) Reset() {
	*x = CGameRecording_DeleteClip_Request{}
	mi := &file_service_gamerecording_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameRecording_DeleteClip_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_DeleteClip_Request) ProtoMessage() {}

func (x *CGameRecording_DeleteClip_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_gamerecording_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_DeleteClip_Request.ProtoReflect.Descriptor instead.
func (*CGameRecording_DeleteClip_Request) Descriptor() ([]byte, []int) {
	return file_service_gamerecording_proto_rawDescGZIP(), []int{5}
}

func (x *CGameRecording_DeleteClip_Request) GetClipId() string {
	if x != nil && x.ClipId != nil {
		return *x.ClipId
	}
	return ""
}

type CGameRecording_DeleteClip_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CGameRecording_DeleteClip_Response) Reset() {
	*x = CGameRecording_DeleteClip_Response{}
	mi := &file_service_gamerecording_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameRecording_DeleteClip_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_DeleteClip_Response) ProtoMessage() {}

func (x *CGameRecording_DeleteClip_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_gamerecording_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_DeleteClip_Response.ProtoReflect.Descriptor instead.
func (*CGameRecording_DeleteClip_Response) Descriptor() ([]byte, []int) {
	return file_service_gamerecording_proto_rawDescGZIP(), []int{6}
}

type CGameRecording_DeletePerGameSettings_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Gameid        *uint64                `protobuf:"fixed64,1,opt,name=gameid" json:"gameid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CGameRecording_DeletePerGameSettings_Request) Reset() {
	*x = CGameRecording_DeletePerGameSettings_Request{}
	mi := &file_service_gamerecording_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameRecording_DeletePerGameSettings_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_DeletePerGameSettings_Request) ProtoMessage() {}

func (x *CGameRecording_DeletePerGameSettings_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_gamerecording_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_DeletePerGameSettings_Request.ProtoReflect.Descriptor instead.
func (*CGameRecording_DeletePerGameSettings_Request) Descriptor() ([]byte, []int) {
	return file_service_gamerecording_proto_rawDescGZIP(), []int{7}
}

func (x *CGameRecording_DeletePerGameSettings_Request) GetGameid() uint64 {
	if x != nil && x.Gameid != nil {
		return *x.Gameid
	}
	return 0
}

type CGameRecording_DeletePerGameSettings_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CGameRecording_DeletePerGameSettings_Response) Reset() {
	*x = CGameRecording_DeletePerGameSettings_Response{}
	mi := &file_service_gamerecording_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameRecording_DeletePerGameSettings_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_DeletePerGameSettings_Response) ProtoMessage() {}

func (x *CGameRecording_DeletePerGameSettings_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_gamerecording_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_DeletePerGameSettings_Response.ProtoReflect.Descriptor instead.
func (*CGameRecording_DeletePerGameSettings_Response) Descriptor() ([]byte, []int) {
	return file_service_gamerecording_proto_rawDescGZIP(), []int{8}
}

type CGameRecording_ExportClip_Request struct {
	state             protoimpl.MessageState              `protogen:"open.v1"`
	ClipId            *string                             `protobuf:"bytes,1,opt,name=clip_id,json=clipId" json:"clip_id,omitempty"`
	ExportMp4Path     *string                             `protobuf:"bytes,2,opt,name=export_mp4_path,json=exportMp4Path" json:"export_mp4_path,omitempty"`
	Settings          *CGameRecording_ExportClip_Settings `protobuf:"bytes,3,opt,name=settings" json:"settings,omitempty"`
	UseUniqueFilename *bool                               `protobuf:"varint,4,opt,name=use_unique_filename,json=useUniqueFilename" json:"use_unique_filename,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *CGameRecording_ExportClip_Request) Reset() {
	*x = CGameRecording_ExportClip_Request{}
	mi := &file_service_gamerecording_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameRecording_ExportClip_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_ExportClip_Request) ProtoMessage() {}

func (x *CGameRecording_ExportClip_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_gamerecording_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_ExportClip_Request.ProtoReflect.Descriptor instead.
func (*CGameRecording_ExportClip_Request) Descriptor() ([]byte, []int) {
	return file_service_gamerecording_proto_rawDescGZIP(), []int{9}
}

func (x *CGameRecording_ExportClip_Request) GetClipId() string {
	if x != nil && x.ClipId != nil {
		return *x.ClipId
	}
	return ""
}

func (x *CGameRecording_ExportClip_Request) GetExportMp4Path() string {
	if x != nil && x.ExportMp4Path != nil {
		return *x.ExportMp4Path
	}
	return ""
}

func (x *CGameRecording_ExportClip_Request) GetSettings() *CGameRecording_ExportClip_Settings {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *CGameRecording_ExportClip_Request) GetUseUniqueFilename() bool {
	if x != nil && x.UseUniqueFilename != nil {
		return *x.UseUniqueFilename
	}
	return false
}

type CGameRecording_ExportClip_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CGameRecording_ExportClip_Response) Reset() {
	*x = CGameRecording_ExportClip_Response{}
	mi := &file_service_gamerecording_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameRecording_ExportClip_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_ExportClip_Response) ProtoMessage() {}

func (x *CGameRecording_ExportClip_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_gamerecording_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_ExportClip_Response.ProtoReflect.Descriptor instead.
func (*CGameRecording_ExportClip_Response) Descriptor() ([]byte, []int) {
	return file_service_gamerecording_proto_rawDescGZIP(), []int{10}
}

type CGameRecording_ExportClip_Settings struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	BitrateKbps     *int32                 `protobuf:"varint,1,opt,name=bitrate_kbps,json=bitrateKbps" json:"bitrate_kbps,omitempty"`
	Width           *int32                 `protobuf:"varint,2,opt,name=width" json:"width,omitempty"`
	Height          *int32                 `protobuf:"varint,3,opt,name=height" json:"height,omitempty"`
	FramesPerSecond *int32                 `protobuf:"varint,4,opt,name=frames_per_second,json=framesPerSecond" json:"frames_per_second,omitempty"`
	Codec           *int32                 `protobuf:"varint,5,opt,name=codec" json:"codec,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CGameRecording_ExportClip_Settings) Reset() {
	*x = CGameRecording_ExportClip_Settings{}
	mi := &file_service_gamerecording_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameRecording_ExportClip_Settings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_ExportClip_Settings) ProtoMessage() {}

func (x *CGameRecording_ExportClip_Settings) ProtoReflect() protoreflect.Message {
	mi := &file_service_gamerecording_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_ExportClip_Settings.ProtoReflect.Descriptor instead.
func (*CGameRecording_ExportClip_Settings) Descriptor() ([]byte, []int) {
	return file_service_gamerecording_proto_rawDescGZIP(), []int{11}
}

func (x *CGameRecording_ExportClip_Settings) GetBitrateKbps() int32 {
	if x != nil && x.BitrateKbps != nil {
		return *x.BitrateKbps
	}
	return 0
}

func (x *CGameRecording_ExportClip_Settings) GetWidth() int32 {
	if x != nil && x.Width != nil {
		return *x.Width
	}
	return 0
}

func (x *CGameRecording_ExportClip_Settings) GetHeight() int32 {
	if x != nil && x.Height != nil {
		return *x.Height
	}
	return 0
}

func (x *CGameRecording_ExportClip_Settings) GetFramesPerSecond() int32 {
	if x != nil && x.FramesPerSecond != nil {
		return *x.FramesPerSecond
	}
	return 0
}

func (x *CGameRecording_ExportClip_Settings) GetCodec() int32 {
	if x != nil && x.Codec != nil {
		return *x.Codec
	}
	return 0
}

type CGameRecording_ExportClipPreview_Request struct {
	state           protoimpl.MessageState              `protogen:"open.v1"`
	ClipId          *string                             `protobuf:"bytes,1,opt,name=clip_id,json=clipId" json:"clip_id,omitempty"`
	Settings        *CGameRecording_ExportClip_Settings `protobuf:"bytes,2,opt,name=settings" json:"settings,omitempty"`
	RunPolicyChecks *bool                               `protobuf:"varint,3,opt,name=run_policy_checks,json=runPolicyChecks" json:"run_policy_checks,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CGameRecording_ExportClipPreview_Request) Reset() {
	*x = CGameRecording_ExportClipPreview_Request{}
	mi := &file_service_gamerecording_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameRecording_ExportClipPreview_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_ExportClipPreview_Request) ProtoMessage() {}

func (x *CGameRecording_ExportClipPreview_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_gamerecording_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_ExportClipPreview_Request.ProtoReflect.Descriptor instead.
func (*CGameRecording_ExportClipPreview_Request) Descriptor() ([]byte, []int) {
	return file_service_gamerecording_proto_rawDescGZIP(), []int{12}
}

func (x *CGameRecording_ExportClipPreview_Request) GetClipId() string {
	if x != nil && x.ClipId != nil {
		return *x.ClipId
	}
	return ""
}

func (x *CGameRecording_ExportClipPreview_Request) GetSettings() *CGameRecording_ExportClip_Settings {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *CGameRecording_ExportClipPreview_Request) GetRunPolicyChecks() bool {
	if x != nil && x.RunPolicyChecks != nil {
		return *x.RunPolicyChecks
	}
	return false
}

type CGameRecording_ExportClipPreview_Response struct {
	state         protoimpl.MessageState              `protogen:"open.v1"`
	EstimatedSize *uint64                             `protobuf:"varint,1,opt,name=estimated_size,json=estimatedSize" json:"estimated_size,omitempty"`
	Settings      *CGameRecording_ExportClip_Settings `protobuf:"bytes,2,opt,name=settings" json:"settings,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CGameRecording_ExportClipPreview_Response) Reset() {
	*x = CGameRecording_ExportClipPreview_Response{}
	mi := &file_service_gamerecording_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameRecording_ExportClipPreview_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_ExportClipPreview_Response) ProtoMessage() {}

func (x *CGameRecording_ExportClipPreview_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_gamerecording_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_ExportClipPreview_Response.ProtoReflect.Descriptor instead.
func (*CGameRecording_ExportClipPreview_Response) Descriptor() ([]byte, []int) {
	return file_service_gamerecording_proto_rawDescGZIP(), []int{13}
}

func (x *CGameRecording_ExportClipPreview_Response) GetEstimatedSize() uint64 {
	if x != nil && x.EstimatedSize != nil {
		return *x.EstimatedSize
	}
	return 0
}

func (x *CGameRecording_ExportClipPreview_Response) GetSettings() *CGameRecording_ExportClip_Settings {
	if x != nil {
		return x.Settings
	}
	return nil
}

type CGameRecording_ExportProgress_Notification struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Progress      *float32               `protobuf:"fixed32,1,opt,name=progress" json:"progress,omitempty"`
	ClipId        *string                `protobuf:"bytes,2,opt,name=clip_id,json=clipId" json:"clip_id,omitempty"`
	Eresult       *int32                 `protobuf:"varint,3,opt,name=eresult" json:"eresult,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CGameRecording_ExportProgress_Notification) Reset() {
	*x = CGameRecording_ExportProgress_Notification{}
	mi := &file_service_gamerecording_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameRecording_ExportProgress_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_ExportProgress_Notification) ProtoMessage() {}

func (x *CGameRecording_ExportProgress_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_service_gamerecording_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_ExportProgress_Notification.ProtoReflect.Descriptor instead.
func (*CGameRecording_ExportProgress_Notification) Descriptor() ([]byte, []int) {
	return file_service_gamerecording_proto_rawDescGZIP(), []int{14}
}

func (x *CGameRecording_ExportProgress_Notification) GetProgress() float32 {
	if x != nil && x.Progress != nil {
		return *x.Progress
	}
	return 0
}

func (x *CGameRecording_ExportProgress_Notification) GetClipId() string {
	if x != nil && x.ClipId != nil {
		return *x.ClipId
	}
	return ""
}

func (x *CGameRecording_ExportProgress_Notification) GetEresult() int32 {
	if x != nil && x.Eresult != nil {
		return *x.Eresult
	}
	return 0
}

type CGameRecording_GetAndTrimPostGameHighlights_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GameId        *uint64                `protobuf:"varint,1,opt,name=game_id,json=gameId" json:"game_id,omitempty"`
	CreatedAfter  *uint32                `protobuf:"varint,2,opt,name=created_after,json=createdAfter" json:"created_after,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CGameRecording_GetAndTrimPostGameHighlights_Request) Reset() {
	*x = CGameRecording_GetAndTrimPostGameHighlights_Request{}
	mi := &file_service_gamerecording_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameRecording_GetAndTrimPostGameHighlights_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_GetAndTrimPostGameHighlights_Request) ProtoMessage() {}

func (x *CGameRecording_GetAndTrimPostGameHighlights_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_gamerecording_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_GetAndTrimPostGameHighlights_Request.ProtoReflect.Descriptor instead.
func (*CGameRecording_GetAndTrimPostGameHighlights_Request) Descriptor() ([]byte, []int) {
	return file_service_gamerecording_proto_rawDescGZIP(), []int{15}
}

func (x *CGameRecording_GetAndTrimPostGameHighlights_Request) GetGameId() uint64 {
	if x != nil && x.GameId != nil {
		return *x.GameId
	}
	return 0
}

func (x *CGameRecording_GetAndTrimPostGameHighlights_Request) GetCreatedAfter() uint32 {
	if x != nil && x.CreatedAfter != nil {
		return *x.CreatedAfter
	}
	return 0
}

type CGameRecording_GetAndTrimPostGameHighlights_Response struct {
	state         protoimpl.MessageState         `protogen:"open.v1"`
	Events        []*CGameRecordingTimelineEvent `protobuf:"bytes,1,rep,name=events" json:"events,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CGameRecording_GetAndTrimPostGameHighlights_Response) Reset() {
	*x = CGameRecording_GetAndTrimPostGameHighlights_Response{}
	mi := &file_service_gamerecording_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameRecording_GetAndTrimPostGameHighlights_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_GetAndTrimPostGameHighlights_Response) ProtoMessage() {}

func (x *CGameRecording_GetAndTrimPostGameHighlights_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_gamerecording_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_GetAndTrimPostGameHighlights_Response.ProtoReflect.Descriptor instead.
func (*CGameRecording_GetAndTrimPostGameHighlights_Response) Descriptor() ([]byte, []int) {
	return file_service_gamerecording_proto_rawDescGZIP(), []int{16}
}

func (x *CGameRecording_GetAndTrimPostGameHighlights_Response) GetEvents() []*CGameRecordingTimelineEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

type CGameRecording_GetAppsWithBackgroundVideo_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CGameRecording_GetAppsWithBackgroundVideo_Request) Reset() {
	*x = CGameRecording_GetAppsWithBackgroundVideo_Request{}
	mi := &file_service_gamerecording_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameRecording_GetAppsWithBackgroundVideo_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_GetAppsWithBackgroundVideo_Request) ProtoMessage() {}

func (x *CGameRecording_GetAppsWithBackgroundVideo_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_gamerecording_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_GetAppsWithBackgroundVideo_Request.ProtoReflect.Descriptor instead.
func (*CGameRecording_GetAppsWithBackgroundVideo_Request) Descriptor() ([]byte, []int) {
	return file_service_gamerecording_proto_rawDescGZIP(), []int{17}
}

type CGameRecording_GetAppsWithBackgroundVideo_Response struct {
	state         protoimpl.MessageState                                    `protogen:"open.v1"`
	Apps          []*CGameRecording_GetAppsWithBackgroundVideo_Response_App `protobuf:"bytes,1,rep,name=apps" json:"apps,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CGameRecording_GetAppsWithBackgroundVideo_Response) Reset() {
	*x = CGameRecording_GetAppsWithBackgroundVideo_Response{}
	mi := &file_service_gamerecording_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameRecording_GetAppsWithBackgroundVideo_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_GetAppsWithBackgroundVideo_Response) ProtoMessage() {}

func (x *CGameRecording_GetAppsWithBackgroundVideo_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_gamerecording_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_GetAppsWithBackgroundVideo_Response.ProtoReflect.Descriptor instead.
func (*CGameRecording_GetAppsWithBackgroundVideo_Response) Descriptor() ([]byte, []int) {
	return file_service_gamerecording_proto_rawDescGZIP(), []int{18}
}

func (x *CGameRecording_GetAppsWithBackgroundVideo_Response) GetApps() []*CGameRecording_GetAppsWithBackgroundVideo_Response_App {
	if x != nil {
		return x.Apps
	}
	return nil
}

type CGameRecording_GetAppsWithBackgroundVideo_Response_App struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	GameId                  *uint64                `protobuf:"varint,1,opt,name=game_id,json=gameId" json:"game_id,omitempty"`
	MostRecentStartTime     *uint32                `protobuf:"varint,2,opt,name=most_recent_start_time,json=mostRecentStartTime" json:"most_recent_start_time,omitempty"`
	RecordingType           *int32                 `protobuf:"varint,3,opt,name=recording_type,json=recordingType" json:"recording_type,omitempty"`
	VideoDurationSeconds    *float64               `protobuf:"fixed64,4,opt,name=video_duration_seconds,json=videoDurationSeconds" json:"video_duration_seconds,omitempty"`
	TimelineDurationSeconds *float64               `protobuf:"fixed64,5,opt,name=timeline_duration_seconds,json=timelineDurationSeconds" json:"timeline_duration_seconds,omitempty"`
	IsActive                *bool                  `protobuf:"varint,6,opt,name=is_active,json=isActive" json:"is_active,omitempty"`
	FileSize                *uint64                `protobuf:"varint,7,opt,name=file_size,json=fileSize" json:"file_size,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *CGameRecording_GetAppsWithBackgroundVideo_Response_App) Reset() {
	*x = CGameRecording_GetAppsWithBackgroundVideo_Response_App{}
	mi := &file_service_gamerecording_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameRecording_GetAppsWithBackgroundVideo_Response_App) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_GetAppsWithBackgroundVideo_Response_App) ProtoMessage() {}

func (x *CGameRecording_GetAppsWithBackgroundVideo_Response_App) ProtoReflect() protoreflect.Message {
	mi := &file_service_gamerecording_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_GetAppsWithBackgroundVideo_Response_App.ProtoReflect.Descriptor instead.
func (*CGameRecording_GetAppsWithBackgroundVideo_Response_App) Descriptor() ([]byte, []int) {
	return file_service_gamerecording_proto_rawDescGZIP(), []int{19}
}

func (x *CGameRecording_GetAppsWithBackgroundVideo_Response_App) GetGameId() uint64 {
	if x != nil && x.GameId != nil {
		return *x.GameId
	}
	return 0
}

func (x *CGameRecording_GetAppsWithBackgroundVideo_Response_App) GetMostRecentStartTime() uint32 {
	if x != nil && x.MostRecentStartTime != nil {
		return *x.MostRecentStartTime
	}
	return 0
}

func (x *CGameRecording_GetAppsWithBackgroundVideo_Response_App) GetRecordingType() int32 {
	if x != nil && x.RecordingType != nil {
		return *x.RecordingType
	}
	return 0
}

func (x *CGameRecording_GetAppsWithBackgroundVideo_Response_App) GetVideoDurationSeconds() float64 {
	if x != nil && x.VideoDurationSeconds != nil {
		return *x.VideoDurationSeconds
	}
	return 0
}

func (x *CGameRecording_GetAppsWithBackgroundVideo_Response_App) GetTimelineDurationSeconds() float64 {
	if x != nil && x.TimelineDurationSeconds != nil {
		return *x.TimelineDurationSeconds
	}
	return 0
}

func (x *CGameRecording_GetAppsWithBackgroundVideo_Response_App) GetIsActive() bool {
	if x != nil && x.IsActive != nil {
		return *x.IsActive
	}
	return false
}

func (x *CGameRecording_GetAppsWithBackgroundVideo_Response_App) GetFileSize() uint64 {
	if x != nil && x.FileSize != nil {
		return *x.FileSize
	}
	return 0
}

type CGameRecording_GetAvailableDiskSpace_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CGameRecording_GetAvailableDiskSpace_Request) Reset() {
	*x = CGameRecording_GetAvailableDiskSpace_Request{}
	mi := &file_service_gamerecording_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameRecording_GetAvailableDiskSpace_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_GetAvailableDiskSpace_Request) ProtoMessage() {}

func (x *CGameRecording_GetAvailableDiskSpace_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_gamerecording_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_GetAvailableDiskSpace_Request.ProtoReflect.Descriptor instead.
func (*CGameRecording_GetAvailableDiskSpace_Request) Descriptor() ([]byte, []int) {
	return file_service_gamerecording_proto_rawDescGZIP(), []int{20}
}

type CGameRecording_GetAvailableDiskSpace_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Size          *float64               `protobuf:"fixed64,1,opt,name=size" json:"size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CGameRecording_GetAvailableDiskSpace_Response) Reset() {
	*x = CGameRecording_GetAvailableDiskSpace_Response{}
	mi := &file_service_gamerecording_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameRecording_GetAvailableDiskSpace_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_GetAvailableDiskSpace_Response) ProtoMessage() {}

func (x *CGameRecording_GetAvailableDiskSpace_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_gamerecording_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_GetAvailableDiskSpace_Response.ProtoReflect.Descriptor instead.
func (*CGameRecording_GetAvailableDiskSpace_Response) Descriptor() ([]byte, []int) {
	return file_service_gamerecording_proto_rawDescGZIP(), []int{21}
}

func (x *CGameRecording_GetAvailableDiskSpace_Response) GetSize() float64 {
	if x != nil && x.Size != nil {
		return *x.Size
	}
	return 0
}

type CGameRecording_GetClips_Request struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	GameId           *uint64                `protobuf:"varint,1,opt,name=game_id,json=gameId" json:"game_id,omitempty"`
	CreatedAfter     *uint32                `protobuf:"varint,2,opt,name=created_after,json=createdAfter" json:"created_after,omitempty"`
	IncludeTemporary *bool                  `protobuf:"varint,3,opt,name=include_temporary,json=includeTemporary" json:"include_temporary,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CGameRecording_GetClips_Request) Reset() {
	*x = CGameRecording_GetClips_Request{}
	mi := &file_service_gamerecording_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameRecording_GetClips_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_GetClips_Request) ProtoMessage() {}

func (x *CGameRecording_GetClips_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_gamerecording_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_GetClips_Request.ProtoReflect.Descriptor instead.
func (*CGameRecording_GetClips_Request) Descriptor() ([]byte, []int) {
	return file_service_gamerecording_proto_rawDescGZIP(), []int{22}
}

func (x *CGameRecording_GetClips_Request) GetGameId() uint64 {
	if x != nil && x.GameId != nil {
		return *x.GameId
	}
	return 0
}

func (x *CGameRecording_GetClips_Request) GetCreatedAfter() uint32 {
	if x != nil && x.CreatedAfter != nil {
		return *x.CreatedAfter
	}
	return 0
}

func (x *CGameRecording_GetClips_Request) GetIncludeTemporary() bool {
	if x != nil && x.IncludeTemporary != nil {
		return *x.IncludeTemporary
	}
	return false
}

type CGameRecording_GetClips_Response struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	Clip          []*CGameRecording_ClipSummary `protobuf:"bytes,1,rep,name=clip" json:"clip,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CGameRecording_GetClips_Response) Reset() {
	*x = CGameRecording_GetClips_Response{}
	mi := &file_service_gamerecording_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameRecording_GetClips_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_GetClips_Response) ProtoMessage() {}

func (x *CGameRecording_GetClips_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_gamerecording_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_GetClips_Response.ProtoReflect.Descriptor instead.
func (*CGameRecording_GetClips_Response) Descriptor() ([]byte, []int) {
	return file_service_gamerecording_proto_rawDescGZIP(), []int{23}
}

func (x *CGameRecording_GetClips_Response) GetClip() []*CGameRecording_ClipSummary {
	if x != nil {
		return x.Clip
	}
	return nil
}

type CGameRecording_GetEnoughDiskSpace_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CGameRecording_GetEnoughDiskSpace_Request) Reset() {
	*x = CGameRecording_GetEnoughDiskSpace_Request{}
	mi := &file_service_gamerecording_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameRecording_GetEnoughDiskSpace_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_GetEnoughDiskSpace_Request) ProtoMessage() {}

func (x *CGameRecording_GetEnoughDiskSpace_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_gamerecording_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_GetEnoughDiskSpace_Request.ProtoReflect.Descriptor instead.
func (*CGameRecording_GetEnoughDiskSpace_Request) Descriptor() ([]byte, []int) {
	return file_service_gamerecording_proto_rawDescGZIP(), []int{24}
}

type CGameRecording_GetEnoughDiskSpace_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EnoughSpace   *bool                  `protobuf:"varint,1,opt,name=enough_space,json=enoughSpace" json:"enough_space,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CGameRecording_GetEnoughDiskSpace_Response) Reset() {
	*x = CGameRecording_GetEnoughDiskSpace_Response{}
	mi := &file_service_gamerecording_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameRecording_GetEnoughDiskSpace_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_GetEnoughDiskSpace_Response) ProtoMessage() {}

func (x *CGameRecording_GetEnoughDiskSpace_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_gamerecording_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_GetEnoughDiskSpace_Response.ProtoReflect.Descriptor instead.
func (*CGameRecording_GetEnoughDiskSpace_Response) Descriptor() ([]byte, []int) {
	return file_service_gamerecording_proto_rawDescGZIP(), []int{25}
}

func (x *CGameRecording_GetEnoughDiskSpace_Response) GetEnoughSpace() bool {
	if x != nil && x.EnoughSpace != nil {
		return *x.EnoughSpace
	}
	return false
}

type CGameRecording_GetPerGameSettings_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CGameRecording_GetPerGameSettings_Request) Reset() {
	*x = CGameRecording_GetPerGameSettings_Request{}
	mi := &file_service_gamerecording_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameRecording_GetPerGameSettings_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_GetPerGameSettings_Request) ProtoMessage() {}

func (x *CGameRecording_GetPerGameSettings_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_gamerecording_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_GetPerGameSettings_Request.ProtoReflect.Descriptor instead.
func (*CGameRecording_GetPerGameSettings_Request) Descriptor() ([]byte, []int) {
	return file_service_gamerecording_proto_rawDescGZIP(), []int{26}
}

type CGameRecording_GetPerGameSettings_Response struct {
	state         protoimpl.MessageState            `protogen:"open.v1"`
	Settings      []*CGameRecording_PerGameSettings `protobuf:"bytes,1,rep,name=settings" json:"settings,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CGameRecording_GetPerGameSettings_Response) Reset() {
	*x = CGameRecording_GetPerGameSettings_Response{}
	mi := &file_service_gamerecording_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameRecording_GetPerGameSettings_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_GetPerGameSettings_Response) ProtoMessage() {}

func (x *CGameRecording_GetPerGameSettings_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_gamerecording_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_GetPerGameSettings_Response.ProtoReflect.Descriptor instead.
func (*CGameRecording_GetPerGameSettings_Response) Descriptor() ([]byte, []int) {
	return file_service_gamerecording_proto_rawDescGZIP(), []int{27}
}

func (x *CGameRecording_GetPerGameSettings_Response) GetSettings() []*CGameRecording_PerGameSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

type CGameRecording_GetPlatformCapabilities_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CGameRecording_GetPlatformCapabilities_Request) Reset() {
	*x = CGameRecording_GetPlatformCapabilities_Request{}
	mi := &file_service_gamerecording_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameRecording_GetPlatformCapabilities_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_GetPlatformCapabilities_Request) ProtoMessage() {}

func (x *CGameRecording_GetPlatformCapabilities_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_gamerecording_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_GetPlatformCapabilities_Request.ProtoReflect.Descriptor instead.
func (*CGameRecording_GetPlatformCapabilities_Request) Descriptor() ([]byte, []int) {
	return file_service_gamerecording_proto_rawDescGZIP(), []int{28}
}

type CGameRecording_GetPlatformCapabilities_Response struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	PerProcessAudioCapture *bool                  `protobuf:"varint,1,opt,name=per_process_audio_capture,json=perProcessAudioCapture" json:"per_process_audio_capture,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *CGameRecording_GetPlatformCapabilities_Response) Reset() {
	*x = CGameRecording_GetPlatformCapabilities_Response{}
	mi := &file_service_gamerecording_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameRecording_GetPlatformCapabilities_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_GetPlatformCapabilities_Response) ProtoMessage() {}

func (x *CGameRecording_GetPlatformCapabilities_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_gamerecording_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_GetPlatformCapabilities_Response.ProtoReflect.Descriptor instead.
func (*CGameRecording_GetPlatformCapabilities_Response) Descriptor() ([]byte, []int) {
	return file_service_gamerecording_proto_rawDescGZIP(), []int{29}
}

func (x *CGameRecording_GetPlatformCapabilities_Response) GetPerProcessAudioCapture() bool {
	if x != nil && x.PerProcessAudioCapture != nil {
		return *x.PerProcessAudioCapture
	}
	return false
}

type CGameRecording_GetRecordingSize_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GameId        *uint64                `protobuf:"varint,1,opt,name=game_id,json=gameId" json:"game_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CGameRecording_GetRecordingSize_Request) Reset() {
	*x = CGameRecording_GetRecordingSize_Request{}
	mi := &file_service_gamerecording_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameRecording_GetRecordingSize_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_GetRecordingSize_Request) ProtoMessage() {}

func (x *CGameRecording_GetRecordingSize_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_gamerecording_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_GetRecordingSize_Request.ProtoReflect.Descriptor instead.
func (*CGameRecording_GetRecordingSize_Request) Descriptor() ([]byte, []int) {
	return file_service_gamerecording_proto_rawDescGZIP(), []int{30}
}

func (x *CGameRecording_GetRecordingSize_Request) GetGameId() uint64 {
	if x != nil && x.GameId != nil {
		return *x.GameId
	}
	return 0
}

type CGameRecording_GetRecordingSize_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FileSize      *uint64                `protobuf:"varint,1,opt,name=file_size,json=fileSize" json:"file_size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CGameRecording_GetRecordingSize_Response) Reset() {
	*x = CGameRecording_GetRecordingSize_Response{}
	mi := &file_service_gamerecording_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameRecording_GetRecordingSize_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_GetRecordingSize_Response) ProtoMessage() {}

func (x *CGameRecording_GetRecordingSize_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_gamerecording_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_GetRecordingSize_Response.ProtoReflect.Descriptor instead.
func (*CGameRecording_GetRecordingSize_Response) Descriptor() ([]byte, []int) {
	return file_service_gamerecording_proto_rawDescGZIP(), []int{31}
}

func (x *CGameRecording_GetRecordingSize_Response) GetFileSize() uint64 {
	if x != nil && x.FileSize != nil {
		return *x.FileSize
	}
	return 0
}

type CGameRecording_GetTags_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GameId        *uint64                `protobuf:"varint,1,opt,name=game_id,json=gameId" json:"game_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CGameRecording_GetTags_Request) Reset() {
	*x = CGameRecording_GetTags_Request{}
	mi := &file_service_gamerecording_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameRecording_GetTags_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_GetTags_Request) ProtoMessage() {}

func (x *CGameRecording_GetTags_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_gamerecording_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_GetTags_Request.ProtoReflect.Descriptor instead.
func (*CGameRecording_GetTags_Request) Descriptor() ([]byte, []int) {
	return file_service_gamerecording_proto_rawDescGZIP(), []int{32}
}

func (x *CGameRecording_GetTags_Request) GetGameId() uint64 {
	if x != nil && x.GameId != nil {
		return *x.GameId
	}
	return 0
}

type CGameRecording_GetTags_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tags          []*CTimelineTag        `protobuf:"bytes,1,rep,name=tags" json:"tags,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CGameRecording_GetTags_Response) Reset() {
	*x = CGameRecording_GetTags_Response{}
	mi := &file_service_gamerecording_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameRecording_GetTags_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_GetTags_Response) ProtoMessage() {}

func (x *CGameRecording_GetTags_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_gamerecording_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_GetTags_Response.ProtoReflect.Descriptor instead.
func (*CGameRecording_GetTags_Response) Descriptor() ([]byte, []int) {
	return file_service_gamerecording_proto_rawDescGZIP(), []int{33}
}

func (x *CGameRecording_GetTags_Response) GetTags() []*CTimelineTag {
	if x != nil {
		return x.Tags
	}
	return nil
}

type CGameRecording_GetThumbnails_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RecordingId   *string                `protobuf:"bytes,1,opt,name=recording_id,json=recordingId" json:"recording_id,omitempty"`
	ClipId        *string                `protobuf:"bytes,3,opt,name=clip_id,json=clipId" json:"clip_id,omitempty"`
	StartOffsetUs []int64                `protobuf:"varint,4,rep,name=start_offset_us,json=startOffsetUs" json:"start_offset_us,omitempty"`
	MajorAxis     *uint32                `protobuf:"varint,5,opt,name=major_axis,json=majorAxis,def=512" json:"major_axis,omitempty"`
	TimePrecision *int32                 `protobuf:"varint,6,opt,name=time_precision,json=timePrecision,def=0" json:"time_precision,omitempty"`
	TimelineId    *string                `protobuf:"bytes,7,opt,name=timeline_id,json=timelineId" json:"timeline_id,omitempty"`
	Format        *int32                 `protobuf:"varint,8,opt,name=format,def=1" json:"format,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CGameRecording_GetThumbnails_Request fields.
const (
	Default_CGameRecording_GetThumbnails_Request_MajorAxis     = uint32(512)
	Default_CGameRecording_GetThumbnails_Request_TimePrecision = int32(0)
	Default_CGameRecording_GetThumbnails_Request_Format        = int32(1)
)

func (x *CGameRecording_GetThumbnails_Request) Reset() {
	*x = CGameRecording_GetThumbnails_Request{}
	mi := &file_service_gamerecording_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameRecording_GetThumbnails_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_GetThumbnails_Request) ProtoMessage() {}

func (x *CGameRecording_GetThumbnails_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_gamerecording_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_GetThumbnails_Request.ProtoReflect.Descriptor instead.
func (*CGameRecording_GetThumbnails_Request) Descriptor() ([]byte, []int) {
	return file_service_gamerecording_proto_rawDescGZIP(), []int{34}
}

func (x *CGameRecording_GetThumbnails_Request) GetRecordingId() string {
	if x != nil && x.RecordingId != nil {
		return *x.RecordingId
	}
	return ""
}

func (x *CGameRecording_GetThumbnails_Request) GetClipId() string {
	if x != nil && x.ClipId != nil {
		return *x.ClipId
	}
	return ""
}

func (x *CGameRecording_GetThumbnails_Request) GetStartOffsetUs() []int64 {
	if x != nil {
		return x.StartOffsetUs
	}
	return nil
}

func (x *CGameRecording_GetThumbnails_Request) GetMajorAxis() uint32 {
	if x != nil && x.MajorAxis != nil {
		return *x.MajorAxis
	}
	return Default_CGameRecording_GetThumbnails_Request_MajorAxis
}

func (x *CGameRecording_GetThumbnails_Request) GetTimePrecision() int32 {
	if x != nil && x.TimePrecision != nil {
		return *x.TimePrecision
	}
	return Default_CGameRecording_GetThumbnails_Request_TimePrecision
}

func (x *CGameRecording_GetThumbnails_Request) GetTimelineId() string {
	if x != nil && x.TimelineId != nil {
		return *x.TimelineId
	}
	return ""
}

func (x *CGameRecording_GetThumbnails_Request) GetFormat() int32 {
	if x != nil && x.Format != nil {
		return *x.Format
	}
	return Default_CGameRecording_GetThumbnails_Request_Format
}

type CGameRecording_GetThumbnails_Response struct {
	state         protoimpl.MessageState                             `protogen:"open.v1"`
	Thumbnails    []*CGameRecording_GetThumbnails_Response_Thumbnail `protobuf:"bytes,1,rep,name=thumbnails" json:"thumbnails,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CGameRecording_GetThumbnails_Response) Reset() {
	*x = CGameRecording_GetThumbnails_Response{}
	mi := &file_service_gamerecording_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameRecording_GetThumbnails_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_GetThumbnails_Response) ProtoMessage() {}

func (x *CGameRecording_GetThumbnails_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_gamerecording_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_GetThumbnails_Response.ProtoReflect.Descriptor instead.
func (*CGameRecording_GetThumbnails_Response) Descriptor() ([]byte, []int) {
	return file_service_gamerecording_proto_rawDescGZIP(), []int{35}
}

func (x *CGameRecording_GetThumbnails_Response) GetThumbnails() []*CGameRecording_GetThumbnails_Response_Thumbnail {
	if x != nil {
		return x.Thumbnails
	}
	return nil
}

type CGameRecording_GetThumbnails_Response_Thumbnail struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ImageData     []byte                 `protobuf:"bytes,1,opt,name=image_data,json=imageData" json:"image_data,omitempty"`
	Width         *uint32                `protobuf:"varint,2,opt,name=width" json:"width,omitempty"`
	Height        *uint32                `protobuf:"varint,3,opt,name=height" json:"height,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CGameRecording_GetThumbnails_Response_Thumbnail) Reset() {
	*x = CGameRecording_GetThumbnails_Response_Thumbnail{}
	mi := &file_service_gamerecording_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameRecording_GetThumbnails_Response_Thumbnail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_GetThumbnails_Response_Thumbnail) ProtoMessage() {}

func (x *CGameRecording_GetThumbnails_Response_Thumbnail) ProtoReflect() protoreflect.Message {
	mi := &file_service_gamerecording_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_GetThumbnails_Response_Thumbnail.ProtoReflect.Descriptor instead.
func (*CGameRecording_GetThumbnails_Response_Thumbnail) Descriptor() ([]byte, []int) {
	return file_service_gamerecording_proto_rawDescGZIP(), []int{36}
}

func (x *CGameRecording_GetThumbnails_Response_Thumbnail) GetImageData() []byte {
	if x != nil {
		return x.ImageData
	}
	return nil
}

func (x *CGameRecording_GetThumbnails_Response_Thumbnail) GetWidth() uint32 {
	if x != nil && x.Width != nil {
		return *x.Width
	}
	return 0
}

func (x *CGameRecording_GetThumbnails_Response_Thumbnail) GetHeight() uint32 {
	if x != nil && x.Height != nil {
		return *x.Height
	}
	return 0
}

type CGameRecording_GetTimelinesForApp_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GameId        *uint64                `protobuf:"varint,1,opt,name=game_id,json=gameId" json:"game_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CGameRecording_GetTimelinesForApp_Request) Reset() {
	*x = CGameRecording_GetTimelinesForApp_Request{}
	mi := &file_service_gamerecording_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameRecording_GetTimelinesForApp_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_GetTimelinesForApp_Request) ProtoMessage() {}

func (x *CGameRecording_GetTimelinesForApp_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_gamerecording_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_GetTimelinesForApp_Request.ProtoReflect.Descriptor instead.
func (*CGameRecording_GetTimelinesForApp_Request) Descriptor() ([]byte, []int) {
	return file_service_gamerecording_proto_rawDescGZIP(), []int{37}
}

func (x *CGameRecording_GetTimelinesForApp_Request) GetGameId() uint64 {
	if x != nil && x.GameId != nil {
		return *x.GameId
	}
	return 0
}

type CGameRecording_GetTimelinesForApp_Response struct {
	state         protoimpl.MessageState            `protogen:"open.v1"`
	Timelines     []*CGameRecordingTimelineMetadata `protobuf:"bytes,1,rep,name=timelines" json:"timelines,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CGameRecording_GetTimelinesForApp_Response) Reset() {
	*x = CGameRecording_GetTimelinesForApp_Response{}
	mi := &file_service_gamerecording_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameRecording_GetTimelinesForApp_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_GetTimelinesForApp_Response) ProtoMessage() {}

func (x *CGameRecording_GetTimelinesForApp_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_gamerecording_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_GetTimelinesForApp_Response.ProtoReflect.Descriptor instead.
func (*CGameRecording_GetTimelinesForApp_Response) Descriptor() ([]byte, []int) {
	return file_service_gamerecording_proto_rawDescGZIP(), []int{38}
}

func (x *CGameRecording_GetTimelinesForApp_Response) GetTimelines() []*CGameRecordingTimelineMetadata {
	if x != nil {
		return x.Timelines
	}
	return nil
}

type CGameRecording_GetTimelinesForClip_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ClipId        *string                `protobuf:"bytes,1,opt,name=clip_id,json=clipId" json:"clip_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CGameRecording_GetTimelinesForClip_Request) Reset() {
	*x = CGameRecording_GetTimelinesForClip_Request{}
	mi := &file_service_gamerecording_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameRecording_GetTimelinesForClip_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_GetTimelinesForClip_Request) ProtoMessage() {}

func (x *CGameRecording_GetTimelinesForClip_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_gamerecording_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_GetTimelinesForClip_Request.ProtoReflect.Descriptor instead.
func (*CGameRecording_GetTimelinesForClip_Request) Descriptor() ([]byte, []int) {
	return file_service_gamerecording_proto_rawDescGZIP(), []int{39}
}

func (x *CGameRecording_GetTimelinesForClip_Request) GetClipId() string {
	if x != nil && x.ClipId != nil {
		return *x.ClipId
	}
	return ""
}

type CGameRecording_GetTimelinesForClip_Response struct {
	state                      protoimpl.MessageState            `protogen:"open.v1"`
	GameId                     *uint64                           `protobuf:"varint,1,opt,name=game_id,json=gameId" json:"game_id,omitempty"`
	Timelines                  []*CGameRecordingTimelineMetadata `protobuf:"bytes,2,rep,name=timelines" json:"timelines,omitempty"`
	FirstTimelineStartOffsetMs *uint64                           `protobuf:"varint,3,opt,name=first_timeline_start_offset_ms,json=firstTimelineStartOffsetMs" json:"first_timeline_start_offset_ms,omitempty"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *CGameRecording_GetTimelinesForClip_Response) Reset() {
	*x = CGameRecording_GetTimelinesForClip_Response{}
	mi := &file_service_gamerecording_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameRecording_GetTimelinesForClip_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_GetTimelinesForClip_Response) ProtoMessage() {}

func (x *CGameRecording_GetTimelinesForClip_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_gamerecording_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_GetTimelinesForClip_Response.ProtoReflect.Descriptor instead.
func (*CGameRecording_GetTimelinesForClip_Response) Descriptor() ([]byte, []int) {
	return file_service_gamerecording_proto_rawDescGZIP(), []int{40}
}

func (x *CGameRecording_GetTimelinesForClip_Response) GetGameId() uint64 {
	if x != nil && x.GameId != nil {
		return *x.GameId
	}
	return 0
}

func (x *CGameRecording_GetTimelinesForClip_Response) GetTimelines() []*CGameRecordingTimelineMetadata {
	if x != nil {
		return x.Timelines
	}
	return nil
}

func (x *CGameRecording_GetTimelinesForClip_Response) GetFirstTimelineStartOffsetMs() uint64 {
	if x != nil && x.FirstTimelineStartOffsetMs != nil {
		return *x.FirstTimelineStartOffsetMs
	}
	return 0
}

type CGameRecording_GetTotalDiskSpaceUsage_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FolderPath    *string                `protobuf:"bytes,1,opt,name=folder_path,json=folderPath" json:"folder_path,omitempty"`
	Type          *int32                 `protobuf:"varint,2,opt,name=type" json:"type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CGameRecording_GetTotalDiskSpaceUsage_Request) Reset() {
	*x = CGameRecording_GetTotalDiskSpaceUsage_Request{}
	mi := &file_service_gamerecording_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameRecording_GetTotalDiskSpaceUsage_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_GetTotalDiskSpaceUsage_Request) ProtoMessage() {}

func (x *CGameRecording_GetTotalDiskSpaceUsage_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_gamerecording_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_GetTotalDiskSpaceUsage_Request.ProtoReflect.Descriptor instead.
func (*CGameRecording_GetTotalDiskSpaceUsage_Request) Descriptor() ([]byte, []int) {
	return file_service_gamerecording_proto_rawDescGZIP(), []int{41}
}

func (x *CGameRecording_GetTotalDiskSpaceUsage_Request) GetFolderPath() string {
	if x != nil && x.FolderPath != nil {
		return *x.FolderPath
	}
	return ""
}

func (x *CGameRecording_GetTotalDiskSpaceUsage_Request) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

type CGameRecording_GetTotalDiskSpaceUsage_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Size          *uint64                `protobuf:"varint,1,opt,name=size" json:"size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CGameRecording_GetTotalDiskSpaceUsage_Response) Reset() {
	*x = CGameRecording_GetTotalDiskSpaceUsage_Response{}
	mi := &file_service_gamerecording_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameRecording_GetTotalDiskSpaceUsage_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_GetTotalDiskSpaceUsage_Response) ProtoMessage() {}

func (x *CGameRecording_GetTotalDiskSpaceUsage_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_gamerecording_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_GetTotalDiskSpaceUsage_Response.ProtoReflect.Descriptor instead.
func (*CGameRecording_GetTotalDiskSpaceUsage_Response) Descriptor() ([]byte, []int) {
	return file_service_gamerecording_proto_rawDescGZIP(), []int{42}
}

func (x *CGameRecording_GetTotalDiskSpaceUsage_Response) GetSize() uint64 {
	if x != nil && x.Size != nil {
		return *x.Size
	}
	return 0
}

type CGameRecording_LowDiskSpace_Notification struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CGameRecording_LowDiskSpace_Notification) Reset() {
	*x = CGameRecording_LowDiskSpace_Notification{}
	mi := &file_service_gamerecording_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameRecording_LowDiskSpace_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_LowDiskSpace_Notification) ProtoMessage() {}

func (x *CGameRecording_LowDiskSpace_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_service_gamerecording_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_LowDiskSpace_Notification.ProtoReflect.Descriptor instead.
func (*CGameRecording_LowDiskSpace_Notification) Descriptor() ([]byte, []int) {
	return file_service_gamerecording_proto_rawDescGZIP(), []int{43}
}

type CGameRecording_ManuallyDeleteRecordingsForApps_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GameIds       []uint64               `protobuf:"varint,1,rep,name=game_ids,json=gameIds" json:"game_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CGameRecording_ManuallyDeleteRecordingsForApps_Request) Reset() {
	*x = CGameRecording_ManuallyDeleteRecordingsForApps_Request{}
	mi := &file_service_gamerecording_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameRecording_ManuallyDeleteRecordingsForApps_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_ManuallyDeleteRecordingsForApps_Request) ProtoMessage() {}

func (x *CGameRecording_ManuallyDeleteRecordingsForApps_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_gamerecording_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_ManuallyDeleteRecordingsForApps_Request.ProtoReflect.Descriptor instead.
func (*CGameRecording_ManuallyDeleteRecordingsForApps_Request) Descriptor() ([]byte, []int) {
	return file_service_gamerecording_proto_rawDescGZIP(), []int{44}
}

func (x *CGameRecording_ManuallyDeleteRecordingsForApps_Request) GetGameIds() []uint64 {
	if x != nil {
		return x.GameIds
	}
	return nil
}

type CGameRecording_ManuallyDeleteRecordingsForApps_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CGameRecording_ManuallyDeleteRecordingsForApps_Response) Reset() {
	*x = CGameRecording_ManuallyDeleteRecordingsForApps_Response{}
	mi := &file_service_gamerecording_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameRecording_ManuallyDeleteRecordingsForApps_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_ManuallyDeleteRecordingsForApps_Response) ProtoMessage() {}

func (x *CGameRecording_ManuallyDeleteRecordingsForApps_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_gamerecording_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_ManuallyDeleteRecordingsForApps_Response.ProtoReflect.Descriptor instead.
func (*CGameRecording_ManuallyDeleteRecordingsForApps_Response) Descriptor() ([]byte, []int) {
	return file_service_gamerecording_proto_rawDescGZIP(), []int{45}
}

type CGameRecording_OpenOverlayToGamePhase_Notification struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GameId        *uint64                `protobuf:"varint,1,opt,name=game_id,json=gameId" json:"game_id,omitempty"`
	PhaseId       *string                `protobuf:"bytes,2,opt,name=phase_id,json=phaseId" json:"phase_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CGameRecording_OpenOverlayToGamePhase_Notification) Reset() {
	*x = CGameRecording_OpenOverlayToGamePhase_Notification{}
	mi := &file_service_gamerecording_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameRecording_OpenOverlayToGamePhase_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_OpenOverlayToGamePhase_Notification) ProtoMessage() {}

func (x *CGameRecording_OpenOverlayToGamePhase_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_service_gamerecording_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_OpenOverlayToGamePhase_Notification.ProtoReflect.Descriptor instead.
func (*CGameRecording_OpenOverlayToGamePhase_Notification) Descriptor() ([]byte, []int) {
	return file_service_gamerecording_proto_rawDescGZIP(), []int{46}
}

func (x *CGameRecording_OpenOverlayToGamePhase_Notification) GetGameId() uint64 {
	if x != nil && x.GameId != nil {
		return *x.GameId
	}
	return 0
}

func (x *CGameRecording_OpenOverlayToGamePhase_Notification) GetPhaseId() string {
	if x != nil && x.PhaseId != nil {
		return *x.PhaseId
	}
	return ""
}

type CGameRecording_OpenOverlayToTimelineEvent_Notification struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GameId        *uint64                `protobuf:"varint,1,opt,name=game_id,json=gameId" json:"game_id,omitempty"`
	EntryId       *uint64                `protobuf:"varint,2,opt,name=entry_id,json=entryId" json:"entry_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CGameRecording_OpenOverlayToTimelineEvent_Notification) Reset() {
	*x = CGameRecording_OpenOverlayToTimelineEvent_Notification{}
	mi := &file_service_gamerecording_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameRecording_OpenOverlayToTimelineEvent_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_OpenOverlayToTimelineEvent_Notification) ProtoMessage() {}

func (x *CGameRecording_OpenOverlayToTimelineEvent_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_service_gamerecording_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_OpenOverlayToTimelineEvent_Notification.ProtoReflect.Descriptor instead.
func (*CGameRecording_OpenOverlayToTimelineEvent_Notification) Descriptor() ([]byte, []int) {
	return file_service_gamerecording_proto_rawDescGZIP(), []int{47}
}

func (x *CGameRecording_OpenOverlayToTimelineEvent_Notification) GetGameId() uint64 {
	if x != nil && x.GameId != nil {
		return *x.GameId
	}
	return 0
}

func (x *CGameRecording_OpenOverlayToTimelineEvent_Notification) GetEntryId() uint64 {
	if x != nil && x.EntryId != nil {
		return *x.EntryId
	}
	return 0
}

type CGameRecording_PerGameSettings struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Gameid        *uint64                `protobuf:"fixed64,1,opt,name=gameid" json:"gameid,omitempty"`
	Enabled       *bool                  `protobuf:"varint,2,opt,name=enabled" json:"enabled,omitempty"`
	Minutes       *uint32                `protobuf:"varint,3,opt,name=minutes" json:"minutes,omitempty"`
	Bitrate       *string                `protobuf:"bytes,4,opt,name=bitrate" json:"bitrate,omitempty"`
	Infinite      *bool                  `protobuf:"varint,5,opt,name=infinite" json:"infinite,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CGameRecording_PerGameSettings) Reset() {
	*x = CGameRecording_PerGameSettings{}
	mi := &file_service_gamerecording_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameRecording_PerGameSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_PerGameSettings) ProtoMessage() {}

func (x *CGameRecording_PerGameSettings) ProtoReflect() protoreflect.Message {
	mi := &file_service_gamerecording_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_PerGameSettings.ProtoReflect.Descriptor instead.
func (*CGameRecording_PerGameSettings) Descriptor() ([]byte, []int) {
	return file_service_gamerecording_proto_rawDescGZIP(), []int{48}
}

func (x *CGameRecording_PerGameSettings) GetGameid() uint64 {
	if x != nil && x.Gameid != nil {
		return *x.Gameid
	}
	return 0
}

func (x *CGameRecording_PerGameSettings) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *CGameRecording_PerGameSettings) GetMinutes() uint32 {
	if x != nil && x.Minutes != nil {
		return *x.Minutes
	}
	return 0
}

func (x *CGameRecording_PerGameSettings) GetBitrate() string {
	if x != nil && x.Bitrate != nil {
		return *x.Bitrate
	}
	return ""
}

func (x *CGameRecording_PerGameSettings) GetInfinite() bool {
	if x != nil && x.Infinite != nil {
		return *x.Infinite
	}
	return false
}

type CGameRecording_PhaseListChanged_Notification struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CGameRecording_PhaseListChanged_Notification) Reset() {
	*x = CGameRecording_PhaseListChanged_Notification{}
	mi := &file_service_gamerecording_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameRecording_PhaseListChanged_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_PhaseListChanged_Notification) ProtoMessage() {}

func (x *CGameRecording_PhaseListChanged_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_service_gamerecording_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_PhaseListChanged_Notification.ProtoReflect.Descriptor instead.
func (*CGameRecording_PhaseListChanged_Notification) Descriptor() ([]byte, []int) {
	return file_service_gamerecording_proto_rawDescGZIP(), []int{49}
}

type CGameRecording_PostGameHighlightsChanged_Notification struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GameId        *uint64                `protobuf:"varint,1,opt,name=game_id,json=gameId" json:"game_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CGameRecording_PostGameHighlightsChanged_Notification) Reset() {
	*x = CGameRecording_PostGameHighlightsChanged_Notification{}
	mi := &file_service_gamerecording_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameRecording_PostGameHighlightsChanged_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_PostGameHighlightsChanged_Notification) ProtoMessage() {}

func (x *CGameRecording_PostGameHighlightsChanged_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_service_gamerecording_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_PostGameHighlightsChanged_Notification.ProtoReflect.Descriptor instead.
func (*CGameRecording_PostGameHighlightsChanged_Notification) Descriptor() ([]byte, []int) {
	return file_service_gamerecording_proto_rawDescGZIP(), []int{50}
}

func (x *CGameRecording_PostGameHighlightsChanged_Notification) GetGameId() uint64 {
	if x != nil && x.GameId != nil {
		return *x.GameId
	}
	return 0
}

type CGameRecording_QueryPhases_Request struct {
	state              protoimpl.MessageState                    `protogen:"open.v1"`
	Page               *uint32                                   `protobuf:"varint,1,opt,name=page" json:"page,omitempty"`
	Count              *uint32                                   `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
	FilterGameid       *uint64                                   `protobuf:"varint,10,opt,name=filter_gameid,json=filterGameid" json:"filter_gameid,omitempty"`
	FilterSearchString *string                                   `protobuf:"bytes,11,opt,name=filter_search_string,json=filterSearchString" json:"filter_search_string,omitempty"`
	FilterTags         []*CGameRecording_QueryPhases_Request_Tag `protobuf:"bytes,12,rep,name=filter_tags,json=filterTags" json:"filter_tags,omitempty"`
	FilterPhaseId      *string                                   `protobuf:"bytes,13,opt,name=filter_phase_id,json=filterPhaseId" json:"filter_phase_id,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *CGameRecording_QueryPhases_Request) Reset() {
	*x = CGameRecording_QueryPhases_Request{}
	mi := &file_service_gamerecording_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameRecording_QueryPhases_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_QueryPhases_Request) ProtoMessage() {}

func (x *CGameRecording_QueryPhases_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_gamerecording_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_QueryPhases_Request.ProtoReflect.Descriptor instead.
func (*CGameRecording_QueryPhases_Request) Descriptor() ([]byte, []int) {
	return file_service_gamerecording_proto_rawDescGZIP(), []int{51}
}

func (x *CGameRecording_QueryPhases_Request) GetPage() uint32 {
	if x != nil && x.Page != nil {
		return *x.Page
	}
	return 0
}

func (x *CGameRecording_QueryPhases_Request) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *CGameRecording_QueryPhases_Request) GetFilterGameid() uint64 {
	if x != nil && x.FilterGameid != nil {
		return *x.FilterGameid
	}
	return 0
}

func (x *CGameRecording_QueryPhases_Request) GetFilterSearchString() string {
	if x != nil && x.FilterSearchString != nil {
		return *x.FilterSearchString
	}
	return ""
}

func (x *CGameRecording_QueryPhases_Request) GetFilterTags() []*CGameRecording_QueryPhases_Request_Tag {
	if x != nil {
		return x.FilterTags
	}
	return nil
}

func (x *CGameRecording_QueryPhases_Request) GetFilterPhaseId() string {
	if x != nil && x.FilterPhaseId != nil {
		return *x.FilterPhaseId
	}
	return ""
}

type CGameRecording_QueryPhases_Request_Tag struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Group         *string                `protobuf:"bytes,1,opt,name=group" json:"group,omitempty"`
	Name          *string                `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CGameRecording_QueryPhases_Request_Tag) Reset() {
	*x = CGameRecording_QueryPhases_Request_Tag{}
	mi := &file_service_gamerecording_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameRecording_QueryPhases_Request_Tag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_QueryPhases_Request_Tag) ProtoMessage() {}

func (x *CGameRecording_QueryPhases_Request_Tag) ProtoReflect() protoreflect.Message {
	mi := &file_service_gamerecording_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_QueryPhases_Request_Tag.ProtoReflect.Descriptor instead.
func (*CGameRecording_QueryPhases_Request_Tag) Descriptor() ([]byte, []int) {
	return file_service_gamerecording_proto_rawDescGZIP(), []int{52}
}

func (x *CGameRecording_QueryPhases_Request_Tag) GetGroup() string {
	if x != nil && x.Group != nil {
		return *x.Group
	}
	return ""
}

func (x *CGameRecording_QueryPhases_Request_Tag) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type CGameRecording_QueryPhases_Response struct {
	state         protoimpl.MessageState                       `protogen:"open.v1"`
	Phases        []*CGameRecording_QueryPhases_Response_Phase `protobuf:"bytes,1,rep,name=phases" json:"phases,omitempty"`
	TotalCount    *uint32                                      `protobuf:"varint,2,opt,name=total_count,json=totalCount" json:"total_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CGameRecording_QueryPhases_Response) Reset() {
	*x = CGameRecording_QueryPhases_Response{}
	mi := &file_service_gamerecording_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameRecording_QueryPhases_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_QueryPhases_Response) ProtoMessage() {}

func (x *CGameRecording_QueryPhases_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_gamerecording_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_QueryPhases_Response.ProtoReflect.Descriptor instead.
func (*CGameRecording_QueryPhases_Response) Descriptor() ([]byte, []int) {
	return file_service_gamerecording_proto_rawDescGZIP(), []int{53}
}

func (x *CGameRecording_QueryPhases_Response) GetPhases() []*CGameRecording_QueryPhases_Response_Phase {
	if x != nil {
		return x.Phases
	}
	return nil
}

func (x *CGameRecording_QueryPhases_Response) GetTotalCount() uint32 {
	if x != nil && x.TotalCount != nil {
		return *x.TotalCount
	}
	return 0
}

type CGameRecording_QueryPhases_Response_Phase struct {
	state               protoimpl.MessageState                                         `protogen:"open.v1"`
	GameId              *uint64                                                        `protobuf:"varint,1,opt,name=game_id,json=gameId" json:"game_id,omitempty"`
	DateRecorded        *uint32                                                        `protobuf:"varint,5,opt,name=date_recorded,json=dateRecorded" json:"date_recorded,omitempty"`
	DurationMs          *uint64                                                        `protobuf:"varint,6,opt,name=duration_ms,json=durationMs" json:"duration_ms,omitempty"`
	Tags                []*CTimelineTag                                                `protobuf:"bytes,7,rep,name=tags" json:"tags,omitempty"`
	ContainedTags       []*CTimelineTag                                                `protobuf:"bytes,8,rep,name=contained_tags,json=containedTags" json:"contained_tags,omitempty"`
	BackgroundRecording *CGameRecording_QueryPhases_Response_Phase_BackgroundRecording `protobuf:"bytes,9,opt,name=background_recording,json=backgroundRecording" json:"background_recording,omitempty"`
	ClipIds             []string                                                       `protobuf:"bytes,10,rep,name=clip_ids,json=clipIds" json:"clip_ids,omitempty"`
	Type                *int32                                                         `protobuf:"varint,11,opt,name=type" json:"type,omitempty"`
	StartMs             *uint64                                                        `protobuf:"varint,12,opt,name=start_ms,json=startMs" json:"start_ms,omitempty"`
	Screenshots         []uint32                                                       `protobuf:"varint,13,rep,name=screenshots" json:"screenshots,omitempty"`
	Active              *bool                                                          `protobuf:"varint,14,opt,name=active" json:"active,omitempty"`
	PhaseId             *string                                                        `protobuf:"bytes,15,opt,name=phase_id,json=phaseId" json:"phase_id,omitempty"`
	SignificantEvents   []*CTimelineEntry                                              `protobuf:"bytes,16,rep,name=significant_events,json=significantEvents" json:"significant_events,omitempty"`
	Attributes          []*CPhaseAttribute                                             `protobuf:"bytes,17,rep,name=attributes" json:"attributes,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *CGameRecording_QueryPhases_Response_Phase) Reset() {
	*x = CGameRecording_QueryPhases_Response_Phase{}
	mi := &file_service_gamerecording_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameRecording_QueryPhases_Response_Phase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_QueryPhases_Response_Phase) ProtoMessage() {}

func (x *CGameRecording_QueryPhases_Response_Phase) ProtoReflect() protoreflect.Message {
	mi := &file_service_gamerecording_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_QueryPhases_Response_Phase.ProtoReflect.Descriptor instead.
func (*CGameRecording_QueryPhases_Response_Phase) Descriptor() ([]byte, []int) {
	return file_service_gamerecording_proto_rawDescGZIP(), []int{54}
}

func (x *CGameRecording_QueryPhases_Response_Phase) GetGameId() uint64 {
	if x != nil && x.GameId != nil {
		return *x.GameId
	}
	return 0
}

func (x *CGameRecording_QueryPhases_Response_Phase) GetDateRecorded() uint32 {
	if x != nil && x.DateRecorded != nil {
		return *x.DateRecorded
	}
	return 0
}

func (x *CGameRecording_QueryPhases_Response_Phase) GetDurationMs() uint64 {
	if x != nil && x.DurationMs != nil {
		return *x.DurationMs
	}
	return 0
}

func (x *CGameRecording_QueryPhases_Response_Phase) GetTags() []*CTimelineTag {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *CGameRecording_QueryPhases_Response_Phase) GetContainedTags() []*CTimelineTag {
	if x != nil {
		return x.ContainedTags
	}
	return nil
}

func (x *CGameRecording_QueryPhases_Response_Phase) GetBackgroundRecording() *CGameRecording_QueryPhases_Response_Phase_BackgroundRecording {
	if x != nil {
		return x.BackgroundRecording
	}
	return nil
}

func (x *CGameRecording_QueryPhases_Response_Phase) GetClipIds() []string {
	if x != nil {
		return x.ClipIds
	}
	return nil
}

func (x *CGameRecording_QueryPhases_Response_Phase) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *CGameRecording_QueryPhases_Response_Phase) GetStartMs() uint64 {
	if x != nil && x.StartMs != nil {
		return *x.StartMs
	}
	return 0
}

func (x *CGameRecording_QueryPhases_Response_Phase) GetScreenshots() []uint32 {
	if x != nil {
		return x.Screenshots
	}
	return nil
}

func (x *CGameRecording_QueryPhases_Response_Phase) GetActive() bool {
	if x != nil && x.Active != nil {
		return *x.Active
	}
	return false
}

func (x *CGameRecording_QueryPhases_Response_Phase) GetPhaseId() string {
	if x != nil && x.PhaseId != nil {
		return *x.PhaseId
	}
	return ""
}

func (x *CGameRecording_QueryPhases_Response_Phase) GetSignificantEvents() []*CTimelineEntry {
	if x != nil {
		return x.SignificantEvents
	}
	return nil
}

func (x *CGameRecording_QueryPhases_Response_Phase) GetAttributes() []*CPhaseAttribute {
	if x != nil {
		return x.Attributes
	}
	return nil
}

type CGameRecording_QueryPhases_Response_Phase_BackgroundRecording struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TimelineId    *string                `protobuf:"bytes,1,opt,name=timeline_id,json=timelineId" json:"timeline_id,omitempty"`
	Offset        *uint64                `protobuf:"varint,2,opt,name=offset" json:"offset,omitempty"`
	DurationMs    *uint64                `protobuf:"varint,3,opt,name=duration_ms,json=durationMs" json:"duration_ms,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CGameRecording_QueryPhases_Response_Phase_BackgroundRecording) Reset() {
	*x = CGameRecording_QueryPhases_Response_Phase_BackgroundRecording{}
	mi := &file_service_gamerecording_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameRecording_QueryPhases_Response_Phase_BackgroundRecording) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_QueryPhases_Response_Phase_BackgroundRecording) ProtoMessage() {}

func (x *CGameRecording_QueryPhases_Response_Phase_BackgroundRecording) ProtoReflect() protoreflect.Message {
	mi := &file_service_gamerecording_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_QueryPhases_Response_Phase_BackgroundRecording.ProtoReflect.Descriptor instead.
func (*CGameRecording_QueryPhases_Response_Phase_BackgroundRecording) Descriptor() ([]byte, []int) {
	return file_service_gamerecording_proto_rawDescGZIP(), []int{55}
}

func (x *CGameRecording_QueryPhases_Response_Phase_BackgroundRecording) GetTimelineId() string {
	if x != nil && x.TimelineId != nil {
		return *x.TimelineId
	}
	return ""
}

func (x *CGameRecording_QueryPhases_Response_Phase_BackgroundRecording) GetOffset() uint64 {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return 0
}

func (x *CGameRecording_QueryPhases_Response_Phase_BackgroundRecording) GetDurationMs() uint64 {
	if x != nil && x.DurationMs != nil {
		return *x.DurationMs
	}
	return 0
}

type CGameRecording_RecordingSessionChanged_Notification struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	NotificationType *int32                 `protobuf:"varint,1,opt,name=notification_type,json=notificationType" json:"notification_type,omitempty"`
	TimelineId       *string                `protobuf:"bytes,2,opt,name=timeline_id,json=timelineId" json:"timeline_id,omitempty"`
	GameId           *uint64                `protobuf:"varint,4,opt,name=game_id,json=gameId" json:"game_id,omitempty"`
	SessionId        *string                `protobuf:"bytes,5,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	StartOffset      *uint64                `protobuf:"varint,6,opt,name=start_offset,json=startOffset" json:"start_offset,omitempty"`
	DurationMs       *uint64                `protobuf:"varint,7,opt,name=duration_ms,json=durationMs" json:"duration_ms,omitempty"`
	RecordingType    *int32                 `protobuf:"varint,8,opt,name=recording_type,json=recordingType" json:"recording_type,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CGameRecording_RecordingSessionChanged_Notification) Reset() {
	*x = CGameRecording_RecordingSessionChanged_Notification{}
	mi := &file_service_gamerecording_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameRecording_RecordingSessionChanged_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_RecordingSessionChanged_Notification) ProtoMessage() {}

func (x *CGameRecording_RecordingSessionChanged_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_service_gamerecording_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_RecordingSessionChanged_Notification.ProtoReflect.Descriptor instead.
func (*CGameRecording_RecordingSessionChanged_Notification) Descriptor() ([]byte, []int) {
	return file_service_gamerecording_proto_rawDescGZIP(), []int{56}
}

func (x *CGameRecording_RecordingSessionChanged_Notification) GetNotificationType() int32 {
	if x != nil && x.NotificationType != nil {
		return *x.NotificationType
	}
	return 0
}

func (x *CGameRecording_RecordingSessionChanged_Notification) GetTimelineId() string {
	if x != nil && x.TimelineId != nil {
		return *x.TimelineId
	}
	return ""
}

func (x *CGameRecording_RecordingSessionChanged_Notification) GetGameId() uint64 {
	if x != nil && x.GameId != nil {
		return *x.GameId
	}
	return 0
}

func (x *CGameRecording_RecordingSessionChanged_Notification) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *CGameRecording_RecordingSessionChanged_Notification) GetStartOffset() uint64 {
	if x != nil && x.StartOffset != nil {
		return *x.StartOffset
	}
	return 0
}

func (x *CGameRecording_RecordingSessionChanged_Notification) GetDurationMs() uint64 {
	if x != nil && x.DurationMs != nil {
		return *x.DurationMs
	}
	return 0
}

func (x *CGameRecording_RecordingSessionChanged_Notification) GetRecordingType() int32 {
	if x != nil && x.RecordingType != nil {
		return *x.RecordingType
	}
	return 0
}

type CGameRecording_SaveClip_Request struct {
	state          protoimpl.MessageState                    `protogen:"open.v1"`
	GameId         *uint64                                   `protobuf:"varint,1,opt,name=game_id,json=gameId" json:"game_id,omitempty"`
	Start          *CGameRecording_SaveClip_Request_Position `protobuf:"bytes,2,opt,name=start" json:"start,omitempty"`
	End            *CGameRecording_SaveClip_Request_Position `protobuf:"bytes,3,opt,name=end" json:"end,omitempty"`
	Name           *string                                   `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	SrcClipId      *string                                   `protobuf:"bytes,5,opt,name=src_clip_id,json=srcClipId" json:"src_clip_id,omitempty"`
	Temporary      *bool                                     `protobuf:"varint,6,opt,name=temporary" json:"temporary,omitempty"`
	ForceThumbnail *bool                                     `protobuf:"varint,7,opt,name=force_thumbnail,json=forceThumbnail" json:"force_thumbnail,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CGameRecording_SaveClip_Request) Reset() {
	*x = CGameRecording_SaveClip_Request{}
	mi := &file_service_gamerecording_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameRecording_SaveClip_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_SaveClip_Request) ProtoMessage() {}

func (x *CGameRecording_SaveClip_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_gamerecording_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_SaveClip_Request.ProtoReflect.Descriptor instead.
func (*CGameRecording_SaveClip_Request) Descriptor() ([]byte, []int) {
	return file_service_gamerecording_proto_rawDescGZIP(), []int{57}
}

func (x *CGameRecording_SaveClip_Request) GetGameId() uint64 {
	if x != nil && x.GameId != nil {
		return *x.GameId
	}
	return 0
}

func (x *CGameRecording_SaveClip_Request) GetStart() *CGameRecording_SaveClip_Request_Position {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *CGameRecording_SaveClip_Request) GetEnd() *CGameRecording_SaveClip_Request_Position {
	if x != nil {
		return x.End
	}
	return nil
}

func (x *CGameRecording_SaveClip_Request) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CGameRecording_SaveClip_Request) GetSrcClipId() string {
	if x != nil && x.SrcClipId != nil {
		return *x.SrcClipId
	}
	return ""
}

func (x *CGameRecording_SaveClip_Request) GetTemporary() bool {
	if x != nil && x.Temporary != nil {
		return *x.Temporary
	}
	return false
}

func (x *CGameRecording_SaveClip_Request) GetForceThumbnail() bool {
	if x != nil && x.ForceThumbnail != nil {
		return *x.ForceThumbnail
	}
	return false
}

type CGameRecording_SaveClip_Request_Position struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TimelineId    *string                `protobuf:"bytes,1,opt,name=timeline_id,json=timelineId" json:"timeline_id,omitempty"`
	OffsetMs      *uint64                `protobuf:"varint,2,opt,name=offset_ms,json=offsetMs" json:"offset_ms,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CGameRecording_SaveClip_Request_Position) Reset() {
	*x = CGameRecording_SaveClip_Request_Position{}
	mi := &file_service_gamerecording_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameRecording_SaveClip_Request_Position) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_SaveClip_Request_Position) ProtoMessage() {}

func (x *CGameRecording_SaveClip_Request_Position) ProtoReflect() protoreflect.Message {
	mi := &file_service_gamerecording_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_SaveClip_Request_Position.ProtoReflect.Descriptor instead.
func (*CGameRecording_SaveClip_Request_Position) Descriptor() ([]byte, []int) {
	return file_service_gamerecording_proto_rawDescGZIP(), []int{58}
}

func (x *CGameRecording_SaveClip_Request_Position) GetTimelineId() string {
	if x != nil && x.TimelineId != nil {
		return *x.TimelineId
	}
	return ""
}

func (x *CGameRecording_SaveClip_Request_Position) GetOffsetMs() uint64 {
	if x != nil && x.OffsetMs != nil {
		return *x.OffsetMs
	}
	return 0
}

type CGameRecording_SaveClip_Response struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	Summary       *CGameRecording_ClipSummary `protobuf:"bytes,1,opt,name=summary" json:"summary,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CGameRecording_SaveClip_Response) Reset() {
	*x = CGameRecording_SaveClip_Response{}
	mi := &file_service_gamerecording_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameRecording_SaveClip_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_SaveClip_Response) ProtoMessage() {}

func (x *CGameRecording_SaveClip_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_gamerecording_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_SaveClip_Response.ProtoReflect.Descriptor instead.
func (*CGameRecording_SaveClip_Response) Descriptor() ([]byte, []int) {
	return file_service_gamerecording_proto_rawDescGZIP(), []int{59}
}

func (x *CGameRecording_SaveClip_Response) GetSummary() *CGameRecording_ClipSummary {
	if x != nil {
		return x.Summary
	}
	return nil
}

type CGameRecording_SetPerGameSettings_Request struct {
	state         protoimpl.MessageState          `protogen:"open.v1"`
	GameSettings  *CGameRecording_PerGameSettings `protobuf:"bytes,1,opt,name=game_settings,json=gameSettings" json:"game_settings,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CGameRecording_SetPerGameSettings_Request) Reset() {
	*x = CGameRecording_SetPerGameSettings_Request{}
	mi := &file_service_gamerecording_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameRecording_SetPerGameSettings_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_SetPerGameSettings_Request) ProtoMessage() {}

func (x *CGameRecording_SetPerGameSettings_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_gamerecording_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_SetPerGameSettings_Request.ProtoReflect.Descriptor instead.
func (*CGameRecording_SetPerGameSettings_Request) Descriptor() ([]byte, []int) {
	return file_service_gamerecording_proto_rawDescGZIP(), []int{60}
}

func (x *CGameRecording_SetPerGameSettings_Request) GetGameSettings() *CGameRecording_PerGameSettings {
	if x != nil {
		return x.GameSettings
	}
	return nil
}

type CGameRecording_SetPerGameSettings_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CGameRecording_SetPerGameSettings_Response) Reset() {
	*x = CGameRecording_SetPerGameSettings_Response{}
	mi := &file_service_gamerecording_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameRecording_SetPerGameSettings_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_SetPerGameSettings_Response) ProtoMessage() {}

func (x *CGameRecording_SetPerGameSettings_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_gamerecording_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_SetPerGameSettings_Response.ProtoReflect.Descriptor instead.
func (*CGameRecording_SetPerGameSettings_Response) Descriptor() ([]byte, []int) {
	return file_service_gamerecording_proto_rawDescGZIP(), []int{61}
}

type CGameRecording_StartRecording_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GameId        *uint64                `protobuf:"varint,1,opt,name=game_id,json=gameId" json:"game_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CGameRecording_StartRecording_Request) Reset() {
	*x = CGameRecording_StartRecording_Request{}
	mi := &file_service_gamerecording_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameRecording_StartRecording_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_StartRecording_Request) ProtoMessage() {}

func (x *CGameRecording_StartRecording_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_gamerecording_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_StartRecording_Request.ProtoReflect.Descriptor instead.
func (*CGameRecording_StartRecording_Request) Descriptor() ([]byte, []int) {
	return file_service_gamerecording_proto_rawDescGZIP(), []int{62}
}

func (x *CGameRecording_StartRecording_Request) GetGameId() uint64 {
	if x != nil && x.GameId != nil {
		return *x.GameId
	}
	return 0
}

type CGameRecording_StartRecording_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CGameRecording_StartRecording_Response) Reset() {
	*x = CGameRecording_StartRecording_Response{}
	mi := &file_service_gamerecording_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameRecording_StartRecording_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_StartRecording_Response) ProtoMessage() {}

func (x *CGameRecording_StartRecording_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_gamerecording_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_StartRecording_Response.ProtoReflect.Descriptor instead.
func (*CGameRecording_StartRecording_Response) Descriptor() ([]byte, []int) {
	return file_service_gamerecording_proto_rawDescGZIP(), []int{63}
}

type CGameRecording_StopRecording_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GameId        *uint64                `protobuf:"varint,1,opt,name=game_id,json=gameId" json:"game_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CGameRecording_StopRecording_Request) Reset() {
	*x = CGameRecording_StopRecording_Request{}
	mi := &file_service_gamerecording_proto_msgTypes[64]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameRecording_StopRecording_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_StopRecording_Request) ProtoMessage() {}

func (x *CGameRecording_StopRecording_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_gamerecording_proto_msgTypes[64]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_StopRecording_Request.ProtoReflect.Descriptor instead.
func (*CGameRecording_StopRecording_Request) Descriptor() ([]byte, []int) {
	return file_service_gamerecording_proto_rawDescGZIP(), []int{64}
}

func (x *CGameRecording_StopRecording_Request) GetGameId() uint64 {
	if x != nil && x.GameId != nil {
		return *x.GameId
	}
	return 0
}

type CGameRecording_StopRecording_Response struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	Summary       *CGameRecording_ClipSummary `protobuf:"bytes,1,opt,name=summary" json:"summary,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CGameRecording_StopRecording_Response) Reset() {
	*x = CGameRecording_StopRecording_Response{}
	mi := &file_service_gamerecording_proto_msgTypes[65]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameRecording_StopRecording_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_StopRecording_Response) ProtoMessage() {}

func (x *CGameRecording_StopRecording_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_gamerecording_proto_msgTypes[65]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_StopRecording_Response.ProtoReflect.Descriptor instead.
func (*CGameRecording_StopRecording_Response) Descriptor() ([]byte, []int) {
	return file_service_gamerecording_proto_rawDescGZIP(), []int{65}
}

func (x *CGameRecording_StopRecording_Response) GetSummary() *CGameRecording_ClipSummary {
	if x != nil {
		return x.Summary
	}
	return nil
}

type CGameRecording_SwitchBackgroundRecordingGame_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GameId        *uint64                `protobuf:"varint,1,opt,name=game_id,json=gameId" json:"game_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CGameRecording_SwitchBackgroundRecordingGame_Request) Reset() {
	*x = CGameRecording_SwitchBackgroundRecordingGame_Request{}
	mi := &file_service_gamerecording_proto_msgTypes[66]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameRecording_SwitchBackgroundRecordingGame_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_SwitchBackgroundRecordingGame_Request) ProtoMessage() {}

func (x *CGameRecording_SwitchBackgroundRecordingGame_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_gamerecording_proto_msgTypes[66]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_SwitchBackgroundRecordingGame_Request.ProtoReflect.Descriptor instead.
func (*CGameRecording_SwitchBackgroundRecordingGame_Request) Descriptor() ([]byte, []int) {
	return file_service_gamerecording_proto_rawDescGZIP(), []int{66}
}

func (x *CGameRecording_SwitchBackgroundRecordingGame_Request) GetGameId() uint64 {
	if x != nil && x.GameId != nil {
		return *x.GameId
	}
	return 0
}

type CGameRecording_SwitchBackgroundRecordingGame_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CGameRecording_SwitchBackgroundRecordingGame_Response) Reset() {
	*x = CGameRecording_SwitchBackgroundRecordingGame_Response{}
	mi := &file_service_gamerecording_proto_msgTypes[67]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameRecording_SwitchBackgroundRecordingGame_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_SwitchBackgroundRecordingGame_Response) ProtoMessage() {}

func (x *CGameRecording_SwitchBackgroundRecordingGame_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_gamerecording_proto_msgTypes[67]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_SwitchBackgroundRecordingGame_Response.ProtoReflect.Descriptor instead.
func (*CGameRecording_SwitchBackgroundRecordingGame_Response) Descriptor() ([]byte, []int) {
	return file_service_gamerecording_proto_rawDescGZIP(), []int{67}
}

type CGameRecording_TakeScreenshot_Request struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	GameId           *uint64                `protobuf:"fixed64,1,opt,name=game_id,json=gameId" json:"game_id,omitempty"`
	TimelineId       *string                `protobuf:"bytes,2,opt,name=timeline_id,json=timelineId" json:"timeline_id,omitempty"`
	TimelineOffsetMs *uint64                `protobuf:"varint,3,opt,name=timeline_offset_ms,json=timelineOffsetMs" json:"timeline_offset_ms,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CGameRecording_TakeScreenshot_Request) Reset() {
	*x = CGameRecording_TakeScreenshot_Request{}
	mi := &file_service_gamerecording_proto_msgTypes[68]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameRecording_TakeScreenshot_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_TakeScreenshot_Request) ProtoMessage() {}

func (x *CGameRecording_TakeScreenshot_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_gamerecording_proto_msgTypes[68]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_TakeScreenshot_Request.ProtoReflect.Descriptor instead.
func (*CGameRecording_TakeScreenshot_Request) Descriptor() ([]byte, []int) {
	return file_service_gamerecording_proto_rawDescGZIP(), []int{68}
}

func (x *CGameRecording_TakeScreenshot_Request) GetGameId() uint64 {
	if x != nil && x.GameId != nil {
		return *x.GameId
	}
	return 0
}

func (x *CGameRecording_TakeScreenshot_Request) GetTimelineId() string {
	if x != nil && x.TimelineId != nil {
		return *x.TimelineId
	}
	return ""
}

func (x *CGameRecording_TakeScreenshot_Request) GetTimelineOffsetMs() uint64 {
	if x != nil && x.TimelineOffsetMs != nil {
		return *x.TimelineOffsetMs
	}
	return 0
}

type CGameRecording_TakeScreenshot_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ScreenshotId  *uint64                `protobuf:"fixed64,1,opt,name=screenshot_id,json=screenshotId" json:"screenshot_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CGameRecording_TakeScreenshot_Response) Reset() {
	*x = CGameRecording_TakeScreenshot_Response{}
	mi := &file_service_gamerecording_proto_msgTypes[69]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameRecording_TakeScreenshot_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_TakeScreenshot_Response) ProtoMessage() {}

func (x *CGameRecording_TakeScreenshot_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_gamerecording_proto_msgTypes[69]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_TakeScreenshot_Response.ProtoReflect.Descriptor instead.
func (*CGameRecording_TakeScreenshot_Response) Descriptor() ([]byte, []int) {
	return file_service_gamerecording_proto_rawDescGZIP(), []int{69}
}

func (x *CGameRecording_TakeScreenshot_Response) GetScreenshotId() uint64 {
	if x != nil && x.ScreenshotId != nil {
		return *x.ScreenshotId
	}
	return 0
}

type CGameRecording_TimelineChanged_Notification struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	NotificationType *int32                 `protobuf:"varint,1,opt,name=notification_type,json=notificationType" json:"notification_type,omitempty"`
	TimelineId       *string                `protobuf:"bytes,2,opt,name=timeline_id,json=timelineId" json:"timeline_id,omitempty"`
	GameId           *uint64                `protobuf:"varint,3,opt,name=game_id,json=gameId" json:"game_id,omitempty"`
	StartTime        *uint32                `protobuf:"varint,4,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	DurationMs       *uint64                `protobuf:"varint,5,opt,name=duration_ms,json=durationMs" json:"duration_ms,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CGameRecording_TimelineChanged_Notification) Reset() {
	*x = CGameRecording_TimelineChanged_Notification{}
	mi := &file_service_gamerecording_proto_msgTypes[70]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameRecording_TimelineChanged_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_TimelineChanged_Notification) ProtoMessage() {}

func (x *CGameRecording_TimelineChanged_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_service_gamerecording_proto_msgTypes[70]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_TimelineChanged_Notification.ProtoReflect.Descriptor instead.
func (*CGameRecording_TimelineChanged_Notification) Descriptor() ([]byte, []int) {
	return file_service_gamerecording_proto_rawDescGZIP(), []int{70}
}

func (x *CGameRecording_TimelineChanged_Notification) GetNotificationType() int32 {
	if x != nil && x.NotificationType != nil {
		return *x.NotificationType
	}
	return 0
}

func (x *CGameRecording_TimelineChanged_Notification) GetTimelineId() string {
	if x != nil && x.TimelineId != nil {
		return *x.TimelineId
	}
	return ""
}

func (x *CGameRecording_TimelineChanged_Notification) GetGameId() uint64 {
	if x != nil && x.GameId != nil {
		return *x.GameId
	}
	return 0
}

func (x *CGameRecording_TimelineChanged_Notification) GetStartTime() uint32 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

func (x *CGameRecording_TimelineChanged_Notification) GetDurationMs() uint64 {
	if x != nil && x.DurationMs != nil {
		return *x.DurationMs
	}
	return 0
}

type CGameRecording_TimelineEntryChanged_Notification struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Entry         *CTimelineEntry        `protobuf:"bytes,1,opt,name=entry" json:"entry,omitempty"`
	GameId        *uint64                `protobuf:"fixed64,2,opt,name=game_id,json=gameId" json:"game_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CGameRecording_TimelineEntryChanged_Notification) Reset() {
	*x = CGameRecording_TimelineEntryChanged_Notification{}
	mi := &file_service_gamerecording_proto_msgTypes[71]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameRecording_TimelineEntryChanged_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_TimelineEntryChanged_Notification) ProtoMessage() {}

func (x *CGameRecording_TimelineEntryChanged_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_service_gamerecording_proto_msgTypes[71]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_TimelineEntryChanged_Notification.ProtoReflect.Descriptor instead.
func (*CGameRecording_TimelineEntryChanged_Notification) Descriptor() ([]byte, []int) {
	return file_service_gamerecording_proto_rawDescGZIP(), []int{71}
}

func (x *CGameRecording_TimelineEntryChanged_Notification) GetEntry() *CTimelineEntry {
	if x != nil {
		return x.Entry
	}
	return nil
}

func (x *CGameRecording_TimelineEntryChanged_Notification) GetGameId() uint64 {
	if x != nil && x.GameId != nil {
		return *x.GameId
	}
	return 0
}

type CGameRecording_TimelineEntryRemoved_Notification struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GameId        *uint64                `protobuf:"varint,1,opt,name=game_id,json=gameId" json:"game_id,omitempty"`
	TimelineId    *string                `protobuf:"bytes,2,opt,name=timeline_id,json=timelineId" json:"timeline_id,omitempty"`
	EntryId       *uint64                `protobuf:"varint,3,opt,name=entry_id,json=entryId" json:"entry_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CGameRecording_TimelineEntryRemoved_Notification) Reset() {
	*x = CGameRecording_TimelineEntryRemoved_Notification{}
	mi := &file_service_gamerecording_proto_msgTypes[72]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameRecording_TimelineEntryRemoved_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_TimelineEntryRemoved_Notification) ProtoMessage() {}

func (x *CGameRecording_TimelineEntryRemoved_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_service_gamerecording_proto_msgTypes[72]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_TimelineEntryRemoved_Notification.ProtoReflect.Descriptor instead.
func (*CGameRecording_TimelineEntryRemoved_Notification) Descriptor() ([]byte, []int) {
	return file_service_gamerecording_proto_rawDescGZIP(), []int{72}
}

func (x *CGameRecording_TimelineEntryRemoved_Notification) GetGameId() uint64 {
	if x != nil && x.GameId != nil {
		return *x.GameId
	}
	return 0
}

func (x *CGameRecording_TimelineEntryRemoved_Notification) GetTimelineId() string {
	if x != nil && x.TimelineId != nil {
		return *x.TimelineId
	}
	return ""
}

func (x *CGameRecording_TimelineEntryRemoved_Notification) GetEntryId() uint64 {
	if x != nil && x.EntryId != nil {
		return *x.EntryId
	}
	return 0
}

type CGameRecording_UploadClipToSteam_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ClipId        *string                `protobuf:"bytes,1,opt,name=clip_id,json=clipId" json:"clip_id,omitempty"`
	Title         *string                `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	Desc          *string                `protobuf:"bytes,3,opt,name=desc" json:"desc,omitempty"`
	Visibility    *int32                 `protobuf:"varint,4,opt,name=visibility" json:"visibility,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CGameRecording_UploadClipToSteam_Request) Reset() {
	*x = CGameRecording_UploadClipToSteam_Request{}
	mi := &file_service_gamerecording_proto_msgTypes[73]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameRecording_UploadClipToSteam_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_UploadClipToSteam_Request) ProtoMessage() {}

func (x *CGameRecording_UploadClipToSteam_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_gamerecording_proto_msgTypes[73]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_UploadClipToSteam_Request.ProtoReflect.Descriptor instead.
func (*CGameRecording_UploadClipToSteam_Request) Descriptor() ([]byte, []int) {
	return file_service_gamerecording_proto_rawDescGZIP(), []int{73}
}

func (x *CGameRecording_UploadClipToSteam_Request) GetClipId() string {
	if x != nil && x.ClipId != nil {
		return *x.ClipId
	}
	return ""
}

func (x *CGameRecording_UploadClipToSteam_Request) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *CGameRecording_UploadClipToSteam_Request) GetDesc() string {
	if x != nil && x.Desc != nil {
		return *x.Desc
	}
	return ""
}

func (x *CGameRecording_UploadClipToSteam_Request) GetVisibility() int32 {
	if x != nil && x.Visibility != nil {
		return *x.Visibility
	}
	return 0
}

type CGameRecording_UploadClipToSteam_Response struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	Summary       *CGameRecording_ClipSummary `protobuf:"bytes,1,opt,name=summary" json:"summary,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CGameRecording_UploadClipToSteam_Response) Reset() {
	*x = CGameRecording_UploadClipToSteam_Response{}
	mi := &file_service_gamerecording_proto_msgTypes[74]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameRecording_UploadClipToSteam_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_UploadClipToSteam_Response) ProtoMessage() {}

func (x *CGameRecording_UploadClipToSteam_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_gamerecording_proto_msgTypes[74]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_UploadClipToSteam_Response.ProtoReflect.Descriptor instead.
func (*CGameRecording_UploadClipToSteam_Response) Descriptor() ([]byte, []int) {
	return file_service_gamerecording_proto_rawDescGZIP(), []int{74}
}

func (x *CGameRecording_UploadClipToSteam_Response) GetSummary() *CGameRecording_ClipSummary {
	if x != nil {
		return x.Summary
	}
	return nil
}

type CGameRecording_UploadProgress_Notification struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Progress      *float32               `protobuf:"fixed32,1,opt,name=progress" json:"progress,omitempty"`
	ClipId        *string                `protobuf:"bytes,2,opt,name=clip_id,json=clipId" json:"clip_id,omitempty"`
	Eresult       *int32                 `protobuf:"varint,3,opt,name=eresult" json:"eresult,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CGameRecording_UploadProgress_Notification) Reset() {
	*x = CGameRecording_UploadProgress_Notification{}
	mi := &file_service_gamerecording_proto_msgTypes[75]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameRecording_UploadProgress_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_UploadProgress_Notification) ProtoMessage() {}

func (x *CGameRecording_UploadProgress_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_service_gamerecording_proto_msgTypes[75]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_UploadProgress_Notification.ProtoReflect.Descriptor instead.
func (*CGameRecording_UploadProgress_Notification) Descriptor() ([]byte, []int) {
	return file_service_gamerecording_proto_rawDescGZIP(), []int{75}
}

func (x *CGameRecording_UploadProgress_Notification) GetProgress() float32 {
	if x != nil && x.Progress != nil {
		return *x.Progress
	}
	return 0
}

func (x *CGameRecording_UploadProgress_Notification) GetClipId() string {
	if x != nil && x.ClipId != nil {
		return *x.ClipId
	}
	return ""
}

func (x *CGameRecording_UploadProgress_Notification) GetEresult() int32 {
	if x != nil && x.Eresult != nil {
		return *x.Eresult
	}
	return 0
}

type CGameRecording_UserAddTimelineEntry_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GameId        *uint64                `protobuf:"varint,1,opt,name=game_id,json=gameId" json:"game_id,omitempty"`
	Entry         *CTimelineEntry        `protobuf:"bytes,2,opt,name=entry" json:"entry,omitempty"`
	ClipId        *string                `protobuf:"bytes,3,opt,name=clip_id,json=clipId" json:"clip_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CGameRecording_UserAddTimelineEntry_Request) Reset() {
	*x = CGameRecording_UserAddTimelineEntry_Request{}
	mi := &file_service_gamerecording_proto_msgTypes[76]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameRecording_UserAddTimelineEntry_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_UserAddTimelineEntry_Request) ProtoMessage() {}

func (x *CGameRecording_UserAddTimelineEntry_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_gamerecording_proto_msgTypes[76]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_UserAddTimelineEntry_Request.ProtoReflect.Descriptor instead.
func (*CGameRecording_UserAddTimelineEntry_Request) Descriptor() ([]byte, []int) {
	return file_service_gamerecording_proto_rawDescGZIP(), []int{76}
}

func (x *CGameRecording_UserAddTimelineEntry_Request) GetGameId() uint64 {
	if x != nil && x.GameId != nil {
		return *x.GameId
	}
	return 0
}

func (x *CGameRecording_UserAddTimelineEntry_Request) GetEntry() *CTimelineEntry {
	if x != nil {
		return x.Entry
	}
	return nil
}

func (x *CGameRecording_UserAddTimelineEntry_Request) GetClipId() string {
	if x != nil && x.ClipId != nil {
		return *x.ClipId
	}
	return ""
}

type CGameRecording_UserAddTimelineEntry_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EntryId       *uint64                `protobuf:"varint,1,opt,name=entry_id,json=entryId" json:"entry_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CGameRecording_UserAddTimelineEntry_Response) Reset() {
	*x = CGameRecording_UserAddTimelineEntry_Response{}
	mi := &file_service_gamerecording_proto_msgTypes[77]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameRecording_UserAddTimelineEntry_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_UserAddTimelineEntry_Response) ProtoMessage() {}

func (x *CGameRecording_UserAddTimelineEntry_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_gamerecording_proto_msgTypes[77]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_UserAddTimelineEntry_Response.ProtoReflect.Descriptor instead.
func (*CGameRecording_UserAddTimelineEntry_Response) Descriptor() ([]byte, []int) {
	return file_service_gamerecording_proto_rawDescGZIP(), []int{77}
}

func (x *CGameRecording_UserAddTimelineEntry_Response) GetEntryId() uint64 {
	if x != nil && x.EntryId != nil {
		return *x.EntryId
	}
	return 0
}

type CGameRecording_UserRemoveTimelineEntry_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GameId        *uint64                `protobuf:"varint,1,opt,name=game_id,json=gameId" json:"game_id,omitempty"`
	TimelineId    *string                `protobuf:"bytes,2,opt,name=timeline_id,json=timelineId" json:"timeline_id,omitempty"`
	EntryId       *uint64                `protobuf:"varint,3,opt,name=entry_id,json=entryId" json:"entry_id,omitempty"`
	ClipId        *string                `protobuf:"bytes,4,opt,name=clip_id,json=clipId" json:"clip_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CGameRecording_UserRemoveTimelineEntry_Request) Reset() {
	*x = CGameRecording_UserRemoveTimelineEntry_Request{}
	mi := &file_service_gamerecording_proto_msgTypes[78]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameRecording_UserRemoveTimelineEntry_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_UserRemoveTimelineEntry_Request) ProtoMessage() {}

func (x *CGameRecording_UserRemoveTimelineEntry_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_gamerecording_proto_msgTypes[78]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_UserRemoveTimelineEntry_Request.ProtoReflect.Descriptor instead.
func (*CGameRecording_UserRemoveTimelineEntry_Request) Descriptor() ([]byte, []int) {
	return file_service_gamerecording_proto_rawDescGZIP(), []int{78}
}

func (x *CGameRecording_UserRemoveTimelineEntry_Request) GetGameId() uint64 {
	if x != nil && x.GameId != nil {
		return *x.GameId
	}
	return 0
}

func (x *CGameRecording_UserRemoveTimelineEntry_Request) GetTimelineId() string {
	if x != nil && x.TimelineId != nil {
		return *x.TimelineId
	}
	return ""
}

func (x *CGameRecording_UserRemoveTimelineEntry_Request) GetEntryId() uint64 {
	if x != nil && x.EntryId != nil {
		return *x.EntryId
	}
	return 0
}

func (x *CGameRecording_UserRemoveTimelineEntry_Request) GetClipId() string {
	if x != nil && x.ClipId != nil {
		return *x.ClipId
	}
	return ""
}

type CGameRecording_UserRemoveTimelineEntry_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CGameRecording_UserRemoveTimelineEntry_Response) Reset() {
	*x = CGameRecording_UserRemoveTimelineEntry_Response{}
	mi := &file_service_gamerecording_proto_msgTypes[79]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameRecording_UserRemoveTimelineEntry_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_UserRemoveTimelineEntry_Response) ProtoMessage() {}

func (x *CGameRecording_UserRemoveTimelineEntry_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_gamerecording_proto_msgTypes[79]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_UserRemoveTimelineEntry_Response.ProtoReflect.Descriptor instead.
func (*CGameRecording_UserRemoveTimelineEntry_Response) Descriptor() ([]byte, []int) {
	return file_service_gamerecording_proto_rawDescGZIP(), []int{79}
}

type CGameRecording_UserUpdateTimelineEntry_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GameId        *uint64                `protobuf:"varint,1,opt,name=game_id,json=gameId" json:"game_id,omitempty"`
	Entry         *CTimelineEntry        `protobuf:"bytes,2,opt,name=entry" json:"entry,omitempty"`
	ClipId        *string                `protobuf:"bytes,3,opt,name=clip_id,json=clipId" json:"clip_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CGameRecording_UserUpdateTimelineEntry_Request) Reset() {
	*x = CGameRecording_UserUpdateTimelineEntry_Request{}
	mi := &file_service_gamerecording_proto_msgTypes[80]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameRecording_UserUpdateTimelineEntry_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_UserUpdateTimelineEntry_Request) ProtoMessage() {}

func (x *CGameRecording_UserUpdateTimelineEntry_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_gamerecording_proto_msgTypes[80]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_UserUpdateTimelineEntry_Request.ProtoReflect.Descriptor instead.
func (*CGameRecording_UserUpdateTimelineEntry_Request) Descriptor() ([]byte, []int) {
	return file_service_gamerecording_proto_rawDescGZIP(), []int{80}
}

func (x *CGameRecording_UserUpdateTimelineEntry_Request) GetGameId() uint64 {
	if x != nil && x.GameId != nil {
		return *x.GameId
	}
	return 0
}

func (x *CGameRecording_UserUpdateTimelineEntry_Request) GetEntry() *CTimelineEntry {
	if x != nil {
		return x.Entry
	}
	return nil
}

func (x *CGameRecording_UserUpdateTimelineEntry_Request) GetClipId() string {
	if x != nil && x.ClipId != nil {
		return *x.ClipId
	}
	return ""
}

type CGameRecording_UserUpdateTimelineEntry_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CGameRecording_UserUpdateTimelineEntry_Response) Reset() {
	*x = CGameRecording_UserUpdateTimelineEntry_Response{}
	mi := &file_service_gamerecording_proto_msgTypes[81]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameRecording_UserUpdateTimelineEntry_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_UserUpdateTimelineEntry_Response) ProtoMessage() {}

func (x *CGameRecording_UserUpdateTimelineEntry_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_gamerecording_proto_msgTypes[81]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_UserUpdateTimelineEntry_Response.ProtoReflect.Descriptor instead.
func (*CGameRecording_UserUpdateTimelineEntry_Response) Descriptor() ([]byte, []int) {
	return file_service_gamerecording_proto_rawDescGZIP(), []int{81}
}

type CGameRecording_ZipClip_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ClipId        *string                `protobuf:"bytes,1,opt,name=clip_id,json=clipId" json:"clip_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CGameRecording_ZipClip_Request) Reset() {
	*x = CGameRecording_ZipClip_Request{}
	mi := &file_service_gamerecording_proto_msgTypes[82]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameRecording_ZipClip_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_ZipClip_Request) ProtoMessage() {}

func (x *CGameRecording_ZipClip_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_gamerecording_proto_msgTypes[82]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_ZipClip_Request.ProtoReflect.Descriptor instead.
func (*CGameRecording_ZipClip_Request) Descriptor() ([]byte, []int) {
	return file_service_gamerecording_proto_rawDescGZIP(), []int{82}
}

func (x *CGameRecording_ZipClip_Request) GetClipId() string {
	if x != nil && x.ClipId != nil {
		return *x.ClipId
	}
	return ""
}

type CGameRecording_ZipClip_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ZipPath       *string                `protobuf:"bytes,1,opt,name=zip_path,json=zipPath" json:"zip_path,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CGameRecording_ZipClip_Response) Reset() {
	*x = CGameRecording_ZipClip_Response{}
	mi := &file_service_gamerecording_proto_msgTypes[83]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameRecording_ZipClip_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_ZipClip_Response) ProtoMessage() {}

func (x *CGameRecording_ZipClip_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_gamerecording_proto_msgTypes[83]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_ZipClip_Response.ProtoReflect.Descriptor instead.
func (*CGameRecording_ZipClip_Response) Descriptor() ([]byte, []int) {
	return file_service_gamerecording_proto_rawDescGZIP(), []int{83}
}

func (x *CGameRecording_ZipClip_Response) GetZipPath() string {
	if x != nil && x.ZipPath != nil {
		return *x.ZipPath
	}
	return ""
}

type CGameRecordingPhase struct {
	state                    protoimpl.MessageState     `protogen:"open.v1"`
	PhaseId                  *string                    `protobuf:"bytes,4,opt,name=phase_id,json=phaseId" json:"phase_id,omitempty"`
	DurationMs               *uint64                    `protobuf:"varint,5,opt,name=duration_ms,json=durationMs" json:"duration_ms,omitempty"`
	Tags                     []*CGameRecordingPhase_Tag `protobuf:"bytes,6,rep,name=tags" json:"tags,omitempty"`
	ContainedTags            []*CGameRecordingPhase_Tag `protobuf:"bytes,7,rep,name=contained_tags,json=containedTags" json:"contained_tags,omitempty"`
	BackgroundTimelineOffset *uint64                    `protobuf:"varint,8,opt,name=background_timeline_offset,json=backgroundTimelineOffset" json:"background_timeline_offset,omitempty"`
	Attributes               []*CPhaseAttribute         `protobuf:"bytes,9,rep,name=attributes" json:"attributes,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *CGameRecordingPhase) Reset() {
	*x = CGameRecordingPhase{}
	mi := &file_service_gamerecording_proto_msgTypes[84]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameRecordingPhase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecordingPhase) ProtoMessage() {}

func (x *CGameRecordingPhase) ProtoReflect() protoreflect.Message {
	mi := &file_service_gamerecording_proto_msgTypes[84]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecordingPhase.ProtoReflect.Descriptor instead.
func (*CGameRecordingPhase) Descriptor() ([]byte, []int) {
	return file_service_gamerecording_proto_rawDescGZIP(), []int{84}
}

func (x *CGameRecordingPhase) GetPhaseId() string {
	if x != nil && x.PhaseId != nil {
		return *x.PhaseId
	}
	return ""
}

func (x *CGameRecordingPhase) GetDurationMs() uint64 {
	if x != nil && x.DurationMs != nil {
		return *x.DurationMs
	}
	return 0
}

func (x *CGameRecordingPhase) GetTags() []*CGameRecordingPhase_Tag {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *CGameRecordingPhase) GetContainedTags() []*CGameRecordingPhase_Tag {
	if x != nil {
		return x.ContainedTags
	}
	return nil
}

func (x *CGameRecordingPhase) GetBackgroundTimelineOffset() uint64 {
	if x != nil && x.BackgroundTimelineOffset != nil {
		return *x.BackgroundTimelineOffset
	}
	return 0
}

func (x *CGameRecordingPhase) GetAttributes() []*CPhaseAttribute {
	if x != nil {
		return x.Attributes
	}
	return nil
}

type CGameRecordingPhase_Tag struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          *string                `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Group         *string                `protobuf:"bytes,2,opt,name=group" json:"group,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CGameRecordingPhase_Tag) Reset() {
	*x = CGameRecordingPhase_Tag{}
	mi := &file_service_gamerecording_proto_msgTypes[85]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameRecordingPhase_Tag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecordingPhase_Tag) ProtoMessage() {}

func (x *CGameRecordingPhase_Tag) ProtoReflect() protoreflect.Message {
	mi := &file_service_gamerecording_proto_msgTypes[85]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecordingPhase_Tag.ProtoReflect.Descriptor instead.
func (*CGameRecordingPhase_Tag) Descriptor() ([]byte, []int) {
	return file_service_gamerecording_proto_rawDescGZIP(), []int{85}
}

func (x *CGameRecordingPhase_Tag) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CGameRecordingPhase_Tag) GetGroup() string {
	if x != nil && x.Group != nil {
		return *x.Group
	}
	return ""
}

type CGameRecordingTimelineEvent struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	GameId           *uint64                `protobuf:"varint,1,opt,name=game_id,json=gameId" json:"game_id,omitempty"`
	RtCreated        *uint32                `protobuf:"varint,2,opt,name=rt_created,json=rtCreated" json:"rt_created,omitempty"`
	PossibleClip     *int32                 `protobuf:"varint,3,opt,name=possible_clip,json=possibleClip" json:"possible_clip,omitempty"`
	TimelineId       *string                `protobuf:"bytes,4,opt,name=timeline_id,json=timelineId" json:"timeline_id,omitempty"`
	EntryId          *uint64                `protobuf:"varint,5,opt,name=entry_id,json=entryId" json:"entry_id,omitempty"`
	TimelineOffsetMs *uint64                `protobuf:"varint,6,opt,name=timeline_offset_ms,json=timelineOffsetMs" json:"timeline_offset_ms,omitempty"`
	DurationMs       *uint64                `protobuf:"varint,7,opt,name=duration_ms,json=durationMs" json:"duration_ms,omitempty"`
	MarkerIcon       *string                `protobuf:"bytes,8,opt,name=marker_icon,json=markerIcon" json:"marker_icon,omitempty"`
	MarkerTitle      *string                `protobuf:"bytes,9,opt,name=marker_title,json=markerTitle" json:"marker_title,omitempty"`
	UserMarker       *bool                  `protobuf:"varint,10,opt,name=user_marker,json=userMarker" json:"user_marker,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CGameRecordingTimelineEvent) Reset() {
	*x = CGameRecordingTimelineEvent{}
	mi := &file_service_gamerecording_proto_msgTypes[86]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameRecordingTimelineEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecordingTimelineEvent) ProtoMessage() {}

func (x *CGameRecordingTimelineEvent) ProtoReflect() protoreflect.Message {
	mi := &file_service_gamerecording_proto_msgTypes[86]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecordingTimelineEvent.ProtoReflect.Descriptor instead.
func (*CGameRecordingTimelineEvent) Descriptor() ([]byte, []int) {
	return file_service_gamerecording_proto_rawDescGZIP(), []int{86}
}

func (x *CGameRecordingTimelineEvent) GetGameId() uint64 {
	if x != nil && x.GameId != nil {
		return *x.GameId
	}
	return 0
}

func (x *CGameRecordingTimelineEvent) GetRtCreated() uint32 {
	if x != nil && x.RtCreated != nil {
		return *x.RtCreated
	}
	return 0
}

func (x *CGameRecordingTimelineEvent) GetPossibleClip() int32 {
	if x != nil && x.PossibleClip != nil {
		return *x.PossibleClip
	}
	return 0
}

func (x *CGameRecordingTimelineEvent) GetTimelineId() string {
	if x != nil && x.TimelineId != nil {
		return *x.TimelineId
	}
	return ""
}

func (x *CGameRecordingTimelineEvent) GetEntryId() uint64 {
	if x != nil && x.EntryId != nil {
		return *x.EntryId
	}
	return 0
}

func (x *CGameRecordingTimelineEvent) GetTimelineOffsetMs() uint64 {
	if x != nil && x.TimelineOffsetMs != nil {
		return *x.TimelineOffsetMs
	}
	return 0
}

func (x *CGameRecordingTimelineEvent) GetDurationMs() uint64 {
	if x != nil && x.DurationMs != nil {
		return *x.DurationMs
	}
	return 0
}

func (x *CGameRecordingTimelineEvent) GetMarkerIcon() string {
	if x != nil && x.MarkerIcon != nil {
		return *x.MarkerIcon
	}
	return ""
}

func (x *CGameRecordingTimelineEvent) GetMarkerTitle() string {
	if x != nil && x.MarkerTitle != nil {
		return *x.MarkerTitle
	}
	return ""
}

func (x *CGameRecordingTimelineEvent) GetUserMarker() bool {
	if x != nil && x.UserMarker != nil {
		return *x.UserMarker
	}
	return false
}

type CGameRecordingTimelineMetadata struct {
	state             protoimpl.MessageState                      `protogen:"open.v1"`
	TimelineId        *string                                     `protobuf:"bytes,1,opt,name=timeline_id,json=timelineId" json:"timeline_id,omitempty"`
	GameId            *uint64                                     `protobuf:"varint,2,opt,name=game_id,json=gameId" json:"game_id,omitempty"`
	DateRecorded      *uint32                                     `protobuf:"varint,3,opt,name=date_recorded,json=dateRecorded" json:"date_recorded,omitempty"`
	DurationMs        *uint64                                     `protobuf:"varint,4,opt,name=duration_ms,json=durationMs" json:"duration_ms,omitempty"`
	Recordings        []*CGameRecordingTimelineMetadata_Recording `protobuf:"bytes,5,rep,name=recordings" json:"recordings,omitempty"`
	Phases            []*CGameRecordingPhase                      `protobuf:"bytes,6,rep,name=phases" json:"phases,omitempty"`
	SignificantEvents []*CGameRecordingTimelineEvent              `protobuf:"bytes,7,rep,name=significant_events,json=significantEvents" json:"significant_events,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *CGameRecordingTimelineMetadata) Reset() {
	*x = CGameRecordingTimelineMetadata{}
	mi := &file_service_gamerecording_proto_msgTypes[87]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameRecordingTimelineMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecordingTimelineMetadata) ProtoMessage() {}

func (x *CGameRecordingTimelineMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_service_gamerecording_proto_msgTypes[87]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecordingTimelineMetadata.ProtoReflect.Descriptor instead.
func (*CGameRecordingTimelineMetadata) Descriptor() ([]byte, []int) {
	return file_service_gamerecording_proto_rawDescGZIP(), []int{87}
}

func (x *CGameRecordingTimelineMetadata) GetTimelineId() string {
	if x != nil && x.TimelineId != nil {
		return *x.TimelineId
	}
	return ""
}

func (x *CGameRecordingTimelineMetadata) GetGameId() uint64 {
	if x != nil && x.GameId != nil {
		return *x.GameId
	}
	return 0
}

func (x *CGameRecordingTimelineMetadata) GetDateRecorded() uint32 {
	if x != nil && x.DateRecorded != nil {
		return *x.DateRecorded
	}
	return 0
}

func (x *CGameRecordingTimelineMetadata) GetDurationMs() uint64 {
	if x != nil && x.DurationMs != nil {
		return *x.DurationMs
	}
	return 0
}

func (x *CGameRecordingTimelineMetadata) GetRecordings() []*CGameRecordingTimelineMetadata_Recording {
	if x != nil {
		return x.Recordings
	}
	return nil
}

func (x *CGameRecordingTimelineMetadata) GetPhases() []*CGameRecordingPhase {
	if x != nil {
		return x.Phases
	}
	return nil
}

func (x *CGameRecordingTimelineMetadata) GetSignificantEvents() []*CGameRecordingTimelineEvent {
	if x != nil {
		return x.SignificantEvents
	}
	return nil
}

type CGameRecordingTimelineMetadata_Recording struct {
	state                         protoimpl.MessageState `protogen:"open.v1"`
	RecordingId                   *string                `protobuf:"bytes,1,opt,name=recording_id,json=recordingId" json:"recording_id,omitempty"`
	StartOffsetMs                 *uint64                `protobuf:"varint,2,opt,name=start_offset_ms,json=startOffsetMs" json:"start_offset_ms,omitempty"`
	DurationMs                    *uint64                `protobuf:"varint,3,opt,name=duration_ms,json=durationMs" json:"duration_ms,omitempty"`
	RecordingType                 *int32                 `protobuf:"varint,4,opt,name=recording_type,json=recordingType" json:"recording_type,omitempty"`
	DeleteOnCleanup               *bool                  `protobuf:"varint,5,opt,name=delete_on_cleanup,json=deleteOnCleanup" json:"delete_on_cleanup,omitempty"`
	VideoManagerClipId            *uint64                `protobuf:"varint,6,opt,name=video_manager_clip_id,json=videoManagerClipId" json:"video_manager_clip_id,omitempty"`
	VideoManagerVideoId           *uint64                `protobuf:"varint,7,opt,name=video_manager_video_id,json=videoManagerVideoId" json:"video_manager_video_id,omitempty"`
	CdnManifestUrl                *string                `protobuf:"bytes,8,opt,name=cdn_manifest_url,json=cdnManifestUrl" json:"cdn_manifest_url,omitempty"`
	FileSize                      *uint64                `protobuf:"varint,9,opt,name=file_size,json=fileSize" json:"file_size,omitempty"`
	RecordingZeroTimelineOffsetMs *uint64                `protobuf:"varint,10,opt,name=recording_zero_timeline_offset_ms,json=recordingZeroTimelineOffsetMs" json:"recording_zero_timeline_offset_ms,omitempty"`
	unknownFields                 protoimpl.UnknownFields
	sizeCache                     protoimpl.SizeCache
}

func (x *CGameRecordingTimelineMetadata_Recording) Reset() {
	*x = CGameRecordingTimelineMetadata_Recording{}
	mi := &file_service_gamerecording_proto_msgTypes[88]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameRecordingTimelineMetadata_Recording) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecordingTimelineMetadata_Recording) ProtoMessage() {}

func (x *CGameRecordingTimelineMetadata_Recording) ProtoReflect() protoreflect.Message {
	mi := &file_service_gamerecording_proto_msgTypes[88]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecordingTimelineMetadata_Recording.ProtoReflect.Descriptor instead.
func (*CGameRecordingTimelineMetadata_Recording) Descriptor() ([]byte, []int) {
	return file_service_gamerecording_proto_rawDescGZIP(), []int{88}
}

func (x *CGameRecordingTimelineMetadata_Recording) GetRecordingId() string {
	if x != nil && x.RecordingId != nil {
		return *x.RecordingId
	}
	return ""
}

func (x *CGameRecordingTimelineMetadata_Recording) GetStartOffsetMs() uint64 {
	if x != nil && x.StartOffsetMs != nil {
		return *x.StartOffsetMs
	}
	return 0
}

func (x *CGameRecordingTimelineMetadata_Recording) GetDurationMs() uint64 {
	if x != nil && x.DurationMs != nil {
		return *x.DurationMs
	}
	return 0
}

func (x *CGameRecordingTimelineMetadata_Recording) GetRecordingType() int32 {
	if x != nil && x.RecordingType != nil {
		return *x.RecordingType
	}
	return 0
}

func (x *CGameRecordingTimelineMetadata_Recording) GetDeleteOnCleanup() bool {
	if x != nil && x.DeleteOnCleanup != nil {
		return *x.DeleteOnCleanup
	}
	return false
}

func (x *CGameRecordingTimelineMetadata_Recording) GetVideoManagerClipId() uint64 {
	if x != nil && x.VideoManagerClipId != nil {
		return *x.VideoManagerClipId
	}
	return 0
}

func (x *CGameRecordingTimelineMetadata_Recording) GetVideoManagerVideoId() uint64 {
	if x != nil && x.VideoManagerVideoId != nil {
		return *x.VideoManagerVideoId
	}
	return 0
}

func (x *CGameRecordingTimelineMetadata_Recording) GetCdnManifestUrl() string {
	if x != nil && x.CdnManifestUrl != nil {
		return *x.CdnManifestUrl
	}
	return ""
}

func (x *CGameRecordingTimelineMetadata_Recording) GetFileSize() uint64 {
	if x != nil && x.FileSize != nil {
		return *x.FileSize
	}
	return 0
}

func (x *CGameRecordingTimelineMetadata_Recording) GetRecordingZeroTimelineOffsetMs() uint64 {
	if x != nil && x.RecordingZeroTimelineOffsetMs != nil {
		return *x.RecordingZeroTimelineOffsetMs
	}
	return 0
}

type CPhaseAttribute struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Group         *string                `protobuf:"bytes,1,opt,name=group" json:"group,omitempty"`
	Value         *string                `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	Priority      *uint32                `protobuf:"varint,3,opt,name=priority" json:"priority,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPhaseAttribute) Reset() {
	*x = CPhaseAttribute{}
	mi := &file_service_gamerecording_proto_msgTypes[89]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPhaseAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPhaseAttribute) ProtoMessage() {}

func (x *CPhaseAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_service_gamerecording_proto_msgTypes[89]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPhaseAttribute.ProtoReflect.Descriptor instead.
func (*CPhaseAttribute) Descriptor() ([]byte, []int) {
	return file_service_gamerecording_proto_rawDescGZIP(), []int{89}
}

func (x *CPhaseAttribute) GetGroup() string {
	if x != nil && x.Group != nil {
		return *x.Group
	}
	return ""
}

func (x *CPhaseAttribute) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

func (x *CPhaseAttribute) GetPriority() uint32 {
	if x != nil && x.Priority != nil {
		return *x.Priority
	}
	return 0
}

type CTimelineEntry struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	TimelineId        *string                `protobuf:"bytes,1,opt,name=timeline_id,json=timelineId" json:"timeline_id,omitempty"`
	EntryId           *uint64                `protobuf:"varint,2,opt,name=entry_id,json=entryId" json:"entry_id,omitempty"`
	Time              *uint64                `protobuf:"varint,3,opt,name=time" json:"time,omitempty"`
	Type              *int32                 `protobuf:"varint,4,opt,name=type" json:"type,omitempty"`
	GameMode          *int32                 `protobuf:"varint,5,opt,name=game_mode,json=gameMode" json:"game_mode,omitempty"`
	RangeTitle        *string                `protobuf:"bytes,7,opt,name=range_title,json=rangeTitle" json:"range_title,omitempty"`
	RangeDuration     *uint64                `protobuf:"varint,8,opt,name=range_duration,json=rangeDuration" json:"range_duration,omitempty"`
	RangePossibleClip *int32                 `protobuf:"varint,9,opt,name=range_possible_clip,json=rangePossibleClip" json:"range_possible_clip,omitempty"`
	TimestampTitle    *string                `protobuf:"bytes,10,opt,name=timestamp_title,json=timestampTitle" json:"timestamp_title,omitempty"`
	MarkerIcon        *string                `protobuf:"bytes,11,opt,name=marker_icon,json=markerIcon" json:"marker_icon,omitempty"`
	MarkerDescription *string                `protobuf:"bytes,13,opt,name=marker_description,json=markerDescription" json:"marker_description,omitempty"`
	MarkerPriority    *int32                 `protobuf:"varint,14,opt,name=marker_priority,json=markerPriority" json:"marker_priority,omitempty"`
	ScreenshotHandle  *uint32                `protobuf:"varint,15,opt,name=screenshot_handle,json=screenshotHandle" json:"screenshot_handle,omitempty"`
	AchievementName   *string                `protobuf:"bytes,16,opt,name=achievement_name,json=achievementName" json:"achievement_name,omitempty"`
	Tag               []*CTimelineTag        `protobuf:"bytes,17,rep,name=tag" json:"tag,omitempty"`
	PhaseId           *string                `protobuf:"bytes,18,opt,name=phase_id,json=phaseId" json:"phase_id,omitempty"`
	Attributes        []*CPhaseAttribute     `protobuf:"bytes,19,rep,name=attributes" json:"attributes,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *CTimelineEntry) Reset() {
	*x = CTimelineEntry{}
	mi := &file_service_gamerecording_proto_msgTypes[90]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CTimelineEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTimelineEntry) ProtoMessage() {}

func (x *CTimelineEntry) ProtoReflect() protoreflect.Message {
	mi := &file_service_gamerecording_proto_msgTypes[90]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTimelineEntry.ProtoReflect.Descriptor instead.
func (*CTimelineEntry) Descriptor() ([]byte, []int) {
	return file_service_gamerecording_proto_rawDescGZIP(), []int{90}
}

func (x *CTimelineEntry) GetTimelineId() string {
	if x != nil && x.TimelineId != nil {
		return *x.TimelineId
	}
	return ""
}

func (x *CTimelineEntry) GetEntryId() uint64 {
	if x != nil && x.EntryId != nil {
		return *x.EntryId
	}
	return 0
}

func (x *CTimelineEntry) GetTime() uint64 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return 0
}

func (x *CTimelineEntry) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *CTimelineEntry) GetGameMode() int32 {
	if x != nil && x.GameMode != nil {
		return *x.GameMode
	}
	return 0
}

func (x *CTimelineEntry) GetRangeTitle() string {
	if x != nil && x.RangeTitle != nil {
		return *x.RangeTitle
	}
	return ""
}

func (x *CTimelineEntry) GetRangeDuration() uint64 {
	if x != nil && x.RangeDuration != nil {
		return *x.RangeDuration
	}
	return 0
}

func (x *CTimelineEntry) GetRangePossibleClip() int32 {
	if x != nil && x.RangePossibleClip != nil {
		return *x.RangePossibleClip
	}
	return 0
}

func (x *CTimelineEntry) GetTimestampTitle() string {
	if x != nil && x.TimestampTitle != nil {
		return *x.TimestampTitle
	}
	return ""
}

func (x *CTimelineEntry) GetMarkerIcon() string {
	if x != nil && x.MarkerIcon != nil {
		return *x.MarkerIcon
	}
	return ""
}

func (x *CTimelineEntry) GetMarkerDescription() string {
	if x != nil && x.MarkerDescription != nil {
		return *x.MarkerDescription
	}
	return ""
}

func (x *CTimelineEntry) GetMarkerPriority() int32 {
	if x != nil && x.MarkerPriority != nil {
		return *x.MarkerPriority
	}
	return 0
}

func (x *CTimelineEntry) GetScreenshotHandle() uint32 {
	if x != nil && x.ScreenshotHandle != nil {
		return *x.ScreenshotHandle
	}
	return 0
}

func (x *CTimelineEntry) GetAchievementName() string {
	if x != nil && x.AchievementName != nil {
		return *x.AchievementName
	}
	return ""
}

func (x *CTimelineEntry) GetTag() []*CTimelineTag {
	if x != nil {
		return x.Tag
	}
	return nil
}

func (x *CTimelineEntry) GetPhaseId() string {
	if x != nil && x.PhaseId != nil {
		return *x.PhaseId
	}
	return ""
}

func (x *CTimelineEntry) GetAttributes() []*CPhaseAttribute {
	if x != nil {
		return x.Attributes
	}
	return nil
}

type CTimelineTag struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          *string                `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Group         *string                `protobuf:"bytes,2,opt,name=group" json:"group,omitempty"`
	Icon          *string                `protobuf:"bytes,3,opt,name=icon" json:"icon,omitempty"`
	Priority      *uint32                `protobuf:"varint,4,opt,name=priority" json:"priority,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CTimelineTag) Reset() {
	*x = CTimelineTag{}
	mi := &file_service_gamerecording_proto_msgTypes[91]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CTimelineTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTimelineTag) ProtoMessage() {}

func (x *CTimelineTag) ProtoReflect() protoreflect.Message {
	mi := &file_service_gamerecording_proto_msgTypes[91]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTimelineTag.ProtoReflect.Descriptor instead.
func (*CTimelineTag) Descriptor() ([]byte, []int) {
	return file_service_gamerecording_proto_rawDescGZIP(), []int{91}
}

func (x *CTimelineTag) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CTimelineTag) GetGroup() string {
	if x != nil && x.Group != nil {
		return *x.Group
	}
	return ""
}

func (x *CTimelineTag) GetIcon() string {
	if x != nil && x.Icon != nil {
		return *x.Icon
	}
	return ""
}

func (x *CTimelineTag) GetPriority() uint32 {
	if x != nil && x.Priority != nil {
		return *x.Priority
	}
	return 0
}

var File_service_gamerecording_proto protoreflect.FileDescriptor

const file_service_gamerecording_proto_rawDesc = "" +
	"\n" +
	"\x1bservice_gamerecording.proto\x1a\x11common_base.proto\"4\n" +
	"2CGameRecording_CleanupBackgroundRecordings_Request\"5\n" +
	"3CGameRecording_CleanupBackgroundRecordings_Response\"`\n" +
	"'CGameRecording_ClipCreated_Notification\x125\n" +
	"\asummary\x18\x01 \x01(\v2\x1b.CGameRecording_ClipSummaryR\asummary\"[\n" +
	"'CGameRecording_ClipDeleted_Notification\x12\x17\n" +
	"\aclip_id\x18\x01 \x01(\tR\x06clipId\x12\x17\n" +
	"\agame_id\x18\x02 \x01(\x04R\x06gameId\"\x90\x05\n" +
	"\x1aCGameRecording_ClipSummary\x12\x17\n" +
	"\aclip_id\x18\x01 \x01(\tR\x06clipId\x12\x17\n" +
	"\agame_id\x18\x02 \x01(\x04R\x06gameId\x12\x1f\n" +
	"\vduration_ms\x18\x03 \x01(\x04R\n" +
	"durationMs\x12#\n" +
	"\rdate_recorded\x18\x04 \x01(\rR\fdateRecorded\x12*\n" +
	"\x11start_timeline_id\x18\x05 \x01(\tR\x0fstartTimelineId\x12&\n" +
	"\x0fstart_offset_ms\x18\x06 \x01(\x04R\rstartOffsetMs\x12*\n" +
	"\x11published_file_id\x18\a \x01(\x04R\x0fpublishedFileId\x12\x1b\n" +
	"\tfile_size\x18\b \x01(\x04R\bfileSize\x12\x12\n" +
	"\x04name\x18\t \x01(\tR\x04name\x12!\n" +
	"\fdate_clipped\x18\n" +
	" \x01(\rR\vdateClipped\x12\x1c\n" +
	"\ttemporary\x18\v \x01(\bR\ttemporary\x12'\n" +
	"\x0foriginal_device\x18\f \x01(\tR\x0eoriginalDevice\x12=\n" +
	"\x1boriginal_gaming_device_type\x18\r \x01(\rR\x18originalGamingDeviceType\x12'\n" +
	"\x0fdate_downloaded\x18\x0e \x01(\rR\x0edateDownloaded\x12#\n" +
	"\rthumbnail_url\x18\x0f \x01(\tR\fthumbnailUrl\x12'\n" +
	"\x0fthumbnail_width\x18\x10 \x01(\rR\x0ethumbnailWidth\x12)\n" +
	"\x10thumbnail_height\x18\x11 \x01(\rR\x0fthumbnailHeight\"<\n" +
	"!CGameRecording_DeleteClip_Request\x12\x17\n" +
	"\aclip_id\x18\x01 \x01(\tR\x06clipId\"$\n" +
	"\"CGameRecording_DeleteClip_Response\"F\n" +
	",CGameRecording_DeletePerGameSettings_Request\x12\x16\n" +
	"\x06gameid\x18\x01 \x01(\x06R\x06gameid\"/\n" +
	"-CGameRecording_DeletePerGameSettings_Response\"\xd5\x01\n" +
	"!CGameRecording_ExportClip_Request\x12\x17\n" +
	"\aclip_id\x18\x01 \x01(\tR\x06clipId\x12&\n" +
	"\x0fexport_mp4_path\x18\x02 \x01(\tR\rexportMp4Path\x12?\n" +
	"\bsettings\x18\x03 \x01(\v2#.CGameRecording_ExportClip_SettingsR\bsettings\x12.\n" +
	"\x13use_unique_filename\x18\x04 \x01(\bR\x11useUniqueFilename\"$\n" +
	"\"CGameRecording_ExportClip_Response\"\xc1\x01\n" +
	"\"CGameRecording_ExportClip_Settings\x12!\n" +
	"\fbitrate_kbps\x18\x01 \x01(\x05R\vbitrateKbps\x12\x14\n" +
	"\x05width\x18\x02 \x01(\x05R\x05width\x12\x16\n" +
	"\x06height\x18\x03 \x01(\x05R\x06height\x12*\n" +
	"\x11frames_per_second\x18\x04 \x01(\x05R\x0fframesPerSecond\x12\x1e\n" +
	"\x05codec\x18\x05 \x01(\x05B\b\x82\xb5\x18\x04enumR\x05codec\"\xb0\x01\n" +
	"(CGameRecording_ExportClipPreview_Request\x12\x17\n" +
	"\aclip_id\x18\x01 \x01(\tR\x06clipId\x12?\n" +
	"\bsettings\x18\x02 \x01(\v2#.CGameRecording_ExportClip_SettingsR\bsettings\x12*\n" +
	"\x11run_policy_checks\x18\x03 \x01(\bR\x0frunPolicyChecks\"\x93\x01\n" +
	")CGameRecording_ExportClipPreview_Response\x12%\n" +
	"\x0eestimated_size\x18\x01 \x01(\x04R\restimatedSize\x12?\n" +
	"\bsettings\x18\x02 \x01(\v2#.CGameRecording_ExportClip_SettingsR\bsettings\"{\n" +
	"*CGameRecording_ExportProgress_Notification\x12\x1a\n" +
	"\bprogress\x18\x01 \x01(\x02R\bprogress\x12\x17\n" +
	"\aclip_id\x18\x02 \x01(\tR\x06clipId\x12\x18\n" +
	"\aeresult\x18\x03 \x01(\x05R\aeresult\"s\n" +
	"3CGameRecording_GetAndTrimPostGameHighlights_Request\x12\x17\n" +
	"\agame_id\x18\x01 \x01(\x04R\x06gameId\x12#\n" +
	"\rcreated_after\x18\x02 \x01(\rR\fcreatedAfter\"l\n" +
	"4CGameRecording_GetAndTrimPostGameHighlights_Response\x124\n" +
	"\x06events\x18\x01 \x03(\v2\x1c.CGameRecordingTimelineEventR\x06events\"3\n" +
	"1CGameRecording_GetAppsWithBackgroundVideo_Request\"\x81\x01\n" +
	"2CGameRecording_GetAppsWithBackgroundVideo_Response\x12K\n" +
	"\x04apps\x18\x01 \x03(\v27.CGameRecording_GetAppsWithBackgroundVideo_Response_AppR\x04apps\"\xe3\x02\n" +
	"6CGameRecording_GetAppsWithBackgroundVideo_Response_App\x12\x17\n" +
	"\agame_id\x18\x01 \x01(\x04R\x06gameId\x123\n" +
	"\x16most_recent_start_time\x18\x02 \x01(\rR\x13mostRecentStartTime\x12/\n" +
	"\x0erecording_type\x18\x03 \x01(\x05B\b\x82\xb5\x18\x04enumR\rrecordingType\x124\n" +
	"\x16video_duration_seconds\x18\x04 \x01(\x01R\x14videoDurationSeconds\x12:\n" +
	"\x19timeline_duration_seconds\x18\x05 \x01(\x01R\x17timelineDurationSeconds\x12\x1b\n" +
	"\tis_active\x18\x06 \x01(\bR\bisActive\x12\x1b\n" +
	"\tfile_size\x18\a \x01(\x04R\bfileSize\".\n" +
	",CGameRecording_GetAvailableDiskSpace_Request\"C\n" +
	"-CGameRecording_GetAvailableDiskSpace_Response\x12\x12\n" +
	"\x04size\x18\x01 \x01(\x01R\x04size\"\x8c\x01\n" +
	"\x1fCGameRecording_GetClips_Request\x12\x17\n" +
	"\agame_id\x18\x01 \x01(\x04R\x06gameId\x12#\n" +
	"\rcreated_after\x18\x02 \x01(\rR\fcreatedAfter\x12+\n" +
	"\x11include_temporary\x18\x03 \x01(\bR\x10includeTemporary\"S\n" +
	" CGameRecording_GetClips_Response\x12/\n" +
	"\x04clip\x18\x01 \x03(\v2\x1b.CGameRecording_ClipSummaryR\x04clip\"+\n" +
	")CGameRecording_GetEnoughDiskSpace_Request\"O\n" +
	"*CGameRecording_GetEnoughDiskSpace_Response\x12!\n" +
	"\fenough_space\x18\x01 \x01(\bR\venoughSpace\"+\n" +
	")CGameRecording_GetPerGameSettings_Request\"i\n" +
	"*CGameRecording_GetPerGameSettings_Response\x12;\n" +
	"\bsettings\x18\x01 \x03(\v2\x1f.CGameRecording_PerGameSettingsR\bsettings\"0\n" +
	".CGameRecording_GetPlatformCapabilities_Request\"l\n" +
	"/CGameRecording_GetPlatformCapabilities_Response\x129\n" +
	"\x19per_process_audio_capture\x18\x01 \x01(\bR\x16perProcessAudioCapture\"B\n" +
	"'CGameRecording_GetRecordingSize_Request\x12\x17\n" +
	"\agame_id\x18\x01 \x01(\x04R\x06gameId\"G\n" +
	"(CGameRecording_GetRecordingSize_Response\x12\x1b\n" +
	"\tfile_size\x18\x01 \x01(\x04R\bfileSize\"9\n" +
	"\x1eCGameRecording_GetTags_Request\x12\x17\n" +
	"\agame_id\x18\x01 \x01(\x04R\x06gameId\"D\n" +
	"\x1fCGameRecording_GetTags_Response\x12!\n" +
	"\x04tags\x18\x01 \x03(\v2\r.CTimelineTagR\x04tags\"\xa8\x02\n" +
	"$CGameRecording_GetThumbnails_Request\x12!\n" +
	"\frecording_id\x18\x01 \x01(\tR\vrecordingId\x12\x17\n" +
	"\aclip_id\x18\x03 \x01(\tR\x06clipId\x12&\n" +
	"\x0fstart_offset_us\x18\x04 \x03(\x03R\rstartOffsetUs\x12\"\n" +
	"\n" +
	"major_axis\x18\x05 \x01(\r:\x03512R\tmajorAxis\x122\n" +
	"\x0etime_precision\x18\x06 \x01(\x05:\x010B\b\x82\xb5\x18\x04enumR\rtimePrecision\x12\x1f\n" +
	"\vtimeline_id\x18\a \x01(\tR\n" +
	"timelineId\x12#\n" +
	"\x06format\x18\b \x01(\x05:\x011B\b\x82\xb5\x18\x04enumR\x06format\"y\n" +
	"%CGameRecording_GetThumbnails_Response\x12P\n" +
	"\n" +
	"thumbnails\x18\x01 \x03(\v20.CGameRecording_GetThumbnails_Response_ThumbnailR\n" +
	"thumbnails\"~\n" +
	"/CGameRecording_GetThumbnails_Response_Thumbnail\x12\x1d\n" +
	"\n" +
	"image_data\x18\x01 \x01(\fR\timageData\x12\x14\n" +
	"\x05width\x18\x02 \x01(\rR\x05width\x12\x16\n" +
	"\x06height\x18\x03 \x01(\rR\x06height\"D\n" +
	")CGameRecording_GetTimelinesForApp_Request\x12\x17\n" +
	"\agame_id\x18\x01 \x01(\x04R\x06gameId\"k\n" +
	"*CGameRecording_GetTimelinesForApp_Response\x12=\n" +
	"\ttimelines\x18\x01 \x03(\v2\x1f.CGameRecordingTimelineMetadataR\ttimelines\"E\n" +
	"*CGameRecording_GetTimelinesForClip_Request\x12\x17\n" +
	"\aclip_id\x18\x01 \x01(\tR\x06clipId\"\xc9\x01\n" +
	"+CGameRecording_GetTimelinesForClip_Response\x12\x17\n" +
	"\agame_id\x18\x01 \x01(\x04R\x06gameId\x12=\n" +
	"\ttimelines\x18\x02 \x03(\v2\x1f.CGameRecordingTimelineMetadataR\ttimelines\x12B\n" +
	"\x1efirst_timeline_start_offset_ms\x18\x03 \x01(\x04R\x1afirstTimelineStartOffsetMs\"n\n" +
	"-CGameRecording_GetTotalDiskSpaceUsage_Request\x12\x1f\n" +
	"\vfolder_path\x18\x01 \x01(\tR\n" +
	"folderPath\x12\x1c\n" +
	"\x04type\x18\x02 \x01(\x05B\b\x82\xb5\x18\x04enumR\x04type\"D\n" +
	".CGameRecording_GetTotalDiskSpaceUsage_Response\x12\x12\n" +
	"\x04size\x18\x01 \x01(\x04R\x04size\"*\n" +
	"(CGameRecording_LowDiskSpace_Notification\"S\n" +
	"6CGameRecording_ManuallyDeleteRecordingsForApps_Request\x12\x19\n" +
	"\bgame_ids\x18\x01 \x03(\x04R\agameIds\"9\n" +
	"7CGameRecording_ManuallyDeleteRecordingsForApps_Response\"h\n" +
	"2CGameRecording_OpenOverlayToGamePhase_Notification\x12\x17\n" +
	"\agame_id\x18\x01 \x01(\x04R\x06gameId\x12\x19\n" +
	"\bphase_id\x18\x02 \x01(\tR\aphaseId\"l\n" +
	"6CGameRecording_OpenOverlayToTimelineEvent_Notification\x12\x17\n" +
	"\agame_id\x18\x01 \x01(\x04R\x06gameId\x12\x19\n" +
	"\bentry_id\x18\x02 \x01(\x04R\aentryId\"\xa2\x01\n" +
	"\x1eCGameRecording_PerGameSettings\x12\x16\n" +
	"\x06gameid\x18\x01 \x01(\x06R\x06gameid\x12\x18\n" +
	"\aenabled\x18\x02 \x01(\bR\aenabled\x12\x18\n" +
	"\aminutes\x18\x03 \x01(\rR\aminutes\x12\x18\n" +
	"\abitrate\x18\x04 \x01(\tR\abitrate\x12\x1a\n" +
	"\binfinite\x18\x05 \x01(\bR\binfinite\".\n" +
	",CGameRecording_PhaseListChanged_Notification\"P\n" +
	"5CGameRecording_PostGameHighlightsChanged_Notification\x12\x17\n" +
	"\agame_id\x18\x01 \x01(\x04R\x06gameId\"\x97\x02\n" +
	"\"CGameRecording_QueryPhases_Request\x12\x12\n" +
	"\x04page\x18\x01 \x01(\rR\x04page\x12\x14\n" +
	"\x05count\x18\x02 \x01(\rR\x05count\x12#\n" +
	"\rfilter_gameid\x18\n" +
	" \x01(\x04R\ffilterGameid\x120\n" +
	"\x14filter_search_string\x18\v \x01(\tR\x12filterSearchString\x12H\n" +
	"\vfilter_tags\x18\f \x03(\v2'.CGameRecording_QueryPhases_Request_TagR\n" +
	"filterTags\x12&\n" +
	"\x0ffilter_phase_id\x18\r \x01(\tR\rfilterPhaseId\"R\n" +
	"&CGameRecording_QueryPhases_Request_Tag\x12\x14\n" +
	"\x05group\x18\x01 \x01(\tR\x05group\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\"\x8a\x01\n" +
	"#CGameRecording_QueryPhases_Response\x12B\n" +
	"\x06phases\x18\x01 \x03(\v2*.CGameRecording_QueryPhases_Response_PhaseR\x06phases\x12\x1f\n" +
	"\vtotal_count\x18\x02 \x01(\rR\n" +
	"totalCount\"\xf1\x04\n" +
	")CGameRecording_QueryPhases_Response_Phase\x12\x17\n" +
	"\agame_id\x18\x01 \x01(\x04R\x06gameId\x12#\n" +
	"\rdate_recorded\x18\x05 \x01(\rR\fdateRecorded\x12\x1f\n" +
	"\vduration_ms\x18\x06 \x01(\x04R\n" +
	"durationMs\x12!\n" +
	"\x04tags\x18\a \x03(\v2\r.CTimelineTagR\x04tags\x124\n" +
	"\x0econtained_tags\x18\b \x03(\v2\r.CTimelineTagR\rcontainedTags\x12q\n" +
	"\x14background_recording\x18\t \x01(\v2>.CGameRecording_QueryPhases_Response_Phase_BackgroundRecordingR\x13backgroundRecording\x12\x19\n" +
	"\bclip_ids\x18\n" +
	" \x03(\tR\aclipIds\x12\x1c\n" +
	"\x04type\x18\v \x01(\x05B\b\x82\xb5\x18\x04enumR\x04type\x12\x19\n" +
	"\bstart_ms\x18\f \x01(\x04R\astartMs\x12 \n" +
	"\vscreenshots\x18\r \x03(\rR\vscreenshots\x12\x16\n" +
	"\x06active\x18\x0e \x01(\bR\x06active\x12\x19\n" +
	"\bphase_id\x18\x0f \x01(\tR\aphaseId\x12>\n" +
	"\x12significant_events\x18\x10 \x03(\v2\x0f.CTimelineEntryR\x11significantEvents\x120\n" +
	"\n" +
	"attributes\x18\x11 \x03(\v2\x10.CPhaseAttributeR\n" +
	"attributes\"\x99\x01\n" +
	"=CGameRecording_QueryPhases_Response_Phase_BackgroundRecording\x12\x1f\n" +
	"\vtimeline_id\x18\x01 \x01(\tR\n" +
	"timelineId\x12\x16\n" +
	"\x06offset\x18\x02 \x01(\x04R\x06offset\x12\x1f\n" +
	"\vduration_ms\x18\x03 \x01(\x04R\n" +
	"durationMs\"\xba\x02\n" +
	"3CGameRecording_RecordingSessionChanged_Notification\x125\n" +
	"\x11notification_type\x18\x01 \x01(\x05B\b\x82\xb5\x18\x04enumR\x10notificationType\x12\x1f\n" +
	"\vtimeline_id\x18\x02 \x01(\tR\n" +
	"timelineId\x12\x17\n" +
	"\agame_id\x18\x04 \x01(\x04R\x06gameId\x12\x1d\n" +
	"\n" +
	"session_id\x18\x05 \x01(\tR\tsessionId\x12!\n" +
	"\fstart_offset\x18\x06 \x01(\x04R\vstartOffset\x12\x1f\n" +
	"\vduration_ms\x18\a \x01(\x04R\n" +
	"durationMs\x12/\n" +
	"\x0erecording_type\x18\b \x01(\x05B\b\x82\xb5\x18\x04enumR\rrecordingType\"\xb3\x02\n" +
	"\x1fCGameRecording_SaveClip_Request\x12\x17\n" +
	"\agame_id\x18\x01 \x01(\x04R\x06gameId\x12?\n" +
	"\x05start\x18\x02 \x01(\v2).CGameRecording_SaveClip_Request_PositionR\x05start\x12;\n" +
	"\x03end\x18\x03 \x01(\v2).CGameRecording_SaveClip_Request_PositionR\x03end\x12\x12\n" +
	"\x04name\x18\x04 \x01(\tR\x04name\x12\x1e\n" +
	"\vsrc_clip_id\x18\x05 \x01(\tR\tsrcClipId\x12\x1c\n" +
	"\ttemporary\x18\x06 \x01(\bR\ttemporary\x12'\n" +
	"\x0fforce_thumbnail\x18\a \x01(\bR\x0eforceThumbnail\"h\n" +
	"(CGameRecording_SaveClip_Request_Position\x12\x1f\n" +
	"\vtimeline_id\x18\x01 \x01(\tR\n" +
	"timelineId\x12\x1b\n" +
	"\toffset_ms\x18\x02 \x01(\x04R\boffsetMs\"Y\n" +
	" CGameRecording_SaveClip_Response\x125\n" +
	"\asummary\x18\x01 \x01(\v2\x1b.CGameRecording_ClipSummaryR\asummary\"q\n" +
	")CGameRecording_SetPerGameSettings_Request\x12D\n" +
	"\rgame_settings\x18\x01 \x01(\v2\x1f.CGameRecording_PerGameSettingsR\fgameSettings\",\n" +
	"*CGameRecording_SetPerGameSettings_Response\"@\n" +
	"%CGameRecording_StartRecording_Request\x12\x17\n" +
	"\agame_id\x18\x01 \x01(\x04R\x06gameId\"(\n" +
	"&CGameRecording_StartRecording_Response\"?\n" +
	"$CGameRecording_StopRecording_Request\x12\x17\n" +
	"\agame_id\x18\x01 \x01(\x04R\x06gameId\"^\n" +
	"%CGameRecording_StopRecording_Response\x125\n" +
	"\asummary\x18\x01 \x01(\v2\x1b.CGameRecording_ClipSummaryR\asummary\"O\n" +
	"4CGameRecording_SwitchBackgroundRecordingGame_Request\x12\x17\n" +
	"\agame_id\x18\x01 \x01(\x04R\x06gameId\"7\n" +
	"5CGameRecording_SwitchBackgroundRecordingGame_Response\"\x8f\x01\n" +
	"%CGameRecording_TakeScreenshot_Request\x12\x17\n" +
	"\agame_id\x18\x01 \x01(\x06R\x06gameId\x12\x1f\n" +
	"\vtimeline_id\x18\x02 \x01(\tR\n" +
	"timelineId\x12,\n" +
	"\x12timeline_offset_ms\x18\x03 \x01(\x04R\x10timelineOffsetMs\"M\n" +
	"&CGameRecording_TakeScreenshot_Response\x12#\n" +
	"\rscreenshot_id\x18\x01 \x01(\x06R\fscreenshotId\"\xde\x01\n" +
	"+CGameRecording_TimelineChanged_Notification\x125\n" +
	"\x11notification_type\x18\x01 \x01(\x05B\b\x82\xb5\x18\x04enumR\x10notificationType\x12\x1f\n" +
	"\vtimeline_id\x18\x02 \x01(\tR\n" +
	"timelineId\x12\x17\n" +
	"\agame_id\x18\x03 \x01(\x04R\x06gameId\x12\x1d\n" +
	"\n" +
	"start_time\x18\x04 \x01(\rR\tstartTime\x12\x1f\n" +
	"\vduration_ms\x18\x05 \x01(\x04R\n" +
	"durationMs\"r\n" +
	"0CGameRecording_TimelineEntryChanged_Notification\x12%\n" +
	"\x05entry\x18\x01 \x01(\v2\x0f.CTimelineEntryR\x05entry\x12\x17\n" +
	"\agame_id\x18\x02 \x01(\x06R\x06gameId\"\x87\x01\n" +
	"0CGameRecording_TimelineEntryRemoved_Notification\x12\x17\n" +
	"\agame_id\x18\x01 \x01(\x04R\x06gameId\x12\x1f\n" +
	"\vtimeline_id\x18\x02 \x01(\tR\n" +
	"timelineId\x12\x19\n" +
	"\bentry_id\x18\x03 \x01(\x04R\aentryId\"\x8d\x01\n" +
	"(CGameRecording_UploadClipToSteam_Request\x12\x17\n" +
	"\aclip_id\x18\x01 \x01(\tR\x06clipId\x12\x14\n" +
	"\x05title\x18\x02 \x01(\tR\x05title\x12\x12\n" +
	"\x04desc\x18\x03 \x01(\tR\x04desc\x12\x1e\n" +
	"\n" +
	"visibility\x18\x04 \x01(\x05R\n" +
	"visibility\"b\n" +
	")CGameRecording_UploadClipToSteam_Response\x125\n" +
	"\asummary\x18\x01 \x01(\v2\x1b.CGameRecording_ClipSummaryR\asummary\"{\n" +
	"*CGameRecording_UploadProgress_Notification\x12\x1a\n" +
	"\bprogress\x18\x01 \x01(\x02R\bprogress\x12\x17\n" +
	"\aclip_id\x18\x02 \x01(\tR\x06clipId\x12\x18\n" +
	"\aeresult\x18\x03 \x01(\x05R\aeresult\"\x86\x01\n" +
	"+CGameRecording_UserAddTimelineEntry_Request\x12\x17\n" +
	"\agame_id\x18\x01 \x01(\x04R\x06gameId\x12%\n" +
	"\x05entry\x18\x02 \x01(\v2\x0f.CTimelineEntryR\x05entry\x12\x17\n" +
	"\aclip_id\x18\x03 \x01(\tR\x06clipId\"I\n" +
	",CGameRecording_UserAddTimelineEntry_Response\x12\x19\n" +
	"\bentry_id\x18\x01 \x01(\x04R\aentryId\"\x9e\x01\n" +
	".CGameRecording_UserRemoveTimelineEntry_Request\x12\x17\n" +
	"\agame_id\x18\x01 \x01(\x04R\x06gameId\x12\x1f\n" +
	"\vtimeline_id\x18\x02 \x01(\tR\n" +
	"timelineId\x12\x19\n" +
	"\bentry_id\x18\x03 \x01(\x04R\aentryId\x12\x17\n" +
	"\aclip_id\x18\x04 \x01(\tR\x06clipId\"1\n" +
	"/CGameRecording_UserRemoveTimelineEntry_Response\"\x89\x01\n" +
	".CGameRecording_UserUpdateTimelineEntry_Request\x12\x17\n" +
	"\agame_id\x18\x01 \x01(\x04R\x06gameId\x12%\n" +
	"\x05entry\x18\x02 \x01(\v2\x0f.CTimelineEntryR\x05entry\x12\x17\n" +
	"\aclip_id\x18\x03 \x01(\tR\x06clipId\"1\n" +
	"/CGameRecording_UserUpdateTimelineEntry_Response\"9\n" +
	"\x1eCGameRecording_ZipClip_Request\x12\x17\n" +
	"\aclip_id\x18\x01 \x01(\tR\x06clipId\"<\n" +
	"\x1fCGameRecording_ZipClip_Response\x12\x19\n" +
	"\bzip_path\x18\x01 \x01(\tR\azipPath\"\xb0\x02\n" +
	"\x13CGameRecordingPhase\x12\x19\n" +
	"\bphase_id\x18\x04 \x01(\tR\aphaseId\x12\x1f\n" +
	"\vduration_ms\x18\x05 \x01(\x04R\n" +
	"durationMs\x12,\n" +
	"\x04tags\x18\x06 \x03(\v2\x18.CGameRecordingPhase_TagR\x04tags\x12?\n" +
	"\x0econtained_tags\x18\a \x03(\v2\x18.CGameRecordingPhase_TagR\rcontainedTags\x12<\n" +
	"\x1abackground_timeline_offset\x18\b \x01(\x04R\x18backgroundTimelineOffset\x120\n" +
	"\n" +
	"attributes\x18\t \x03(\v2\x10.CPhaseAttributeR\n" +
	"attributes\"C\n" +
	"\x17CGameRecordingPhase_Tag\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x14\n" +
	"\x05group\x18\x02 \x01(\tR\x05group\"\xea\x02\n" +
	"\x1bCGameRecordingTimelineEvent\x12\x17\n" +
	"\agame_id\x18\x01 \x01(\x04R\x06gameId\x12\x1d\n" +
	"\n" +
	"rt_created\x18\x02 \x01(\rR\trtCreated\x12#\n" +
	"\rpossible_clip\x18\x03 \x01(\x05R\fpossibleClip\x12\x1f\n" +
	"\vtimeline_id\x18\x04 \x01(\tR\n" +
	"timelineId\x12\x19\n" +
	"\bentry_id\x18\x05 \x01(\x04R\aentryId\x12,\n" +
	"\x12timeline_offset_ms\x18\x06 \x01(\x04R\x10timelineOffsetMs\x12\x1f\n" +
	"\vduration_ms\x18\a \x01(\x04R\n" +
	"durationMs\x12\x1f\n" +
	"\vmarker_icon\x18\b \x01(\tR\n" +
	"markerIcon\x12!\n" +
	"\fmarker_title\x18\t \x01(\tR\vmarkerTitle\x12\x1f\n" +
	"\vuser_marker\x18\n" +
	" \x01(\bR\n" +
	"userMarker\"\xe6\x02\n" +
	"\x1eCGameRecordingTimelineMetadata\x12\x1f\n" +
	"\vtimeline_id\x18\x01 \x01(\tR\n" +
	"timelineId\x12\x17\n" +
	"\agame_id\x18\x02 \x01(\x04R\x06gameId\x12#\n" +
	"\rdate_recorded\x18\x03 \x01(\rR\fdateRecorded\x12\x1f\n" +
	"\vduration_ms\x18\x04 \x01(\x04R\n" +
	"durationMs\x12I\n" +
	"\n" +
	"recordings\x18\x05 \x03(\v2).CGameRecordingTimelineMetadata_RecordingR\n" +
	"recordings\x12,\n" +
	"\x06phases\x18\x06 \x03(\v2\x14.CGameRecordingPhaseR\x06phases\x12K\n" +
	"\x12significant_events\x18\a \x03(\v2\x1c.CGameRecordingTimelineEventR\x11significantEvents\"\xec\x03\n" +
	"(CGameRecordingTimelineMetadata_Recording\x12!\n" +
	"\frecording_id\x18\x01 \x01(\tR\vrecordingId\x12&\n" +
	"\x0fstart_offset_ms\x18\x02 \x01(\x04R\rstartOffsetMs\x12\x1f\n" +
	"\vduration_ms\x18\x03 \x01(\x04R\n" +
	"durationMs\x12/\n" +
	"\x0erecording_type\x18\x04 \x01(\x05B\b\x82\xb5\x18\x04enumR\rrecordingType\x12*\n" +
	"\x11delete_on_cleanup\x18\x05 \x01(\bR\x0fdeleteOnCleanup\x121\n" +
	"\x15video_manager_clip_id\x18\x06 \x01(\x04R\x12videoManagerClipId\x123\n" +
	"\x16video_manager_video_id\x18\a \x01(\x04R\x13videoManagerVideoId\x12(\n" +
	"\x10cdn_manifest_url\x18\b \x01(\tR\x0ecdnManifestUrl\x12\x1b\n" +
	"\tfile_size\x18\t \x01(\x04R\bfileSize\x12H\n" +
	"!recording_zero_timeline_offset_ms\x18\n" +
	" \x01(\x04R\x1drecordingZeroTimelineOffsetMs\"Y\n" +
	"\x0fCPhaseAttribute\x12\x14\n" +
	"\x05group\x18\x01 \x01(\tR\x05group\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value\x12\x1a\n" +
	"\bpriority\x18\x03 \x01(\rR\bpriority\"\xfb\x04\n" +
	"\x0eCTimelineEntry\x12\x1f\n" +
	"\vtimeline_id\x18\x01 \x01(\tR\n" +
	"timelineId\x12\x19\n" +
	"\bentry_id\x18\x02 \x01(\x04R\aentryId\x12\x12\n" +
	"\x04time\x18\x03 \x01(\x04R\x04time\x12\x1c\n" +
	"\x04type\x18\x04 \x01(\x05B\b\x82\xb5\x18\x04enumR\x04type\x12\x1b\n" +
	"\tgame_mode\x18\x05 \x01(\x05R\bgameMode\x12\x1f\n" +
	"\vrange_title\x18\a \x01(\tR\n" +
	"rangeTitle\x12%\n" +
	"\x0erange_duration\x18\b \x01(\x04R\rrangeDuration\x12.\n" +
	"\x13range_possible_clip\x18\t \x01(\x05R\x11rangePossibleClip\x12'\n" +
	"\x0ftimestamp_title\x18\n" +
	" \x01(\tR\x0etimestampTitle\x12\x1f\n" +
	"\vmarker_icon\x18\v \x01(\tR\n" +
	"markerIcon\x12-\n" +
	"\x12marker_description\x18\r \x01(\tR\x11markerDescription\x12'\n" +
	"\x0fmarker_priority\x18\x0e \x01(\x05R\x0emarkerPriority\x12+\n" +
	"\x11screenshot_handle\x18\x0f \x01(\rR\x10screenshotHandle\x12)\n" +
	"\x10achievement_name\x18\x10 \x01(\tR\x0fachievementName\x12\x1f\n" +
	"\x03tag\x18\x11 \x03(\v2\r.CTimelineTagR\x03tag\x12\x19\n" +
	"\bphase_id\x18\x12 \x01(\tR\aphaseId\x120\n" +
	"\n" +
	"attributes\x18\x13 \x03(\v2\x10.CPhaseAttributeR\n" +
	"attributes\"h\n" +
	"\fCTimelineTag\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x14\n" +
	"\x05group\x18\x02 \x01(\tR\x05group\x12\x12\n" +
	"\x04icon\x18\x03 \x01(\tR\x04icon\x12\x1a\n" +
	"\bpriority\x18\x04 \x01(\rR\bpriority2\x83$\n" +
	"\rGameRecording\x12\x88\x01\n" +
	"\x1bCleanupBackgroundRecordings\x123.CGameRecording_CleanupBackgroundRecordings_Request\x1a4.CGameRecording_CleanupBackgroundRecordings_Response\x12U\n" +
	"\n" +
	"DeleteClip\x12\".CGameRecording_DeleteClip_Request\x1a#.CGameRecording_DeleteClip_Response\x12v\n" +
	"\x15DeletePerGameSettings\x12-.CGameRecording_DeletePerGameSettings_Request\x1a..CGameRecording_DeletePerGameSettings_Response\x12U\n" +
	"\n" +
	"ExportClip\x12\".CGameRecording_ExportClip_Request\x1a#.CGameRecording_ExportClip_Response\x12j\n" +
	"\x11ExportClipPreview\x12).CGameRecording_ExportClipPreview_Request\x1a*.CGameRecording_ExportClipPreview_Response\x12\x8b\x01\n" +
	"\x1cGetAndTrimPostGameHighlights\x124.CGameRecording_GetAndTrimPostGameHighlights_Request\x1a5.CGameRecording_GetAndTrimPostGameHighlights_Response\x12\x85\x01\n" +
	"\x1aGetAppsWithBackgroundVideo\x122.CGameRecording_GetAppsWithBackgroundVideo_Request\x1a3.CGameRecording_GetAppsWithBackgroundVideo_Response\x12v\n" +
	"\x15GetAvailableDiskSpace\x12-.CGameRecording_GetAvailableDiskSpace_Request\x1a..CGameRecording_GetAvailableDiskSpace_Response\x12u\n" +
	"\x1eGetBackgroundRecordingFileSize\x12(.CGameRecording_GetRecordingSize_Request\x1a).CGameRecording_GetRecordingSize_Response\x12O\n" +
	"\bGetClips\x12 .CGameRecording_GetClips_Request\x1a!.CGameRecording_GetClips_Response\x12m\n" +
	"\x12GetEnoughDiskSpace\x12*.CGameRecording_GetEnoughDiskSpace_Request\x1a+.CGameRecording_GetEnoughDiskSpace_Response\x12m\n" +
	"\x12GetPerGameSettings\x12*.CGameRecording_GetPerGameSettings_Request\x1a+.CGameRecording_GetPerGameSettings_Response\x12|\n" +
	"\x17GetPlatformCapabilities\x12/.CGameRecording_GetPlatformCapabilities_Request\x1a0.CGameRecording_GetPlatformCapabilities_Response\x12L\n" +
	"\aGetTags\x12\x1f.CGameRecording_GetTags_Request\x1a .CGameRecording_GetTags_Response\x12^\n" +
	"\rGetThumbnails\x12%.CGameRecording_GetThumbnails_Request\x1a&.CGameRecording_GetThumbnails_Response\x12m\n" +
	"\x12GetTimelinesForApp\x12*.CGameRecording_GetTimelinesForApp_Request\x1a+.CGameRecording_GetTimelinesForApp_Response\x12p\n" +
	"\x13GetTimelinesForClip\x12+.CGameRecording_GetTimelinesForClip_Request\x1a,.CGameRecording_GetTimelinesForClip_Response\x12y\n" +
	"\x16GetTotalDiskSpaceUsage\x12..CGameRecording_GetTotalDiskSpaceUsage_Request\x1a/.CGameRecording_GetTotalDiskSpaceUsage_Response\x12\x94\x01\n" +
	"\x1fManuallyDeleteRecordingsForApps\x127.CGameRecording_ManuallyDeleteRecordingsForApps_Request\x1a8.CGameRecording_ManuallyDeleteRecordingsForApps_Response\x12J\n" +
	"\x11NotifyClipCreated\x12(.CGameRecording_ClipCreated_Notification\x1a\v.NoResponse\x12J\n" +
	"\x11NotifyClipDeleted\x12(.CGameRecording_ClipDeleted_Notification\x1a\v.NoResponse\x12P\n" +
	"\x14NotifyExportProgress\x12+.CGameRecording_ExportProgress_Notification\x1a\v.NoResponse\x12L\n" +
	"\x12NotifyLowDiskSpace\x12).CGameRecording_LowDiskSpace_Notification\x1a\v.NoResponse\x12`\n" +
	"\x1cNotifyOpenOverlayToGamePhase\x123.CGameRecording_OpenOverlayToGamePhase_Notification\x1a\v.NoResponse\x12h\n" +
	" NotifyOpenOverlayToTimelineEvent\x127.CGameRecording_OpenOverlayToTimelineEvent_Notification\x1a\v.NoResponse\x12T\n" +
	"\x16NotifyPhaseListChanged\x12-.CGameRecording_PhaseListChanged_Notification\x1a\v.NoResponse\x12f\n" +
	"\x1fNotifyPostGameHighlightsChanged\x126.CGameRecording_PostGameHighlightsChanged_Notification\x1a\v.NoResponse\x12b\n" +
	"\x1dNotifyRecordingSessionChanged\x124.CGameRecording_RecordingSessionChanged_Notification\x1a\v.NoResponse\x12R\n" +
	"\x15NotifyTimelineChanged\x12,.CGameRecording_TimelineChanged_Notification\x1a\v.NoResponse\x12\\\n" +
	"\x1aNotifyTimelineEntryChanged\x121.CGameRecording_TimelineEntryChanged_Notification\x1a\v.NoResponse\x12\\\n" +
	"\x1aNotifyTimelineEntryRemoved\x121.CGameRecording_TimelineEntryRemoved_Notification\x1a\v.NoResponse\x12P\n" +
	"\x14NotifyUploadProgress\x12+.CGameRecording_UploadProgress_Notification\x1a\v.NoResponse\x12X\n" +
	"\vQueryPhases\x12#.CGameRecording_QueryPhases_Request\x1a$.CGameRecording_QueryPhases_Response\x12O\n" +
	"\bSaveClip\x12 .CGameRecording_SaveClip_Request\x1a!.CGameRecording_SaveClip_Response\x12m\n" +
	"\x12SetPerGameSettings\x12*.CGameRecording_SetPerGameSettings_Request\x1a+.CGameRecording_SetPerGameSettings_Response\x12a\n" +
	"\x0eStartRecording\x12&.CGameRecording_StartRecording_Request\x1a'.CGameRecording_StartRecording_Response\x12^\n" +
	"\rStopRecording\x12%.CGameRecording_StopRecording_Request\x1a&.CGameRecording_StopRecording_Response\x12\x8e\x01\n" +
	"\x1dSwitchBackgroundRecordingGame\x125.CGameRecording_SwitchBackgroundRecordingGame_Request\x1a6.CGameRecording_SwitchBackgroundRecordingGame_Response\x12a\n" +
	"\x0eTakeScreenshot\x12&.CGameRecording_TakeScreenshot_Request\x1a'.CGameRecording_TakeScreenshot_Response\x12j\n" +
	"\x11UploadClipToSteam\x12).CGameRecording_UploadClipToSteam_Request\x1a*.CGameRecording_UploadClipToSteam_Response\x12s\n" +
	"\x14UserAddTimelineEntry\x12,.CGameRecording_UserAddTimelineEntry_Request\x1a-.CGameRecording_UserAddTimelineEntry_Response\x12|\n" +
	"\x17UserRemoveTimelineEntry\x12/.CGameRecording_UserRemoveTimelineEntry_Request\x1a0.CGameRecording_UserRemoveTimelineEntry_Response\x12|\n" +
	"\x17UserUpdateTimelineEntry\x12/.CGameRecording_UserUpdateTimelineEntry_Request\x1a0.CGameRecording_UserUpdateTimelineEntry_Response\x12L\n" +
	"\aZipClip\x12\x1f.CGameRecording_ZipClip_Request\x1a .CGameRecording_ZipClip_Response"

var (
	file_service_gamerecording_proto_rawDescOnce sync.Once
	file_service_gamerecording_proto_rawDescData []byte
)

func file_service_gamerecording_proto_rawDescGZIP() []byte {
	file_service_gamerecording_proto_rawDescOnce.Do(func() {
		file_service_gamerecording_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_service_gamerecording_proto_rawDesc), len(file_service_gamerecording_proto_rawDesc)))
	})
	return file_service_gamerecording_proto_rawDescData
}

var file_service_gamerecording_proto_msgTypes = make([]protoimpl.MessageInfo, 92)
var file_service_gamerecording_proto_goTypes = []any{
	(*CGameRecording_CleanupBackgroundRecordings_Request)(nil),            // 0: CGameRecording_CleanupBackgroundRecordings_Request
	(*CGameRecording_CleanupBackgroundRecordings_Response)(nil),           // 1: CGameRecording_CleanupBackgroundRecordings_Response
	(*CGameRecording_ClipCreated_Notification)(nil),                       // 2: CGameRecording_ClipCreated_Notification
	(*CGameRecording_ClipDeleted_Notification)(nil),                       // 3: CGameRecording_ClipDeleted_Notification
	(*CGameRecording_ClipSummary)(nil),                                    // 4: CGameRecording_ClipSummary
	(*CGameRecording_DeleteClip_Request)(nil),                             // 5: CGameRecording_DeleteClip_Request
	(*CGameRecording_DeleteClip_Response)(nil),                            // 6: CGameRecording_DeleteClip_Response
	(*CGameRecording_DeletePerGameSettings_Request)(nil),                  // 7: CGameRecording_DeletePerGameSettings_Request
	(*CGameRecording_DeletePerGameSettings_Response)(nil),                 // 8: CGameRecording_DeletePerGameSettings_Response
	(*CGameRecording_ExportClip_Request)(nil),                             // 9: CGameRecording_ExportClip_Request
	(*CGameRecording_ExportClip_Response)(nil),                            // 10: CGameRecording_ExportClip_Response
	(*CGameRecording_ExportClip_Settings)(nil),                            // 11: CGameRecording_ExportClip_Settings
	(*CGameRecording_ExportClipPreview_Request)(nil),                      // 12: CGameRecording_ExportClipPreview_Request
	(*CGameRecording_ExportClipPreview_Response)(nil),                     // 13: CGameRecording_ExportClipPreview_Response
	(*CGameRecording_ExportProgress_Notification)(nil),                    // 14: CGameRecording_ExportProgress_Notification
	(*CGameRecording_GetAndTrimPostGameHighlights_Request)(nil),           // 15: CGameRecording_GetAndTrimPostGameHighlights_Request
	(*CGameRecording_GetAndTrimPostGameHighlights_Response)(nil),          // 16: CGameRecording_GetAndTrimPostGameHighlights_Response
	(*CGameRecording_GetAppsWithBackgroundVideo_Request)(nil),             // 17: CGameRecording_GetAppsWithBackgroundVideo_Request
	(*CGameRecording_GetAppsWithBackgroundVideo_Response)(nil),            // 18: CGameRecording_GetAppsWithBackgroundVideo_Response
	(*CGameRecording_GetAppsWithBackgroundVideo_Response_App)(nil),        // 19: CGameRecording_GetAppsWithBackgroundVideo_Response_App
	(*CGameRecording_GetAvailableDiskSpace_Request)(nil),                  // 20: CGameRecording_GetAvailableDiskSpace_Request
	(*CGameRecording_GetAvailableDiskSpace_Response)(nil),                 // 21: CGameRecording_GetAvailableDiskSpace_Response
	(*CGameRecording_GetClips_Request)(nil),                               // 22: CGameRecording_GetClips_Request
	(*CGameRecording_GetClips_Response)(nil),                              // 23: CGameRecording_GetClips_Response
	(*CGameRecording_GetEnoughDiskSpace_Request)(nil),                     // 24: CGameRecording_GetEnoughDiskSpace_Request
	(*CGameRecording_GetEnoughDiskSpace_Response)(nil),                    // 25: CGameRecording_GetEnoughDiskSpace_Response
	(*CGameRecording_GetPerGameSettings_Request)(nil),                     // 26: CGameRecording_GetPerGameSettings_Request
	(*CGameRecording_GetPerGameSettings_Response)(nil),                    // 27: CGameRecording_GetPerGameSettings_Response
	(*CGameRecording_GetPlatformCapabilities_Request)(nil),                // 28: CGameRecording_GetPlatformCapabilities_Request
	(*CGameRecording_GetPlatformCapabilities_Response)(nil),               // 29: CGameRecording_GetPlatformCapabilities_Response
	(*CGameRecording_GetRecordingSize_Request)(nil),                       // 30: CGameRecording_GetRecordingSize_Request
	(*CGameRecording_GetRecordingSize_Response)(nil),                      // 31: CGameRecording_GetRecordingSize_Response
	(*CGameRecording_GetTags_Request)(nil),                                // 32: CGameRecording_GetTags_Request
	(*CGameRecording_GetTags_Response)(nil),                               // 33: CGameRecording_GetTags_Response
	(*CGameRecording_GetThumbnails_Request)(nil),                          // 34: CGameRecording_GetThumbnails_Request
	(*CGameRecording_GetThumbnails_Response)(nil),                         // 35: CGameRecording_GetThumbnails_Response
	(*CGameRecording_GetThumbnails_Response_Thumbnail)(nil),               // 36: CGameRecording_GetThumbnails_Response_Thumbnail
	(*CGameRecording_GetTimelinesForApp_Request)(nil),                     // 37: CGameRecording_GetTimelinesForApp_Request
	(*CGameRecording_GetTimelinesForApp_Response)(nil),                    // 38: CGameRecording_GetTimelinesForApp_Response
	(*CGameRecording_GetTimelinesForClip_Request)(nil),                    // 39: CGameRecording_GetTimelinesForClip_Request
	(*CGameRecording_GetTimelinesForClip_Response)(nil),                   // 40: CGameRecording_GetTimelinesForClip_Response
	(*CGameRecording_GetTotalDiskSpaceUsage_Request)(nil),                 // 41: CGameRecording_GetTotalDiskSpaceUsage_Request
	(*CGameRecording_GetTotalDiskSpaceUsage_Response)(nil),                // 42: CGameRecording_GetTotalDiskSpaceUsage_Response
	(*CGameRecording_LowDiskSpace_Notification)(nil),                      // 43: CGameRecording_LowDiskSpace_Notification
	(*CGameRecording_ManuallyDeleteRecordingsForApps_Request)(nil),        // 44: CGameRecording_ManuallyDeleteRecordingsForApps_Request
	(*CGameRecording_ManuallyDeleteRecordingsForApps_Response)(nil),       // 45: CGameRecording_ManuallyDeleteRecordingsForApps_Response
	(*CGameRecording_OpenOverlayToGamePhase_Notification)(nil),            // 46: CGameRecording_OpenOverlayToGamePhase_Notification
	(*CGameRecording_OpenOverlayToTimelineEvent_Notification)(nil),        // 47: CGameRecording_OpenOverlayToTimelineEvent_Notification
	(*CGameRecording_PerGameSettings)(nil),                                // 48: CGameRecording_PerGameSettings
	(*CGameRecording_PhaseListChanged_Notification)(nil),                  // 49: CGameRecording_PhaseListChanged_Notification
	(*CGameRecording_PostGameHighlightsChanged_Notification)(nil),         // 50: CGameRecording_PostGameHighlightsChanged_Notification
	(*CGameRecording_QueryPhases_Request)(nil),                            // 51: CGameRecording_QueryPhases_Request
	(*CGameRecording_QueryPhases_Request_Tag)(nil),                        // 52: CGameRecording_QueryPhases_Request_Tag
	(*CGameRecording_QueryPhases_Response)(nil),                           // 53: CGameRecording_QueryPhases_Response
	(*CGameRecording_QueryPhases_Response_Phase)(nil),                     // 54: CGameRecording_QueryPhases_Response_Phase
	(*CGameRecording_QueryPhases_Response_Phase_BackgroundRecording)(nil), // 55: CGameRecording_QueryPhases_Response_Phase_BackgroundRecording
	(*CGameRecording_RecordingSessionChanged_Notification)(nil),           // 56: CGameRecording_RecordingSessionChanged_Notification
	(*CGameRecording_SaveClip_Request)(nil),                               // 57: CGameRecording_SaveClip_Request
	(*CGameRecording_SaveClip_Request_Position)(nil),                      // 58: CGameRecording_SaveClip_Request_Position
	(*CGameRecording_SaveClip_Response)(nil),                              // 59: CGameRecording_SaveClip_Response
	(*CGameRecording_SetPerGameSettings_Request)(nil),                     // 60: CGameRecording_SetPerGameSettings_Request
	(*CGameRecording_SetPerGameSettings_Response)(nil),                    // 61: CGameRecording_SetPerGameSettings_Response
	(*CGameRecording_StartRecording_Request)(nil),                         // 62: CGameRecording_StartRecording_Request
	(*CGameRecording_StartRecording_Response)(nil),                        // 63: CGameRecording_StartRecording_Response
	(*CGameRecording_StopRecording_Request)(nil),                          // 64: CGameRecording_StopRecording_Request
	(*CGameRecording_StopRecording_Response)(nil),                         // 65: CGameRecording_StopRecording_Response
	(*CGameRecording_SwitchBackgroundRecordingGame_Request)(nil),          // 66: CGameRecording_SwitchBackgroundRecordingGame_Request
	(*CGameRecording_SwitchBackgroundRecordingGame_Response)(nil),         // 67: CGameRecording_SwitchBackgroundRecordingGame_Response
	(*CGameRecording_TakeScreenshot_Request)(nil),                         // 68: CGameRecording_TakeScreenshot_Request
	(*CGameRecording_TakeScreenshot_Response)(nil),                        // 69: CGameRecording_TakeScreenshot_Response
	(*CGameRecording_TimelineChanged_Notification)(nil),                   // 70: CGameRecording_TimelineChanged_Notification
	(*CGameRecording_TimelineEntryChanged_Notification)(nil),              // 71: CGameRecording_TimelineEntryChanged_Notification
	(*CGameRecording_TimelineEntryRemoved_Notification)(nil),              // 72: CGameRecording_TimelineEntryRemoved_Notification
	(*CGameRecording_UploadClipToSteam_Request)(nil),                      // 73: CGameRecording_UploadClipToSteam_Request
	(*CGameRecording_UploadClipToSteam_Response)(nil),                     // 74: CGameRecording_UploadClipToSteam_Response
	(*CGameRecording_UploadProgress_Notification)(nil),                    // 75: CGameRecording_UploadProgress_Notification
	(*CGameRecording_UserAddTimelineEntry_Request)(nil),                   // 76: CGameRecording_UserAddTimelineEntry_Request
	(*CGameRecording_UserAddTimelineEntry_Response)(nil),                  // 77: CGameRecording_UserAddTimelineEntry_Response
	(*CGameRecording_UserRemoveTimelineEntry_Request)(nil),                // 78: CGameRecording_UserRemoveTimelineEntry_Request
	(*CGameRecording_UserRemoveTimelineEntry_Response)(nil),               // 79: CGameRecording_UserRemoveTimelineEntry_Response
	(*CGameRecording_UserUpdateTimelineEntry_Request)(nil),                // 80: CGameRecording_UserUpdateTimelineEntry_Request
	(*CGameRecording_UserUpdateTimelineEntry_Response)(nil),               // 81: CGameRecording_UserUpdateTimelineEntry_Response
	(*CGameRecording_ZipClip_Request)(nil),                                // 82: CGameRecording_ZipClip_Request
	(*CGameRecording_ZipClip_Response)(nil),                               // 83: CGameRecording_ZipClip_Response
	(*CGameRecordingPhase)(nil),                                           // 84: CGameRecordingPhase
	(*CGameRecordingPhase_Tag)(nil),                                       // 85: CGameRecordingPhase_Tag
	(*CGameRecordingTimelineEvent)(nil),                                   // 86: CGameRecordingTimelineEvent
	(*CGameRecordingTimelineMetadata)(nil),                                // 87: CGameRecordingTimelineMetadata
	(*CGameRecordingTimelineMetadata_Recording)(nil),                      // 88: CGameRecordingTimelineMetadata_Recording
	(*CPhaseAttribute)(nil),                                               // 89: CPhaseAttribute
	(*CTimelineEntry)(nil),                                                // 90: CTimelineEntry
	(*CTimelineTag)(nil),                                                  // 91: CTimelineTag
	(*NoResponse)(nil),                                                    // 92: NoResponse
}
var file_service_gamerecording_proto_depIdxs = []int32{
	4,  // 0: CGameRecording_ClipCreated_Notification.summary:type_name -> CGameRecording_ClipSummary
	11, // 1: CGameRecording_ExportClip_Request.settings:type_name -> CGameRecording_ExportClip_Settings
	11, // 2: CGameRecording_ExportClipPreview_Request.settings:type_name -> CGameRecording_ExportClip_Settings
	11, // 3: CGameRecording_ExportClipPreview_Response.settings:type_name -> CGameRecording_ExportClip_Settings
	86, // 4: CGameRecording_GetAndTrimPostGameHighlights_Response.events:type_name -> CGameRecordingTimelineEvent
	19, // 5: CGameRecording_GetAppsWithBackgroundVideo_Response.apps:type_name -> CGameRecording_GetAppsWithBackgroundVideo_Response_App
	4,  // 6: CGameRecording_GetClips_Response.clip:type_name -> CGameRecording_ClipSummary
	48, // 7: CGameRecording_GetPerGameSettings_Response.settings:type_name -> CGameRecording_PerGameSettings
	91, // 8: CGameRecording_GetTags_Response.tags:type_name -> CTimelineTag
	36, // 9: CGameRecording_GetThumbnails_Response.thumbnails:type_name -> CGameRecording_GetThumbnails_Response_Thumbnail
	87, // 10: CGameRecording_GetTimelinesForApp_Response.timelines:type_name -> CGameRecordingTimelineMetadata
	87, // 11: CGameRecording_GetTimelinesForClip_Response.timelines:type_name -> CGameRecordingTimelineMetadata
	52, // 12: CGameRecording_QueryPhases_Request.filter_tags:type_name -> CGameRecording_QueryPhases_Request_Tag
	54, // 13: CGameRecording_QueryPhases_Response.phases:type_name -> CGameRecording_QueryPhases_Response_Phase
	91, // 14: CGameRecording_QueryPhases_Response_Phase.tags:type_name -> CTimelineTag
	91, // 15: CGameRecording_QueryPhases_Response_Phase.contained_tags:type_name -> CTimelineTag
	55, // 16: CGameRecording_QueryPhases_Response_Phase.background_recording:type_name -> CGameRecording_QueryPhases_Response_Phase_BackgroundRecording
	90, // 17: CGameRecording_QueryPhases_Response_Phase.significant_events:type_name -> CTimelineEntry
	89, // 18: CGameRecording_QueryPhases_Response_Phase.attributes:type_name -> CPhaseAttribute
	58, // 19: CGameRecording_SaveClip_Request.start:type_name -> CGameRecording_SaveClip_Request_Position
	58, // 20: CGameRecording_SaveClip_Request.end:type_name -> CGameRecording_SaveClip_Request_Position
	4,  // 21: CGameRecording_SaveClip_Response.summary:type_name -> CGameRecording_ClipSummary
	48, // 22: CGameRecording_SetPerGameSettings_Request.game_settings:type_name -> CGameRecording_PerGameSettings
	4,  // 23: CGameRecording_StopRecording_Response.summary:type_name -> CGameRecording_ClipSummary
	90, // 24: CGameRecording_TimelineEntryChanged_Notification.entry:type_name -> CTimelineEntry
	4,  // 25: CGameRecording_UploadClipToSteam_Response.summary:type_name -> CGameRecording_ClipSummary
	90, // 26: CGameRecording_UserAddTimelineEntry_Request.entry:type_name -> CTimelineEntry
	90, // 27: CGameRecording_UserUpdateTimelineEntry_Request.entry:type_name -> CTimelineEntry
	85, // 28: CGameRecordingPhase.tags:type_name -> CGameRecordingPhase_Tag
	85, // 29: CGameRecordingPhase.contained_tags:type_name -> CGameRecordingPhase_Tag
	89, // 30: CGameRecordingPhase.attributes:type_name -> CPhaseAttribute
	88, // 31: CGameRecordingTimelineMetadata.recordings:type_name -> CGameRecordingTimelineMetadata_Recording
	84, // 32: CGameRecordingTimelineMetadata.phases:type_name -> CGameRecordingPhase
	86, // 33: CGameRecordingTimelineMetadata.significant_events:type_name -> CGameRecordingTimelineEvent
	91, // 34: CTimelineEntry.tag:type_name -> CTimelineTag
	89, // 35: CTimelineEntry.attributes:type_name -> CPhaseAttribute
	0,  // 36: GameRecording.CleanupBackgroundRecordings:input_type -> CGameRecording_CleanupBackgroundRecordings_Request
	5,  // 37: GameRecording.DeleteClip:input_type -> CGameRecording_DeleteClip_Request
	7,  // 38: GameRecording.DeletePerGameSettings:input_type -> CGameRecording_DeletePerGameSettings_Request
	9,  // 39: GameRecording.ExportClip:input_type -> CGameRecording_ExportClip_Request
	12, // 40: GameRecording.ExportClipPreview:input_type -> CGameRecording_ExportClipPreview_Request
	15, // 41: GameRecording.GetAndTrimPostGameHighlights:input_type -> CGameRecording_GetAndTrimPostGameHighlights_Request
	17, // 42: GameRecording.GetAppsWithBackgroundVideo:input_type -> CGameRecording_GetAppsWithBackgroundVideo_Request
	20, // 43: GameRecording.GetAvailableDiskSpace:input_type -> CGameRecording_GetAvailableDiskSpace_Request
	30, // 44: GameRecording.GetBackgroundRecordingFileSize:input_type -> CGameRecording_GetRecordingSize_Request
	22, // 45: GameRecording.GetClips:input_type -> CGameRecording_GetClips_Request
	24, // 46: GameRecording.GetEnoughDiskSpace:input_type -> CGameRecording_GetEnoughDiskSpace_Request
	26, // 47: GameRecording.GetPerGameSettings:input_type -> CGameRecording_GetPerGameSettings_Request
	28, // 48: GameRecording.GetPlatformCapabilities:input_type -> CGameRecording_GetPlatformCapabilities_Request
	32, // 49: GameRecording.GetTags:input_type -> CGameRecording_GetTags_Request
	34, // 50: GameRecording.GetThumbnails:input_type -> CGameRecording_GetThumbnails_Request
	37, // 51: GameRecording.GetTimelinesForApp:input_type -> CGameRecording_GetTimelinesForApp_Request
	39, // 52: GameRecording.GetTimelinesForClip:input_type -> CGameRecording_GetTimelinesForClip_Request
	41, // 53: GameRecording.GetTotalDiskSpaceUsage:input_type -> CGameRecording_GetTotalDiskSpaceUsage_Request
	44, // 54: GameRecording.ManuallyDeleteRecordingsForApps:input_type -> CGameRecording_ManuallyDeleteRecordingsForApps_Request
	2,  // 55: GameRecording.NotifyClipCreated:input_type -> CGameRecording_ClipCreated_Notification
	3,  // 56: GameRecording.NotifyClipDeleted:input_type -> CGameRecording_ClipDeleted_Notification
	14, // 57: GameRecording.NotifyExportProgress:input_type -> CGameRecording_ExportProgress_Notification
	43, // 58: GameRecording.NotifyLowDiskSpace:input_type -> CGameRecording_LowDiskSpace_Notification
	46, // 59: GameRecording.NotifyOpenOverlayToGamePhase:input_type -> CGameRecording_OpenOverlayToGamePhase_Notification
	47, // 60: GameRecording.NotifyOpenOverlayToTimelineEvent:input_type -> CGameRecording_OpenOverlayToTimelineEvent_Notification
	49, // 61: GameRecording.NotifyPhaseListChanged:input_type -> CGameRecording_PhaseListChanged_Notification
	50, // 62: GameRecording.NotifyPostGameHighlightsChanged:input_type -> CGameRecording_PostGameHighlightsChanged_Notification
	56, // 63: GameRecording.NotifyRecordingSessionChanged:input_type -> CGameRecording_RecordingSessionChanged_Notification
	70, // 64: GameRecording.NotifyTimelineChanged:input_type -> CGameRecording_TimelineChanged_Notification
	71, // 65: GameRecording.NotifyTimelineEntryChanged:input_type -> CGameRecording_TimelineEntryChanged_Notification
	72, // 66: GameRecording.NotifyTimelineEntryRemoved:input_type -> CGameRecording_TimelineEntryRemoved_Notification
	75, // 67: GameRecording.NotifyUploadProgress:input_type -> CGameRecording_UploadProgress_Notification
	51, // 68: GameRecording.QueryPhases:input_type -> CGameRecording_QueryPhases_Request
	57, // 69: GameRecording.SaveClip:input_type -> CGameRecording_SaveClip_Request
	60, // 70: GameRecording.SetPerGameSettings:input_type -> CGameRecording_SetPerGameSettings_Request
	62, // 71: GameRecording.StartRecording:input_type -> CGameRecording_StartRecording_Request
	64, // 72: GameRecording.StopRecording:input_type -> CGameRecording_StopRecording_Request
	66, // 73: GameRecording.SwitchBackgroundRecordingGame:input_type -> CGameRecording_SwitchBackgroundRecordingGame_Request
	68, // 74: GameRecording.TakeScreenshot:input_type -> CGameRecording_TakeScreenshot_Request
	73, // 75: GameRecording.UploadClipToSteam:input_type -> CGameRecording_UploadClipToSteam_Request
	76, // 76: GameRecording.UserAddTimelineEntry:input_type -> CGameRecording_UserAddTimelineEntry_Request
	78, // 77: GameRecording.UserRemoveTimelineEntry:input_type -> CGameRecording_UserRemoveTimelineEntry_Request
	80, // 78: GameRecording.UserUpdateTimelineEntry:input_type -> CGameRecording_UserUpdateTimelineEntry_Request
	82, // 79: GameRecording.ZipClip:input_type -> CGameRecording_ZipClip_Request
	1,  // 80: GameRecording.CleanupBackgroundRecordings:output_type -> CGameRecording_CleanupBackgroundRecordings_Response
	6,  // 81: GameRecording.DeleteClip:output_type -> CGameRecording_DeleteClip_Response
	8,  // 82: GameRecording.DeletePerGameSettings:output_type -> CGameRecording_DeletePerGameSettings_Response
	10, // 83: GameRecording.ExportClip:output_type -> CGameRecording_ExportClip_Response
	13, // 84: GameRecording.ExportClipPreview:output_type -> CGameRecording_ExportClipPreview_Response
	16, // 85: GameRecording.GetAndTrimPostGameHighlights:output_type -> CGameRecording_GetAndTrimPostGameHighlights_Response
	18, // 86: GameRecording.GetAppsWithBackgroundVideo:output_type -> CGameRecording_GetAppsWithBackgroundVideo_Response
	21, // 87: GameRecording.GetAvailableDiskSpace:output_type -> CGameRecording_GetAvailableDiskSpace_Response
	31, // 88: GameRecording.GetBackgroundRecordingFileSize:output_type -> CGameRecording_GetRecordingSize_Response
	23, // 89: GameRecording.GetClips:output_type -> CGameRecording_GetClips_Response
	25, // 90: GameRecording.GetEnoughDiskSpace:output_type -> CGameRecording_GetEnoughDiskSpace_Response
	27, // 91: GameRecording.GetPerGameSettings:output_type -> CGameRecording_GetPerGameSettings_Response
	29, // 92: GameRecording.GetPlatformCapabilities:output_type -> CGameRecording_GetPlatformCapabilities_Response
	33, // 93: GameRecording.GetTags:output_type -> CGameRecording_GetTags_Response
	35, // 94: GameRecording.GetThumbnails:output_type -> CGameRecording_GetThumbnails_Response
	38, // 95: GameRecording.GetTimelinesForApp:output_type -> CGameRecording_GetTimelinesForApp_Response
	40, // 96: GameRecording.GetTimelinesForClip:output_type -> CGameRecording_GetTimelinesForClip_Response
	42, // 97: GameRecording.GetTotalDiskSpaceUsage:output_type -> CGameRecording_GetTotalDiskSpaceUsage_Response
	45, // 98: GameRecording.ManuallyDeleteRecordingsForApps:output_type -> CGameRecording_ManuallyDeleteRecordingsForApps_Response
	92, // 99: GameRecording.NotifyClipCreated:output_type -> NoResponse
	92, // 100: GameRecording.NotifyClipDeleted:output_type -> NoResponse
	92, // 101: GameRecording.NotifyExportProgress:output_type -> NoResponse
	92, // 102: GameRecording.NotifyLowDiskSpace:output_type -> NoResponse
	92, // 103: GameRecording.NotifyOpenOverlayToGamePhase:output_type -> NoResponse
	92, // 104: GameRecording.NotifyOpenOverlayToTimelineEvent:output_type -> NoResponse
	92, // 105: GameRecording.NotifyPhaseListChanged:output_type -> NoResponse
	92, // 106: GameRecording.NotifyPostGameHighlightsChanged:output_type -> NoResponse
	92, // 107: GameRecording.NotifyRecordingSessionChanged:output_type -> NoResponse
	92, // 108: GameRecording.NotifyTimelineChanged:output_type -> NoResponse
	92, // 109: GameRecording.NotifyTimelineEntryChanged:output_type -> NoResponse
	92, // 110: GameRecording.NotifyTimelineEntryRemoved:output_type -> NoResponse
	92, // 111: GameRecording.NotifyUploadProgress:output_type -> NoResponse
	53, // 112: GameRecording.QueryPhases:output_type -> CGameRecording_QueryPhases_Response
	59, // 113: GameRecording.SaveClip:output_type -> CGameRecording_SaveClip_Response
	61, // 114: GameRecording.SetPerGameSettings:output_type -> CGameRecording_SetPerGameSettings_Response
	63, // 115: GameRecording.StartRecording:output_type -> CGameRecording_StartRecording_Response
	65, // 116: GameRecording.StopRecording:output_type -> CGameRecording_StopRecording_Response
	67, // 117: GameRecording.SwitchBackgroundRecordingGame:output_type -> CGameRecording_SwitchBackgroundRecordingGame_Response
	69, // 118: GameRecording.TakeScreenshot:output_type -> CGameRecording_TakeScreenshot_Response
	74, // 119: GameRecording.UploadClipToSteam:output_type -> CGameRecording_UploadClipToSteam_Response
	77, // 120: GameRecording.UserAddTimelineEntry:output_type -> CGameRecording_UserAddTimelineEntry_Response
	79, // 121: GameRecording.UserRemoveTimelineEntry:output_type -> CGameRecording_UserRemoveTimelineEntry_Response
	81, // 122: GameRecording.UserUpdateTimelineEntry:output_type -> CGameRecording_UserUpdateTimelineEntry_Response
	83, // 123: GameRecording.ZipClip:output_type -> CGameRecording_ZipClip_Response
	80, // [80:124] is the sub-list for method output_type
	36, // [36:80] is the sub-list for method input_type
	36, // [36:36] is the sub-list for extension type_name
	36, // [36:36] is the sub-list for extension extendee
	0,  // [0:36] is the sub-list for field type_name
}

func init() { file_service_gamerecording_proto_init() }
func file_service_gamerecording_proto_init() {
	if File_service_gamerecording_proto != nil {
		return
	}
	file_common_base_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_service_gamerecording_proto_rawDesc), len(file_service_gamerecording_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   92,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_gamerecording_proto_goTypes,
		DependencyIndexes: file_service_gamerecording_proto_depIdxs,
		MessageInfos:      file_service_gamerecording_proto_msgTypes,
	}.Build()
	File_service_gamerecording_proto = out.File
	file_service_gamerecording_proto_goTypes = nil
	file_service_gamerecording_proto_depIdxs = nil
}
