// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v6.32.0
// source: service_webrtc.proto

package webuipb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CWebRTC_WebRTCSessionConnected_Notification struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ssrc          *uint32                `protobuf:"varint,1,opt,name=ssrc" json:"ssrc,omitempty"`
	ClientIp      *uint32                `protobuf:"varint,2,opt,name=client_ip,json=clientIp" json:"client_ip,omitempty"`
	ClientPort    *uint32                `protobuf:"varint,3,opt,name=client_port,json=clientPort" json:"client_port,omitempty"`
	ServerIp      *uint32                `protobuf:"varint,4,opt,name=server_ip,json=serverIp" json:"server_ip,omitempty"`
	ServerPort    *uint32                `protobuf:"varint,5,opt,name=server_port,json=serverPort" json:"server_port,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CWebRTC_WebRTCSessionConnected_Notification) Reset() {
	*x = CWebRTC_WebRTCSessionConnected_Notification{}
	mi := &file_service_webrtc_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CWebRTC_WebRTCSessionConnected_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CWebRTC_WebRTCSessionConnected_Notification) ProtoMessage() {}

func (x *CWebRTC_WebRTCSessionConnected_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_service_webrtc_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CWebRTC_WebRTCSessionConnected_Notification.ProtoReflect.Descriptor instead.
func (*CWebRTC_WebRTCSessionConnected_Notification) Descriptor() ([]byte, []int) {
	return file_service_webrtc_proto_rawDescGZIP(), []int{0}
}

func (x *CWebRTC_WebRTCSessionConnected_Notification) GetSsrc() uint32 {
	if x != nil && x.Ssrc != nil {
		return *x.Ssrc
	}
	return 0
}

func (x *CWebRTC_WebRTCSessionConnected_Notification) GetClientIp() uint32 {
	if x != nil && x.ClientIp != nil {
		return *x.ClientIp
	}
	return 0
}

func (x *CWebRTC_WebRTCSessionConnected_Notification) GetClientPort() uint32 {
	if x != nil && x.ClientPort != nil {
		return *x.ClientPort
	}
	return 0
}

func (x *CWebRTC_WebRTCSessionConnected_Notification) GetServerIp() uint32 {
	if x != nil && x.ServerIp != nil {
		return *x.ServerIp
	}
	return 0
}

func (x *CWebRTC_WebRTCSessionConnected_Notification) GetServerPort() uint32 {
	if x != nil && x.ServerPort != nil {
		return *x.ServerPort
	}
	return 0
}

type CWebRTC_WebRTCUpdateRemoteDescription_Notification struct {
	state                    protoimpl.MessageState                                                        `protogen:"open.v1"`
	RemoteDescription        *string                                                                       `protobuf:"bytes,1,opt,name=remote_description,json=remoteDescription" json:"remote_description,omitempty"`
	RemoteDescriptionVersion *uint64                                                                       `protobuf:"varint,2,opt,name=remote_description_version,json=remoteDescriptionVersion" json:"remote_description_version,omitempty"`
	SsrcsToAccountids        []*CWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping `protobuf:"bytes,3,rep,name=ssrcs_to_accountids,json=ssrcsToAccountids" json:"ssrcs_to_accountids,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *CWebRTC_WebRTCUpdateRemoteDescription_Notification) Reset() {
	*x = CWebRTC_WebRTCUpdateRemoteDescription_Notification{}
	mi := &file_service_webrtc_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CWebRTC_WebRTCUpdateRemoteDescription_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CWebRTC_WebRTCUpdateRemoteDescription_Notification) ProtoMessage() {}

func (x *CWebRTC_WebRTCUpdateRemoteDescription_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_service_webrtc_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CWebRTC_WebRTCUpdateRemoteDescription_Notification.ProtoReflect.Descriptor instead.
func (*CWebRTC_WebRTCUpdateRemoteDescription_Notification) Descriptor() ([]byte, []int) {
	return file_service_webrtc_proto_rawDescGZIP(), []int{1}
}

func (x *CWebRTC_WebRTCUpdateRemoteDescription_Notification) GetRemoteDescription() string {
	if x != nil && x.RemoteDescription != nil {
		return *x.RemoteDescription
	}
	return ""
}

func (x *CWebRTC_WebRTCUpdateRemoteDescription_Notification) GetRemoteDescriptionVersion() uint64 {
	if x != nil && x.RemoteDescriptionVersion != nil {
		return *x.RemoteDescriptionVersion
	}
	return 0
}

func (x *CWebRTC_WebRTCUpdateRemoteDescription_Notification) GetSsrcsToAccountids() []*CWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping {
	if x != nil {
		return x.SsrcsToAccountids
	}
	return nil
}

type CWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ssrc          *uint32                `protobuf:"varint,1,opt,name=ssrc" json:"ssrc,omitempty"`
	Accountid     *uint32                `protobuf:"varint,2,opt,name=accountid" json:"accountid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping) Reset() {
	*x = CWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping{}
	mi := &file_service_webrtc_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping) ProtoMessage() {}

func (x *CWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping) ProtoReflect() protoreflect.Message {
	mi := &file_service_webrtc_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping.ProtoReflect.Descriptor instead.
func (*CWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping) Descriptor() ([]byte, []int) {
	return file_service_webrtc_proto_rawDescGZIP(), []int{2}
}

func (x *CWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping) GetSsrc() uint32 {
	if x != nil && x.Ssrc != nil {
		return *x.Ssrc
	}
	return 0
}

func (x *CWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping) GetAccountid() uint32 {
	if x != nil && x.Accountid != nil {
		return *x.Accountid
	}
	return 0
}

type CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	IpWebrtcServer           *uint32                `protobuf:"varint,1,opt,name=ip_webrtc_server,json=ipWebrtcServer" json:"ip_webrtc_server,omitempty"`
	PortWebrtcServer         *uint32                `protobuf:"varint,2,opt,name=port_webrtc_server,json=portWebrtcServer" json:"port_webrtc_server,omitempty"`
	IpWebrtcSessionClient    *uint32                `protobuf:"varint,3,opt,name=ip_webrtc_session_client,json=ipWebrtcSessionClient" json:"ip_webrtc_session_client,omitempty"`
	PortWebrtcSessionClient  *uint32                `protobuf:"varint,4,opt,name=port_webrtc_session_client,json=portWebrtcSessionClient" json:"port_webrtc_session_client,omitempty"`
	RemoteDescriptionVersion *uint64                `protobuf:"varint,5,opt,name=remote_description_version,json=remoteDescriptionVersion" json:"remote_description_version,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request) Reset() {
	*x = CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request{}
	mi := &file_service_webrtc_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request) ProtoMessage() {}

func (x *CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_webrtc_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request.ProtoReflect.Descriptor instead.
func (*CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request) Descriptor() ([]byte, []int) {
	return file_service_webrtc_proto_rawDescGZIP(), []int{3}
}

func (x *CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request) GetIpWebrtcServer() uint32 {
	if x != nil && x.IpWebrtcServer != nil {
		return *x.IpWebrtcServer
	}
	return 0
}

func (x *CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request) GetPortWebrtcServer() uint32 {
	if x != nil && x.PortWebrtcServer != nil {
		return *x.PortWebrtcServer
	}
	return 0
}

func (x *CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request) GetIpWebrtcSessionClient() uint32 {
	if x != nil && x.IpWebrtcSessionClient != nil {
		return *x.IpWebrtcSessionClient
	}
	return 0
}

func (x *CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request) GetPortWebrtcSessionClient() uint32 {
	if x != nil && x.PortWebrtcSessionClient != nil {
		return *x.PortWebrtcSessionClient
	}
	return 0
}

func (x *CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request) GetRemoteDescriptionVersion() uint64 {
	if x != nil && x.RemoteDescriptionVersion != nil {
		return *x.RemoteDescriptionVersion
	}
	return 0
}

type CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Response) Reset() {
	*x = CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Response{}
	mi := &file_service_webrtc_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Response) ProtoMessage() {}

func (x *CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_webrtc_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Response.ProtoReflect.Descriptor instead.
func (*CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Response) Descriptor() ([]byte, []int) {
	return file_service_webrtc_proto_rawDescGZIP(), []int{4}
}

type CWebRTCClient_InitiateWebRTCConnection_Request struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Sdp            *string                `protobuf:"bytes,1,opt,name=sdp" json:"sdp,omitempty"`
	BrowserName    *string                `protobuf:"bytes,2,opt,name=browser_name,json=browserName" json:"browser_name,omitempty"`
	BrowserVersion *string                `protobuf:"bytes,3,opt,name=browser_version,json=browserVersion" json:"browser_version,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CWebRTCClient_InitiateWebRTCConnection_Request) Reset() {
	*x = CWebRTCClient_InitiateWebRTCConnection_Request{}
	mi := &file_service_webrtc_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CWebRTCClient_InitiateWebRTCConnection_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CWebRTCClient_InitiateWebRTCConnection_Request) ProtoMessage() {}

func (x *CWebRTCClient_InitiateWebRTCConnection_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_webrtc_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CWebRTCClient_InitiateWebRTCConnection_Request.ProtoReflect.Descriptor instead.
func (*CWebRTCClient_InitiateWebRTCConnection_Request) Descriptor() ([]byte, []int) {
	return file_service_webrtc_proto_rawDescGZIP(), []int{5}
}

func (x *CWebRTCClient_InitiateWebRTCConnection_Request) GetSdp() string {
	if x != nil && x.Sdp != nil {
		return *x.Sdp
	}
	return ""
}

func (x *CWebRTCClient_InitiateWebRTCConnection_Request) GetBrowserName() string {
	if x != nil && x.BrowserName != nil {
		return *x.BrowserName
	}
	return ""
}

func (x *CWebRTCClient_InitiateWebRTCConnection_Request) GetBrowserVersion() string {
	if x != nil && x.BrowserVersion != nil {
		return *x.BrowserVersion
	}
	return ""
}

type CWebRTCClient_InitiateWebRTCConnection_Response struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	RemoteDescription *string                `protobuf:"bytes,1,opt,name=remote_description,json=remoteDescription" json:"remote_description,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *CWebRTCClient_InitiateWebRTCConnection_Response) Reset() {
	*x = CWebRTCClient_InitiateWebRTCConnection_Response{}
	mi := &file_service_webrtc_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CWebRTCClient_InitiateWebRTCConnection_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CWebRTCClient_InitiateWebRTCConnection_Response) ProtoMessage() {}

func (x *CWebRTCClient_InitiateWebRTCConnection_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_webrtc_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CWebRTCClient_InitiateWebRTCConnection_Response.ProtoReflect.Descriptor instead.
func (*CWebRTCClient_InitiateWebRTCConnection_Response) Descriptor() ([]byte, []int) {
	return file_service_webrtc_proto_rawDescGZIP(), []int{6}
}

func (x *CWebRTCClient_InitiateWebRTCConnection_Response) GetRemoteDescription() string {
	if x != nil && x.RemoteDescription != nil {
		return *x.RemoteDescription
	}
	return ""
}

type CWebRTCClient_UpdateWebRTCConnection_Request struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	IpWebrtcServer          *uint32                `protobuf:"varint,1,opt,name=ip_webrtc_server,json=ipWebrtcServer" json:"ip_webrtc_server,omitempty"`
	PortWebrtcServer        *uint32                `protobuf:"varint,2,opt,name=port_webrtc_server,json=portWebrtcServer" json:"port_webrtc_server,omitempty"`
	IpWebrtcSessionClient   *uint32                `protobuf:"varint,3,opt,name=ip_webrtc_session_client,json=ipWebrtcSessionClient" json:"ip_webrtc_session_client,omitempty"`
	PortWebrtcSessionClient *uint32                `protobuf:"varint,4,opt,name=port_webrtc_session_client,json=portWebrtcSessionClient" json:"port_webrtc_session_client,omitempty"`
	Sdp                     *string                `protobuf:"bytes,5,opt,name=sdp" json:"sdp,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *CWebRTCClient_UpdateWebRTCConnection_Request) Reset() {
	*x = CWebRTCClient_UpdateWebRTCConnection_Request{}
	mi := &file_service_webrtc_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CWebRTCClient_UpdateWebRTCConnection_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CWebRTCClient_UpdateWebRTCConnection_Request) ProtoMessage() {}

func (x *CWebRTCClient_UpdateWebRTCConnection_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_webrtc_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CWebRTCClient_UpdateWebRTCConnection_Request.ProtoReflect.Descriptor instead.
func (*CWebRTCClient_UpdateWebRTCConnection_Request) Descriptor() ([]byte, []int) {
	return file_service_webrtc_proto_rawDescGZIP(), []int{7}
}

func (x *CWebRTCClient_UpdateWebRTCConnection_Request) GetIpWebrtcServer() uint32 {
	if x != nil && x.IpWebrtcServer != nil {
		return *x.IpWebrtcServer
	}
	return 0
}

func (x *CWebRTCClient_UpdateWebRTCConnection_Request) GetPortWebrtcServer() uint32 {
	if x != nil && x.PortWebrtcServer != nil {
		return *x.PortWebrtcServer
	}
	return 0
}

func (x *CWebRTCClient_UpdateWebRTCConnection_Request) GetIpWebrtcSessionClient() uint32 {
	if x != nil && x.IpWebrtcSessionClient != nil {
		return *x.IpWebrtcSessionClient
	}
	return 0
}

func (x *CWebRTCClient_UpdateWebRTCConnection_Request) GetPortWebrtcSessionClient() uint32 {
	if x != nil && x.PortWebrtcSessionClient != nil {
		return *x.PortWebrtcSessionClient
	}
	return 0
}

func (x *CWebRTCClient_UpdateWebRTCConnection_Request) GetSdp() string {
	if x != nil && x.Sdp != nil {
		return *x.Sdp
	}
	return ""
}

type CWebRTCClient_UpdateWebRTCConnection_Response struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	RemoteDescription *string                `protobuf:"bytes,1,opt,name=remote_description,json=remoteDescription" json:"remote_description,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *CWebRTCClient_UpdateWebRTCConnection_Response) Reset() {
	*x = CWebRTCClient_UpdateWebRTCConnection_Response{}
	mi := &file_service_webrtc_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CWebRTCClient_UpdateWebRTCConnection_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CWebRTCClient_UpdateWebRTCConnection_Response) ProtoMessage() {}

func (x *CWebRTCClient_UpdateWebRTCConnection_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_webrtc_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CWebRTCClient_UpdateWebRTCConnection_Response.ProtoReflect.Descriptor instead.
func (*CWebRTCClient_UpdateWebRTCConnection_Response) Descriptor() ([]byte, []int) {
	return file_service_webrtc_proto_rawDescGZIP(), []int{8}
}

func (x *CWebRTCClient_UpdateWebRTCConnection_Response) GetRemoteDescription() string {
	if x != nil && x.RemoteDescription != nil {
		return *x.RemoteDescription
	}
	return ""
}

var File_service_webrtc_proto protoreflect.FileDescriptor

const file_service_webrtc_proto_rawDesc = "" +
	"\n" +
	"\x14service_webrtc.proto\x1a\x11common_base.proto\"\xbd\x01\n" +
	"+CWebRTC_WebRTCSessionConnected_Notification\x12\x12\n" +
	"\x04ssrc\x18\x01 \x01(\rR\x04ssrc\x12\x1b\n" +
	"\tclient_ip\x18\x02 \x01(\rR\bclientIp\x12\x1f\n" +
	"\vclient_port\x18\x03 \x01(\rR\n" +
	"clientPort\x12\x1b\n" +
	"\tserver_ip\x18\x04 \x01(\rR\bserverIp\x12\x1f\n" +
	"\vserver_port\x18\x05 \x01(\rR\n" +
	"serverPort\"\x9e\x02\n" +
	"2CWebRTC_WebRTCUpdateRemoteDescription_Notification\x12-\n" +
	"\x12remote_description\x18\x01 \x01(\tR\x11remoteDescription\x12<\n" +
	"\x1aremote_description_version\x18\x02 \x01(\x04R\x18remoteDescriptionVersion\x12{\n" +
	"\x13ssrcs_to_accountids\x18\x03 \x03(\v2K.CWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMappingR\x11ssrcsToAccountids\"~\n" +
	"JCWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping\x12\x12\n" +
	"\x04ssrc\x18\x01 \x01(\rR\x04ssrc\x12\x1c\n" +
	"\taccountid\x18\x02 \x01(\rR\taccountid\"\xc7\x02\n" +
	"9CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request\x12(\n" +
	"\x10ip_webrtc_server\x18\x01 \x01(\rR\x0eipWebrtcServer\x12,\n" +
	"\x12port_webrtc_server\x18\x02 \x01(\rR\x10portWebrtcServer\x127\n" +
	"\x18ip_webrtc_session_client\x18\x03 \x01(\rR\x15ipWebrtcSessionClient\x12;\n" +
	"\x1aport_webrtc_session_client\x18\x04 \x01(\rR\x17portWebrtcSessionClient\x12<\n" +
	"\x1aremote_description_version\x18\x05 \x01(\x04R\x18remoteDescriptionVersion\"<\n" +
	":CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Response\"\x8e\x01\n" +
	".CWebRTCClient_InitiateWebRTCConnection_Request\x12\x10\n" +
	"\x03sdp\x18\x01 \x01(\tR\x03sdp\x12!\n" +
	"\fbrowser_name\x18\x02 \x01(\tR\vbrowserName\x12'\n" +
	"\x0fbrowser_version\x18\x03 \x01(\tR\x0ebrowserVersion\"`\n" +
	"/CWebRTCClient_InitiateWebRTCConnection_Response\x12-\n" +
	"\x12remote_description\x18\x01 \x01(\tR\x11remoteDescription\"\x8e\x02\n" +
	",CWebRTCClient_UpdateWebRTCConnection_Request\x12(\n" +
	"\x10ip_webrtc_server\x18\x01 \x01(\rR\x0eipWebrtcServer\x12,\n" +
	"\x12port_webrtc_server\x18\x02 \x01(\rR\x10portWebrtcServer\x127\n" +
	"\x18ip_webrtc_session_client\x18\x03 \x01(\rR\x15ipWebrtcSessionClient\x12;\n" +
	"\x1aport_webrtc_session_client\x18\x04 \x01(\rR\x17portWebrtcSessionClient\x12\x10\n" +
	"\x03sdp\x18\x05 \x01(\tR\x03sdp\"^\n" +
	"-CWebRTCClient_UpdateWebRTCConnection_Response\x12-\n" +
	"\x12remote_description\x18\x01 \x01(\tR\x11remoteDescription2\xa7\x03\n" +
	"\fWebRTCClient\x12\x9e\x01\n" +
	"#AcknowledgeUpdatedRemoteDescription\x12:.CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request\x1a;.CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Response\x12}\n" +
	"\x18InitiateWebRTCConnection\x12/.CWebRTCClient_InitiateWebRTCConnection_Request\x1a0.CWebRTCClient_InitiateWebRTCConnection_Response\x12w\n" +
	"\x16UpdateWebRTCConnection\x12-.CWebRTCClient_UpdateWebRTCConnection_Request\x1a..CWebRTCClient_UpdateWebRTCConnection_Response2\xdf\x01\n" +
	"\x19WebRTCClientNotifications\x12Y\n" +
	"\x1cNotifyWebRTCSessionConnected\x12,.CWebRTC_WebRTCSessionConnected_Notification\x1a\v.NoResponse\x12g\n" +
	"#NotifyWebRTCUpdateRemoteDescription\x123.CWebRTC_WebRTCUpdateRemoteDescription_Notification\x1a\v.NoResponse"

var (
	file_service_webrtc_proto_rawDescOnce sync.Once
	file_service_webrtc_proto_rawDescData []byte
)

func file_service_webrtc_proto_rawDescGZIP() []byte {
	file_service_webrtc_proto_rawDescOnce.Do(func() {
		file_service_webrtc_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_service_webrtc_proto_rawDesc), len(file_service_webrtc_proto_rawDesc)))
	})
	return file_service_webrtc_proto_rawDescData
}

var file_service_webrtc_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_service_webrtc_proto_goTypes = []any{
	(*CWebRTC_WebRTCSessionConnected_Notification)(nil),                                // 0: CWebRTC_WebRTCSessionConnected_Notification
	(*CWebRTC_WebRTCUpdateRemoteDescription_Notification)(nil),                         // 1: CWebRTC_WebRTCUpdateRemoteDescription_Notification
	(*CWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping)(nil), // 2: CWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping
	(*CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request)(nil),                  // 3: CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request
	(*CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Response)(nil),                 // 4: CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Response
	(*CWebRTCClient_InitiateWebRTCConnection_Request)(nil),                             // 5: CWebRTCClient_InitiateWebRTCConnection_Request
	(*CWebRTCClient_InitiateWebRTCConnection_Response)(nil),                            // 6: CWebRTCClient_InitiateWebRTCConnection_Response
	(*CWebRTCClient_UpdateWebRTCConnection_Request)(nil),                               // 7: CWebRTCClient_UpdateWebRTCConnection_Request
	(*CWebRTCClient_UpdateWebRTCConnection_Response)(nil),                              // 8: CWebRTCClient_UpdateWebRTCConnection_Response
	(*NoResponse)(nil), // 9: NoResponse
}
var file_service_webrtc_proto_depIdxs = []int32{
	2, // 0: CWebRTC_WebRTCUpdateRemoteDescription_Notification.ssrcs_to_accountids:type_name -> CWebRTC_WebRTCUpdateRemoteDescription_Notification_CSSRCToAccountIDMapping
	3, // 1: WebRTCClient.AcknowledgeUpdatedRemoteDescription:input_type -> CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Request
	5, // 2: WebRTCClient.InitiateWebRTCConnection:input_type -> CWebRTCClient_InitiateWebRTCConnection_Request
	7, // 3: WebRTCClient.UpdateWebRTCConnection:input_type -> CWebRTCClient_UpdateWebRTCConnection_Request
	0, // 4: WebRTCClientNotifications.NotifyWebRTCSessionConnected:input_type -> CWebRTC_WebRTCSessionConnected_Notification
	1, // 5: WebRTCClientNotifications.NotifyWebRTCUpdateRemoteDescription:input_type -> CWebRTC_WebRTCUpdateRemoteDescription_Notification
	4, // 6: WebRTCClient.AcknowledgeUpdatedRemoteDescription:output_type -> CWebRTCClient_AcknowledgeUpdatedRemoteDescription_Response
	6, // 7: WebRTCClient.InitiateWebRTCConnection:output_type -> CWebRTCClient_InitiateWebRTCConnection_Response
	8, // 8: WebRTCClient.UpdateWebRTCConnection:output_type -> CWebRTCClient_UpdateWebRTCConnection_Response
	9, // 9: WebRTCClientNotifications.NotifyWebRTCSessionConnected:output_type -> NoResponse
	9, // 10: WebRTCClientNotifications.NotifyWebRTCUpdateRemoteDescription:output_type -> NoResponse
	6, // [6:11] is the sub-list for method output_type
	1, // [1:6] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_service_webrtc_proto_init() }
func file_service_webrtc_proto_init() {
	if File_service_webrtc_proto != nil {
		return
	}
	file_common_base_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_service_webrtc_proto_rawDesc), len(file_service_webrtc_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_service_webrtc_proto_goTypes,
		DependencyIndexes: file_service_webrtc_proto_depIdxs,
		MessageInfos:      file_service_webrtc_proto_msgTypes,
	}.Build()
	File_service_webrtc_proto = out.File
	file_service_webrtc_proto_goTypes = nil
	file_service_webrtc_proto_depIdxs = nil
}
