// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.32.0
// source: service_chatusability.proto

package webui

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CChatUsability_ClientUsabilityMetrics_Notification struct {
	state          protoimpl.MessageState                                            `protogen:"open.v1"`
	MetricsRunId   *uint32                                                           `protobuf:"varint,1,opt,name=metrics_run_id,json=metricsRunId" json:"metrics_run_id,omitempty"`
	ClientBuild    *uint32                                                           `protobuf:"varint,2,opt,name=client_build,json=clientBuild" json:"client_build,omitempty"`
	MetricsVersion *uint32                                                           `protobuf:"varint,3,opt,name=metrics_version,json=metricsVersion" json:"metrics_version,omitempty"`
	InWeb          *bool                                                             `protobuf:"varint,4,opt,name=in_web,json=inWeb" json:"in_web,omitempty"`
	Settings       *CChatUsability_ClientUsabilityMetrics_Notification_Settings      `protobuf:"bytes,10,opt,name=settings" json:"settings,omitempty"`
	VoiceSettings  *CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings `protobuf:"bytes,11,opt,name=voice_settings,json=voiceSettings" json:"voice_settings,omitempty"`
	UiState        *CChatUsability_ClientUsabilityMetrics_Notification_UIState       `protobuf:"bytes,12,opt,name=ui_state,json=uiState" json:"ui_state,omitempty"`
	Metrics        *CChatUsability_ClientUsabilityMetrics_Notification_Metrics       `protobuf:"bytes,13,opt,name=metrics" json:"metrics,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification) Reset() {
	*x = CChatUsability_ClientUsabilityMetrics_Notification{}
	mi := &file_service_chatusability_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatUsability_ClientUsabilityMetrics_Notification) ProtoMessage() {}

func (x *CChatUsability_ClientUsabilityMetrics_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_service_chatusability_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatUsability_ClientUsabilityMetrics_Notification.ProtoReflect.Descriptor instead.
func (*CChatUsability_ClientUsabilityMetrics_Notification) Descriptor() ([]byte, []int) {
	return file_service_chatusability_proto_rawDescGZIP(), []int{0}
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification) GetMetricsRunId() uint32 {
	if x != nil && x.MetricsRunId != nil {
		return *x.MetricsRunId
	}
	return 0
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification) GetClientBuild() uint32 {
	if x != nil && x.ClientBuild != nil {
		return *x.ClientBuild
	}
	return 0
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification) GetMetricsVersion() uint32 {
	if x != nil && x.MetricsVersion != nil {
		return *x.MetricsVersion
	}
	return 0
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification) GetInWeb() bool {
	if x != nil && x.InWeb != nil {
		return *x.InWeb
	}
	return false
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification) GetSettings() *CChatUsability_ClientUsabilityMetrics_Notification_Settings {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification) GetVoiceSettings() *CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings {
	if x != nil {
		return x.VoiceSettings
	}
	return nil
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification) GetUiState() *CChatUsability_ClientUsabilityMetrics_Notification_UIState {
	if x != nil {
		return x.UiState
	}
	return nil
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification) GetMetrics() *CChatUsability_ClientUsabilityMetrics_Notification_Metrics {
	if x != nil {
		return x.Metrics
	}
	return nil
}

type CChatUsability_ClientUsabilityMetrics_Notification_Metrics struct {
	state                       protoimpl.MessageState `protogen:"open.v1"`
	FriendsCount                *int32                 `protobuf:"varint,1,opt,name=friends_count,json=friendsCount" json:"friends_count,omitempty"`
	FriendsCategoryCount        *int32                 `protobuf:"varint,2,opt,name=friends_category_count,json=friendsCategoryCount" json:"friends_category_count,omitempty"`
	FriendsCategorizedCount     *int32                 `protobuf:"varint,3,opt,name=friends_categorized_count,json=friendsCategorizedCount" json:"friends_categorized_count,omitempty"`
	FriendsOnlineCount          *int32                 `protobuf:"varint,4,opt,name=friends_online_count,json=friendsOnlineCount" json:"friends_online_count,omitempty"`
	FriendsInGameCount          *int32                 `protobuf:"varint,5,opt,name=friends_in_game_count,json=friendsInGameCount" json:"friends_in_game_count,omitempty"`
	FriendsInGameSingletonCount *int32                 `protobuf:"varint,6,opt,name=friends_in_game_singleton_count,json=friendsInGameSingletonCount" json:"friends_in_game_singleton_count,omitempty"`
	GameGroupCount              *int32                 `protobuf:"varint,7,opt,name=game_group_count,json=gameGroupCount" json:"game_group_count,omitempty"`
	FriendsFavoriteCount        *int32                 `protobuf:"varint,8,opt,name=friends_favorite_count,json=friendsFavoriteCount" json:"friends_favorite_count,omitempty"`
	GroupChatCount              *int32                 `protobuf:"varint,9,opt,name=group_chat_count,json=groupChatCount" json:"group_chat_count,omitempty"`
	GroupChatFavoriteCount      *int32                 `protobuf:"varint,10,opt,name=group_chat_favorite_count,json=groupChatFavoriteCount" json:"group_chat_favorite_count,omitempty"`
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_Metrics) Reset() {
	*x = CChatUsability_ClientUsabilityMetrics_Notification_Metrics{}
	mi := &file_service_chatusability_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_Metrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatUsability_ClientUsabilityMetrics_Notification_Metrics) ProtoMessage() {}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_Metrics) ProtoReflect() protoreflect.Message {
	mi := &file_service_chatusability_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatUsability_ClientUsabilityMetrics_Notification_Metrics.ProtoReflect.Descriptor instead.
func (*CChatUsability_ClientUsabilityMetrics_Notification_Metrics) Descriptor() ([]byte, []int) {
	return file_service_chatusability_proto_rawDescGZIP(), []int{1}
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_Metrics) GetFriendsCount() int32 {
	if x != nil && x.FriendsCount != nil {
		return *x.FriendsCount
	}
	return 0
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_Metrics) GetFriendsCategoryCount() int32 {
	if x != nil && x.FriendsCategoryCount != nil {
		return *x.FriendsCategoryCount
	}
	return 0
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_Metrics) GetFriendsCategorizedCount() int32 {
	if x != nil && x.FriendsCategorizedCount != nil {
		return *x.FriendsCategorizedCount
	}
	return 0
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_Metrics) GetFriendsOnlineCount() int32 {
	if x != nil && x.FriendsOnlineCount != nil {
		return *x.FriendsOnlineCount
	}
	return 0
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_Metrics) GetFriendsInGameCount() int32 {
	if x != nil && x.FriendsInGameCount != nil {
		return *x.FriendsInGameCount
	}
	return 0
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_Metrics) GetFriendsInGameSingletonCount() int32 {
	if x != nil && x.FriendsInGameSingletonCount != nil {
		return *x.FriendsInGameSingletonCount
	}
	return 0
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_Metrics) GetGameGroupCount() int32 {
	if x != nil && x.GameGroupCount != nil {
		return *x.GameGroupCount
	}
	return 0
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_Metrics) GetFriendsFavoriteCount() int32 {
	if x != nil && x.FriendsFavoriteCount != nil {
		return *x.FriendsFavoriteCount
	}
	return 0
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_Metrics) GetGroupChatCount() int32 {
	if x != nil && x.GroupChatCount != nil {
		return *x.GroupChatCount
	}
	return 0
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_Metrics) GetGroupChatFavoriteCount() int32 {
	if x != nil && x.GroupChatFavoriteCount != nil {
		return *x.GroupChatFavoriteCount
	}
	return 0
}

type CChatUsability_ClientUsabilityMetrics_Notification_Settings struct {
	state                                 protoimpl.MessageState `protogen:"open.v1"`
	NotificationsShowIngame               *bool                  `protobuf:"varint,1,opt,name=notifications_show_ingame,json=notificationsShowIngame" json:"notifications_show_ingame,omitempty"`
	NotificationsShowOnline               *bool                  `protobuf:"varint,2,opt,name=notifications_show_online,json=notificationsShowOnline" json:"notifications_show_online,omitempty"`
	NotificationsShowMessage              *bool                  `protobuf:"varint,3,opt,name=notifications_show_message,json=notificationsShowMessage" json:"notifications_show_message,omitempty"`
	NotificationsEventsAndAnnouncements   *bool                  `protobuf:"varint,4,opt,name=notifications_events_and_announcements,json=notificationsEventsAndAnnouncements" json:"notifications_events_and_announcements,omitempty"`
	SoundsPlayIngame                      *bool                  `protobuf:"varint,5,opt,name=sounds_play_ingame,json=soundsPlayIngame" json:"sounds_play_ingame,omitempty"`
	SoundsPlayOnline                      *bool                  `protobuf:"varint,6,opt,name=sounds_play_online,json=soundsPlayOnline" json:"sounds_play_online,omitempty"`
	SoundsPlayMessage                     *bool                  `protobuf:"varint,7,opt,name=sounds_play_message,json=soundsPlayMessage" json:"sounds_play_message,omitempty"`
	SoundsEventsAndAnnouncements          *bool                  `protobuf:"varint,8,opt,name=sounds_events_and_announcements,json=soundsEventsAndAnnouncements" json:"sounds_events_and_announcements,omitempty"`
	AlwaysNewChatWindow                   *bool                  `protobuf:"varint,9,opt,name=always_new_chat_window,json=alwaysNewChatWindow" json:"always_new_chat_window,omitempty"`
	ForceAlphabeticFriendSorting          *bool                  `protobuf:"varint,10,opt,name=force_alphabetic_friend_sorting,json=forceAlphabeticFriendSorting" json:"force_alphabetic_friend_sorting,omitempty"`
	ChatFlashMode                         *int32                 `protobuf:"varint,11,opt,name=chat_flash_mode,json=chatFlashMode" json:"chat_flash_mode,omitempty"`
	RememberOpenChats                     *bool                  `protobuf:"varint,12,opt,name=remember_open_chats,json=rememberOpenChats" json:"remember_open_chats,omitempty"`
	CompactQuickAccess                    *bool                  `protobuf:"varint,13,opt,name=compact_quick_access,json=compactQuickAccess" json:"compact_quick_access,omitempty"`
	CompactFriendsList                    *bool                  `protobuf:"varint,14,opt,name=compact_friends_list,json=compactFriendsList" json:"compact_friends_list,omitempty"`
	NotificationsShowChatRoomNotification *bool                  `protobuf:"varint,15,opt,name=notifications_show_chat_room_notification,json=notificationsShowChatRoomNotification" json:"notifications_show_chat_room_notification,omitempty"`
	SoundsPlayChatRoomNotification        *bool                  `protobuf:"varint,16,opt,name=sounds_play_chat_room_notification,json=soundsPlayChatRoomNotification" json:"sounds_play_chat_room_notification,omitempty"`
	HideOfflineFriendsInTagGroups         *bool                  `protobuf:"varint,17,opt,name=hide_offline_friends_in_tag_groups,json=hideOfflineFriendsInTagGroups" json:"hide_offline_friends_in_tag_groups,omitempty"`
	HideCategorizedFriends                *bool                  `protobuf:"varint,18,opt,name=hide_categorized_friends,json=hideCategorizedFriends" json:"hide_categorized_friends,omitempty"`
	CategorizeInGameFriendsByGame         *bool                  `protobuf:"varint,19,opt,name=categorize_in_game_friends_by_game,json=categorizeInGameFriendsByGame" json:"categorize_in_game_friends_by_game,omitempty"`
	ChatFontSize                          *int32                 `protobuf:"varint,20,opt,name=chat_font_size,json=chatFontSize" json:"chat_font_size,omitempty"`
	Use24HourClock                        *bool                  `protobuf:"varint,21,opt,name=use24hour_clock,json=use24hourClock" json:"use24hour_clock,omitempty"`
	DoNotDisturbMode                      *bool                  `protobuf:"varint,22,opt,name=do_not_disturb_mode,json=doNotDisturbMode" json:"do_not_disturb_mode,omitempty"`
	DisableEmbedInlining                  *bool                  `protobuf:"varint,23,opt,name=disable_embed_inlining,json=disableEmbedInlining" json:"disable_embed_inlining,omitempty"`
	SignIntoFriends                       *bool                  `protobuf:"varint,24,opt,name=sign_into_friends,json=signIntoFriends" json:"sign_into_friends,omitempty"`
	AnimatedAvatars                       *bool                  `protobuf:"varint,25,opt,name=animated_avatars,json=animatedAvatars" json:"animated_avatars,omitempty"`
	unknownFields                         protoimpl.UnknownFields
	sizeCache                             protoimpl.SizeCache
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_Settings) Reset() {
	*x = CChatUsability_ClientUsabilityMetrics_Notification_Settings{}
	mi := &file_service_chatusability_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_Settings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatUsability_ClientUsabilityMetrics_Notification_Settings) ProtoMessage() {}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_Settings) ProtoReflect() protoreflect.Message {
	mi := &file_service_chatusability_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatUsability_ClientUsabilityMetrics_Notification_Settings.ProtoReflect.Descriptor instead.
func (*CChatUsability_ClientUsabilityMetrics_Notification_Settings) Descriptor() ([]byte, []int) {
	return file_service_chatusability_proto_rawDescGZIP(), []int{2}
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_Settings) GetNotificationsShowIngame() bool {
	if x != nil && x.NotificationsShowIngame != nil {
		return *x.NotificationsShowIngame
	}
	return false
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_Settings) GetNotificationsShowOnline() bool {
	if x != nil && x.NotificationsShowOnline != nil {
		return *x.NotificationsShowOnline
	}
	return false
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_Settings) GetNotificationsShowMessage() bool {
	if x != nil && x.NotificationsShowMessage != nil {
		return *x.NotificationsShowMessage
	}
	return false
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_Settings) GetNotificationsEventsAndAnnouncements() bool {
	if x != nil && x.NotificationsEventsAndAnnouncements != nil {
		return *x.NotificationsEventsAndAnnouncements
	}
	return false
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_Settings) GetSoundsPlayIngame() bool {
	if x != nil && x.SoundsPlayIngame != nil {
		return *x.SoundsPlayIngame
	}
	return false
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_Settings) GetSoundsPlayOnline() bool {
	if x != nil && x.SoundsPlayOnline != nil {
		return *x.SoundsPlayOnline
	}
	return false
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_Settings) GetSoundsPlayMessage() bool {
	if x != nil && x.SoundsPlayMessage != nil {
		return *x.SoundsPlayMessage
	}
	return false
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_Settings) GetSoundsEventsAndAnnouncements() bool {
	if x != nil && x.SoundsEventsAndAnnouncements != nil {
		return *x.SoundsEventsAndAnnouncements
	}
	return false
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_Settings) GetAlwaysNewChatWindow() bool {
	if x != nil && x.AlwaysNewChatWindow != nil {
		return *x.AlwaysNewChatWindow
	}
	return false
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_Settings) GetForceAlphabeticFriendSorting() bool {
	if x != nil && x.ForceAlphabeticFriendSorting != nil {
		return *x.ForceAlphabeticFriendSorting
	}
	return false
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_Settings) GetChatFlashMode() int32 {
	if x != nil && x.ChatFlashMode != nil {
		return *x.ChatFlashMode
	}
	return 0
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_Settings) GetRememberOpenChats() bool {
	if x != nil && x.RememberOpenChats != nil {
		return *x.RememberOpenChats
	}
	return false
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_Settings) GetCompactQuickAccess() bool {
	if x != nil && x.CompactQuickAccess != nil {
		return *x.CompactQuickAccess
	}
	return false
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_Settings) GetCompactFriendsList() bool {
	if x != nil && x.CompactFriendsList != nil {
		return *x.CompactFriendsList
	}
	return false
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_Settings) GetNotificationsShowChatRoomNotification() bool {
	if x != nil && x.NotificationsShowChatRoomNotification != nil {
		return *x.NotificationsShowChatRoomNotification
	}
	return false
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_Settings) GetSoundsPlayChatRoomNotification() bool {
	if x != nil && x.SoundsPlayChatRoomNotification != nil {
		return *x.SoundsPlayChatRoomNotification
	}
	return false
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_Settings) GetHideOfflineFriendsInTagGroups() bool {
	if x != nil && x.HideOfflineFriendsInTagGroups != nil {
		return *x.HideOfflineFriendsInTagGroups
	}
	return false
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_Settings) GetHideCategorizedFriends() bool {
	if x != nil && x.HideCategorizedFriends != nil {
		return *x.HideCategorizedFriends
	}
	return false
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_Settings) GetCategorizeInGameFriendsByGame() bool {
	if x != nil && x.CategorizeInGameFriendsByGame != nil {
		return *x.CategorizeInGameFriendsByGame
	}
	return false
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_Settings) GetChatFontSize() int32 {
	if x != nil && x.ChatFontSize != nil {
		return *x.ChatFontSize
	}
	return 0
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_Settings) GetUse24HourClock() bool {
	if x != nil && x.Use24HourClock != nil {
		return *x.Use24HourClock
	}
	return false
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_Settings) GetDoNotDisturbMode() bool {
	if x != nil && x.DoNotDisturbMode != nil {
		return *x.DoNotDisturbMode
	}
	return false
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_Settings) GetDisableEmbedInlining() bool {
	if x != nil && x.DisableEmbedInlining != nil {
		return *x.DisableEmbedInlining
	}
	return false
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_Settings) GetSignIntoFriends() bool {
	if x != nil && x.SignIntoFriends != nil {
		return *x.SignIntoFriends
	}
	return false
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_Settings) GetAnimatedAvatars() bool {
	if x != nil && x.AnimatedAvatars != nil {
		return *x.AnimatedAvatars
	}
	return false
}

type CChatUsability_ClientUsabilityMetrics_Notification_UIState struct {
	state                       protoimpl.MessageState                                                            `protogen:"open.v1"`
	FriendsListHeight           *int32                                                                            `protobuf:"varint,1,opt,name=friends_list_height,json=friendsListHeight" json:"friends_list_height,omitempty"`
	FriendsListWidth            *int32                                                                            `protobuf:"varint,2,opt,name=friends_list_width,json=friendsListWidth" json:"friends_list_width,omitempty"`
	FriendsListDocked           *bool                                                                             `protobuf:"varint,3,opt,name=friends_list_docked,json=friendsListDocked" json:"friends_list_docked,omitempty"`
	FriendsListCollapsed        *bool                                                                             `protobuf:"varint,4,opt,name=friends_list_collapsed,json=friendsListCollapsed" json:"friends_list_collapsed,omitempty"`
	FriendsListGroupChatsHeight *int32                                                                            `protobuf:"varint,5,opt,name=friends_list_group_chats_height,json=friendsListGroupChatsHeight" json:"friends_list_group_chats_height,omitempty"`
	FriendsListVisible          *bool                                                                             `protobuf:"varint,6,opt,name=friends_list_visible,json=friendsListVisible" json:"friends_list_visible,omitempty"`
	ChatPopupsOpened            *int32                                                                            `protobuf:"varint,7,opt,name=chat_popups_opened,json=chatPopupsOpened" json:"chat_popups_opened,omitempty"`
	GroupChatTabsOpened         *int32                                                                            `protobuf:"varint,8,opt,name=group_chat_tabs_opened,json=groupChatTabsOpened" json:"group_chat_tabs_opened,omitempty"`
	FriendChatTabsOpened        *int32                                                                            `protobuf:"varint,9,opt,name=friend_chat_tabs_opened,json=friendChatTabsOpened" json:"friend_chat_tabs_opened,omitempty"`
	ChatWindowWidth             *int32                                                                            `protobuf:"varint,10,opt,name=chat_window_width,json=chatWindowWidth" json:"chat_window_width,omitempty"`
	ChatWindowHeight            *int32                                                                            `protobuf:"varint,11,opt,name=chat_window_height,json=chatWindowHeight" json:"chat_window_height,omitempty"`
	CategoryCollapse            *CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState `protobuf:"bytes,12,opt,name=category_collapse,json=categoryCollapse" json:"category_collapse,omitempty"`
	GroupChatLeftColCollapsed   *int32                                                                            `protobuf:"varint,13,opt,name=group_chat_left_col_collapsed,json=groupChatLeftColCollapsed" json:"group_chat_left_col_collapsed,omitempty"`
	GroupChatRightColCollapsed  *int32                                                                            `protobuf:"varint,14,opt,name=group_chat_right_col_collapsed,json=groupChatRightColCollapsed" json:"group_chat_right_col_collapsed,omitempty"`
	InOneOnOneVoiceChat         *bool                                                                             `protobuf:"varint,15,opt,name=in_one_on_one_voice_chat,json=inOneOnOneVoiceChat" json:"in_one_on_one_voice_chat,omitempty"`
	InGroupVoiceChat            *bool                                                                             `protobuf:"varint,16,opt,name=in_group_voice_chat,json=inGroupVoiceChat" json:"in_group_voice_chat,omitempty"`
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_UIState) Reset() {
	*x = CChatUsability_ClientUsabilityMetrics_Notification_UIState{}
	mi := &file_service_chatusability_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_UIState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatUsability_ClientUsabilityMetrics_Notification_UIState) ProtoMessage() {}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_UIState) ProtoReflect() protoreflect.Message {
	mi := &file_service_chatusability_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatUsability_ClientUsabilityMetrics_Notification_UIState.ProtoReflect.Descriptor instead.
func (*CChatUsability_ClientUsabilityMetrics_Notification_UIState) Descriptor() ([]byte, []int) {
	return file_service_chatusability_proto_rawDescGZIP(), []int{3}
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_UIState) GetFriendsListHeight() int32 {
	if x != nil && x.FriendsListHeight != nil {
		return *x.FriendsListHeight
	}
	return 0
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_UIState) GetFriendsListWidth() int32 {
	if x != nil && x.FriendsListWidth != nil {
		return *x.FriendsListWidth
	}
	return 0
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_UIState) GetFriendsListDocked() bool {
	if x != nil && x.FriendsListDocked != nil {
		return *x.FriendsListDocked
	}
	return false
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_UIState) GetFriendsListCollapsed() bool {
	if x != nil && x.FriendsListCollapsed != nil {
		return *x.FriendsListCollapsed
	}
	return false
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_UIState) GetFriendsListGroupChatsHeight() int32 {
	if x != nil && x.FriendsListGroupChatsHeight != nil {
		return *x.FriendsListGroupChatsHeight
	}
	return 0
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_UIState) GetFriendsListVisible() bool {
	if x != nil && x.FriendsListVisible != nil {
		return *x.FriendsListVisible
	}
	return false
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_UIState) GetChatPopupsOpened() int32 {
	if x != nil && x.ChatPopupsOpened != nil {
		return *x.ChatPopupsOpened
	}
	return 0
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_UIState) GetGroupChatTabsOpened() int32 {
	if x != nil && x.GroupChatTabsOpened != nil {
		return *x.GroupChatTabsOpened
	}
	return 0
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_UIState) GetFriendChatTabsOpened() int32 {
	if x != nil && x.FriendChatTabsOpened != nil {
		return *x.FriendChatTabsOpened
	}
	return 0
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_UIState) GetChatWindowWidth() int32 {
	if x != nil && x.ChatWindowWidth != nil {
		return *x.ChatWindowWidth
	}
	return 0
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_UIState) GetChatWindowHeight() int32 {
	if x != nil && x.ChatWindowHeight != nil {
		return *x.ChatWindowHeight
	}
	return 0
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_UIState) GetCategoryCollapse() *CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState {
	if x != nil {
		return x.CategoryCollapse
	}
	return nil
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_UIState) GetGroupChatLeftColCollapsed() int32 {
	if x != nil && x.GroupChatLeftColCollapsed != nil {
		return *x.GroupChatLeftColCollapsed
	}
	return 0
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_UIState) GetGroupChatRightColCollapsed() int32 {
	if x != nil && x.GroupChatRightColCollapsed != nil {
		return *x.GroupChatRightColCollapsed
	}
	return 0
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_UIState) GetInOneOnOneVoiceChat() bool {
	if x != nil && x.InOneOnOneVoiceChat != nil {
		return *x.InOneOnOneVoiceChat
	}
	return false
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_UIState) GetInGroupVoiceChat() bool {
	if x != nil && x.InGroupVoiceChat != nil {
		return *x.InGroupVoiceChat
	}
	return false
}

type CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	InGameCollapsed     *bool                  `protobuf:"varint,1,opt,name=in_game_collapsed,json=inGameCollapsed" json:"in_game_collapsed,omitempty"`
	OnlineCollapsed     *bool                  `protobuf:"varint,2,opt,name=online_collapsed,json=onlineCollapsed" json:"online_collapsed,omitempty"`
	OfflineCollapsed    *bool                  `protobuf:"varint,3,opt,name=offline_collapsed,json=offlineCollapsed" json:"offline_collapsed,omitempty"`
	GameGroupsCollapsed *int32                 `protobuf:"varint,4,opt,name=game_groups_collapsed,json=gameGroupsCollapsed" json:"game_groups_collapsed,omitempty"`
	CategoriesCollapsed *int32                 `protobuf:"varint,5,opt,name=categories_collapsed,json=categoriesCollapsed" json:"categories_collapsed,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState) Reset() {
	*x = CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState{}
	mi := &file_service_chatusability_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState) ProtoMessage() {
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState) ProtoReflect() protoreflect.Message {
	mi := &file_service_chatusability_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState.ProtoReflect.Descriptor instead.
func (*CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState) Descriptor() ([]byte, []int) {
	return file_service_chatusability_proto_rawDescGZIP(), []int{4}
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState) GetInGameCollapsed() bool {
	if x != nil && x.InGameCollapsed != nil {
		return *x.InGameCollapsed
	}
	return false
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState) GetOnlineCollapsed() bool {
	if x != nil && x.OnlineCollapsed != nil {
		return *x.OnlineCollapsed
	}
	return false
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState) GetOfflineCollapsed() bool {
	if x != nil && x.OfflineCollapsed != nil {
		return *x.OfflineCollapsed
	}
	return false
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState) GetGameGroupsCollapsed() int32 {
	if x != nil && x.GameGroupsCollapsed != nil {
		return *x.GameGroupsCollapsed
	}
	return 0
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState) GetCategoriesCollapsed() int32 {
	if x != nil && x.CategoriesCollapsed != nil {
		return *x.CategoriesCollapsed
	}
	return 0
}

type CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings struct {
	state                     protoimpl.MessageState `protogen:"open.v1"`
	VoiceInputGain            *float32               `protobuf:"fixed32,1,opt,name=voice_input_gain,json=voiceInputGain" json:"voice_input_gain,omitempty"`
	VoiceOutputGain           *float32               `protobuf:"fixed32,2,opt,name=voice_output_gain,json=voiceOutputGain" json:"voice_output_gain,omitempty"`
	NoiseGateLevel            *int32                 `protobuf:"varint,3,opt,name=noise_gate_level,json=noiseGateLevel" json:"noise_gate_level,omitempty"`
	VoiceUseEchoCancellation  *bool                  `protobuf:"varint,4,opt,name=voice_use_echo_cancellation,json=voiceUseEchoCancellation" json:"voice_use_echo_cancellation,omitempty"`
	VoiceUseNoiseCancellation *bool                  `protobuf:"varint,5,opt,name=voice_use_noise_cancellation,json=voiceUseNoiseCancellation" json:"voice_use_noise_cancellation,omitempty"`
	VoiceUseAutoGainControl   *bool                  `protobuf:"varint,6,opt,name=voice_use_auto_gain_control,json=voiceUseAutoGainControl" json:"voice_use_auto_gain_control,omitempty"`
	SelectedNonDefaultMic     *bool                  `protobuf:"varint,7,opt,name=selected_non_default_mic,json=selectedNonDefaultMic" json:"selected_non_default_mic,omitempty"`
	SelectedNonDefaultOutput  *bool                  `protobuf:"varint,8,opt,name=selected_non_default_output,json=selectedNonDefaultOutput" json:"selected_non_default_output,omitempty"`
	PushToTalkEnabled         *bool                  `protobuf:"varint,9,opt,name=push_to_talk_enabled,json=pushToTalkEnabled" json:"push_to_talk_enabled,omitempty"`
	PushToMuteEnabled         *bool                  `protobuf:"varint,10,opt,name=push_to_mute_enabled,json=pushToMuteEnabled" json:"push_to_mute_enabled,omitempty"`
	PlayPttSounds             *bool                  `protobuf:"varint,11,opt,name=play_ptt_sounds,json=playPttSounds" json:"play_ptt_sounds,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings) Reset() {
	*x = CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings{}
	mi := &file_service_chatusability_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings) ProtoMessage() {}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings) ProtoReflect() protoreflect.Message {
	mi := &file_service_chatusability_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings.ProtoReflect.Descriptor instead.
func (*CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings) Descriptor() ([]byte, []int) {
	return file_service_chatusability_proto_rawDescGZIP(), []int{5}
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings) GetVoiceInputGain() float32 {
	if x != nil && x.VoiceInputGain != nil {
		return *x.VoiceInputGain
	}
	return 0
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings) GetVoiceOutputGain() float32 {
	if x != nil && x.VoiceOutputGain != nil {
		return *x.VoiceOutputGain
	}
	return 0
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings) GetNoiseGateLevel() int32 {
	if x != nil && x.NoiseGateLevel != nil {
		return *x.NoiseGateLevel
	}
	return 0
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings) GetVoiceUseEchoCancellation() bool {
	if x != nil && x.VoiceUseEchoCancellation != nil {
		return *x.VoiceUseEchoCancellation
	}
	return false
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings) GetVoiceUseNoiseCancellation() bool {
	if x != nil && x.VoiceUseNoiseCancellation != nil {
		return *x.VoiceUseNoiseCancellation
	}
	return false
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings) GetVoiceUseAutoGainControl() bool {
	if x != nil && x.VoiceUseAutoGainControl != nil {
		return *x.VoiceUseAutoGainControl
	}
	return false
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings) GetSelectedNonDefaultMic() bool {
	if x != nil && x.SelectedNonDefaultMic != nil {
		return *x.SelectedNonDefaultMic
	}
	return false
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings) GetSelectedNonDefaultOutput() bool {
	if x != nil && x.SelectedNonDefaultOutput != nil {
		return *x.SelectedNonDefaultOutput
	}
	return false
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings) GetPushToTalkEnabled() bool {
	if x != nil && x.PushToTalkEnabled != nil {
		return *x.PushToTalkEnabled
	}
	return false
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings) GetPushToMuteEnabled() bool {
	if x != nil && x.PushToMuteEnabled != nil {
		return *x.PushToMuteEnabled
	}
	return false
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings) GetPlayPttSounds() bool {
	if x != nil && x.PlayPttSounds != nil {
		return *x.PlayPttSounds
	}
	return false
}

type CChatUsability_RequestClientUsabilityMetrics_Notification struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MetricsRunId  *uint32                `protobuf:"varint,1,opt,name=metrics_run_id,json=metricsRunId" json:"metrics_run_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CChatUsability_RequestClientUsabilityMetrics_Notification) Reset() {
	*x = CChatUsability_RequestClientUsabilityMetrics_Notification{}
	mi := &file_service_chatusability_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CChatUsability_RequestClientUsabilityMetrics_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatUsability_RequestClientUsabilityMetrics_Notification) ProtoMessage() {}

func (x *CChatUsability_RequestClientUsabilityMetrics_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_service_chatusability_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatUsability_RequestClientUsabilityMetrics_Notification.ProtoReflect.Descriptor instead.
func (*CChatUsability_RequestClientUsabilityMetrics_Notification) Descriptor() ([]byte, []int) {
	return file_service_chatusability_proto_rawDescGZIP(), []int{6}
}

func (x *CChatUsability_RequestClientUsabilityMetrics_Notification) GetMetricsRunId() uint32 {
	if x != nil && x.MetricsRunId != nil {
		return *x.MetricsRunId
	}
	return 0
}

var File_service_chatusability_proto protoreflect.FileDescriptor

const file_service_chatusability_proto_rawDesc = "" +
	"\n" +
	"\x1bservice_chatusability.proto\x1a\x11common_base.proto\"\xb0\x04\n" +
	"2CChatUsability_ClientUsabilityMetrics_Notification\x12$\n" +
	"\x0emetrics_run_id\x18\x01 \x01(\rR\fmetricsRunId\x12!\n" +
	"\fclient_build\x18\x02 \x01(\rR\vclientBuild\x12'\n" +
	"\x0fmetrics_version\x18\x03 \x01(\rR\x0emetricsVersion\x12\x15\n" +
	"\x06in_web\x18\x04 \x01(\bR\x05inWeb\x12X\n" +
	"\bsettings\x18\n" +
	" \x01(\v2<.CChatUsability_ClientUsabilityMetrics_Notification_SettingsR\bsettings\x12h\n" +
	"\x0evoice_settings\x18\v \x01(\v2A.CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettingsR\rvoiceSettings\x12V\n" +
	"\bui_state\x18\f \x01(\v2;.CChatUsability_ClientUsabilityMetrics_Notification_UIStateR\auiState\x12U\n" +
	"\ametrics\x18\r \x01(\v2;.CChatUsability_ClientUsabilityMetrics_Notification_MetricsR\ametrics\"\xc3\x04\n" +
	":CChatUsability_ClientUsabilityMetrics_Notification_Metrics\x12#\n" +
	"\rfriends_count\x18\x01 \x01(\x05R\ffriendsCount\x124\n" +
	"\x16friends_category_count\x18\x02 \x01(\x05R\x14friendsCategoryCount\x12:\n" +
	"\x19friends_categorized_count\x18\x03 \x01(\x05R\x17friendsCategorizedCount\x120\n" +
	"\x14friends_online_count\x18\x04 \x01(\x05R\x12friendsOnlineCount\x121\n" +
	"\x15friends_in_game_count\x18\x05 \x01(\x05R\x12friendsInGameCount\x12D\n" +
	"\x1ffriends_in_game_singleton_count\x18\x06 \x01(\x05R\x1bfriendsInGameSingletonCount\x12(\n" +
	"\x10game_group_count\x18\a \x01(\x05R\x0egameGroupCount\x124\n" +
	"\x16friends_favorite_count\x18\b \x01(\x05R\x14friendsFavoriteCount\x12(\n" +
	"\x10group_chat_count\x18\t \x01(\x05R\x0egroupChatCount\x129\n" +
	"\x19group_chat_favorite_count\x18\n" +
	" \x01(\x05R\x16groupChatFavoriteCount\"\xd4\v\n" +
	";CChatUsability_ClientUsabilityMetrics_Notification_Settings\x12:\n" +
	"\x19notifications_show_ingame\x18\x01 \x01(\bR\x17notificationsShowIngame\x12:\n" +
	"\x19notifications_show_online\x18\x02 \x01(\bR\x17notificationsShowOnline\x12<\n" +
	"\x1anotifications_show_message\x18\x03 \x01(\bR\x18notificationsShowMessage\x12S\n" +
	"&notifications_events_and_announcements\x18\x04 \x01(\bR#notificationsEventsAndAnnouncements\x12,\n" +
	"\x12sounds_play_ingame\x18\x05 \x01(\bR\x10soundsPlayIngame\x12,\n" +
	"\x12sounds_play_online\x18\x06 \x01(\bR\x10soundsPlayOnline\x12.\n" +
	"\x13sounds_play_message\x18\a \x01(\bR\x11soundsPlayMessage\x12E\n" +
	"\x1fsounds_events_and_announcements\x18\b \x01(\bR\x1csoundsEventsAndAnnouncements\x123\n" +
	"\x16always_new_chat_window\x18\t \x01(\bR\x13alwaysNewChatWindow\x12E\n" +
	"\x1fforce_alphabetic_friend_sorting\x18\n" +
	" \x01(\bR\x1cforceAlphabeticFriendSorting\x12&\n" +
	"\x0fchat_flash_mode\x18\v \x01(\x05R\rchatFlashMode\x12.\n" +
	"\x13remember_open_chats\x18\f \x01(\bR\x11rememberOpenChats\x120\n" +
	"\x14compact_quick_access\x18\r \x01(\bR\x12compactQuickAccess\x120\n" +
	"\x14compact_friends_list\x18\x0e \x01(\bR\x12compactFriendsList\x12X\n" +
	")notifications_show_chat_room_notification\x18\x0f \x01(\bR%notificationsShowChatRoomNotification\x12J\n" +
	"\"sounds_play_chat_room_notification\x18\x10 \x01(\bR\x1esoundsPlayChatRoomNotification\x12I\n" +
	"\"hide_offline_friends_in_tag_groups\x18\x11 \x01(\bR\x1dhideOfflineFriendsInTagGroups\x128\n" +
	"\x18hide_categorized_friends\x18\x12 \x01(\bR\x16hideCategorizedFriends\x12I\n" +
	"\"categorize_in_game_friends_by_game\x18\x13 \x01(\bR\x1dcategorizeInGameFriendsByGame\x12$\n" +
	"\x0echat_font_size\x18\x14 \x01(\x05R\fchatFontSize\x12'\n" +
	"\x0fuse24hour_clock\x18\x15 \x01(\bR\x0euse24hourClock\x12-\n" +
	"\x13do_not_disturb_mode\x18\x16 \x01(\bR\x10doNotDisturbMode\x124\n" +
	"\x16disable_embed_inlining\x18\x17 \x01(\bR\x14disableEmbedInlining\x12*\n" +
	"\x11sign_into_friends\x18\x18 \x01(\bR\x0fsignIntoFriends\x12)\n" +
	"\x10animated_avatars\x18\x19 \x01(\bR\x0fanimatedAvatars\"\xd8\a\n" +
	":CChatUsability_ClientUsabilityMetrics_Notification_UIState\x12.\n" +
	"\x13friends_list_height\x18\x01 \x01(\x05R\x11friendsListHeight\x12,\n" +
	"\x12friends_list_width\x18\x02 \x01(\x05R\x10friendsListWidth\x12.\n" +
	"\x13friends_list_docked\x18\x03 \x01(\bR\x11friendsListDocked\x124\n" +
	"\x16friends_list_collapsed\x18\x04 \x01(\bR\x14friendsListCollapsed\x12D\n" +
	"\x1ffriends_list_group_chats_height\x18\x05 \x01(\x05R\x1bfriendsListGroupChatsHeight\x120\n" +
	"\x14friends_list_visible\x18\x06 \x01(\bR\x12friendsListVisible\x12,\n" +
	"\x12chat_popups_opened\x18\a \x01(\x05R\x10chatPopupsOpened\x123\n" +
	"\x16group_chat_tabs_opened\x18\b \x01(\x05R\x13groupChatTabsOpened\x125\n" +
	"\x17friend_chat_tabs_opened\x18\t \x01(\x05R\x14friendChatTabsOpened\x12*\n" +
	"\x11chat_window_width\x18\n" +
	" \x01(\x05R\x0fchatWindowWidth\x12,\n" +
	"\x12chat_window_height\x18\v \x01(\x05R\x10chatWindowHeight\x12~\n" +
	"\x11category_collapse\x18\f \x01(\v2Q.CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseStateR\x10categoryCollapse\x12@\n" +
	"\x1dgroup_chat_left_col_collapsed\x18\r \x01(\x05R\x19groupChatLeftColCollapsed\x12B\n" +
	"\x1egroup_chat_right_col_collapsed\x18\x0e \x01(\x05R\x1agroupChatRightColCollapsed\x125\n" +
	"\x18in_one_on_one_voice_chat\x18\x0f \x01(\bR\x13inOneOnOneVoiceChat\x12-\n" +
	"\x13in_group_voice_chat\x18\x10 \x01(\bR\x10inGroupVoiceChat\"\xbd\x02\n" +
	"PCChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState\x12*\n" +
	"\x11in_game_collapsed\x18\x01 \x01(\bR\x0finGameCollapsed\x12)\n" +
	"\x10online_collapsed\x18\x02 \x01(\bR\x0fonlineCollapsed\x12+\n" +
	"\x11offline_collapsed\x18\x03 \x01(\bR\x10offlineCollapsed\x122\n" +
	"\x15game_groups_collapsed\x18\x04 \x01(\x05R\x13gameGroupsCollapsed\x121\n" +
	"\x14categories_collapsed\x18\x05 \x01(\x05R\x13categoriesCollapsed\"\x82\x05\n" +
	"@CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings\x12(\n" +
	"\x10voice_input_gain\x18\x01 \x01(\x02R\x0evoiceInputGain\x12*\n" +
	"\x11voice_output_gain\x18\x02 \x01(\x02R\x0fvoiceOutputGain\x12(\n" +
	"\x10noise_gate_level\x18\x03 \x01(\x05R\x0enoiseGateLevel\x12=\n" +
	"\x1bvoice_use_echo_cancellation\x18\x04 \x01(\bR\x18voiceUseEchoCancellation\x12?\n" +
	"\x1cvoice_use_noise_cancellation\x18\x05 \x01(\bR\x19voiceUseNoiseCancellation\x12<\n" +
	"\x1bvoice_use_auto_gain_control\x18\x06 \x01(\bR\x17voiceUseAutoGainControl\x127\n" +
	"\x18selected_non_default_mic\x18\a \x01(\bR\x15selectedNonDefaultMic\x12=\n" +
	"\x1bselected_non_default_output\x18\b \x01(\bR\x18selectedNonDefaultOutput\x12/\n" +
	"\x14push_to_talk_enabled\x18\t \x01(\bR\x11pushToTalkEnabled\x12/\n" +
	"\x14push_to_mute_enabled\x18\n" +
	" \x01(\bR\x11pushToMuteEnabled\x12&\n" +
	"\x0fplay_ptt_sounds\x18\v \x01(\bR\rplayPttSounds\"a\n" +
	"9CChatUsability_RequestClientUsabilityMetrics_Notification\x12$\n" +
	"\x0emetrics_run_id\x18\x01 \x01(\rR\fmetricsRunId2q\n" +
	"\rChatUsability\x12`\n" +
	"\x1cNotifyClientUsabilityMetrics\x123.CChatUsability_ClientUsabilityMetrics_Notification\x1a\v.NoResponse2\x85\x01\n" +
	"\x13ChatUsabilityClient\x12n\n" +
	"#NotifyRequestClientUsabilityMetrics\x12:.CChatUsability_RequestClientUsabilityMetrics_Notification\x1a\v.NoResponse"

var (
	file_service_chatusability_proto_rawDescOnce sync.Once
	file_service_chatusability_proto_rawDescData []byte
)

func file_service_chatusability_proto_rawDescGZIP() []byte {
	file_service_chatusability_proto_rawDescOnce.Do(func() {
		file_service_chatusability_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_service_chatusability_proto_rawDesc), len(file_service_chatusability_proto_rawDesc)))
	})
	return file_service_chatusability_proto_rawDescData
}

var file_service_chatusability_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_service_chatusability_proto_goTypes = []any{
	(*CChatUsability_ClientUsabilityMetrics_Notification)(nil),                               // 0: CChatUsability_ClientUsabilityMetrics_Notification
	(*CChatUsability_ClientUsabilityMetrics_Notification_Metrics)(nil),                       // 1: CChatUsability_ClientUsabilityMetrics_Notification_Metrics
	(*CChatUsability_ClientUsabilityMetrics_Notification_Settings)(nil),                      // 2: CChatUsability_ClientUsabilityMetrics_Notification_Settings
	(*CChatUsability_ClientUsabilityMetrics_Notification_UIState)(nil),                       // 3: CChatUsability_ClientUsabilityMetrics_Notification_UIState
	(*CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState)(nil), // 4: CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState
	(*CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings)(nil),                 // 5: CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings
	(*CChatUsability_RequestClientUsabilityMetrics_Notification)(nil),                        // 6: CChatUsability_RequestClientUsabilityMetrics_Notification
	(*NoResponse)(nil), // 7: NoResponse
}
var file_service_chatusability_proto_depIdxs = []int32{
	2, // 0: CChatUsability_ClientUsabilityMetrics_Notification.settings:type_name -> CChatUsability_ClientUsabilityMetrics_Notification_Settings
	5, // 1: CChatUsability_ClientUsabilityMetrics_Notification.voice_settings:type_name -> CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings
	3, // 2: CChatUsability_ClientUsabilityMetrics_Notification.ui_state:type_name -> CChatUsability_ClientUsabilityMetrics_Notification_UIState
	1, // 3: CChatUsability_ClientUsabilityMetrics_Notification.metrics:type_name -> CChatUsability_ClientUsabilityMetrics_Notification_Metrics
	4, // 4: CChatUsability_ClientUsabilityMetrics_Notification_UIState.category_collapse:type_name -> CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState
	0, // 5: ChatUsability.NotifyClientUsabilityMetrics:input_type -> CChatUsability_ClientUsabilityMetrics_Notification
	6, // 6: ChatUsabilityClient.NotifyRequestClientUsabilityMetrics:input_type -> CChatUsability_RequestClientUsabilityMetrics_Notification
	7, // 7: ChatUsability.NotifyClientUsabilityMetrics:output_type -> NoResponse
	7, // 8: ChatUsabilityClient.NotifyRequestClientUsabilityMetrics:output_type -> NoResponse
	7, // [7:9] is the sub-list for method output_type
	5, // [5:7] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_service_chatusability_proto_init() }
func file_service_chatusability_proto_init() {
	if File_service_chatusability_proto != nil {
		return
	}
	file_common_base_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_service_chatusability_proto_rawDesc), len(file_service_chatusability_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_service_chatusability_proto_goTypes,
		DependencyIndexes: file_service_chatusability_proto_depIdxs,
		MessageInfos:      file_service_chatusability_proto_msgTypes,
	}.Build()
	File_service_chatusability_proto = out.File
	file_service_chatusability_proto_goTypes = nil
	file_service_chatusability_proto_depIdxs = nil
}
