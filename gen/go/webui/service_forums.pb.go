// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.32.0
// source: service_forums.proto

package webui

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CForums_DeleteModeratedComment_Request struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Steamid           *uint64                `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	CommentThreadType *int32                 `protobuf:"varint,2,opt,name=comment_thread_type,json=commentThreadType" json:"comment_thread_type,omitempty"`
	Gidfeature        *uint64                `protobuf:"varint,3,opt,name=gidfeature" json:"gidfeature,omitempty"`
	Gidfeature2       *uint64                `protobuf:"varint,4,opt,name=gidfeature2" json:"gidfeature2,omitempty"`
	Gidcomment        *uint64                `protobuf:"varint,5,opt,name=gidcomment" json:"gidcomment,omitempty"`
	Reason            *int32                 `protobuf:"varint,6,opt,name=reason" json:"reason,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *CForums_DeleteModeratedComment_Request) Reset() {
	*x = CForums_DeleteModeratedComment_Request{}
	mi := &file_service_forums_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CForums_DeleteModeratedComment_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CForums_DeleteModeratedComment_Request) ProtoMessage() {}

func (x *CForums_DeleteModeratedComment_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_forums_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CForums_DeleteModeratedComment_Request.ProtoReflect.Descriptor instead.
func (*CForums_DeleteModeratedComment_Request) Descriptor() ([]byte, []int) {
	return file_service_forums_proto_rawDescGZIP(), []int{0}
}

func (x *CForums_DeleteModeratedComment_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CForums_DeleteModeratedComment_Request) GetCommentThreadType() int32 {
	if x != nil && x.CommentThreadType != nil {
		return *x.CommentThreadType
	}
	return 0
}

func (x *CForums_DeleteModeratedComment_Request) GetGidfeature() uint64 {
	if x != nil && x.Gidfeature != nil {
		return *x.Gidfeature
	}
	return 0
}

func (x *CForums_DeleteModeratedComment_Request) GetGidfeature2() uint64 {
	if x != nil && x.Gidfeature2 != nil {
		return *x.Gidfeature2
	}
	return 0
}

func (x *CForums_DeleteModeratedComment_Request) GetGidcomment() uint64 {
	if x != nil && x.Gidcomment != nil {
		return *x.Gidcomment
	}
	return 0
}

func (x *CForums_DeleteModeratedComment_Request) GetReason() int32 {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return 0
}

type CForums_DeleteModeratedComment_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CForums_DeleteModeratedComment_Response) Reset() {
	*x = CForums_DeleteModeratedComment_Response{}
	mi := &file_service_forums_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CForums_DeleteModeratedComment_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CForums_DeleteModeratedComment_Response) ProtoMessage() {}

func (x *CForums_DeleteModeratedComment_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_forums_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CForums_DeleteModeratedComment_Response.ProtoReflect.Descriptor instead.
func (*CForums_DeleteModeratedComment_Response) Descriptor() ([]byte, []int) {
	return file_service_forums_proto_rawDescGZIP(), []int{1}
}

type CForums_DeleteModeratedTopic_Request struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Steamid           *uint64                `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	CommentThreadType *int32                 `protobuf:"varint,2,opt,name=comment_thread_type,json=commentThreadType" json:"comment_thread_type,omitempty"`
	Gidfeature        *uint64                `protobuf:"varint,3,opt,name=gidfeature" json:"gidfeature,omitempty"`
	Gidfeature2       *uint64                `protobuf:"varint,4,opt,name=gidfeature2" json:"gidfeature2,omitempty"`
	Reason            *int32                 `protobuf:"varint,5,opt,name=reason" json:"reason,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *CForums_DeleteModeratedTopic_Request) Reset() {
	*x = CForums_DeleteModeratedTopic_Request{}
	mi := &file_service_forums_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CForums_DeleteModeratedTopic_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CForums_DeleteModeratedTopic_Request) ProtoMessage() {}

func (x *CForums_DeleteModeratedTopic_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_forums_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CForums_DeleteModeratedTopic_Request.ProtoReflect.Descriptor instead.
func (*CForums_DeleteModeratedTopic_Request) Descriptor() ([]byte, []int) {
	return file_service_forums_proto_rawDescGZIP(), []int{2}
}

func (x *CForums_DeleteModeratedTopic_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CForums_DeleteModeratedTopic_Request) GetCommentThreadType() int32 {
	if x != nil && x.CommentThreadType != nil {
		return *x.CommentThreadType
	}
	return 0
}

func (x *CForums_DeleteModeratedTopic_Request) GetGidfeature() uint64 {
	if x != nil && x.Gidfeature != nil {
		return *x.Gidfeature
	}
	return 0
}

func (x *CForums_DeleteModeratedTopic_Request) GetGidfeature2() uint64 {
	if x != nil && x.Gidfeature2 != nil {
		return *x.Gidfeature2
	}
	return 0
}

func (x *CForums_DeleteModeratedTopic_Request) GetReason() int32 {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return 0
}

type CForums_DeleteModeratedTopic_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CForums_DeleteModeratedTopic_Response) Reset() {
	*x = CForums_DeleteModeratedTopic_Response{}
	mi := &file_service_forums_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CForums_DeleteModeratedTopic_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CForums_DeleteModeratedTopic_Response) ProtoMessage() {}

func (x *CForums_DeleteModeratedTopic_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_forums_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CForums_DeleteModeratedTopic_Response.ProtoReflect.Descriptor instead.
func (*CForums_DeleteModeratedTopic_Response) Descriptor() ([]byte, []int) {
	return file_service_forums_proto_rawDescGZIP(), []int{3}
}

type CForums_GetForumDetails_Response struct {
	state                  protoimpl.MessageState   `protogen:"open.v1"`
	Gidforum               *uint64                  `protobuf:"varint,1,opt,name=gidforum" json:"gidforum,omitempty"`
	Clanidowner            *uint32                  `protobuf:"varint,2,opt,name=clanidowner" json:"clanidowner,omitempty"`
	Gidfeature             *int64                   `protobuf:"varint,3,opt,name=gidfeature" json:"gidfeature,omitempty"`
	Forumtype              *string                  `protobuf:"bytes,4,opt,name=forumtype" json:"forumtype,omitempty"`
	Appid                  *uint32                  `protobuf:"varint,5,opt,name=appid" json:"appid,omitempty"`
	Name                   *string                  `protobuf:"bytes,6,opt,name=name" json:"name,omitempty"`
	PermissionModerate     *uint32                  `protobuf:"varint,7,opt,name=permission_moderate,json=permissionModerate" json:"permission_moderate,omitempty"`
	PermissionPost         *uint32                  `protobuf:"varint,8,opt,name=permission_post,json=permissionPost" json:"permission_post,omitempty"`
	PermissionReply        *uint32                  `protobuf:"varint,9,opt,name=permission_reply,json=permissionReply" json:"permission_reply,omitempty"`
	PermissionView         *uint32                  `protobuf:"varint,10,opt,name=permission_view,json=permissionView" json:"permission_view,omitempty"`
	Permissions            *CForums_UserPermissions `protobuf:"bytes,11,opt,name=permissions" json:"permissions,omitempty"`
	UserBan                *CForums_UserBan         `protobuf:"bytes,12,opt,name=user_ban,json=userBan" json:"user_ban,omitempty"`
	IsPublicForum          *bool                    `protobuf:"varint,13,opt,name=is_public_forum,json=isPublicForum" json:"is_public_forum,omitempty"`
	PermissionAttachImages *uint32                  `protobuf:"varint,14,opt,name=permission_attach_images,json=permissionAttachImages" json:"permission_attach_images,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *CForums_GetForumDetails_Response) Reset() {
	*x = CForums_GetForumDetails_Response{}
	mi := &file_service_forums_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CForums_GetForumDetails_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CForums_GetForumDetails_Response) ProtoMessage() {}

func (x *CForums_GetForumDetails_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_forums_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CForums_GetForumDetails_Response.ProtoReflect.Descriptor instead.
func (*CForums_GetForumDetails_Response) Descriptor() ([]byte, []int) {
	return file_service_forums_proto_rawDescGZIP(), []int{4}
}

func (x *CForums_GetForumDetails_Response) GetGidforum() uint64 {
	if x != nil && x.Gidforum != nil {
		return *x.Gidforum
	}
	return 0
}

func (x *CForums_GetForumDetails_Response) GetClanidowner() uint32 {
	if x != nil && x.Clanidowner != nil {
		return *x.Clanidowner
	}
	return 0
}

func (x *CForums_GetForumDetails_Response) GetGidfeature() int64 {
	if x != nil && x.Gidfeature != nil {
		return *x.Gidfeature
	}
	return 0
}

func (x *CForums_GetForumDetails_Response) GetForumtype() string {
	if x != nil && x.Forumtype != nil {
		return *x.Forumtype
	}
	return ""
}

func (x *CForums_GetForumDetails_Response) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CForums_GetForumDetails_Response) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CForums_GetForumDetails_Response) GetPermissionModerate() uint32 {
	if x != nil && x.PermissionModerate != nil {
		return *x.PermissionModerate
	}
	return 0
}

func (x *CForums_GetForumDetails_Response) GetPermissionPost() uint32 {
	if x != nil && x.PermissionPost != nil {
		return *x.PermissionPost
	}
	return 0
}

func (x *CForums_GetForumDetails_Response) GetPermissionReply() uint32 {
	if x != nil && x.PermissionReply != nil {
		return *x.PermissionReply
	}
	return 0
}

func (x *CForums_GetForumDetails_Response) GetPermissionView() uint32 {
	if x != nil && x.PermissionView != nil {
		return *x.PermissionView
	}
	return 0
}

func (x *CForums_GetForumDetails_Response) GetPermissions() *CForums_UserPermissions {
	if x != nil {
		return x.Permissions
	}
	return nil
}

func (x *CForums_GetForumDetails_Response) GetUserBan() *CForums_UserBan {
	if x != nil {
		return x.UserBan
	}
	return nil
}

func (x *CForums_GetForumDetails_Response) GetIsPublicForum() bool {
	if x != nil && x.IsPublicForum != nil {
		return *x.IsPublicForum
	}
	return false
}

func (x *CForums_GetForumDetails_Response) GetPermissionAttachImages() uint32 {
	if x != nil && x.PermissionAttachImages != nil {
		return *x.PermissionAttachImages
	}
	return 0
}

type CForums_GetTopicDetails_Request struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Steamid         *uint64                `protobuf:"varint,1,opt,name=steamid" json:"steamid,omitempty"`
	Gidforum        *uint64                `protobuf:"varint,2,opt,name=gidforum" json:"gidforum,omitempty"`
	Forumtype       *string                `protobuf:"bytes,3,opt,name=forumtype" json:"forumtype,omitempty"`
	Gidfeature      *uint64                `protobuf:"varint,4,opt,name=gidfeature" json:"gidfeature,omitempty"`
	Gidtopics       []uint64               `protobuf:"varint,5,rep,name=gidtopics" json:"gidtopics,omitempty"`
	IncludePreview  *bool                  `protobuf:"varint,6,opt,name=include_preview,json=includePreview" json:"include_preview,omitempty"`
	IncludeFullText *bool                  `protobuf:"varint,7,opt,name=include_full_text,json=includeFullText" json:"include_full_text,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CForums_GetTopicDetails_Request) Reset() {
	*x = CForums_GetTopicDetails_Request{}
	mi := &file_service_forums_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CForums_GetTopicDetails_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CForums_GetTopicDetails_Request) ProtoMessage() {}

func (x *CForums_GetTopicDetails_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_forums_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CForums_GetTopicDetails_Request.ProtoReflect.Descriptor instead.
func (*CForums_GetTopicDetails_Request) Descriptor() ([]byte, []int) {
	return file_service_forums_proto_rawDescGZIP(), []int{5}
}

func (x *CForums_GetTopicDetails_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CForums_GetTopicDetails_Request) GetGidforum() uint64 {
	if x != nil && x.Gidforum != nil {
		return *x.Gidforum
	}
	return 0
}

func (x *CForums_GetTopicDetails_Request) GetForumtype() string {
	if x != nil && x.Forumtype != nil {
		return *x.Forumtype
	}
	return ""
}

func (x *CForums_GetTopicDetails_Request) GetGidfeature() uint64 {
	if x != nil && x.Gidfeature != nil {
		return *x.Gidfeature
	}
	return 0
}

func (x *CForums_GetTopicDetails_Request) GetGidtopics() []uint64 {
	if x != nil {
		return x.Gidtopics
	}
	return nil
}

func (x *CForums_GetTopicDetails_Request) GetIncludePreview() bool {
	if x != nil && x.IncludePreview != nil {
		return *x.IncludePreview
	}
	return false
}

func (x *CForums_GetTopicDetails_Request) GetIncludeFullText() bool {
	if x != nil && x.IncludeFullText != nil {
		return *x.IncludeFullText
	}
	return false
}

type CForums_GetTopicDetails_Response struct {
	state         protoimpl.MessageState            `protogen:"open.v1"`
	ForumDetails  *CForums_GetForumDetails_Response `protobuf:"bytes,1,opt,name=forum_details,json=forumDetails" json:"forum_details,omitempty"`
	Topics        []*CForums_Topic                  `protobuf:"bytes,2,rep,name=topics" json:"topics,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CForums_GetTopicDetails_Response) Reset() {
	*x = CForums_GetTopicDetails_Response{}
	mi := &file_service_forums_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CForums_GetTopicDetails_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CForums_GetTopicDetails_Response) ProtoMessage() {}

func (x *CForums_GetTopicDetails_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_forums_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CForums_GetTopicDetails_Response.ProtoReflect.Descriptor instead.
func (*CForums_GetTopicDetails_Response) Descriptor() ([]byte, []int) {
	return file_service_forums_proto_rawDescGZIP(), []int{6}
}

func (x *CForums_GetTopicDetails_Response) GetForumDetails() *CForums_GetForumDetails_Response {
	if x != nil {
		return x.ForumDetails
	}
	return nil
}

func (x *CForums_GetTopicDetails_Response) GetTopics() []*CForums_Topic {
	if x != nil {
		return x.Topics
	}
	return nil
}

type CForums_ReportPost_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Steamid       *uint64                `protobuf:"varint,1,opt,name=steamid" json:"steamid,omitempty"`
	ForumType     *string                `protobuf:"bytes,2,opt,name=forum_type,json=forumType" json:"forum_type,omitempty"`
	Gidfeature    *int64                 `protobuf:"varint,3,opt,name=gidfeature" json:"gidfeature,omitempty"`
	Gidforum      *uint64                `protobuf:"varint,4,opt,name=gidforum" json:"gidforum,omitempty"`
	Gidtopic      *uint64                `protobuf:"varint,5,opt,name=gidtopic" json:"gidtopic,omitempty"`
	Gidcomment    *uint64                `protobuf:"varint,6,opt,name=gidcomment" json:"gidcomment,omitempty"`
	Authorname    *string                `protobuf:"bytes,7,opt,name=authorname" json:"authorname,omitempty"`
	Reportername  *string                `protobuf:"bytes,8,opt,name=reportername" json:"reportername,omitempty"`
	Report        *string                `protobuf:"bytes,9,opt,name=report" json:"report,omitempty"`
	ReportType    *int32                 `protobuf:"varint,10,opt,name=report_type,json=reportType" json:"report_type,omitempty"`
	ReportReason  *int32                 `protobuf:"varint,11,opt,name=report_reason,json=reportReason" json:"report_reason,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CForums_ReportPost_Request) Reset() {
	*x = CForums_ReportPost_Request{}
	mi := &file_service_forums_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CForums_ReportPost_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CForums_ReportPost_Request) ProtoMessage() {}

func (x *CForums_ReportPost_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_forums_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CForums_ReportPost_Request.ProtoReflect.Descriptor instead.
func (*CForums_ReportPost_Request) Descriptor() ([]byte, []int) {
	return file_service_forums_proto_rawDescGZIP(), []int{7}
}

func (x *CForums_ReportPost_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CForums_ReportPost_Request) GetForumType() string {
	if x != nil && x.ForumType != nil {
		return *x.ForumType
	}
	return ""
}

func (x *CForums_ReportPost_Request) GetGidfeature() int64 {
	if x != nil && x.Gidfeature != nil {
		return *x.Gidfeature
	}
	return 0
}

func (x *CForums_ReportPost_Request) GetGidforum() uint64 {
	if x != nil && x.Gidforum != nil {
		return *x.Gidforum
	}
	return 0
}

func (x *CForums_ReportPost_Request) GetGidtopic() uint64 {
	if x != nil && x.Gidtopic != nil {
		return *x.Gidtopic
	}
	return 0
}

func (x *CForums_ReportPost_Request) GetGidcomment() uint64 {
	if x != nil && x.Gidcomment != nil {
		return *x.Gidcomment
	}
	return 0
}

func (x *CForums_ReportPost_Request) GetAuthorname() string {
	if x != nil && x.Authorname != nil {
		return *x.Authorname
	}
	return ""
}

func (x *CForums_ReportPost_Request) GetReportername() string {
	if x != nil && x.Reportername != nil {
		return *x.Reportername
	}
	return ""
}

func (x *CForums_ReportPost_Request) GetReport() string {
	if x != nil && x.Report != nil {
		return *x.Report
	}
	return ""
}

func (x *CForums_ReportPost_Request) GetReportType() int32 {
	if x != nil && x.ReportType != nil {
		return *x.ReportType
	}
	return 0
}

func (x *CForums_ReportPost_Request) GetReportReason() int32 {
	if x != nil && x.ReportReason != nil {
		return *x.ReportReason
	}
	return 0
}

type CForums_ReportPost_Response struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Gidreportforum  *uint64                `protobuf:"varint,1,opt,name=gidreportforum" json:"gidreportforum,omitempty"`
	Gidreportthread *uint64                `protobuf:"varint,2,opt,name=gidreportthread" json:"gidreportthread,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CForums_ReportPost_Response) Reset() {
	*x = CForums_ReportPost_Response{}
	mi := &file_service_forums_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CForums_ReportPost_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CForums_ReportPost_Response) ProtoMessage() {}

func (x *CForums_ReportPost_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_forums_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CForums_ReportPost_Response.ProtoReflect.Descriptor instead.
func (*CForums_ReportPost_Response) Descriptor() ([]byte, []int) {
	return file_service_forums_proto_rawDescGZIP(), []int{8}
}

func (x *CForums_ReportPost_Response) GetGidreportforum() uint64 {
	if x != nil && x.Gidreportforum != nil {
		return *x.Gidreportforum
	}
	return 0
}

func (x *CForums_ReportPost_Response) GetGidreportthread() uint64 {
	if x != nil && x.Gidreportthread != nil {
		return *x.Gidreportthread
	}
	return 0
}

type CForums_ResolveReportedPost_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Steamid       *uint64                `protobuf:"varint,1,opt,name=steamid" json:"steamid,omitempty"`
	Gidforum      *uint64                `protobuf:"varint,3,opt,name=gidforum" json:"gidforum,omitempty"`
	Gidtopic      *uint64                `protobuf:"varint,4,opt,name=gidtopic" json:"gidtopic,omitempty"`
	Gidpost       *uint64                `protobuf:"varint,5,opt,name=gidpost" json:"gidpost,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CForums_ResolveReportedPost_Request) Reset() {
	*x = CForums_ResolveReportedPost_Request{}
	mi := &file_service_forums_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CForums_ResolveReportedPost_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CForums_ResolveReportedPost_Request) ProtoMessage() {}

func (x *CForums_ResolveReportedPost_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_forums_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CForums_ResolveReportedPost_Request.ProtoReflect.Descriptor instead.
func (*CForums_ResolveReportedPost_Request) Descriptor() ([]byte, []int) {
	return file_service_forums_proto_rawDescGZIP(), []int{9}
}

func (x *CForums_ResolveReportedPost_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CForums_ResolveReportedPost_Request) GetGidforum() uint64 {
	if x != nil && x.Gidforum != nil {
		return *x.Gidforum
	}
	return 0
}

func (x *CForums_ResolveReportedPost_Request) GetGidtopic() uint64 {
	if x != nil && x.Gidtopic != nil {
		return *x.Gidtopic
	}
	return 0
}

func (x *CForums_ResolveReportedPost_Request) GetGidpost() uint64 {
	if x != nil && x.Gidpost != nil {
		return *x.Gidpost
	}
	return 0
}

type CForums_ResolveReportedPost_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CForums_ResolveReportedPost_Response) Reset() {
	*x = CForums_ResolveReportedPost_Response{}
	mi := &file_service_forums_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CForums_ResolveReportedPost_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CForums_ResolveReportedPost_Response) ProtoMessage() {}

func (x *CForums_ResolveReportedPost_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_forums_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CForums_ResolveReportedPost_Response.ProtoReflect.Descriptor instead.
func (*CForums_ResolveReportedPost_Response) Descriptor() ([]byte, []int) {
	return file_service_forums_proto_rawDescGZIP(), []int{10}
}

type CForums_ResolveReportedPosts_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Steamid       *uint64                `protobuf:"varint,1,opt,name=steamid" json:"steamid,omitempty"`
	Forumtype     *string                `protobuf:"bytes,2,opt,name=forumtype" json:"forumtype,omitempty"`
	Gidfeature    *uint64                `protobuf:"varint,3,opt,name=gidfeature" json:"gidfeature,omitempty"`
	Gidtopic      *uint64                `protobuf:"varint,4,opt,name=gidtopic" json:"gidtopic,omitempty"`
	AuditNote     *string                `protobuf:"bytes,5,opt,name=audit_note,json=auditNote" json:"audit_note,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CForums_ResolveReportedPosts_Request) Reset() {
	*x = CForums_ResolveReportedPosts_Request{}
	mi := &file_service_forums_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CForums_ResolveReportedPosts_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CForums_ResolveReportedPosts_Request) ProtoMessage() {}

func (x *CForums_ResolveReportedPosts_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_forums_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CForums_ResolveReportedPosts_Request.ProtoReflect.Descriptor instead.
func (*CForums_ResolveReportedPosts_Request) Descriptor() ([]byte, []int) {
	return file_service_forums_proto_rawDescGZIP(), []int{11}
}

func (x *CForums_ResolveReportedPosts_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CForums_ResolveReportedPosts_Request) GetForumtype() string {
	if x != nil && x.Forumtype != nil {
		return *x.Forumtype
	}
	return ""
}

func (x *CForums_ResolveReportedPosts_Request) GetGidfeature() uint64 {
	if x != nil && x.Gidfeature != nil {
		return *x.Gidfeature
	}
	return 0
}

func (x *CForums_ResolveReportedPosts_Request) GetGidtopic() uint64 {
	if x != nil && x.Gidtopic != nil {
		return *x.Gidtopic
	}
	return 0
}

func (x *CForums_ResolveReportedPosts_Request) GetAuditNote() string {
	if x != nil && x.AuditNote != nil {
		return *x.AuditNote
	}
	return ""
}

type CForums_ResolveReportedPosts_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ResolvedCount *uint32                `protobuf:"varint,1,opt,name=resolved_count,json=resolvedCount" json:"resolved_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CForums_ResolveReportedPosts_Response) Reset() {
	*x = CForums_ResolveReportedPosts_Response{}
	mi := &file_service_forums_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CForums_ResolveReportedPosts_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CForums_ResolveReportedPosts_Response) ProtoMessage() {}

func (x *CForums_ResolveReportedPosts_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_forums_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CForums_ResolveReportedPosts_Response.ProtoReflect.Descriptor instead.
func (*CForums_ResolveReportedPosts_Response) Descriptor() ([]byte, []int) {
	return file_service_forums_proto_rawDescGZIP(), []int{12}
}

func (x *CForums_ResolveReportedPosts_Response) GetResolvedCount() uint32 {
	if x != nil && x.ResolvedCount != nil {
		return *x.ResolvedCount
	}
	return 0
}

type CForums_Topic struct {
	state                 protoimpl.MessageState    `protogen:"open.v1"`
	Gidforumtopic         *uint64                   `protobuf:"varint,1,opt,name=gidforumtopic" json:"gidforumtopic,omitempty"`
	OriginalpostAccountid *uint32                   `protobuf:"varint,2,opt,name=originalpost_accountid,json=originalpostAccountid" json:"originalpost_accountid,omitempty"`
	OriginalpostDate      *uint32                   `protobuf:"varint,3,opt,name=originalpost_date,json=originalpostDate" json:"originalpost_date,omitempty"`
	LastpostAccountid     *uint32                   `protobuf:"varint,4,opt,name=lastpost_accountid,json=lastpostAccountid" json:"lastpost_accountid,omitempty"`
	LastpostDate          *uint32                   `protobuf:"varint,5,opt,name=lastpost_date,json=lastpostDate" json:"lastpost_date,omitempty"`
	Replies               *uint32                   `protobuf:"varint,6,opt,name=replies" json:"replies,omitempty"`
	ExpiresDate           *uint32                   `protobuf:"varint,7,opt,name=expires_date,json=expiresDate" json:"expires_date,omitempty"`
	Deleted               *bool                     `protobuf:"varint,8,opt,name=deleted" json:"deleted,omitempty"`
	Sticky                *bool                     `protobuf:"varint,9,opt,name=sticky" json:"sticky,omitempty"`
	Locked                *bool                     `protobuf:"varint,10,opt,name=locked" json:"locked,omitempty"`
	Moved                 *bool                     `protobuf:"varint,11,opt,name=moved" json:"moved,omitempty"`
	Merged                *bool                     `protobuf:"varint,12,opt,name=merged" json:"merged,omitempty"`
	Expired               *bool                     `protobuf:"varint,13,opt,name=expired" json:"expired,omitempty"`
	HasAttachments        *bool                     `protobuf:"varint,14,opt,name=has_attachments,json=hasAttachments" json:"has_attachments,omitempty"`
	Title                 *string                   `protobuf:"bytes,15,opt,name=title" json:"title,omitempty"`
	Textpreview           *string                   `protobuf:"bytes,16,opt,name=textpreview" json:"textpreview,omitempty"`
	Ipaddress             *int32                    `protobuf:"varint,17,opt,name=ipaddress" json:"ipaddress,omitempty"`
	AnswerComment         *uint64                   `protobuf:"varint,18,opt,name=answer_comment,json=answerComment" json:"answer_comment,omitempty"`
	IpaddressString       *string                   `protobuf:"bytes,19,opt,name=ipaddress_string,json=ipaddressString" json:"ipaddress_string,omitempty"`
	BanCheckResult        *int32                    `protobuf:"varint,20,opt,name=ban_check_result,json=banCheckResult" json:"ban_check_result,omitempty"`
	Reactions             []*CForums_Topic_Reaction `protobuf:"bytes,21,rep,name=reactions" json:"reactions,omitempty"`
	FullText              *string                   `protobuf:"bytes,22,opt,name=full_text,json=fullText" json:"full_text,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *CForums_Topic) Reset() {
	*x = CForums_Topic{}
	mi := &file_service_forums_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CForums_Topic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CForums_Topic) ProtoMessage() {}

func (x *CForums_Topic) ProtoReflect() protoreflect.Message {
	mi := &file_service_forums_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CForums_Topic.ProtoReflect.Descriptor instead.
func (*CForums_Topic) Descriptor() ([]byte, []int) {
	return file_service_forums_proto_rawDescGZIP(), []int{13}
}

func (x *CForums_Topic) GetGidforumtopic() uint64 {
	if x != nil && x.Gidforumtopic != nil {
		return *x.Gidforumtopic
	}
	return 0
}

func (x *CForums_Topic) GetOriginalpostAccountid() uint32 {
	if x != nil && x.OriginalpostAccountid != nil {
		return *x.OriginalpostAccountid
	}
	return 0
}

func (x *CForums_Topic) GetOriginalpostDate() uint32 {
	if x != nil && x.OriginalpostDate != nil {
		return *x.OriginalpostDate
	}
	return 0
}

func (x *CForums_Topic) GetLastpostAccountid() uint32 {
	if x != nil && x.LastpostAccountid != nil {
		return *x.LastpostAccountid
	}
	return 0
}

func (x *CForums_Topic) GetLastpostDate() uint32 {
	if x != nil && x.LastpostDate != nil {
		return *x.LastpostDate
	}
	return 0
}

func (x *CForums_Topic) GetReplies() uint32 {
	if x != nil && x.Replies != nil {
		return *x.Replies
	}
	return 0
}

func (x *CForums_Topic) GetExpiresDate() uint32 {
	if x != nil && x.ExpiresDate != nil {
		return *x.ExpiresDate
	}
	return 0
}

func (x *CForums_Topic) GetDeleted() bool {
	if x != nil && x.Deleted != nil {
		return *x.Deleted
	}
	return false
}

func (x *CForums_Topic) GetSticky() bool {
	if x != nil && x.Sticky != nil {
		return *x.Sticky
	}
	return false
}

func (x *CForums_Topic) GetLocked() bool {
	if x != nil && x.Locked != nil {
		return *x.Locked
	}
	return false
}

func (x *CForums_Topic) GetMoved() bool {
	if x != nil && x.Moved != nil {
		return *x.Moved
	}
	return false
}

func (x *CForums_Topic) GetMerged() bool {
	if x != nil && x.Merged != nil {
		return *x.Merged
	}
	return false
}

func (x *CForums_Topic) GetExpired() bool {
	if x != nil && x.Expired != nil {
		return *x.Expired
	}
	return false
}

func (x *CForums_Topic) GetHasAttachments() bool {
	if x != nil && x.HasAttachments != nil {
		return *x.HasAttachments
	}
	return false
}

func (x *CForums_Topic) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *CForums_Topic) GetTextpreview() string {
	if x != nil && x.Textpreview != nil {
		return *x.Textpreview
	}
	return ""
}

func (x *CForums_Topic) GetIpaddress() int32 {
	if x != nil && x.Ipaddress != nil {
		return *x.Ipaddress
	}
	return 0
}

func (x *CForums_Topic) GetAnswerComment() uint64 {
	if x != nil && x.AnswerComment != nil {
		return *x.AnswerComment
	}
	return 0
}

func (x *CForums_Topic) GetIpaddressString() string {
	if x != nil && x.IpaddressString != nil {
		return *x.IpaddressString
	}
	return ""
}

func (x *CForums_Topic) GetBanCheckResult() int32 {
	if x != nil && x.BanCheckResult != nil {
		return *x.BanCheckResult
	}
	return 0
}

func (x *CForums_Topic) GetReactions() []*CForums_Topic_Reaction {
	if x != nil {
		return x.Reactions
	}
	return nil
}

func (x *CForums_Topic) GetFullText() string {
	if x != nil && x.FullText != nil {
		return *x.FullText
	}
	return ""
}

type CForums_Topic_Reaction struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Reactionid    *uint32                `protobuf:"varint,1,opt,name=reactionid" json:"reactionid,omitempty"`
	Count         *uint32                `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CForums_Topic_Reaction) Reset() {
	*x = CForums_Topic_Reaction{}
	mi := &file_service_forums_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CForums_Topic_Reaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CForums_Topic_Reaction) ProtoMessage() {}

func (x *CForums_Topic_Reaction) ProtoReflect() protoreflect.Message {
	mi := &file_service_forums_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CForums_Topic_Reaction.ProtoReflect.Descriptor instead.
func (*CForums_Topic_Reaction) Descriptor() ([]byte, []int) {
	return file_service_forums_proto_rawDescGZIP(), []int{14}
}

func (x *CForums_Topic_Reaction) GetReactionid() uint32 {
	if x != nil && x.Reactionid != nil {
		return *x.Reactionid
	}
	return 0
}

func (x *CForums_Topic_Reaction) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

type CForums_UndeleteDisputedComment_Request struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Steamid           *uint64                `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	CommentThreadType *int32                 `protobuf:"varint,2,opt,name=comment_thread_type,json=commentThreadType" json:"comment_thread_type,omitempty"`
	Gidfeature        *uint64                `protobuf:"varint,3,opt,name=gidfeature" json:"gidfeature,omitempty"`
	Gidfeature2       *uint64                `protobuf:"varint,4,opt,name=gidfeature2" json:"gidfeature2,omitempty"`
	Gidcomment        *uint64                `protobuf:"varint,5,opt,name=gidcomment" json:"gidcomment,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *CForums_UndeleteDisputedComment_Request) Reset() {
	*x = CForums_UndeleteDisputedComment_Request{}
	mi := &file_service_forums_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CForums_UndeleteDisputedComment_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CForums_UndeleteDisputedComment_Request) ProtoMessage() {}

func (x *CForums_UndeleteDisputedComment_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_forums_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CForums_UndeleteDisputedComment_Request.ProtoReflect.Descriptor instead.
func (*CForums_UndeleteDisputedComment_Request) Descriptor() ([]byte, []int) {
	return file_service_forums_proto_rawDescGZIP(), []int{15}
}

func (x *CForums_UndeleteDisputedComment_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CForums_UndeleteDisputedComment_Request) GetCommentThreadType() int32 {
	if x != nil && x.CommentThreadType != nil {
		return *x.CommentThreadType
	}
	return 0
}

func (x *CForums_UndeleteDisputedComment_Request) GetGidfeature() uint64 {
	if x != nil && x.Gidfeature != nil {
		return *x.Gidfeature
	}
	return 0
}

func (x *CForums_UndeleteDisputedComment_Request) GetGidfeature2() uint64 {
	if x != nil && x.Gidfeature2 != nil {
		return *x.Gidfeature2
	}
	return 0
}

func (x *CForums_UndeleteDisputedComment_Request) GetGidcomment() uint64 {
	if x != nil && x.Gidcomment != nil {
		return *x.Gidcomment
	}
	return 0
}

type CForums_UndeleteDisputedComment_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CForums_UndeleteDisputedComment_Response) Reset() {
	*x = CForums_UndeleteDisputedComment_Response{}
	mi := &file_service_forums_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CForums_UndeleteDisputedComment_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CForums_UndeleteDisputedComment_Response) ProtoMessage() {}

func (x *CForums_UndeleteDisputedComment_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_forums_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CForums_UndeleteDisputedComment_Response.ProtoReflect.Descriptor instead.
func (*CForums_UndeleteDisputedComment_Response) Descriptor() ([]byte, []int) {
	return file_service_forums_proto_rawDescGZIP(), []int{16}
}

type CForums_UndeleteDisputedTopic_Request struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Steamid           *uint64                `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	CommentThreadType *int32                 `protobuf:"varint,2,opt,name=comment_thread_type,json=commentThreadType" json:"comment_thread_type,omitempty"`
	Gidfeature        *uint64                `protobuf:"varint,3,opt,name=gidfeature" json:"gidfeature,omitempty"`
	Gidfeature2       *uint64                `protobuf:"varint,4,opt,name=gidfeature2" json:"gidfeature2,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *CForums_UndeleteDisputedTopic_Request) Reset() {
	*x = CForums_UndeleteDisputedTopic_Request{}
	mi := &file_service_forums_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CForums_UndeleteDisputedTopic_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CForums_UndeleteDisputedTopic_Request) ProtoMessage() {}

func (x *CForums_UndeleteDisputedTopic_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_forums_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CForums_UndeleteDisputedTopic_Request.ProtoReflect.Descriptor instead.
func (*CForums_UndeleteDisputedTopic_Request) Descriptor() ([]byte, []int) {
	return file_service_forums_proto_rawDescGZIP(), []int{17}
}

func (x *CForums_UndeleteDisputedTopic_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CForums_UndeleteDisputedTopic_Request) GetCommentThreadType() int32 {
	if x != nil && x.CommentThreadType != nil {
		return *x.CommentThreadType
	}
	return 0
}

func (x *CForums_UndeleteDisputedTopic_Request) GetGidfeature() uint64 {
	if x != nil && x.Gidfeature != nil {
		return *x.Gidfeature
	}
	return 0
}

func (x *CForums_UndeleteDisputedTopic_Request) GetGidfeature2() uint64 {
	if x != nil && x.Gidfeature2 != nil {
		return *x.Gidfeature2
	}
	return 0
}

type CForums_UndeleteDisputedTopic_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CForums_UndeleteDisputedTopic_Response) Reset() {
	*x = CForums_UndeleteDisputedTopic_Response{}
	mi := &file_service_forums_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CForums_UndeleteDisputedTopic_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CForums_UndeleteDisputedTopic_Response) ProtoMessage() {}

func (x *CForums_UndeleteDisputedTopic_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_forums_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CForums_UndeleteDisputedTopic_Response.ProtoReflect.Descriptor instead.
func (*CForums_UndeleteDisputedTopic_Response) Descriptor() ([]byte, []int) {
	return file_service_forums_proto_rawDescGZIP(), []int{18}
}

type CForums_UserBan struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	AccountidBanActor *uint32                `protobuf:"varint,1,opt,name=accountid_ban_actor,json=accountidBanActor" json:"accountid_ban_actor,omitempty"`
	TimeBanStart      *uint32                `protobuf:"varint,2,opt,name=time_ban_start,json=timeBanStart" json:"time_ban_start,omitempty"`
	TimeBanEnd        *uint32                `protobuf:"varint,3,opt,name=time_ban_end,json=timeBanEnd" json:"time_ban_end,omitempty"`
	BanReason         *string                `protobuf:"bytes,4,opt,name=ban_reason,json=banReason" json:"ban_reason,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *CForums_UserBan) Reset() {
	*x = CForums_UserBan{}
	mi := &file_service_forums_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CForums_UserBan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CForums_UserBan) ProtoMessage() {}

func (x *CForums_UserBan) ProtoReflect() protoreflect.Message {
	mi := &file_service_forums_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CForums_UserBan.ProtoReflect.Descriptor instead.
func (*CForums_UserBan) Descriptor() ([]byte, []int) {
	return file_service_forums_proto_rawDescGZIP(), []int{19}
}

func (x *CForums_UserBan) GetAccountidBanActor() uint32 {
	if x != nil && x.AccountidBanActor != nil {
		return *x.AccountidBanActor
	}
	return 0
}

func (x *CForums_UserBan) GetTimeBanStart() uint32 {
	if x != nil && x.TimeBanStart != nil {
		return *x.TimeBanStart
	}
	return 0
}

func (x *CForums_UserBan) GetTimeBanEnd() uint32 {
	if x != nil && x.TimeBanEnd != nil {
		return *x.TimeBanEnd
	}
	return 0
}

func (x *CForums_UserBan) GetBanReason() string {
	if x != nil && x.BanReason != nil {
		return *x.BanReason
	}
	return ""
}

type CForums_UserPermissions struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	CanView            *bool                  `protobuf:"varint,1,opt,name=can_view,json=canView" json:"can_view,omitempty"`
	CanPost            *bool                  `protobuf:"varint,2,opt,name=can_post,json=canPost" json:"can_post,omitempty"`
	CanReply           *bool                  `protobuf:"varint,3,opt,name=can_reply,json=canReply" json:"can_reply,omitempty"`
	CanModerate        *bool                  `protobuf:"varint,4,opt,name=can_moderate,json=canModerate" json:"can_moderate,omitempty"`
	CanEditOthersPosts *bool                  `protobuf:"varint,5,opt,name=can_edit_others_posts,json=canEditOthersPosts" json:"can_edit_others_posts,omitempty"`
	CanPurgeTopics     *bool                  `protobuf:"varint,6,opt,name=can_purge_topics,json=canPurgeTopics" json:"can_purge_topics,omitempty"`
	IsBanned           *bool                  `protobuf:"varint,7,opt,name=is_banned,json=isBanned" json:"is_banned,omitempty"`
	CanAttachImages    *bool                  `protobuf:"varint,8,opt,name=can_attach_images,json=canAttachImages" json:"can_attach_images,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *CForums_UserPermissions) Reset() {
	*x = CForums_UserPermissions{}
	mi := &file_service_forums_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CForums_UserPermissions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CForums_UserPermissions) ProtoMessage() {}

func (x *CForums_UserPermissions) ProtoReflect() protoreflect.Message {
	mi := &file_service_forums_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CForums_UserPermissions.ProtoReflect.Descriptor instead.
func (*CForums_UserPermissions) Descriptor() ([]byte, []int) {
	return file_service_forums_proto_rawDescGZIP(), []int{20}
}

func (x *CForums_UserPermissions) GetCanView() bool {
	if x != nil && x.CanView != nil {
		return *x.CanView
	}
	return false
}

func (x *CForums_UserPermissions) GetCanPost() bool {
	if x != nil && x.CanPost != nil {
		return *x.CanPost
	}
	return false
}

func (x *CForums_UserPermissions) GetCanReply() bool {
	if x != nil && x.CanReply != nil {
		return *x.CanReply
	}
	return false
}

func (x *CForums_UserPermissions) GetCanModerate() bool {
	if x != nil && x.CanModerate != nil {
		return *x.CanModerate
	}
	return false
}

func (x *CForums_UserPermissions) GetCanEditOthersPosts() bool {
	if x != nil && x.CanEditOthersPosts != nil {
		return *x.CanEditOthersPosts
	}
	return false
}

func (x *CForums_UserPermissions) GetCanPurgeTopics() bool {
	if x != nil && x.CanPurgeTopics != nil {
		return *x.CanPurgeTopics
	}
	return false
}

func (x *CForums_UserPermissions) GetIsBanned() bool {
	if x != nil && x.IsBanned != nil {
		return *x.IsBanned
	}
	return false
}

func (x *CForums_UserPermissions) GetCanAttachImages() bool {
	if x != nil && x.CanAttachImages != nil {
		return *x.CanAttachImages
	}
	return false
}

var File_service_forums_proto protoreflect.FileDescriptor

const file_service_forums_proto_rawDesc = "" +
	"\n" +
	"\x14service_forums.proto\x1a\x11common_base.proto\"\x80\x02\n" +
	"&CForums_DeleteModeratedComment_Request\x12\x18\n" +
	"\asteamid\x18\x01 \x01(\x06R\asteamid\x128\n" +
	"\x13comment_thread_type\x18\x02 \x01(\x05B\b\x82\xb5\x18\x04enumR\x11commentThreadType\x12\x1e\n" +
	"\n" +
	"gidfeature\x18\x03 \x01(\x04R\n" +
	"gidfeature\x12 \n" +
	"\vgidfeature2\x18\x04 \x01(\x04R\vgidfeature2\x12\x1e\n" +
	"\n" +
	"gidcomment\x18\x05 \x01(\x04R\n" +
	"gidcomment\x12 \n" +
	"\x06reason\x18\x06 \x01(\x05B\b\x82\xb5\x18\x04enumR\x06reason\")\n" +
	"'CForums_DeleteModeratedComment_Response\"\xde\x01\n" +
	"$CForums_DeleteModeratedTopic_Request\x12\x18\n" +
	"\asteamid\x18\x01 \x01(\x06R\asteamid\x128\n" +
	"\x13comment_thread_type\x18\x02 \x01(\x05B\b\x82\xb5\x18\x04enumR\x11commentThreadType\x12\x1e\n" +
	"\n" +
	"gidfeature\x18\x03 \x01(\x04R\n" +
	"gidfeature\x12 \n" +
	"\vgidfeature2\x18\x04 \x01(\x04R\vgidfeature2\x12 \n" +
	"\x06reason\x18\x05 \x01(\x05B\b\x82\xb5\x18\x04enumR\x06reason\"'\n" +
	"%CForums_DeleteModeratedTopic_Response\"\xc1\x04\n" +
	" CForums_GetForumDetails_Response\x12\x1a\n" +
	"\bgidforum\x18\x01 \x01(\x04R\bgidforum\x12 \n" +
	"\vclanidowner\x18\x02 \x01(\rR\vclanidowner\x12\x1e\n" +
	"\n" +
	"gidfeature\x18\x03 \x01(\x03R\n" +
	"gidfeature\x12\x1c\n" +
	"\tforumtype\x18\x04 \x01(\tR\tforumtype\x12\x14\n" +
	"\x05appid\x18\x05 \x01(\rR\x05appid\x12\x12\n" +
	"\x04name\x18\x06 \x01(\tR\x04name\x12/\n" +
	"\x13permission_moderate\x18\a \x01(\rR\x12permissionModerate\x12'\n" +
	"\x0fpermission_post\x18\b \x01(\rR\x0epermissionPost\x12)\n" +
	"\x10permission_reply\x18\t \x01(\rR\x0fpermissionReply\x12'\n" +
	"\x0fpermission_view\x18\n" +
	" \x01(\rR\x0epermissionView\x12:\n" +
	"\vpermissions\x18\v \x01(\v2\x18.CForums_UserPermissionsR\vpermissions\x12+\n" +
	"\buser_ban\x18\f \x01(\v2\x10.CForums_UserBanR\auserBan\x12&\n" +
	"\x0fis_public_forum\x18\r \x01(\bR\risPublicForum\x128\n" +
	"\x18permission_attach_images\x18\x0e \x01(\rR\x16permissionAttachImages\"\x88\x02\n" +
	"\x1fCForums_GetTopicDetails_Request\x12\x18\n" +
	"\asteamid\x18\x01 \x01(\x04R\asteamid\x12\x1a\n" +
	"\bgidforum\x18\x02 \x01(\x04R\bgidforum\x12\x1c\n" +
	"\tforumtype\x18\x03 \x01(\tR\tforumtype\x12\x1e\n" +
	"\n" +
	"gidfeature\x18\x04 \x01(\x04R\n" +
	"gidfeature\x12\x1c\n" +
	"\tgidtopics\x18\x05 \x03(\x04R\tgidtopics\x12'\n" +
	"\x0finclude_preview\x18\x06 \x01(\bR\x0eincludePreview\x12*\n" +
	"\x11include_full_text\x18\a \x01(\bR\x0fincludeFullText\"\x92\x01\n" +
	" CForums_GetTopicDetails_Response\x12F\n" +
	"\rforum_details\x18\x01 \x01(\v2!.CForums_GetForumDetails_ResponseR\fforumDetails\x12&\n" +
	"\x06topics\x18\x02 \x03(\v2\x0e.CForums_TopicR\x06topics\"\x83\x03\n" +
	"\x1aCForums_ReportPost_Request\x12\x18\n" +
	"\asteamid\x18\x01 \x01(\x04R\asteamid\x12\x1d\n" +
	"\n" +
	"forum_type\x18\x02 \x01(\tR\tforumType\x12\x1e\n" +
	"\n" +
	"gidfeature\x18\x03 \x01(\x03R\n" +
	"gidfeature\x12\x1a\n" +
	"\bgidforum\x18\x04 \x01(\x04R\bgidforum\x12\x1a\n" +
	"\bgidtopic\x18\x05 \x01(\x04R\bgidtopic\x12\x1e\n" +
	"\n" +
	"gidcomment\x18\x06 \x01(\x04R\n" +
	"gidcomment\x12\x1e\n" +
	"\n" +
	"authorname\x18\a \x01(\tR\n" +
	"authorname\x12\"\n" +
	"\freportername\x18\b \x01(\tR\freportername\x12\x16\n" +
	"\x06report\x18\t \x01(\tR\x06report\x12)\n" +
	"\vreport_type\x18\n" +
	" \x01(\x05B\b\x82\xb5\x18\x04enumR\n" +
	"reportType\x12-\n" +
	"\rreport_reason\x18\v \x01(\x05B\b\x82\xb5\x18\x04enumR\freportReason\"o\n" +
	"\x1bCForums_ReportPost_Response\x12&\n" +
	"\x0egidreportforum\x18\x01 \x01(\x04R\x0egidreportforum\x12(\n" +
	"\x0fgidreportthread\x18\x02 \x01(\x04R\x0fgidreportthread\"\x91\x01\n" +
	"#CForums_ResolveReportedPost_Request\x12\x18\n" +
	"\asteamid\x18\x01 \x01(\x04R\asteamid\x12\x1a\n" +
	"\bgidforum\x18\x03 \x01(\x04R\bgidforum\x12\x1a\n" +
	"\bgidtopic\x18\x04 \x01(\x04R\bgidtopic\x12\x18\n" +
	"\agidpost\x18\x05 \x01(\x04R\agidpost\"&\n" +
	"$CForums_ResolveReportedPost_Response\"\xb9\x01\n" +
	"$CForums_ResolveReportedPosts_Request\x12\x18\n" +
	"\asteamid\x18\x01 \x01(\x04R\asteamid\x12\x1c\n" +
	"\tforumtype\x18\x02 \x01(\tR\tforumtype\x12\x1e\n" +
	"\n" +
	"gidfeature\x18\x03 \x01(\x04R\n" +
	"gidfeature\x12\x1a\n" +
	"\bgidtopic\x18\x04 \x01(\x04R\bgidtopic\x12\x1d\n" +
	"\n" +
	"audit_note\x18\x05 \x01(\tR\tauditNote\"N\n" +
	"%CForums_ResolveReportedPosts_Response\x12%\n" +
	"\x0eresolved_count\x18\x01 \x01(\rR\rresolvedCount\"\x95\x06\n" +
	"\rCForums_Topic\x12$\n" +
	"\rgidforumtopic\x18\x01 \x01(\x04R\rgidforumtopic\x125\n" +
	"\x16originalpost_accountid\x18\x02 \x01(\rR\x15originalpostAccountid\x12+\n" +
	"\x11originalpost_date\x18\x03 \x01(\rR\x10originalpostDate\x12-\n" +
	"\x12lastpost_accountid\x18\x04 \x01(\rR\x11lastpostAccountid\x12#\n" +
	"\rlastpost_date\x18\x05 \x01(\rR\flastpostDate\x12\x18\n" +
	"\areplies\x18\x06 \x01(\rR\areplies\x12!\n" +
	"\fexpires_date\x18\a \x01(\rR\vexpiresDate\x12\x18\n" +
	"\adeleted\x18\b \x01(\bR\adeleted\x12\x16\n" +
	"\x06sticky\x18\t \x01(\bR\x06sticky\x12\x16\n" +
	"\x06locked\x18\n" +
	" \x01(\bR\x06locked\x12\x14\n" +
	"\x05moved\x18\v \x01(\bR\x05moved\x12\x16\n" +
	"\x06merged\x18\f \x01(\bR\x06merged\x12\x18\n" +
	"\aexpired\x18\r \x01(\bR\aexpired\x12'\n" +
	"\x0fhas_attachments\x18\x0e \x01(\bR\x0ehasAttachments\x12\x14\n" +
	"\x05title\x18\x0f \x01(\tR\x05title\x12 \n" +
	"\vtextpreview\x18\x10 \x01(\tR\vtextpreview\x12\x1c\n" +
	"\tipaddress\x18\x11 \x01(\x05R\tipaddress\x12%\n" +
	"\x0eanswer_comment\x18\x12 \x01(\x04R\ranswerComment\x12)\n" +
	"\x10ipaddress_string\x18\x13 \x01(\tR\x0fipaddressString\x122\n" +
	"\x10ban_check_result\x18\x14 \x01(\x05B\b\x82\xb5\x18\x04enumR\x0ebanCheckResult\x125\n" +
	"\treactions\x18\x15 \x03(\v2\x17.CForums_Topic_ReactionR\treactions\x12\x1b\n" +
	"\tfull_text\x18\x16 \x01(\tR\bfullText\"N\n" +
	"\x16CForums_Topic_Reaction\x12\x1e\n" +
	"\n" +
	"reactionid\x18\x01 \x01(\rR\n" +
	"reactionid\x12\x14\n" +
	"\x05count\x18\x02 \x01(\rR\x05count\"\xdf\x01\n" +
	"'CForums_UndeleteDisputedComment_Request\x12\x18\n" +
	"\asteamid\x18\x01 \x01(\x06R\asteamid\x128\n" +
	"\x13comment_thread_type\x18\x02 \x01(\x05B\b\x82\xb5\x18\x04enumR\x11commentThreadType\x12\x1e\n" +
	"\n" +
	"gidfeature\x18\x03 \x01(\x04R\n" +
	"gidfeature\x12 \n" +
	"\vgidfeature2\x18\x04 \x01(\x04R\vgidfeature2\x12\x1e\n" +
	"\n" +
	"gidcomment\x18\x05 \x01(\x04R\n" +
	"gidcomment\"*\n" +
	"(CForums_UndeleteDisputedComment_Response\"\xbd\x01\n" +
	"%CForums_UndeleteDisputedTopic_Request\x12\x18\n" +
	"\asteamid\x18\x01 \x01(\x06R\asteamid\x128\n" +
	"\x13comment_thread_type\x18\x02 \x01(\x05B\b\x82\xb5\x18\x04enumR\x11commentThreadType\x12\x1e\n" +
	"\n" +
	"gidfeature\x18\x03 \x01(\x04R\n" +
	"gidfeature\x12 \n" +
	"\vgidfeature2\x18\x04 \x01(\x04R\vgidfeature2\"(\n" +
	"&CForums_UndeleteDisputedTopic_Response\"\xa8\x01\n" +
	"\x0fCForums_UserBan\x12.\n" +
	"\x13accountid_ban_actor\x18\x01 \x01(\rR\x11accountidBanActor\x12$\n" +
	"\x0etime_ban_start\x18\x02 \x01(\rR\ftimeBanStart\x12 \n" +
	"\ftime_ban_end\x18\x03 \x01(\rR\n" +
	"timeBanEnd\x12\x1d\n" +
	"\n" +
	"ban_reason\x18\x04 \x01(\tR\tbanReason\"\xb5\x02\n" +
	"\x17CForums_UserPermissions\x12\x19\n" +
	"\bcan_view\x18\x01 \x01(\bR\acanView\x12\x19\n" +
	"\bcan_post\x18\x02 \x01(\bR\acanPost\x12\x1b\n" +
	"\tcan_reply\x18\x03 \x01(\bR\bcanReply\x12!\n" +
	"\fcan_moderate\x18\x04 \x01(\bR\vcanModerate\x121\n" +
	"\x15can_edit_others_posts\x18\x05 \x01(\bR\x12canEditOthersPosts\x12(\n" +
	"\x10can_purge_topics\x18\x06 \x01(\bR\x0ecanPurgeTopics\x12\x1b\n" +
	"\tis_banned\x18\a \x01(\bR\bisBanned\x12*\n" +
	"\x11can_attach_images\x18\b \x01(\bR\x0fcanAttachImages2\xa2\x06\n" +
	"\x06Forums\x12k\n" +
	"\x16DeleteModeratedComment\x12'.CForums_DeleteModeratedComment_Request\x1a(.CForums_DeleteModeratedComment_Response\x12e\n" +
	"\x14DeleteModeratedTopic\x12%.CForums_DeleteModeratedTopic_Request\x1a&.CForums_DeleteModeratedTopic_Response\x12V\n" +
	"\x0fGetTopicDetails\x12 .CForums_GetTopicDetails_Request\x1a!.CForums_GetTopicDetails_Response\x12G\n" +
	"\n" +
	"ReportPost\x12\x1b.CForums_ReportPost_Request\x1a\x1c.CForums_ReportPost_Response\x12b\n" +
	"\x13ResolveReportedPost\x12$.CForums_ResolveReportedPost_Request\x1a%.CForums_ResolveReportedPost_Response\x12e\n" +
	"\x14ResolveReportedPosts\x12%.CForums_ResolveReportedPosts_Request\x1a&.CForums_ResolveReportedPosts_Response\x12n\n" +
	"\x17UndeleteDisputedComment\x12(.CForums_UndeleteDisputedComment_Request\x1a).CForums_UndeleteDisputedComment_Response\x12h\n" +
	"\x15UndeleteDisputedTopic\x12&.CForums_UndeleteDisputedTopic_Request\x1a'.CForums_UndeleteDisputedTopic_Response"

var (
	file_service_forums_proto_rawDescOnce sync.Once
	file_service_forums_proto_rawDescData []byte
)

func file_service_forums_proto_rawDescGZIP() []byte {
	file_service_forums_proto_rawDescOnce.Do(func() {
		file_service_forums_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_service_forums_proto_rawDesc), len(file_service_forums_proto_rawDesc)))
	})
	return file_service_forums_proto_rawDescData
}

var file_service_forums_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_service_forums_proto_goTypes = []any{
	(*CForums_DeleteModeratedComment_Request)(nil),   // 0: CForums_DeleteModeratedComment_Request
	(*CForums_DeleteModeratedComment_Response)(nil),  // 1: CForums_DeleteModeratedComment_Response
	(*CForums_DeleteModeratedTopic_Request)(nil),     // 2: CForums_DeleteModeratedTopic_Request
	(*CForums_DeleteModeratedTopic_Response)(nil),    // 3: CForums_DeleteModeratedTopic_Response
	(*CForums_GetForumDetails_Response)(nil),         // 4: CForums_GetForumDetails_Response
	(*CForums_GetTopicDetails_Request)(nil),          // 5: CForums_GetTopicDetails_Request
	(*CForums_GetTopicDetails_Response)(nil),         // 6: CForums_GetTopicDetails_Response
	(*CForums_ReportPost_Request)(nil),               // 7: CForums_ReportPost_Request
	(*CForums_ReportPost_Response)(nil),              // 8: CForums_ReportPost_Response
	(*CForums_ResolveReportedPost_Request)(nil),      // 9: CForums_ResolveReportedPost_Request
	(*CForums_ResolveReportedPost_Response)(nil),     // 10: CForums_ResolveReportedPost_Response
	(*CForums_ResolveReportedPosts_Request)(nil),     // 11: CForums_ResolveReportedPosts_Request
	(*CForums_ResolveReportedPosts_Response)(nil),    // 12: CForums_ResolveReportedPosts_Response
	(*CForums_Topic)(nil),                            // 13: CForums_Topic
	(*CForums_Topic_Reaction)(nil),                   // 14: CForums_Topic_Reaction
	(*CForums_UndeleteDisputedComment_Request)(nil),  // 15: CForums_UndeleteDisputedComment_Request
	(*CForums_UndeleteDisputedComment_Response)(nil), // 16: CForums_UndeleteDisputedComment_Response
	(*CForums_UndeleteDisputedTopic_Request)(nil),    // 17: CForums_UndeleteDisputedTopic_Request
	(*CForums_UndeleteDisputedTopic_Response)(nil),   // 18: CForums_UndeleteDisputedTopic_Response
	(*CForums_UserBan)(nil),                          // 19: CForums_UserBan
	(*CForums_UserPermissions)(nil),                  // 20: CForums_UserPermissions
}
var file_service_forums_proto_depIdxs = []int32{
	20, // 0: CForums_GetForumDetails_Response.permissions:type_name -> CForums_UserPermissions
	19, // 1: CForums_GetForumDetails_Response.user_ban:type_name -> CForums_UserBan
	4,  // 2: CForums_GetTopicDetails_Response.forum_details:type_name -> CForums_GetForumDetails_Response
	13, // 3: CForums_GetTopicDetails_Response.topics:type_name -> CForums_Topic
	14, // 4: CForums_Topic.reactions:type_name -> CForums_Topic_Reaction
	0,  // 5: Forums.DeleteModeratedComment:input_type -> CForums_DeleteModeratedComment_Request
	2,  // 6: Forums.DeleteModeratedTopic:input_type -> CForums_DeleteModeratedTopic_Request
	5,  // 7: Forums.GetTopicDetails:input_type -> CForums_GetTopicDetails_Request
	7,  // 8: Forums.ReportPost:input_type -> CForums_ReportPost_Request
	9,  // 9: Forums.ResolveReportedPost:input_type -> CForums_ResolveReportedPost_Request
	11, // 10: Forums.ResolveReportedPosts:input_type -> CForums_ResolveReportedPosts_Request
	15, // 11: Forums.UndeleteDisputedComment:input_type -> CForums_UndeleteDisputedComment_Request
	17, // 12: Forums.UndeleteDisputedTopic:input_type -> CForums_UndeleteDisputedTopic_Request
	1,  // 13: Forums.DeleteModeratedComment:output_type -> CForums_DeleteModeratedComment_Response
	3,  // 14: Forums.DeleteModeratedTopic:output_type -> CForums_DeleteModeratedTopic_Response
	6,  // 15: Forums.GetTopicDetails:output_type -> CForums_GetTopicDetails_Response
	8,  // 16: Forums.ReportPost:output_type -> CForums_ReportPost_Response
	10, // 17: Forums.ResolveReportedPost:output_type -> CForums_ResolveReportedPost_Response
	12, // 18: Forums.ResolveReportedPosts:output_type -> CForums_ResolveReportedPosts_Response
	16, // 19: Forums.UndeleteDisputedComment:output_type -> CForums_UndeleteDisputedComment_Response
	18, // 20: Forums.UndeleteDisputedTopic:output_type -> CForums_UndeleteDisputedTopic_Response
	13, // [13:21] is the sub-list for method output_type
	5,  // [5:13] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_service_forums_proto_init() }
func file_service_forums_proto_init() {
	if File_service_forums_proto != nil {
		return
	}
	file_common_base_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_service_forums_proto_rawDesc), len(file_service_forums_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_forums_proto_goTypes,
		DependencyIndexes: file_service_forums_proto_depIdxs,
		MessageInfos:      file_service_forums_proto_msgTypes,
	}.Build()
	File_service_forums_proto = out.File
	file_service_forums_proto_goTypes = nil
	file_service_forums_proto_depIdxs = nil
}
