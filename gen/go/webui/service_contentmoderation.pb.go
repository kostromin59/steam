// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.32.0
// source: service_contentmoderation.proto

package webui

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AdditionalSubjectData struct {
	state         protoimpl.MessageState             `protogen:"open.v1"`
	Data          []*AdditionalSubjectData_DataEntry `protobuf:"bytes,1,rep,name=data" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AdditionalSubjectData) Reset() {
	*x = AdditionalSubjectData{}
	mi := &file_service_contentmoderation_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdditionalSubjectData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdditionalSubjectData) ProtoMessage() {}

func (x *AdditionalSubjectData) ProtoReflect() protoreflect.Message {
	mi := &file_service_contentmoderation_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdditionalSubjectData.ProtoReflect.Descriptor instead.
func (*AdditionalSubjectData) Descriptor() ([]byte, []int) {
	return file_service_contentmoderation_proto_rawDescGZIP(), []int{0}
}

func (x *AdditionalSubjectData) GetData() []*AdditionalSubjectData_DataEntry {
	if x != nil {
		return x.Data
	}
	return nil
}

type AdditionalSubjectData_DataEntry struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           *string                `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value         *string                `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AdditionalSubjectData_DataEntry) Reset() {
	*x = AdditionalSubjectData_DataEntry{}
	mi := &file_service_contentmoderation_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdditionalSubjectData_DataEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdditionalSubjectData_DataEntry) ProtoMessage() {}

func (x *AdditionalSubjectData_DataEntry) ProtoReflect() protoreflect.Message {
	mi := &file_service_contentmoderation_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdditionalSubjectData_DataEntry.ProtoReflect.Descriptor instead.
func (*AdditionalSubjectData_DataEntry) Descriptor() ([]byte, []int) {
	return file_service_contentmoderation_proto_rawDescGZIP(), []int{1}
}

func (x *AdditionalSubjectData_DataEntry) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *AdditionalSubjectData_DataEntry) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type CContentModeration_CancelContentReport_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ReportId      *uint64                `protobuf:"varint,1,opt,name=report_id,json=reportId" json:"report_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CContentModeration_CancelContentReport_Request) Reset() {
	*x = CContentModeration_CancelContentReport_Request{}
	mi := &file_service_contentmoderation_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CContentModeration_CancelContentReport_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CContentModeration_CancelContentReport_Request) ProtoMessage() {}

func (x *CContentModeration_CancelContentReport_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_contentmoderation_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CContentModeration_CancelContentReport_Request.ProtoReflect.Descriptor instead.
func (*CContentModeration_CancelContentReport_Request) Descriptor() ([]byte, []int) {
	return file_service_contentmoderation_proto_rawDescGZIP(), []int{2}
}

func (x *CContentModeration_CancelContentReport_Request) GetReportId() uint64 {
	if x != nil && x.ReportId != nil {
		return *x.ReportId
	}
	return 0
}

type CContentModeration_CancelContentReport_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CContentModeration_CancelContentReport_Response) Reset() {
	*x = CContentModeration_CancelContentReport_Response{}
	mi := &file_service_contentmoderation_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CContentModeration_CancelContentReport_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CContentModeration_CancelContentReport_Response) ProtoMessage() {}

func (x *CContentModeration_CancelContentReport_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_contentmoderation_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CContentModeration_CancelContentReport_Response.ProtoReflect.Descriptor instead.
func (*CContentModeration_CancelContentReport_Response) Descriptor() ([]byte, []int) {
	return file_service_contentmoderation_proto_rawDescGZIP(), []int{3}
}

type CContentModeration_ClaimBatchForModeration_Request struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	AcceptedSubjectTypes []int32                `protobuf:"varint,1,rep,name=accepted_subject_types,json=acceptedSubjectTypes" json:"accepted_subject_types,omitempty"`
	SupportCompany       *uint32                `protobuf:"varint,2,opt,name=support_company,json=supportCompany" json:"support_company,omitempty"`
	AcceptedLanguages    []int32                `protobuf:"varint,3,rep,name=accepted_languages,json=acceptedLanguages" json:"accepted_languages,omitempty"`
	ModeratorLevel       *int32                 `protobuf:"varint,4,opt,name=moderator_level,json=moderatorLevel" json:"moderator_level,omitempty"`
	Disputed             *bool                  `protobuf:"varint,5,opt,name=disputed" json:"disputed,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *CContentModeration_ClaimBatchForModeration_Request) Reset() {
	*x = CContentModeration_ClaimBatchForModeration_Request{}
	mi := &file_service_contentmoderation_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CContentModeration_ClaimBatchForModeration_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CContentModeration_ClaimBatchForModeration_Request) ProtoMessage() {}

func (x *CContentModeration_ClaimBatchForModeration_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_contentmoderation_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CContentModeration_ClaimBatchForModeration_Request.ProtoReflect.Descriptor instead.
func (*CContentModeration_ClaimBatchForModeration_Request) Descriptor() ([]byte, []int) {
	return file_service_contentmoderation_proto_rawDescGZIP(), []int{4}
}

func (x *CContentModeration_ClaimBatchForModeration_Request) GetAcceptedSubjectTypes() []int32 {
	if x != nil {
		return x.AcceptedSubjectTypes
	}
	return nil
}

func (x *CContentModeration_ClaimBatchForModeration_Request) GetSupportCompany() uint32 {
	if x != nil && x.SupportCompany != nil {
		return *x.SupportCompany
	}
	return 0
}

func (x *CContentModeration_ClaimBatchForModeration_Request) GetAcceptedLanguages() []int32 {
	if x != nil {
		return x.AcceptedLanguages
	}
	return nil
}

func (x *CContentModeration_ClaimBatchForModeration_Request) GetModeratorLevel() int32 {
	if x != nil && x.ModeratorLevel != nil {
		return *x.ModeratorLevel
	}
	return 0
}

func (x *CContentModeration_ClaimBatchForModeration_Request) GetDisputed() bool {
	if x != nil && x.Disputed != nil {
		return *x.Disputed
	}
	return false
}

type CContentModeration_ClaimBatchForModeration_Response struct {
	state               protoimpl.MessageState  `protogen:"open.v1"`
	SelectedSubjectType *int32                  `protobuf:"varint,1,opt,name=selected_subject_type,json=selectedSubjectType" json:"selected_subject_type,omitempty"`
	Subject             []*ContentReportSubject `protobuf:"bytes,2,rep,name=subject" json:"subject,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *CContentModeration_ClaimBatchForModeration_Response) Reset() {
	*x = CContentModeration_ClaimBatchForModeration_Response{}
	mi := &file_service_contentmoderation_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CContentModeration_ClaimBatchForModeration_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CContentModeration_ClaimBatchForModeration_Response) ProtoMessage() {}

func (x *CContentModeration_ClaimBatchForModeration_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_contentmoderation_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CContentModeration_ClaimBatchForModeration_Response.ProtoReflect.Descriptor instead.
func (*CContentModeration_ClaimBatchForModeration_Response) Descriptor() ([]byte, []int) {
	return file_service_contentmoderation_proto_rawDescGZIP(), []int{5}
}

func (x *CContentModeration_ClaimBatchForModeration_Response) GetSelectedSubjectType() int32 {
	if x != nil && x.SelectedSubjectType != nil {
		return *x.SelectedSubjectType
	}
	return 0
}

func (x *CContentModeration_ClaimBatchForModeration_Response) GetSubject() []*ContentReportSubject {
	if x != nil {
		return x.Subject
	}
	return nil
}

type CContentModeration_CreateContentReport_Request struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	ReportReason          *int32                 `protobuf:"varint,1,opt,name=report_reason,json=reportReason" json:"report_reason,omitempty"`
	ReportText            *string                `protobuf:"bytes,2,opt,name=report_text,json=reportText" json:"report_text,omitempty"`
	OwnerSteamid          *uint64                `protobuf:"varint,3,opt,name=owner_steamid,json=ownerSteamid" json:"owner_steamid,omitempty"`
	Language              *int32                 `protobuf:"varint,4,opt,name=language" json:"language,omitempty"`
	SubjectType           *int32                 `protobuf:"varint,5,opt,name=subject_type,json=subjectType" json:"subject_type,omitempty"`
	SubjectGroupId        *uint64                `protobuf:"varint,6,opt,name=subject_group_id,json=subjectGroupId" json:"subject_group_id,omitempty"`
	SubjectId             *uint64                `protobuf:"varint,7,opt,name=subject_id,json=subjectId" json:"subject_id,omitempty"`
	AdditionalSubjectData *AdditionalSubjectData `protobuf:"bytes,8,opt,name=additional_subject_data,json=additionalSubjectData" json:"additional_subject_data,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *CContentModeration_CreateContentReport_Request) Reset() {
	*x = CContentModeration_CreateContentReport_Request{}
	mi := &file_service_contentmoderation_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CContentModeration_CreateContentReport_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CContentModeration_CreateContentReport_Request) ProtoMessage() {}

func (x *CContentModeration_CreateContentReport_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_contentmoderation_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CContentModeration_CreateContentReport_Request.ProtoReflect.Descriptor instead.
func (*CContentModeration_CreateContentReport_Request) Descriptor() ([]byte, []int) {
	return file_service_contentmoderation_proto_rawDescGZIP(), []int{6}
}

func (x *CContentModeration_CreateContentReport_Request) GetReportReason() int32 {
	if x != nil && x.ReportReason != nil {
		return *x.ReportReason
	}
	return 0
}

func (x *CContentModeration_CreateContentReport_Request) GetReportText() string {
	if x != nil && x.ReportText != nil {
		return *x.ReportText
	}
	return ""
}

func (x *CContentModeration_CreateContentReport_Request) GetOwnerSteamid() uint64 {
	if x != nil && x.OwnerSteamid != nil {
		return *x.OwnerSteamid
	}
	return 0
}

func (x *CContentModeration_CreateContentReport_Request) GetLanguage() int32 {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return 0
}

func (x *CContentModeration_CreateContentReport_Request) GetSubjectType() int32 {
	if x != nil && x.SubjectType != nil {
		return *x.SubjectType
	}
	return 0
}

func (x *CContentModeration_CreateContentReport_Request) GetSubjectGroupId() uint64 {
	if x != nil && x.SubjectGroupId != nil {
		return *x.SubjectGroupId
	}
	return 0
}

func (x *CContentModeration_CreateContentReport_Request) GetSubjectId() uint64 {
	if x != nil && x.SubjectId != nil {
		return *x.SubjectId
	}
	return 0
}

func (x *CContentModeration_CreateContentReport_Request) GetAdditionalSubjectData() *AdditionalSubjectData {
	if x != nil {
		return x.AdditionalSubjectData
	}
	return nil
}

type CContentModeration_CreateContentReport_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ReportId      *uint64                `protobuf:"varint,1,opt,name=report_id,json=reportId" json:"report_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CContentModeration_CreateContentReport_Response) Reset() {
	*x = CContentModeration_CreateContentReport_Response{}
	mi := &file_service_contentmoderation_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CContentModeration_CreateContentReport_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CContentModeration_CreateContentReport_Response) ProtoMessage() {}

func (x *CContentModeration_CreateContentReport_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_contentmoderation_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CContentModeration_CreateContentReport_Response.ProtoReflect.Descriptor instead.
func (*CContentModeration_CreateContentReport_Response) Descriptor() ([]byte, []int) {
	return file_service_contentmoderation_proto_rawDescGZIP(), []int{7}
}

func (x *CContentModeration_CreateContentReport_Response) GetReportId() uint64 {
	if x != nil && x.ReportId != nil {
		return *x.ReportId
	}
	return 0
}

type CContentModeration_DisputeModerationForReport_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ReportId      *uint64                `protobuf:"varint,1,opt,name=report_id,json=reportId" json:"report_id,omitempty"`
	Details       *string                `protobuf:"bytes,2,opt,name=details" json:"details,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CContentModeration_DisputeModerationForReport_Request) Reset() {
	*x = CContentModeration_DisputeModerationForReport_Request{}
	mi := &file_service_contentmoderation_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CContentModeration_DisputeModerationForReport_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CContentModeration_DisputeModerationForReport_Request) ProtoMessage() {}

func (x *CContentModeration_DisputeModerationForReport_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_contentmoderation_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CContentModeration_DisputeModerationForReport_Request.ProtoReflect.Descriptor instead.
func (*CContentModeration_DisputeModerationForReport_Request) Descriptor() ([]byte, []int) {
	return file_service_contentmoderation_proto_rawDescGZIP(), []int{8}
}

func (x *CContentModeration_DisputeModerationForReport_Request) GetReportId() uint64 {
	if x != nil && x.ReportId != nil {
		return *x.ReportId
	}
	return 0
}

func (x *CContentModeration_DisputeModerationForReport_Request) GetDetails() string {
	if x != nil && x.Details != nil {
		return *x.Details
	}
	return ""
}

type CContentModeration_DisputeModerationForReport_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CContentModeration_DisputeModerationForReport_Response) Reset() {
	*x = CContentModeration_DisputeModerationForReport_Response{}
	mi := &file_service_contentmoderation_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CContentModeration_DisputeModerationForReport_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CContentModeration_DisputeModerationForReport_Response) ProtoMessage() {}

func (x *CContentModeration_DisputeModerationForReport_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_contentmoderation_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CContentModeration_DisputeModerationForReport_Response.ProtoReflect.Descriptor instead.
func (*CContentModeration_DisputeModerationForReport_Response) Descriptor() ([]byte, []int) {
	return file_service_contentmoderation_proto_rawDescGZIP(), []int{9}
}

type CContentModeration_DisputeModerationForSubject_Request struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	SubjectType    *int32                 `protobuf:"varint,1,opt,name=subject_type,json=subjectType" json:"subject_type,omitempty"`
	SubjectGroupId *uint64                `protobuf:"varint,2,opt,name=subject_group_id,json=subjectGroupId" json:"subject_group_id,omitempty"`
	SubjectId      *uint64                `protobuf:"varint,3,opt,name=subject_id,json=subjectId" json:"subject_id,omitempty"`
	Details        *string                `protobuf:"bytes,4,opt,name=details" json:"details,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CContentModeration_DisputeModerationForSubject_Request) Reset() {
	*x = CContentModeration_DisputeModerationForSubject_Request{}
	mi := &file_service_contentmoderation_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CContentModeration_DisputeModerationForSubject_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CContentModeration_DisputeModerationForSubject_Request) ProtoMessage() {}

func (x *CContentModeration_DisputeModerationForSubject_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_contentmoderation_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CContentModeration_DisputeModerationForSubject_Request.ProtoReflect.Descriptor instead.
func (*CContentModeration_DisputeModerationForSubject_Request) Descriptor() ([]byte, []int) {
	return file_service_contentmoderation_proto_rawDescGZIP(), []int{10}
}

func (x *CContentModeration_DisputeModerationForSubject_Request) GetSubjectType() int32 {
	if x != nil && x.SubjectType != nil {
		return *x.SubjectType
	}
	return 0
}

func (x *CContentModeration_DisputeModerationForSubject_Request) GetSubjectGroupId() uint64 {
	if x != nil && x.SubjectGroupId != nil {
		return *x.SubjectGroupId
	}
	return 0
}

func (x *CContentModeration_DisputeModerationForSubject_Request) GetSubjectId() uint64 {
	if x != nil && x.SubjectId != nil {
		return *x.SubjectId
	}
	return 0
}

func (x *CContentModeration_DisputeModerationForSubject_Request) GetDetails() string {
	if x != nil && x.Details != nil {
		return *x.Details
	}
	return ""
}

type CContentModeration_DisputeModerationForSubject_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CContentModeration_DisputeModerationForSubject_Response) Reset() {
	*x = CContentModeration_DisputeModerationForSubject_Response{}
	mi := &file_service_contentmoderation_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CContentModeration_DisputeModerationForSubject_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CContentModeration_DisputeModerationForSubject_Response) ProtoMessage() {}

func (x *CContentModeration_DisputeModerationForSubject_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_contentmoderation_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CContentModeration_DisputeModerationForSubject_Response.ProtoReflect.Descriptor instead.
func (*CContentModeration_DisputeModerationForSubject_Response) Descriptor() ([]byte, []int) {
	return file_service_contentmoderation_proto_rawDescGZIP(), []int{11}
}

type CContentModeration_EscalateSubject_Request struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	SubjectType    *int32                 `protobuf:"varint,1,opt,name=subject_type,json=subjectType" json:"subject_type,omitempty"`
	SubjectGroupId *uint64                `protobuf:"varint,2,opt,name=subject_group_id,json=subjectGroupId" json:"subject_group_id,omitempty"`
	SubjectId      *uint64                `protobuf:"varint,3,opt,name=subject_id,json=subjectId" json:"subject_id,omitempty"`
	RequiredLevel  *int32                 `protobuf:"varint,4,opt,name=required_level,json=requiredLevel" json:"required_level,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CContentModeration_EscalateSubject_Request) Reset() {
	*x = CContentModeration_EscalateSubject_Request{}
	mi := &file_service_contentmoderation_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CContentModeration_EscalateSubject_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CContentModeration_EscalateSubject_Request) ProtoMessage() {}

func (x *CContentModeration_EscalateSubject_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_contentmoderation_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CContentModeration_EscalateSubject_Request.ProtoReflect.Descriptor instead.
func (*CContentModeration_EscalateSubject_Request) Descriptor() ([]byte, []int) {
	return file_service_contentmoderation_proto_rawDescGZIP(), []int{12}
}

func (x *CContentModeration_EscalateSubject_Request) GetSubjectType() int32 {
	if x != nil && x.SubjectType != nil {
		return *x.SubjectType
	}
	return 0
}

func (x *CContentModeration_EscalateSubject_Request) GetSubjectGroupId() uint64 {
	if x != nil && x.SubjectGroupId != nil {
		return *x.SubjectGroupId
	}
	return 0
}

func (x *CContentModeration_EscalateSubject_Request) GetSubjectId() uint64 {
	if x != nil && x.SubjectId != nil {
		return *x.SubjectId
	}
	return 0
}

func (x *CContentModeration_EscalateSubject_Request) GetRequiredLevel() int32 {
	if x != nil && x.RequiredLevel != nil {
		return *x.RequiredLevel
	}
	return 0
}

type CContentModeration_EscalateSubject_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CContentModeration_EscalateSubject_Response) Reset() {
	*x = CContentModeration_EscalateSubject_Response{}
	mi := &file_service_contentmoderation_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CContentModeration_EscalateSubject_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CContentModeration_EscalateSubject_Response) ProtoMessage() {}

func (x *CContentModeration_EscalateSubject_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_contentmoderation_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CContentModeration_EscalateSubject_Response.ProtoReflect.Descriptor instead.
func (*CContentModeration_EscalateSubject_Response) Descriptor() ([]byte, []int) {
	return file_service_contentmoderation_proto_rawDescGZIP(), []int{13}
}

type CContentModeration_GetClaimed_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Steamid       *uint64                `protobuf:"varint,1,opt,name=steamid" json:"steamid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CContentModeration_GetClaimed_Request) Reset() {
	*x = CContentModeration_GetClaimed_Request{}
	mi := &file_service_contentmoderation_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CContentModeration_GetClaimed_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CContentModeration_GetClaimed_Request) ProtoMessage() {}

func (x *CContentModeration_GetClaimed_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_contentmoderation_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CContentModeration_GetClaimed_Request.ProtoReflect.Descriptor instead.
func (*CContentModeration_GetClaimed_Request) Descriptor() ([]byte, []int) {
	return file_service_contentmoderation_proto_rawDescGZIP(), []int{14}
}

func (x *CContentModeration_GetClaimed_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

type CContentModeration_GetClaimed_Response struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Subject       []*ContentReportSubject `protobuf:"bytes,2,rep,name=subject" json:"subject,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CContentModeration_GetClaimed_Response) Reset() {
	*x = CContentModeration_GetClaimed_Response{}
	mi := &file_service_contentmoderation_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CContentModeration_GetClaimed_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CContentModeration_GetClaimed_Response) ProtoMessage() {}

func (x *CContentModeration_GetClaimed_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_contentmoderation_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CContentModeration_GetClaimed_Response.ProtoReflect.Descriptor instead.
func (*CContentModeration_GetClaimed_Response) Descriptor() ([]byte, []int) {
	return file_service_contentmoderation_proto_rawDescGZIP(), []int{15}
}

func (x *CContentModeration_GetClaimed_Response) GetSubject() []*ContentReportSubject {
	if x != nil {
		return x.Subject
	}
	return nil
}

type CContentModeration_GetContentReportSubject_Request struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	SubjectType    *int32                 `protobuf:"varint,1,opt,name=subject_type,json=subjectType" json:"subject_type,omitempty"`
	SubjectGroupId *uint64                `protobuf:"varint,2,opt,name=subject_group_id,json=subjectGroupId" json:"subject_group_id,omitempty"`
	SubjectId      *uint64                `protobuf:"varint,3,opt,name=subject_id,json=subjectId" json:"subject_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CContentModeration_GetContentReportSubject_Request) Reset() {
	*x = CContentModeration_GetContentReportSubject_Request{}
	mi := &file_service_contentmoderation_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CContentModeration_GetContentReportSubject_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CContentModeration_GetContentReportSubject_Request) ProtoMessage() {}

func (x *CContentModeration_GetContentReportSubject_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_contentmoderation_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CContentModeration_GetContentReportSubject_Request.ProtoReflect.Descriptor instead.
func (*CContentModeration_GetContentReportSubject_Request) Descriptor() ([]byte, []int) {
	return file_service_contentmoderation_proto_rawDescGZIP(), []int{16}
}

func (x *CContentModeration_GetContentReportSubject_Request) GetSubjectType() int32 {
	if x != nil && x.SubjectType != nil {
		return *x.SubjectType
	}
	return 0
}

func (x *CContentModeration_GetContentReportSubject_Request) GetSubjectGroupId() uint64 {
	if x != nil && x.SubjectGroupId != nil {
		return *x.SubjectGroupId
	}
	return 0
}

func (x *CContentModeration_GetContentReportSubject_Request) GetSubjectId() uint64 {
	if x != nil && x.SubjectId != nil {
		return *x.SubjectId
	}
	return 0
}

type CContentModeration_GetContentReportSubject_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Subject       *ContentReportSubject  `protobuf:"bytes,1,opt,name=subject" json:"subject,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CContentModeration_GetContentReportSubject_Response) Reset() {
	*x = CContentModeration_GetContentReportSubject_Response{}
	mi := &file_service_contentmoderation_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CContentModeration_GetContentReportSubject_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CContentModeration_GetContentReportSubject_Response) ProtoMessage() {}

func (x *CContentModeration_GetContentReportSubject_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_contentmoderation_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CContentModeration_GetContentReportSubject_Response.ProtoReflect.Descriptor instead.
func (*CContentModeration_GetContentReportSubject_Response) Descriptor() ([]byte, []int) {
	return file_service_contentmoderation_proto_rawDescGZIP(), []int{17}
}

func (x *CContentModeration_GetContentReportSubject_Response) GetSubject() *ContentReportSubject {
	if x != nil {
		return x.Subject
	}
	return nil
}

type CContentModeration_GetContentReportSubjectGroup_Request struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	SubjectType    *int32                 `protobuf:"varint,1,opt,name=subject_type,json=subjectType" json:"subject_type,omitempty"`
	SubjectGroupId *uint64                `protobuf:"varint,2,opt,name=subject_group_id,json=subjectGroupId" json:"subject_group_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CContentModeration_GetContentReportSubjectGroup_Request) Reset() {
	*x = CContentModeration_GetContentReportSubjectGroup_Request{}
	mi := &file_service_contentmoderation_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CContentModeration_GetContentReportSubjectGroup_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CContentModeration_GetContentReportSubjectGroup_Request) ProtoMessage() {}

func (x *CContentModeration_GetContentReportSubjectGroup_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_contentmoderation_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CContentModeration_GetContentReportSubjectGroup_Request.ProtoReflect.Descriptor instead.
func (*CContentModeration_GetContentReportSubjectGroup_Request) Descriptor() ([]byte, []int) {
	return file_service_contentmoderation_proto_rawDescGZIP(), []int{18}
}

func (x *CContentModeration_GetContentReportSubjectGroup_Request) GetSubjectType() int32 {
	if x != nil && x.SubjectType != nil {
		return *x.SubjectType
	}
	return 0
}

func (x *CContentModeration_GetContentReportSubjectGroup_Request) GetSubjectGroupId() uint64 {
	if x != nil && x.SubjectGroupId != nil {
		return *x.SubjectGroupId
	}
	return 0
}

type CContentModeration_GetContentReportSubjectGroup_Response struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Subjects      []*ContentReportSubject `protobuf:"bytes,1,rep,name=subjects" json:"subjects,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CContentModeration_GetContentReportSubjectGroup_Response) Reset() {
	*x = CContentModeration_GetContentReportSubjectGroup_Response{}
	mi := &file_service_contentmoderation_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CContentModeration_GetContentReportSubjectGroup_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CContentModeration_GetContentReportSubjectGroup_Response) ProtoMessage() {}

func (x *CContentModeration_GetContentReportSubjectGroup_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_contentmoderation_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CContentModeration_GetContentReportSubjectGroup_Response.ProtoReflect.Descriptor instead.
func (*CContentModeration_GetContentReportSubjectGroup_Response) Descriptor() ([]byte, []int) {
	return file_service_contentmoderation_proto_rawDescGZIP(), []int{19}
}

func (x *CContentModeration_GetContentReportSubjectGroup_Response) GetSubjects() []*ContentReportSubject {
	if x != nil {
		return x.Subjects
	}
	return nil
}

type CContentModeration_GetReportedSubjectsByOwner_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Steamid       *uint64                `protobuf:"varint,1,opt,name=steamid" json:"steamid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CContentModeration_GetReportedSubjectsByOwner_Request) Reset() {
	*x = CContentModeration_GetReportedSubjectsByOwner_Request{}
	mi := &file_service_contentmoderation_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CContentModeration_GetReportedSubjectsByOwner_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CContentModeration_GetReportedSubjectsByOwner_Request) ProtoMessage() {}

func (x *CContentModeration_GetReportedSubjectsByOwner_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_contentmoderation_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CContentModeration_GetReportedSubjectsByOwner_Request.ProtoReflect.Descriptor instead.
func (*CContentModeration_GetReportedSubjectsByOwner_Request) Descriptor() ([]byte, []int) {
	return file_service_contentmoderation_proto_rawDescGZIP(), []int{20}
}

func (x *CContentModeration_GetReportedSubjectsByOwner_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

type CContentModeration_GetReportedSubjectsByOwner_Response struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Subject       []*ContentReportSubject `protobuf:"bytes,1,rep,name=subject" json:"subject,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CContentModeration_GetReportedSubjectsByOwner_Response) Reset() {
	*x = CContentModeration_GetReportedSubjectsByOwner_Response{}
	mi := &file_service_contentmoderation_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CContentModeration_GetReportedSubjectsByOwner_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CContentModeration_GetReportedSubjectsByOwner_Response) ProtoMessage() {}

func (x *CContentModeration_GetReportedSubjectsByOwner_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_contentmoderation_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CContentModeration_GetReportedSubjectsByOwner_Response.ProtoReflect.Descriptor instead.
func (*CContentModeration_GetReportedSubjectsByOwner_Response) Descriptor() ([]byte, []int) {
	return file_service_contentmoderation_proto_rawDescGZIP(), []int{21}
}

func (x *CContentModeration_GetReportedSubjectsByOwner_Response) GetSubject() []*ContentReportSubject {
	if x != nil {
		return x.Subject
	}
	return nil
}

type CContentModeration_GetReportsSubmittedByUser_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Steamid       *uint64                `protobuf:"varint,1,opt,name=steamid" json:"steamid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CContentModeration_GetReportsSubmittedByUser_Request) Reset() {
	*x = CContentModeration_GetReportsSubmittedByUser_Request{}
	mi := &file_service_contentmoderation_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CContentModeration_GetReportsSubmittedByUser_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CContentModeration_GetReportsSubmittedByUser_Request) ProtoMessage() {}

func (x *CContentModeration_GetReportsSubmittedByUser_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_contentmoderation_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CContentModeration_GetReportsSubmittedByUser_Request.ProtoReflect.Descriptor instead.
func (*CContentModeration_GetReportsSubmittedByUser_Request) Descriptor() ([]byte, []int) {
	return file_service_contentmoderation_proto_rawDescGZIP(), []int{22}
}

func (x *CContentModeration_GetReportsSubmittedByUser_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

type CContentModeration_GetReportsSubmittedByUser_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ContentReport []*ContentReport       `protobuf:"bytes,1,rep,name=content_report,json=contentReport" json:"content_report,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CContentModeration_GetReportsSubmittedByUser_Response) Reset() {
	*x = CContentModeration_GetReportsSubmittedByUser_Response{}
	mi := &file_service_contentmoderation_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CContentModeration_GetReportsSubmittedByUser_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CContentModeration_GetReportsSubmittedByUser_Response) ProtoMessage() {}

func (x *CContentModeration_GetReportsSubmittedByUser_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_contentmoderation_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CContentModeration_GetReportsSubmittedByUser_Response.ProtoReflect.Descriptor instead.
func (*CContentModeration_GetReportsSubmittedByUser_Response) Descriptor() ([]byte, []int) {
	return file_service_contentmoderation_proto_rawDescGZIP(), []int{23}
}

func (x *CContentModeration_GetReportsSubmittedByUser_Response) GetContentReport() []*ContentReport {
	if x != nil {
		return x.ContentReport
	}
	return nil
}

type CContentModeration_GetSubjectOverview_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CContentModeration_GetSubjectOverview_Request) Reset() {
	*x = CContentModeration_GetSubjectOverview_Request{}
	mi := &file_service_contentmoderation_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CContentModeration_GetSubjectOverview_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CContentModeration_GetSubjectOverview_Request) ProtoMessage() {}

func (x *CContentModeration_GetSubjectOverview_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_contentmoderation_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CContentModeration_GetSubjectOverview_Request.ProtoReflect.Descriptor instead.
func (*CContentModeration_GetSubjectOverview_Request) Descriptor() ([]byte, []int) {
	return file_service_contentmoderation_proto_rawDescGZIP(), []int{24}
}

type CContentModeration_GetSubjectOverview_Response struct {
	state                  protoimpl.MessageState                                   `protogen:"open.v1"`
	Buckets                []*CContentModeration_GetSubjectOverview_Response_Bucket `protobuf:"bytes,1,rep,name=buckets" json:"buckets,omitempty"`
	PendingForAnyModerator *uint32                                                  `protobuf:"varint,2,opt,name=pending_for_any_moderator,json=pendingForAnyModerator" json:"pending_for_any_moderator,omitempty"`
	PendingForSupervisor   *uint32                                                  `protobuf:"varint,3,opt,name=pending_for_supervisor,json=pendingForSupervisor" json:"pending_for_supervisor,omitempty"`
	PendingForValve        *uint32                                                  `protobuf:"varint,4,opt,name=pending_for_valve,json=pendingForValve" json:"pending_for_valve,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *CContentModeration_GetSubjectOverview_Response) Reset() {
	*x = CContentModeration_GetSubjectOverview_Response{}
	mi := &file_service_contentmoderation_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CContentModeration_GetSubjectOverview_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CContentModeration_GetSubjectOverview_Response) ProtoMessage() {}

func (x *CContentModeration_GetSubjectOverview_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_contentmoderation_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CContentModeration_GetSubjectOverview_Response.ProtoReflect.Descriptor instead.
func (*CContentModeration_GetSubjectOverview_Response) Descriptor() ([]byte, []int) {
	return file_service_contentmoderation_proto_rawDescGZIP(), []int{25}
}

func (x *CContentModeration_GetSubjectOverview_Response) GetBuckets() []*CContentModeration_GetSubjectOverview_Response_Bucket {
	if x != nil {
		return x.Buckets
	}
	return nil
}

func (x *CContentModeration_GetSubjectOverview_Response) GetPendingForAnyModerator() uint32 {
	if x != nil && x.PendingForAnyModerator != nil {
		return *x.PendingForAnyModerator
	}
	return 0
}

func (x *CContentModeration_GetSubjectOverview_Response) GetPendingForSupervisor() uint32 {
	if x != nil && x.PendingForSupervisor != nil {
		return *x.PendingForSupervisor
	}
	return 0
}

func (x *CContentModeration_GetSubjectOverview_Response) GetPendingForValve() uint32 {
	if x != nil && x.PendingForValve != nil {
		return *x.PendingForValve
	}
	return 0
}

type CContentModeration_GetSubjectOverview_Response_Bucket struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	SubjectType            *int32                 `protobuf:"varint,1,opt,name=subject_type,json=subjectType" json:"subject_type,omitempty"`
	UnresolvedCount        *uint32                `protobuf:"varint,2,opt,name=unresolved_count,json=unresolvedCount" json:"unresolved_count,omitempty"`
	OldestUnresolved       *uint32                `protobuf:"varint,3,opt,name=oldest_unresolved,json=oldestUnresolved" json:"oldest_unresolved,omitempty"`
	UnclaimedCount         *uint32                `protobuf:"varint,4,opt,name=unclaimed_count,json=unclaimedCount" json:"unclaimed_count,omitempty"`
	OldestDisputed         *uint32                `protobuf:"varint,5,opt,name=oldest_disputed,json=oldestDisputed" json:"oldest_disputed,omitempty"`
	DisputedCount          *uint32                `protobuf:"varint,6,opt,name=disputed_count,json=disputedCount" json:"disputed_count,omitempty"`
	UnclaimedDisputedCount *uint32                `protobuf:"varint,7,opt,name=unclaimed_disputed_count,json=unclaimedDisputedCount" json:"unclaimed_disputed_count,omitempty"`
	PendingForAnyModerator *uint32                `protobuf:"varint,8,opt,name=pending_for_any_moderator,json=pendingForAnyModerator" json:"pending_for_any_moderator,omitempty"`
	PendingForSupervisor   *uint32                `protobuf:"varint,9,opt,name=pending_for_supervisor,json=pendingForSupervisor" json:"pending_for_supervisor,omitempty"`
	PendingForValve        *uint32                `protobuf:"varint,10,opt,name=pending_for_valve,json=pendingForValve" json:"pending_for_valve,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *CContentModeration_GetSubjectOverview_Response_Bucket) Reset() {
	*x = CContentModeration_GetSubjectOverview_Response_Bucket{}
	mi := &file_service_contentmoderation_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CContentModeration_GetSubjectOverview_Response_Bucket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CContentModeration_GetSubjectOverview_Response_Bucket) ProtoMessage() {}

func (x *CContentModeration_GetSubjectOverview_Response_Bucket) ProtoReflect() protoreflect.Message {
	mi := &file_service_contentmoderation_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CContentModeration_GetSubjectOverview_Response_Bucket.ProtoReflect.Descriptor instead.
func (*CContentModeration_GetSubjectOverview_Response_Bucket) Descriptor() ([]byte, []int) {
	return file_service_contentmoderation_proto_rawDescGZIP(), []int{26}
}

func (x *CContentModeration_GetSubjectOverview_Response_Bucket) GetSubjectType() int32 {
	if x != nil && x.SubjectType != nil {
		return *x.SubjectType
	}
	return 0
}

func (x *CContentModeration_GetSubjectOverview_Response_Bucket) GetUnresolvedCount() uint32 {
	if x != nil && x.UnresolvedCount != nil {
		return *x.UnresolvedCount
	}
	return 0
}

func (x *CContentModeration_GetSubjectOverview_Response_Bucket) GetOldestUnresolved() uint32 {
	if x != nil && x.OldestUnresolved != nil {
		return *x.OldestUnresolved
	}
	return 0
}

func (x *CContentModeration_GetSubjectOverview_Response_Bucket) GetUnclaimedCount() uint32 {
	if x != nil && x.UnclaimedCount != nil {
		return *x.UnclaimedCount
	}
	return 0
}

func (x *CContentModeration_GetSubjectOverview_Response_Bucket) GetOldestDisputed() uint32 {
	if x != nil && x.OldestDisputed != nil {
		return *x.OldestDisputed
	}
	return 0
}

func (x *CContentModeration_GetSubjectOverview_Response_Bucket) GetDisputedCount() uint32 {
	if x != nil && x.DisputedCount != nil {
		return *x.DisputedCount
	}
	return 0
}

func (x *CContentModeration_GetSubjectOverview_Response_Bucket) GetUnclaimedDisputedCount() uint32 {
	if x != nil && x.UnclaimedDisputedCount != nil {
		return *x.UnclaimedDisputedCount
	}
	return 0
}

func (x *CContentModeration_GetSubjectOverview_Response_Bucket) GetPendingForAnyModerator() uint32 {
	if x != nil && x.PendingForAnyModerator != nil {
		return *x.PendingForAnyModerator
	}
	return 0
}

func (x *CContentModeration_GetSubjectOverview_Response_Bucket) GetPendingForSupervisor() uint32 {
	if x != nil && x.PendingForSupervisor != nil {
		return *x.PendingForSupervisor
	}
	return 0
}

func (x *CContentModeration_GetSubjectOverview_Response_Bucket) GetPendingForValve() uint32 {
	if x != nil && x.PendingForValve != nil {
		return *x.PendingForValve
	}
	return 0
}

type CContentModeration_ReleaseClaimed_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Steamid       *uint64                `protobuf:"varint,1,opt,name=steamid" json:"steamid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CContentModeration_ReleaseClaimed_Request) Reset() {
	*x = CContentModeration_ReleaseClaimed_Request{}
	mi := &file_service_contentmoderation_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CContentModeration_ReleaseClaimed_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CContentModeration_ReleaseClaimed_Request) ProtoMessage() {}

func (x *CContentModeration_ReleaseClaimed_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_contentmoderation_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CContentModeration_ReleaseClaimed_Request.ProtoReflect.Descriptor instead.
func (*CContentModeration_ReleaseClaimed_Request) Descriptor() ([]byte, []int) {
	return file_service_contentmoderation_proto_rawDescGZIP(), []int{27}
}

func (x *CContentModeration_ReleaseClaimed_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

type CContentModeration_ReleaseClaimed_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CContentModeration_ReleaseClaimed_Response) Reset() {
	*x = CContentModeration_ReleaseClaimed_Response{}
	mi := &file_service_contentmoderation_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CContentModeration_ReleaseClaimed_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CContentModeration_ReleaseClaimed_Response) ProtoMessage() {}

func (x *CContentModeration_ReleaseClaimed_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_contentmoderation_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CContentModeration_ReleaseClaimed_Response.ProtoReflect.Descriptor instead.
func (*CContentModeration_ReleaseClaimed_Response) Descriptor() ([]byte, []int) {
	return file_service_contentmoderation_proto_rawDescGZIP(), []int{28}
}

type CContentModeration_ResolveDisputedSubject_Request struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	SubjectType       *int32                 `protobuf:"varint,1,opt,name=subject_type,json=subjectType" json:"subject_type,omitempty"`
	SubjectGroupId    *uint64                `protobuf:"varint,2,opt,name=subject_group_id,json=subjectGroupId" json:"subject_group_id,omitempty"`
	SubjectId         *uint64                `protobuf:"varint,3,opt,name=subject_id,json=subjectId" json:"subject_id,omitempty"`
	UpdatedResolution *int32                 `protobuf:"varint,4,opt,name=updated_resolution,json=updatedResolution" json:"updated_resolution,omitempty"`
	UpdatedReason     *int32                 `protobuf:"varint,5,opt,name=updated_reason,json=updatedReason" json:"updated_reason,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *CContentModeration_ResolveDisputedSubject_Request) Reset() {
	*x = CContentModeration_ResolveDisputedSubject_Request{}
	mi := &file_service_contentmoderation_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CContentModeration_ResolveDisputedSubject_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CContentModeration_ResolveDisputedSubject_Request) ProtoMessage() {}

func (x *CContentModeration_ResolveDisputedSubject_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_contentmoderation_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CContentModeration_ResolveDisputedSubject_Request.ProtoReflect.Descriptor instead.
func (*CContentModeration_ResolveDisputedSubject_Request) Descriptor() ([]byte, []int) {
	return file_service_contentmoderation_proto_rawDescGZIP(), []int{29}
}

func (x *CContentModeration_ResolveDisputedSubject_Request) GetSubjectType() int32 {
	if x != nil && x.SubjectType != nil {
		return *x.SubjectType
	}
	return 0
}

func (x *CContentModeration_ResolveDisputedSubject_Request) GetSubjectGroupId() uint64 {
	if x != nil && x.SubjectGroupId != nil {
		return *x.SubjectGroupId
	}
	return 0
}

func (x *CContentModeration_ResolveDisputedSubject_Request) GetSubjectId() uint64 {
	if x != nil && x.SubjectId != nil {
		return *x.SubjectId
	}
	return 0
}

func (x *CContentModeration_ResolveDisputedSubject_Request) GetUpdatedResolution() int32 {
	if x != nil && x.UpdatedResolution != nil {
		return *x.UpdatedResolution
	}
	return 0
}

func (x *CContentModeration_ResolveDisputedSubject_Request) GetUpdatedReason() int32 {
	if x != nil && x.UpdatedReason != nil {
		return *x.UpdatedReason
	}
	return 0
}

type CContentModeration_ResolveDisputedSubject_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CContentModeration_ResolveDisputedSubject_Response) Reset() {
	*x = CContentModeration_ResolveDisputedSubject_Response{}
	mi := &file_service_contentmoderation_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CContentModeration_ResolveDisputedSubject_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CContentModeration_ResolveDisputedSubject_Response) ProtoMessage() {}

func (x *CContentModeration_ResolveDisputedSubject_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_contentmoderation_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CContentModeration_ResolveDisputedSubject_Response.ProtoReflect.Descriptor instead.
func (*CContentModeration_ResolveDisputedSubject_Response) Descriptor() ([]byte, []int) {
	return file_service_contentmoderation_proto_rawDescGZIP(), []int{30}
}

type CContentModeration_ResolveSubject_Request struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	SubjectType    *int32                 `protobuf:"varint,1,opt,name=subject_type,json=subjectType" json:"subject_type,omitempty"`
	SubjectGroupId *uint64                `protobuf:"varint,2,opt,name=subject_group_id,json=subjectGroupId" json:"subject_group_id,omitempty"`
	SubjectId      *uint64                `protobuf:"varint,3,opt,name=subject_id,json=subjectId" json:"subject_id,omitempty"`
	Resolution     *int32                 `protobuf:"varint,4,opt,name=resolution" json:"resolution,omitempty"`
	Reason         *int32                 `protobuf:"varint,5,opt,name=reason" json:"reason,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CContentModeration_ResolveSubject_Request) Reset() {
	*x = CContentModeration_ResolveSubject_Request{}
	mi := &file_service_contentmoderation_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CContentModeration_ResolveSubject_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CContentModeration_ResolveSubject_Request) ProtoMessage() {}

func (x *CContentModeration_ResolveSubject_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_contentmoderation_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CContentModeration_ResolveSubject_Request.ProtoReflect.Descriptor instead.
func (*CContentModeration_ResolveSubject_Request) Descriptor() ([]byte, []int) {
	return file_service_contentmoderation_proto_rawDescGZIP(), []int{31}
}

func (x *CContentModeration_ResolveSubject_Request) GetSubjectType() int32 {
	if x != nil && x.SubjectType != nil {
		return *x.SubjectType
	}
	return 0
}

func (x *CContentModeration_ResolveSubject_Request) GetSubjectGroupId() uint64 {
	if x != nil && x.SubjectGroupId != nil {
		return *x.SubjectGroupId
	}
	return 0
}

func (x *CContentModeration_ResolveSubject_Request) GetSubjectId() uint64 {
	if x != nil && x.SubjectId != nil {
		return *x.SubjectId
	}
	return 0
}

func (x *CContentModeration_ResolveSubject_Request) GetResolution() int32 {
	if x != nil && x.Resolution != nil {
		return *x.Resolution
	}
	return 0
}

func (x *CContentModeration_ResolveSubject_Request) GetReason() int32 {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return 0
}

type CContentModeration_ResolveSubject_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CContentModeration_ResolveSubject_Response) Reset() {
	*x = CContentModeration_ResolveSubject_Response{}
	mi := &file_service_contentmoderation_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CContentModeration_ResolveSubject_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CContentModeration_ResolveSubject_Response) ProtoMessage() {}

func (x *CContentModeration_ResolveSubject_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_contentmoderation_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CContentModeration_ResolveSubject_Response.ProtoReflect.Descriptor instead.
func (*CContentModeration_ResolveSubject_Response) Descriptor() ([]byte, []int) {
	return file_service_contentmoderation_proto_rawDescGZIP(), []int{32}
}

type CContentModeration_ResolveSubjectGroup_Request struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	SubjectType    *int32                 `protobuf:"varint,1,opt,name=subject_type,json=subjectType" json:"subject_type,omitempty"`
	SubjectGroupId *uint64                `protobuf:"varint,2,opt,name=subject_group_id,json=subjectGroupId" json:"subject_group_id,omitempty"`
	Resolution     *int32                 `protobuf:"varint,3,opt,name=resolution" json:"resolution,omitempty"`
	Reason         *int32                 `protobuf:"varint,4,opt,name=reason" json:"reason,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CContentModeration_ResolveSubjectGroup_Request) Reset() {
	*x = CContentModeration_ResolveSubjectGroup_Request{}
	mi := &file_service_contentmoderation_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CContentModeration_ResolveSubjectGroup_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CContentModeration_ResolveSubjectGroup_Request) ProtoMessage() {}

func (x *CContentModeration_ResolveSubjectGroup_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_contentmoderation_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CContentModeration_ResolveSubjectGroup_Request.ProtoReflect.Descriptor instead.
func (*CContentModeration_ResolveSubjectGroup_Request) Descriptor() ([]byte, []int) {
	return file_service_contentmoderation_proto_rawDescGZIP(), []int{33}
}

func (x *CContentModeration_ResolveSubjectGroup_Request) GetSubjectType() int32 {
	if x != nil && x.SubjectType != nil {
		return *x.SubjectType
	}
	return 0
}

func (x *CContentModeration_ResolveSubjectGroup_Request) GetSubjectGroupId() uint64 {
	if x != nil && x.SubjectGroupId != nil {
		return *x.SubjectGroupId
	}
	return 0
}

func (x *CContentModeration_ResolveSubjectGroup_Request) GetResolution() int32 {
	if x != nil && x.Resolution != nil {
		return *x.Resolution
	}
	return 0
}

func (x *CContentModeration_ResolveSubjectGroup_Request) GetReason() int32 {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return 0
}

type CContentModeration_ResolveSubjectGroup_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CContentModeration_ResolveSubjectGroup_Response) Reset() {
	*x = CContentModeration_ResolveSubjectGroup_Response{}
	mi := &file_service_contentmoderation_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CContentModeration_ResolveSubjectGroup_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CContentModeration_ResolveSubjectGroup_Response) ProtoMessage() {}

func (x *CContentModeration_ResolveSubjectGroup_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_contentmoderation_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CContentModeration_ResolveSubjectGroup_Response.ProtoReflect.Descriptor instead.
func (*CContentModeration_ResolveSubjectGroup_Response) Descriptor() ([]byte, []int) {
	return file_service_contentmoderation_proto_rawDescGZIP(), []int{34}
}

type CContentModeration_UpdateSubject_Request struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	SubjectType     *int32                 `protobuf:"varint,1,opt,name=subject_type,json=subjectType" json:"subject_type,omitempty"`
	SubjectGroupId  *uint64                `protobuf:"varint,2,opt,name=subject_group_id,json=subjectGroupId" json:"subject_group_id,omitempty"`
	SubjectId       *uint64                `protobuf:"varint,3,opt,name=subject_id,json=subjectId" json:"subject_id,omitempty"`
	CsamStatus      *int32                 `protobuf:"varint,4,opt,name=csam_status,json=csamStatus" json:"csam_status,omitempty"`
	TerrorismStatus *int32                 `protobuf:"varint,5,opt,name=terrorism_status,json=terrorismStatus" json:"terrorism_status,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CContentModeration_UpdateSubject_Request) Reset() {
	*x = CContentModeration_UpdateSubject_Request{}
	mi := &file_service_contentmoderation_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CContentModeration_UpdateSubject_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CContentModeration_UpdateSubject_Request) ProtoMessage() {}

func (x *CContentModeration_UpdateSubject_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_contentmoderation_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CContentModeration_UpdateSubject_Request.ProtoReflect.Descriptor instead.
func (*CContentModeration_UpdateSubject_Request) Descriptor() ([]byte, []int) {
	return file_service_contentmoderation_proto_rawDescGZIP(), []int{35}
}

func (x *CContentModeration_UpdateSubject_Request) GetSubjectType() int32 {
	if x != nil && x.SubjectType != nil {
		return *x.SubjectType
	}
	return 0
}

func (x *CContentModeration_UpdateSubject_Request) GetSubjectGroupId() uint64 {
	if x != nil && x.SubjectGroupId != nil {
		return *x.SubjectGroupId
	}
	return 0
}

func (x *CContentModeration_UpdateSubject_Request) GetSubjectId() uint64 {
	if x != nil && x.SubjectId != nil {
		return *x.SubjectId
	}
	return 0
}

func (x *CContentModeration_UpdateSubject_Request) GetCsamStatus() int32 {
	if x != nil && x.CsamStatus != nil {
		return *x.CsamStatus
	}
	return 0
}

func (x *CContentModeration_UpdateSubject_Request) GetTerrorismStatus() int32 {
	if x != nil && x.TerrorismStatus != nil {
		return *x.TerrorismStatus
	}
	return 0
}

type CContentModeration_UpdateSubject_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CContentModeration_UpdateSubject_Response) Reset() {
	*x = CContentModeration_UpdateSubject_Response{}
	mi := &file_service_contentmoderation_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CContentModeration_UpdateSubject_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CContentModeration_UpdateSubject_Response) ProtoMessage() {}

func (x *CContentModeration_UpdateSubject_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_contentmoderation_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CContentModeration_UpdateSubject_Response.ProtoReflect.Descriptor instead.
func (*CContentModeration_UpdateSubject_Response) Descriptor() ([]byte, []int) {
	return file_service_contentmoderation_proto_rawDescGZIP(), []int{36}
}

type ContentReport struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	ReportId               *uint64                `protobuf:"varint,1,opt,name=report_id,json=reportId" json:"report_id,omitempty"`
	ReporterSteamid        *uint64                `protobuf:"varint,2,opt,name=reporter_steamid,json=reporterSteamid" json:"reporter_steamid,omitempty"`
	TimeReported           *uint32                `protobuf:"varint,3,opt,name=time_reported,json=timeReported" json:"time_reported,omitempty"`
	ReportReason           *int32                 `protobuf:"varint,4,opt,name=report_reason,json=reportReason" json:"report_reason,omitempty"`
	ReportText             *string                `protobuf:"bytes,5,opt,name=report_text,json=reportText" json:"report_text,omitempty"`
	SubjectType            *int32                 `protobuf:"varint,6,opt,name=subject_type,json=subjectType" json:"subject_type,omitempty"`
	SubjectGroupId         *uint64                `protobuf:"varint,7,opt,name=subject_group_id,json=subjectGroupId" json:"subject_group_id,omitempty"`
	SubjectId              *uint64                `protobuf:"varint,8,opt,name=subject_id,json=subjectId" json:"subject_id,omitempty"`
	Resolved               *int32                 `protobuf:"varint,9,opt,name=resolved" json:"resolved,omitempty"`
	TimeResolved           *uint32                `protobuf:"varint,10,opt,name=time_resolved,json=timeResolved" json:"time_resolved,omitempty"`
	ResolverSteamid        *uint64                `protobuf:"varint,11,opt,name=resolver_steamid,json=resolverSteamid" json:"resolver_steamid,omitempty"`
	TimeNotified           *uint32                `protobuf:"varint,12,opt,name=time_notified,json=timeNotified" json:"time_notified,omitempty"`
	AdditionalSubjectData  *AdditionalSubjectData `protobuf:"bytes,13,opt,name=additional_subject_data,json=additionalSubjectData" json:"additional_subject_data,omitempty"`
	TimeDisputed           *uint32                `protobuf:"varint,14,opt,name=time_disputed,json=timeDisputed" json:"time_disputed,omitempty"`
	DisputeDetails         *string                `protobuf:"bytes,15,opt,name=dispute_details,json=disputeDetails" json:"dispute_details,omitempty"`
	DisputeResolverSteamid *uint64                `protobuf:"varint,16,opt,name=dispute_resolver_steamid,json=disputeResolverSteamid" json:"dispute_resolver_steamid,omitempty"`
	DisputeResolved        *int32                 `protobuf:"varint,17,opt,name=dispute_resolved,json=disputeResolved" json:"dispute_resolved,omitempty"`
	TimeDisputeResolved    *uint32                `protobuf:"varint,18,opt,name=time_dispute_resolved,json=timeDisputeResolved" json:"time_dispute_resolved,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *ContentReport) Reset() {
	*x = ContentReport{}
	mi := &file_service_contentmoderation_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContentReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContentReport) ProtoMessage() {}

func (x *ContentReport) ProtoReflect() protoreflect.Message {
	mi := &file_service_contentmoderation_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContentReport.ProtoReflect.Descriptor instead.
func (*ContentReport) Descriptor() ([]byte, []int) {
	return file_service_contentmoderation_proto_rawDescGZIP(), []int{37}
}

func (x *ContentReport) GetReportId() uint64 {
	if x != nil && x.ReportId != nil {
		return *x.ReportId
	}
	return 0
}

func (x *ContentReport) GetReporterSteamid() uint64 {
	if x != nil && x.ReporterSteamid != nil {
		return *x.ReporterSteamid
	}
	return 0
}

func (x *ContentReport) GetTimeReported() uint32 {
	if x != nil && x.TimeReported != nil {
		return *x.TimeReported
	}
	return 0
}

func (x *ContentReport) GetReportReason() int32 {
	if x != nil && x.ReportReason != nil {
		return *x.ReportReason
	}
	return 0
}

func (x *ContentReport) GetReportText() string {
	if x != nil && x.ReportText != nil {
		return *x.ReportText
	}
	return ""
}

func (x *ContentReport) GetSubjectType() int32 {
	if x != nil && x.SubjectType != nil {
		return *x.SubjectType
	}
	return 0
}

func (x *ContentReport) GetSubjectGroupId() uint64 {
	if x != nil && x.SubjectGroupId != nil {
		return *x.SubjectGroupId
	}
	return 0
}

func (x *ContentReport) GetSubjectId() uint64 {
	if x != nil && x.SubjectId != nil {
		return *x.SubjectId
	}
	return 0
}

func (x *ContentReport) GetResolved() int32 {
	if x != nil && x.Resolved != nil {
		return *x.Resolved
	}
	return 0
}

func (x *ContentReport) GetTimeResolved() uint32 {
	if x != nil && x.TimeResolved != nil {
		return *x.TimeResolved
	}
	return 0
}

func (x *ContentReport) GetResolverSteamid() uint64 {
	if x != nil && x.ResolverSteamid != nil {
		return *x.ResolverSteamid
	}
	return 0
}

func (x *ContentReport) GetTimeNotified() uint32 {
	if x != nil && x.TimeNotified != nil {
		return *x.TimeNotified
	}
	return 0
}

func (x *ContentReport) GetAdditionalSubjectData() *AdditionalSubjectData {
	if x != nil {
		return x.AdditionalSubjectData
	}
	return nil
}

func (x *ContentReport) GetTimeDisputed() uint32 {
	if x != nil && x.TimeDisputed != nil {
		return *x.TimeDisputed
	}
	return 0
}

func (x *ContentReport) GetDisputeDetails() string {
	if x != nil && x.DisputeDetails != nil {
		return *x.DisputeDetails
	}
	return ""
}

func (x *ContentReport) GetDisputeResolverSteamid() uint64 {
	if x != nil && x.DisputeResolverSteamid != nil {
		return *x.DisputeResolverSteamid
	}
	return 0
}

func (x *ContentReport) GetDisputeResolved() int32 {
	if x != nil && x.DisputeResolved != nil {
		return *x.DisputeResolved
	}
	return 0
}

func (x *ContentReport) GetTimeDisputeResolved() uint32 {
	if x != nil && x.TimeDisputeResolved != nil {
		return *x.TimeDisputeResolved
	}
	return 0
}

type ContentReportSubject struct {
	state                       protoimpl.MessageState `protogen:"open.v1"`
	SubjectType                 *int32                 `protobuf:"varint,1,opt,name=subject_type,json=subjectType" json:"subject_type,omitempty"`
	SubjectGroupId              *uint64                `protobuf:"varint,2,opt,name=subject_group_id,json=subjectGroupId" json:"subject_group_id,omitempty"`
	SubjectId                   *uint64                `protobuf:"varint,3,opt,name=subject_id,json=subjectId" json:"subject_id,omitempty"`
	OwnerSteamId                *uint64                `protobuf:"varint,4,opt,name=owner_steam_id,json=ownerSteamId" json:"owner_steam_id,omitempty"`
	Language                    *int32                 `protobuf:"varint,5,opt,name=language" json:"language,omitempty"`
	Resolved                    *int32                 `protobuf:"varint,6,opt,name=resolved" json:"resolved,omitempty"`
	TimeResolved                *uint32                `protobuf:"varint,7,opt,name=time_resolved,json=timeResolved" json:"time_resolved,omitempty"`
	UnresolvedReportCount       *uint32                `protobuf:"varint,8,opt,name=unresolved_report_count,json=unresolvedReportCount" json:"unresolved_report_count,omitempty"`
	OldestUnresolvedReportTime  *uint32                `protobuf:"varint,9,opt,name=oldest_unresolved_report_time,json=oldestUnresolvedReportTime" json:"oldest_unresolved_report_time,omitempty"`
	ResolverSteamid             *uint64                `protobuf:"varint,10,opt,name=resolver_steamid,json=resolverSteamid" json:"resolver_steamid,omitempty"`
	AssignedModeratorSteamid    *uint64                `protobuf:"varint,11,opt,name=assigned_moderator_steamid,json=assignedModeratorSteamid" json:"assigned_moderator_steamid,omitempty"`
	TimeClaimedByModerator      *uint64                `protobuf:"varint,12,opt,name=time_claimed_by_moderator,json=timeClaimedByModerator" json:"time_claimed_by_moderator,omitempty"`
	Reports                     []*ContentReport       `protobuf:"bytes,13,rep,name=reports" json:"reports,omitempty"`
	AdditionalSubjectData       *AdditionalSubjectData `protobuf:"bytes,14,opt,name=additional_subject_data,json=additionalSubjectData" json:"additional_subject_data,omitempty"`
	CsamStatus                  *int32                 `protobuf:"varint,15,opt,name=csam_status,json=csamStatus" json:"csam_status,omitempty"`
	TerrorismStatus             *int32                 `protobuf:"varint,16,opt,name=terrorism_status,json=terrorismStatus" json:"terrorism_status,omitempty"`
	ContentModeratedReason      *int32                 `protobuf:"varint,17,opt,name=content_moderated_reason,json=contentModeratedReason" json:"content_moderated_reason,omitempty"`
	UnresolvedDisputeCount      *uint32                `protobuf:"varint,18,opt,name=unresolved_dispute_count,json=unresolvedDisputeCount" json:"unresolved_dispute_count,omitempty"`
	OldestUnresolvedDisputeTime *uint32                `protobuf:"varint,19,opt,name=oldest_unresolved_dispute_time,json=oldestUnresolvedDisputeTime" json:"oldest_unresolved_dispute_time,omitempty"`
	DisputeResolvedTime         *uint32                `protobuf:"varint,20,opt,name=dispute_resolved_time,json=disputeResolvedTime" json:"dispute_resolved_time,omitempty"`
	DisputeResolverSteamid      *uint64                `protobuf:"varint,21,opt,name=dispute_resolver_steamid,json=disputeResolverSteamid" json:"dispute_resolver_steamid,omitempty"`
	DisputeResolved             *uint32                `protobuf:"varint,22,opt,name=dispute_resolved,json=disputeResolved" json:"dispute_resolved,omitempty"`
	DisputeResolvedReason       *uint32                `protobuf:"varint,23,opt,name=dispute_resolved_reason,json=disputeResolvedReason" json:"dispute_resolved_reason,omitempty"`
	OwnerDisputeTime            *uint32                `protobuf:"varint,24,opt,name=owner_dispute_time,json=ownerDisputeTime" json:"owner_dispute_time,omitempty"`
	OwnerDisputeResolvedTime    *uint32                `protobuf:"varint,25,opt,name=owner_dispute_resolved_time,json=ownerDisputeResolvedTime" json:"owner_dispute_resolved_time,omitempty"`
	OwnerDisputeDetails         *string                `protobuf:"bytes,26,opt,name=owner_dispute_details,json=ownerDisputeDetails" json:"owner_dispute_details,omitempty"`
	RequiredModeratorLevel      *int32                 `protobuf:"varint,27,opt,name=required_moderator_level,json=requiredModeratorLevel" json:"required_moderator_level,omitempty"`
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

func (x *ContentReportSubject) Reset() {
	*x = ContentReportSubject{}
	mi := &file_service_contentmoderation_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContentReportSubject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContentReportSubject) ProtoMessage() {}

func (x *ContentReportSubject) ProtoReflect() protoreflect.Message {
	mi := &file_service_contentmoderation_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContentReportSubject.ProtoReflect.Descriptor instead.
func (*ContentReportSubject) Descriptor() ([]byte, []int) {
	return file_service_contentmoderation_proto_rawDescGZIP(), []int{38}
}

func (x *ContentReportSubject) GetSubjectType() int32 {
	if x != nil && x.SubjectType != nil {
		return *x.SubjectType
	}
	return 0
}

func (x *ContentReportSubject) GetSubjectGroupId() uint64 {
	if x != nil && x.SubjectGroupId != nil {
		return *x.SubjectGroupId
	}
	return 0
}

func (x *ContentReportSubject) GetSubjectId() uint64 {
	if x != nil && x.SubjectId != nil {
		return *x.SubjectId
	}
	return 0
}

func (x *ContentReportSubject) GetOwnerSteamId() uint64 {
	if x != nil && x.OwnerSteamId != nil {
		return *x.OwnerSteamId
	}
	return 0
}

func (x *ContentReportSubject) GetLanguage() int32 {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return 0
}

func (x *ContentReportSubject) GetResolved() int32 {
	if x != nil && x.Resolved != nil {
		return *x.Resolved
	}
	return 0
}

func (x *ContentReportSubject) GetTimeResolved() uint32 {
	if x != nil && x.TimeResolved != nil {
		return *x.TimeResolved
	}
	return 0
}

func (x *ContentReportSubject) GetUnresolvedReportCount() uint32 {
	if x != nil && x.UnresolvedReportCount != nil {
		return *x.UnresolvedReportCount
	}
	return 0
}

func (x *ContentReportSubject) GetOldestUnresolvedReportTime() uint32 {
	if x != nil && x.OldestUnresolvedReportTime != nil {
		return *x.OldestUnresolvedReportTime
	}
	return 0
}

func (x *ContentReportSubject) GetResolverSteamid() uint64 {
	if x != nil && x.ResolverSteamid != nil {
		return *x.ResolverSteamid
	}
	return 0
}

func (x *ContentReportSubject) GetAssignedModeratorSteamid() uint64 {
	if x != nil && x.AssignedModeratorSteamid != nil {
		return *x.AssignedModeratorSteamid
	}
	return 0
}

func (x *ContentReportSubject) GetTimeClaimedByModerator() uint64 {
	if x != nil && x.TimeClaimedByModerator != nil {
		return *x.TimeClaimedByModerator
	}
	return 0
}

func (x *ContentReportSubject) GetReports() []*ContentReport {
	if x != nil {
		return x.Reports
	}
	return nil
}

func (x *ContentReportSubject) GetAdditionalSubjectData() *AdditionalSubjectData {
	if x != nil {
		return x.AdditionalSubjectData
	}
	return nil
}

func (x *ContentReportSubject) GetCsamStatus() int32 {
	if x != nil && x.CsamStatus != nil {
		return *x.CsamStatus
	}
	return 0
}

func (x *ContentReportSubject) GetTerrorismStatus() int32 {
	if x != nil && x.TerrorismStatus != nil {
		return *x.TerrorismStatus
	}
	return 0
}

func (x *ContentReportSubject) GetContentModeratedReason() int32 {
	if x != nil && x.ContentModeratedReason != nil {
		return *x.ContentModeratedReason
	}
	return 0
}

func (x *ContentReportSubject) GetUnresolvedDisputeCount() uint32 {
	if x != nil && x.UnresolvedDisputeCount != nil {
		return *x.UnresolvedDisputeCount
	}
	return 0
}

func (x *ContentReportSubject) GetOldestUnresolvedDisputeTime() uint32 {
	if x != nil && x.OldestUnresolvedDisputeTime != nil {
		return *x.OldestUnresolvedDisputeTime
	}
	return 0
}

func (x *ContentReportSubject) GetDisputeResolvedTime() uint32 {
	if x != nil && x.DisputeResolvedTime != nil {
		return *x.DisputeResolvedTime
	}
	return 0
}

func (x *ContentReportSubject) GetDisputeResolverSteamid() uint64 {
	if x != nil && x.DisputeResolverSteamid != nil {
		return *x.DisputeResolverSteamid
	}
	return 0
}

func (x *ContentReportSubject) GetDisputeResolved() uint32 {
	if x != nil && x.DisputeResolved != nil {
		return *x.DisputeResolved
	}
	return 0
}

func (x *ContentReportSubject) GetDisputeResolvedReason() uint32 {
	if x != nil && x.DisputeResolvedReason != nil {
		return *x.DisputeResolvedReason
	}
	return 0
}

func (x *ContentReportSubject) GetOwnerDisputeTime() uint32 {
	if x != nil && x.OwnerDisputeTime != nil {
		return *x.OwnerDisputeTime
	}
	return 0
}

func (x *ContentReportSubject) GetOwnerDisputeResolvedTime() uint32 {
	if x != nil && x.OwnerDisputeResolvedTime != nil {
		return *x.OwnerDisputeResolvedTime
	}
	return 0
}

func (x *ContentReportSubject) GetOwnerDisputeDetails() string {
	if x != nil && x.OwnerDisputeDetails != nil {
		return *x.OwnerDisputeDetails
	}
	return ""
}

func (x *ContentReportSubject) GetRequiredModeratorLevel() int32 {
	if x != nil && x.RequiredModeratorLevel != nil {
		return *x.RequiredModeratorLevel
	}
	return 0
}

var File_service_contentmoderation_proto protoreflect.FileDescriptor

const file_service_contentmoderation_proto_rawDesc = "" +
	"\n" +
	"\x1fservice_contentmoderation.proto\x1a\x11common_base.proto\"M\n" +
	"\x15AdditionalSubjectData\x124\n" +
	"\x04data\x18\x01 \x03(\v2 .AdditionalSubjectData_DataEntryR\x04data\"I\n" +
	"\x1fAdditionalSubjectData_DataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value\"M\n" +
	".CContentModeration_CancelContentReport_Request\x12\x1b\n" +
	"\treport_id\x18\x01 \x01(\x04R\breportId\"1\n" +
	"/CContentModeration_CancelContentReport_Response\"\x9b\x02\n" +
	"2CContentModeration_ClaimBatchForModeration_Request\x12>\n" +
	"\x16accepted_subject_types\x18\x01 \x03(\x05B\b\x82\xb5\x18\x04enumR\x14acceptedSubjectTypes\x12'\n" +
	"\x0fsupport_company\x18\x02 \x01(\rR\x0esupportCompany\x12-\n" +
	"\x12accepted_languages\x18\x03 \x03(\x05R\x11acceptedLanguages\x121\n" +
	"\x0fmoderator_level\x18\x04 \x01(\x05B\b\x82\xb5\x18\x04enumR\x0emoderatorLevel\x12\x1a\n" +
	"\bdisputed\x18\x05 \x01(\bR\bdisputed\"\xa4\x01\n" +
	"3CContentModeration_ClaimBatchForModeration_Response\x12<\n" +
	"\x15selected_subject_type\x18\x01 \x01(\x05B\b\x82\xb5\x18\x04enumR\x13selectedSubjectType\x12/\n" +
	"\asubject\x18\x02 \x03(\v2\x15.ContentReportSubjectR\asubject\"\x87\x03\n" +
	".CContentModeration_CreateContentReport_Request\x12-\n" +
	"\rreport_reason\x18\x01 \x01(\x05B\b\x82\xb5\x18\x04enumR\freportReason\x12\x1f\n" +
	"\vreport_text\x18\x02 \x01(\tR\n" +
	"reportText\x12#\n" +
	"\rowner_steamid\x18\x03 \x01(\x04R\fownerSteamid\x12\x1a\n" +
	"\blanguage\x18\x04 \x01(\x05R\blanguage\x12+\n" +
	"\fsubject_type\x18\x05 \x01(\x05B\b\x82\xb5\x18\x04enumR\vsubjectType\x12(\n" +
	"\x10subject_group_id\x18\x06 \x01(\x04R\x0esubjectGroupId\x12\x1d\n" +
	"\n" +
	"subject_id\x18\a \x01(\x04R\tsubjectId\x12N\n" +
	"\x17additional_subject_data\x18\b \x01(\v2\x16.AdditionalSubjectDataR\x15additionalSubjectData\"N\n" +
	"/CContentModeration_CreateContentReport_Response\x12\x1b\n" +
	"\treport_id\x18\x01 \x01(\x04R\breportId\"n\n" +
	"5CContentModeration_DisputeModerationForReport_Request\x12\x1b\n" +
	"\treport_id\x18\x01 \x01(\x04R\breportId\x12\x18\n" +
	"\adetails\x18\x02 \x01(\tR\adetails\"8\n" +
	"6CContentModeration_DisputeModerationForReport_Response\"\xc8\x01\n" +
	"6CContentModeration_DisputeModerationForSubject_Request\x12+\n" +
	"\fsubject_type\x18\x01 \x01(\x05B\b\x82\xb5\x18\x04enumR\vsubjectType\x12(\n" +
	"\x10subject_group_id\x18\x02 \x01(\x04R\x0esubjectGroupId\x12\x1d\n" +
	"\n" +
	"subject_id\x18\x03 \x01(\x04R\tsubjectId\x12\x18\n" +
	"\adetails\x18\x04 \x01(\tR\adetails\"9\n" +
	"7CContentModeration_DisputeModerationForSubject_Response\"\xd3\x01\n" +
	"*CContentModeration_EscalateSubject_Request\x12+\n" +
	"\fsubject_type\x18\x01 \x01(\x05B\b\x82\xb5\x18\x04enumR\vsubjectType\x12(\n" +
	"\x10subject_group_id\x18\x02 \x01(\x04R\x0esubjectGroupId\x12\x1d\n" +
	"\n" +
	"subject_id\x18\x03 \x01(\x04R\tsubjectId\x12/\n" +
	"\x0erequired_level\x18\x04 \x01(\x05B\b\x82\xb5\x18\x04enumR\rrequiredLevel\"-\n" +
	"+CContentModeration_EscalateSubject_Response\"A\n" +
	"%CContentModeration_GetClaimed_Request\x12\x18\n" +
	"\asteamid\x18\x01 \x01(\x04R\asteamid\"Y\n" +
	"&CContentModeration_GetClaimed_Response\x12/\n" +
	"\asubject\x18\x02 \x03(\v2\x15.ContentReportSubjectR\asubject\"\xaa\x01\n" +
	"2CContentModeration_GetContentReportSubject_Request\x12+\n" +
	"\fsubject_type\x18\x01 \x01(\x05B\b\x82\xb5\x18\x04enumR\vsubjectType\x12(\n" +
	"\x10subject_group_id\x18\x02 \x01(\x04R\x0esubjectGroupId\x12\x1d\n" +
	"\n" +
	"subject_id\x18\x03 \x01(\x04R\tsubjectId\"f\n" +
	"3CContentModeration_GetContentReportSubject_Response\x12/\n" +
	"\asubject\x18\x01 \x01(\v2\x15.ContentReportSubjectR\asubject\"\x90\x01\n" +
	"7CContentModeration_GetContentReportSubjectGroup_Request\x12+\n" +
	"\fsubject_type\x18\x01 \x01(\x05B\b\x82\xb5\x18\x04enumR\vsubjectType\x12(\n" +
	"\x10subject_group_id\x18\x02 \x01(\x04R\x0esubjectGroupId\"m\n" +
	"8CContentModeration_GetContentReportSubjectGroup_Response\x121\n" +
	"\bsubjects\x18\x01 \x03(\v2\x15.ContentReportSubjectR\bsubjects\"Q\n" +
	"5CContentModeration_GetReportedSubjectsByOwner_Request\x12\x18\n" +
	"\asteamid\x18\x01 \x01(\x04R\asteamid\"i\n" +
	"6CContentModeration_GetReportedSubjectsByOwner_Response\x12/\n" +
	"\asubject\x18\x01 \x03(\v2\x15.ContentReportSubjectR\asubject\"P\n" +
	"4CContentModeration_GetReportsSubmittedByUser_Request\x12\x18\n" +
	"\asteamid\x18\x01 \x01(\x04R\asteamid\"n\n" +
	"5CContentModeration_GetReportsSubmittedByUser_Response\x125\n" +
	"\x0econtent_report\x18\x01 \x03(\v2\x0e.ContentReportR\rcontentReport\"/\n" +
	"-CContentModeration_GetSubjectOverview_Request\"\x9f\x02\n" +
	".CContentModeration_GetSubjectOverview_Response\x12P\n" +
	"\abuckets\x18\x01 \x03(\v26.CContentModeration_GetSubjectOverview_Response_BucketR\abuckets\x129\n" +
	"\x19pending_for_any_moderator\x18\x02 \x01(\rR\x16pendingForAnyModerator\x124\n" +
	"\x16pending_for_supervisor\x18\x03 \x01(\rR\x14pendingForSupervisor\x12*\n" +
	"\x11pending_for_valve\x18\x04 \x01(\rR\x0fpendingForValve\"\x8c\x04\n" +
	"5CContentModeration_GetSubjectOverview_Response_Bucket\x12+\n" +
	"\fsubject_type\x18\x01 \x01(\x05B\b\x82\xb5\x18\x04enumR\vsubjectType\x12)\n" +
	"\x10unresolved_count\x18\x02 \x01(\rR\x0funresolvedCount\x12+\n" +
	"\x11oldest_unresolved\x18\x03 \x01(\rR\x10oldestUnresolved\x12'\n" +
	"\x0funclaimed_count\x18\x04 \x01(\rR\x0eunclaimedCount\x12'\n" +
	"\x0foldest_disputed\x18\x05 \x01(\rR\x0eoldestDisputed\x12%\n" +
	"\x0edisputed_count\x18\x06 \x01(\rR\rdisputedCount\x128\n" +
	"\x18unclaimed_disputed_count\x18\a \x01(\rR\x16unclaimedDisputedCount\x129\n" +
	"\x19pending_for_any_moderator\x18\b \x01(\rR\x16pendingForAnyModerator\x124\n" +
	"\x16pending_for_supervisor\x18\t \x01(\rR\x14pendingForSupervisor\x12*\n" +
	"\x11pending_for_valve\x18\n" +
	" \x01(\rR\x0fpendingForValve\"E\n" +
	")CContentModeration_ReleaseClaimed_Request\x12\x18\n" +
	"\asteamid\x18\x01 \x01(\x04R\asteamid\",\n" +
	"*CContentModeration_ReleaseClaimed_Response\"\x93\x02\n" +
	"1CContentModeration_ResolveDisputedSubject_Request\x12+\n" +
	"\fsubject_type\x18\x01 \x01(\x05B\b\x82\xb5\x18\x04enumR\vsubjectType\x12(\n" +
	"\x10subject_group_id\x18\x02 \x01(\x04R\x0esubjectGroupId\x12\x1d\n" +
	"\n" +
	"subject_id\x18\x03 \x01(\x04R\tsubjectId\x127\n" +
	"\x12updated_resolution\x18\x04 \x01(\x05B\b\x82\xb5\x18\x04enumR\x11updatedResolution\x12/\n" +
	"\x0eupdated_reason\x18\x05 \x01(\x05B\b\x82\xb5\x18\x04enumR\rupdatedReason\"4\n" +
	"2CContentModeration_ResolveDisputedSubject_Response\"\xed\x01\n" +
	")CContentModeration_ResolveSubject_Request\x12+\n" +
	"\fsubject_type\x18\x01 \x01(\x05B\b\x82\xb5\x18\x04enumR\vsubjectType\x12(\n" +
	"\x10subject_group_id\x18\x02 \x01(\x04R\x0esubjectGroupId\x12\x1d\n" +
	"\n" +
	"subject_id\x18\x03 \x01(\x04R\tsubjectId\x12(\n" +
	"\n" +
	"resolution\x18\x04 \x01(\x05B\b\x82\xb5\x18\x04enumR\n" +
	"resolution\x12 \n" +
	"\x06reason\x18\x05 \x01(\x05B\b\x82\xb5\x18\x04enumR\x06reason\",\n" +
	"*CContentModeration_ResolveSubject_Response\"\xd3\x01\n" +
	".CContentModeration_ResolveSubjectGroup_Request\x12+\n" +
	"\fsubject_type\x18\x01 \x01(\x05B\b\x82\xb5\x18\x04enumR\vsubjectType\x12(\n" +
	"\x10subject_group_id\x18\x02 \x01(\x04R\x0esubjectGroupId\x12(\n" +
	"\n" +
	"resolution\x18\x03 \x01(\x05B\b\x82\xb5\x18\x04enumR\n" +
	"resolution\x12 \n" +
	"\x06reason\x18\x04 \x01(\x05B\b\x82\xb5\x18\x04enumR\x06reason\"1\n" +
	"/CContentModeration_ResolveSubjectGroup_Response\"\x80\x02\n" +
	"(CContentModeration_UpdateSubject_Request\x12+\n" +
	"\fsubject_type\x18\x01 \x01(\x05B\b\x82\xb5\x18\x04enumR\vsubjectType\x12(\n" +
	"\x10subject_group_id\x18\x02 \x01(\x04R\x0esubjectGroupId\x12\x1d\n" +
	"\n" +
	"subject_id\x18\x03 \x01(\x04R\tsubjectId\x12)\n" +
	"\vcsam_status\x18\x04 \x01(\x05B\b\x82\xb5\x18\x04enumR\n" +
	"csamStatus\x123\n" +
	"\x10terrorism_status\x18\x05 \x01(\x05B\b\x82\xb5\x18\x04enumR\x0fterrorismStatus\"+\n" +
	")CContentModeration_UpdateSubject_Response\"\x9e\x06\n" +
	"\rContentReport\x12\x1b\n" +
	"\treport_id\x18\x01 \x01(\x04R\breportId\x12)\n" +
	"\x10reporter_steamid\x18\x02 \x01(\x04R\x0freporterSteamid\x12#\n" +
	"\rtime_reported\x18\x03 \x01(\rR\ftimeReported\x12-\n" +
	"\rreport_reason\x18\x04 \x01(\x05B\b\x82\xb5\x18\x04enumR\freportReason\x12\x1f\n" +
	"\vreport_text\x18\x05 \x01(\tR\n" +
	"reportText\x12+\n" +
	"\fsubject_type\x18\x06 \x01(\x05B\b\x82\xb5\x18\x04enumR\vsubjectType\x12(\n" +
	"\x10subject_group_id\x18\a \x01(\x04R\x0esubjectGroupId\x12\x1d\n" +
	"\n" +
	"subject_id\x18\b \x01(\x04R\tsubjectId\x12$\n" +
	"\bresolved\x18\t \x01(\x05B\b\x82\xb5\x18\x04enumR\bresolved\x12#\n" +
	"\rtime_resolved\x18\n" +
	" \x01(\rR\ftimeResolved\x12)\n" +
	"\x10resolver_steamid\x18\v \x01(\x04R\x0fresolverSteamid\x12#\n" +
	"\rtime_notified\x18\f \x01(\rR\ftimeNotified\x12N\n" +
	"\x17additional_subject_data\x18\r \x01(\v2\x16.AdditionalSubjectDataR\x15additionalSubjectData\x12#\n" +
	"\rtime_disputed\x18\x0e \x01(\rR\ftimeDisputed\x12'\n" +
	"\x0fdispute_details\x18\x0f \x01(\tR\x0edisputeDetails\x128\n" +
	"\x18dispute_resolver_steamid\x18\x10 \x01(\x04R\x16disputeResolverSteamid\x123\n" +
	"\x10dispute_resolved\x18\x11 \x01(\x05B\b\x82\xb5\x18\x04enumR\x0fdisputeResolved\x122\n" +
	"\x15time_dispute_resolved\x18\x12 \x01(\rR\x13timeDisputeResolved\"\x8b\v\n" +
	"\x14ContentReportSubject\x12+\n" +
	"\fsubject_type\x18\x01 \x01(\x05B\b\x82\xb5\x18\x04enumR\vsubjectType\x12(\n" +
	"\x10subject_group_id\x18\x02 \x01(\x04R\x0esubjectGroupId\x12\x1d\n" +
	"\n" +
	"subject_id\x18\x03 \x01(\x04R\tsubjectId\x12$\n" +
	"\x0eowner_steam_id\x18\x04 \x01(\x04R\fownerSteamId\x12\x1a\n" +
	"\blanguage\x18\x05 \x01(\x05R\blanguage\x12$\n" +
	"\bresolved\x18\x06 \x01(\x05B\b\x82\xb5\x18\x04enumR\bresolved\x12#\n" +
	"\rtime_resolved\x18\a \x01(\rR\ftimeResolved\x126\n" +
	"\x17unresolved_report_count\x18\b \x01(\rR\x15unresolvedReportCount\x12A\n" +
	"\x1doldest_unresolved_report_time\x18\t \x01(\rR\x1aoldestUnresolvedReportTime\x12)\n" +
	"\x10resolver_steamid\x18\n" +
	" \x01(\x04R\x0fresolverSteamid\x12<\n" +
	"\x1aassigned_moderator_steamid\x18\v \x01(\x04R\x18assignedModeratorSteamid\x129\n" +
	"\x19time_claimed_by_moderator\x18\f \x01(\x04R\x16timeClaimedByModerator\x12(\n" +
	"\areports\x18\r \x03(\v2\x0e.ContentReportR\areports\x12N\n" +
	"\x17additional_subject_data\x18\x0e \x01(\v2\x16.AdditionalSubjectDataR\x15additionalSubjectData\x12)\n" +
	"\vcsam_status\x18\x0f \x01(\x05B\b\x82\xb5\x18\x04enumR\n" +
	"csamStatus\x123\n" +
	"\x10terrorism_status\x18\x10 \x01(\x05B\b\x82\xb5\x18\x04enumR\x0fterrorismStatus\x12B\n" +
	"\x18content_moderated_reason\x18\x11 \x01(\x05B\b\x82\xb5\x18\x04enumR\x16contentModeratedReason\x128\n" +
	"\x18unresolved_dispute_count\x18\x12 \x01(\rR\x16unresolvedDisputeCount\x12C\n" +
	"\x1eoldest_unresolved_dispute_time\x18\x13 \x01(\rR\x1boldestUnresolvedDisputeTime\x122\n" +
	"\x15dispute_resolved_time\x18\x14 \x01(\rR\x13disputeResolvedTime\x128\n" +
	"\x18dispute_resolver_steamid\x18\x15 \x01(\x04R\x16disputeResolverSteamid\x12)\n" +
	"\x10dispute_resolved\x18\x16 \x01(\rR\x0fdisputeResolved\x126\n" +
	"\x17dispute_resolved_reason\x18\x17 \x01(\rR\x15disputeResolvedReason\x12,\n" +
	"\x12owner_dispute_time\x18\x18 \x01(\rR\x10ownerDisputeTime\x12=\n" +
	"\x1bowner_dispute_resolved_time\x18\x19 \x01(\rR\x18ownerDisputeResolvedTime\x122\n" +
	"\x15owner_dispute_details\x18\x1a \x01(\tR\x13ownerDisputeDetails\x12B\n" +
	"\x18required_moderator_level\x18\x1b \x01(\x05B\b\x82\xb5\x18\x04enumR\x16requiredModeratorLevel2\xeb\x10\n" +
	"\x11ContentModeration\x12x\n" +
	"\x13CancelContentReport\x12/.CContentModeration_CancelContentReport_Request\x1a0.CContentModeration_CancelContentReport_Response\x12\x84\x01\n" +
	"\x17ClaimBatchForModeration\x123.CContentModeration_ClaimBatchForModeration_Request\x1a4.CContentModeration_ClaimBatchForModeration_Response\x12x\n" +
	"\x13CreateContentReport\x12/.CContentModeration_CreateContentReport_Request\x1a0.CContentModeration_CreateContentReport_Response\x12\x8d\x01\n" +
	"\x1aDisputeModerationForReport\x126.CContentModeration_DisputeModerationForReport_Request\x1a7.CContentModeration_DisputeModerationForReport_Response\x12\x90\x01\n" +
	"\x1bDisputeModerationForSubject\x127.CContentModeration_DisputeModerationForSubject_Request\x1a8.CContentModeration_DisputeModerationForSubject_Response\x12l\n" +
	"\x0fEscalateSubject\x12+.CContentModeration_EscalateSubject_Request\x1a,.CContentModeration_EscalateSubject_Response\x12]\n" +
	"\n" +
	"GetClaimed\x12&.CContentModeration_GetClaimed_Request\x1a'.CContentModeration_GetClaimed_Response\x12\x84\x01\n" +
	"\x17GetContentReportSubject\x123.CContentModeration_GetContentReportSubject_Request\x1a4.CContentModeration_GetContentReportSubject_Response\x12\x93\x01\n" +
	"\x1cGetContentReportSubjectGroup\x128.CContentModeration_GetContentReportSubjectGroup_Request\x1a9.CContentModeration_GetContentReportSubjectGroup_Response\x12\x8d\x01\n" +
	"\x1aGetReportedSubjectsByOwner\x126.CContentModeration_GetReportedSubjectsByOwner_Request\x1a7.CContentModeration_GetReportedSubjectsByOwner_Response\x12\x8a\x01\n" +
	"\x19GetReportsSubmittedByUser\x125.CContentModeration_GetReportsSubmittedByUser_Request\x1a6.CContentModeration_GetReportsSubmittedByUser_Response\x12u\n" +
	"\x12GetSubjectOverview\x12..CContentModeration_GetSubjectOverview_Request\x1a/.CContentModeration_GetSubjectOverview_Response\x12i\n" +
	"\x0eReleaseClaimed\x12*.CContentModeration_ReleaseClaimed_Request\x1a+.CContentModeration_ReleaseClaimed_Response\x12\x81\x01\n" +
	"\x16ResolveDisputedSubject\x122.CContentModeration_ResolveDisputedSubject_Request\x1a3.CContentModeration_ResolveDisputedSubject_Response\x12i\n" +
	"\x0eResolveSubject\x12*.CContentModeration_ResolveSubject_Request\x1a+.CContentModeration_ResolveSubject_Response\x12x\n" +
	"\x13ResolveSubjectGroup\x12/.CContentModeration_ResolveSubjectGroup_Request\x1a0.CContentModeration_ResolveSubjectGroup_Response\x12f\n" +
	"\rUpdateSubject\x12).CContentModeration_UpdateSubject_Request\x1a*.CContentModeration_UpdateSubject_Response"

var (
	file_service_contentmoderation_proto_rawDescOnce sync.Once
	file_service_contentmoderation_proto_rawDescData []byte
)

func file_service_contentmoderation_proto_rawDescGZIP() []byte {
	file_service_contentmoderation_proto_rawDescOnce.Do(func() {
		file_service_contentmoderation_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_service_contentmoderation_proto_rawDesc), len(file_service_contentmoderation_proto_rawDesc)))
	})
	return file_service_contentmoderation_proto_rawDescData
}

var file_service_contentmoderation_proto_msgTypes = make([]protoimpl.MessageInfo, 39)
var file_service_contentmoderation_proto_goTypes = []any{
	(*AdditionalSubjectData)(nil),                                    // 0: AdditionalSubjectData
	(*AdditionalSubjectData_DataEntry)(nil),                          // 1: AdditionalSubjectData_DataEntry
	(*CContentModeration_CancelContentReport_Request)(nil),           // 2: CContentModeration_CancelContentReport_Request
	(*CContentModeration_CancelContentReport_Response)(nil),          // 3: CContentModeration_CancelContentReport_Response
	(*CContentModeration_ClaimBatchForModeration_Request)(nil),       // 4: CContentModeration_ClaimBatchForModeration_Request
	(*CContentModeration_ClaimBatchForModeration_Response)(nil),      // 5: CContentModeration_ClaimBatchForModeration_Response
	(*CContentModeration_CreateContentReport_Request)(nil),           // 6: CContentModeration_CreateContentReport_Request
	(*CContentModeration_CreateContentReport_Response)(nil),          // 7: CContentModeration_CreateContentReport_Response
	(*CContentModeration_DisputeModerationForReport_Request)(nil),    // 8: CContentModeration_DisputeModerationForReport_Request
	(*CContentModeration_DisputeModerationForReport_Response)(nil),   // 9: CContentModeration_DisputeModerationForReport_Response
	(*CContentModeration_DisputeModerationForSubject_Request)(nil),   // 10: CContentModeration_DisputeModerationForSubject_Request
	(*CContentModeration_DisputeModerationForSubject_Response)(nil),  // 11: CContentModeration_DisputeModerationForSubject_Response
	(*CContentModeration_EscalateSubject_Request)(nil),               // 12: CContentModeration_EscalateSubject_Request
	(*CContentModeration_EscalateSubject_Response)(nil),              // 13: CContentModeration_EscalateSubject_Response
	(*CContentModeration_GetClaimed_Request)(nil),                    // 14: CContentModeration_GetClaimed_Request
	(*CContentModeration_GetClaimed_Response)(nil),                   // 15: CContentModeration_GetClaimed_Response
	(*CContentModeration_GetContentReportSubject_Request)(nil),       // 16: CContentModeration_GetContentReportSubject_Request
	(*CContentModeration_GetContentReportSubject_Response)(nil),      // 17: CContentModeration_GetContentReportSubject_Response
	(*CContentModeration_GetContentReportSubjectGroup_Request)(nil),  // 18: CContentModeration_GetContentReportSubjectGroup_Request
	(*CContentModeration_GetContentReportSubjectGroup_Response)(nil), // 19: CContentModeration_GetContentReportSubjectGroup_Response
	(*CContentModeration_GetReportedSubjectsByOwner_Request)(nil),    // 20: CContentModeration_GetReportedSubjectsByOwner_Request
	(*CContentModeration_GetReportedSubjectsByOwner_Response)(nil),   // 21: CContentModeration_GetReportedSubjectsByOwner_Response
	(*CContentModeration_GetReportsSubmittedByUser_Request)(nil),     // 22: CContentModeration_GetReportsSubmittedByUser_Request
	(*CContentModeration_GetReportsSubmittedByUser_Response)(nil),    // 23: CContentModeration_GetReportsSubmittedByUser_Response
	(*CContentModeration_GetSubjectOverview_Request)(nil),            // 24: CContentModeration_GetSubjectOverview_Request
	(*CContentModeration_GetSubjectOverview_Response)(nil),           // 25: CContentModeration_GetSubjectOverview_Response
	(*CContentModeration_GetSubjectOverview_Response_Bucket)(nil),    // 26: CContentModeration_GetSubjectOverview_Response_Bucket
	(*CContentModeration_ReleaseClaimed_Request)(nil),                // 27: CContentModeration_ReleaseClaimed_Request
	(*CContentModeration_ReleaseClaimed_Response)(nil),               // 28: CContentModeration_ReleaseClaimed_Response
	(*CContentModeration_ResolveDisputedSubject_Request)(nil),        // 29: CContentModeration_ResolveDisputedSubject_Request
	(*CContentModeration_ResolveDisputedSubject_Response)(nil),       // 30: CContentModeration_ResolveDisputedSubject_Response
	(*CContentModeration_ResolveSubject_Request)(nil),                // 31: CContentModeration_ResolveSubject_Request
	(*CContentModeration_ResolveSubject_Response)(nil),               // 32: CContentModeration_ResolveSubject_Response
	(*CContentModeration_ResolveSubjectGroup_Request)(nil),           // 33: CContentModeration_ResolveSubjectGroup_Request
	(*CContentModeration_ResolveSubjectGroup_Response)(nil),          // 34: CContentModeration_ResolveSubjectGroup_Response
	(*CContentModeration_UpdateSubject_Request)(nil),                 // 35: CContentModeration_UpdateSubject_Request
	(*CContentModeration_UpdateSubject_Response)(nil),                // 36: CContentModeration_UpdateSubject_Response
	(*ContentReport)(nil),        // 37: ContentReport
	(*ContentReportSubject)(nil), // 38: ContentReportSubject
}
var file_service_contentmoderation_proto_depIdxs = []int32{
	1,  // 0: AdditionalSubjectData.data:type_name -> AdditionalSubjectData_DataEntry
	38, // 1: CContentModeration_ClaimBatchForModeration_Response.subject:type_name -> ContentReportSubject
	0,  // 2: CContentModeration_CreateContentReport_Request.additional_subject_data:type_name -> AdditionalSubjectData
	38, // 3: CContentModeration_GetClaimed_Response.subject:type_name -> ContentReportSubject
	38, // 4: CContentModeration_GetContentReportSubject_Response.subject:type_name -> ContentReportSubject
	38, // 5: CContentModeration_GetContentReportSubjectGroup_Response.subjects:type_name -> ContentReportSubject
	38, // 6: CContentModeration_GetReportedSubjectsByOwner_Response.subject:type_name -> ContentReportSubject
	37, // 7: CContentModeration_GetReportsSubmittedByUser_Response.content_report:type_name -> ContentReport
	26, // 8: CContentModeration_GetSubjectOverview_Response.buckets:type_name -> CContentModeration_GetSubjectOverview_Response_Bucket
	0,  // 9: ContentReport.additional_subject_data:type_name -> AdditionalSubjectData
	37, // 10: ContentReportSubject.reports:type_name -> ContentReport
	0,  // 11: ContentReportSubject.additional_subject_data:type_name -> AdditionalSubjectData
	2,  // 12: ContentModeration.CancelContentReport:input_type -> CContentModeration_CancelContentReport_Request
	4,  // 13: ContentModeration.ClaimBatchForModeration:input_type -> CContentModeration_ClaimBatchForModeration_Request
	6,  // 14: ContentModeration.CreateContentReport:input_type -> CContentModeration_CreateContentReport_Request
	8,  // 15: ContentModeration.DisputeModerationForReport:input_type -> CContentModeration_DisputeModerationForReport_Request
	10, // 16: ContentModeration.DisputeModerationForSubject:input_type -> CContentModeration_DisputeModerationForSubject_Request
	12, // 17: ContentModeration.EscalateSubject:input_type -> CContentModeration_EscalateSubject_Request
	14, // 18: ContentModeration.GetClaimed:input_type -> CContentModeration_GetClaimed_Request
	16, // 19: ContentModeration.GetContentReportSubject:input_type -> CContentModeration_GetContentReportSubject_Request
	18, // 20: ContentModeration.GetContentReportSubjectGroup:input_type -> CContentModeration_GetContentReportSubjectGroup_Request
	20, // 21: ContentModeration.GetReportedSubjectsByOwner:input_type -> CContentModeration_GetReportedSubjectsByOwner_Request
	22, // 22: ContentModeration.GetReportsSubmittedByUser:input_type -> CContentModeration_GetReportsSubmittedByUser_Request
	24, // 23: ContentModeration.GetSubjectOverview:input_type -> CContentModeration_GetSubjectOverview_Request
	27, // 24: ContentModeration.ReleaseClaimed:input_type -> CContentModeration_ReleaseClaimed_Request
	29, // 25: ContentModeration.ResolveDisputedSubject:input_type -> CContentModeration_ResolveDisputedSubject_Request
	31, // 26: ContentModeration.ResolveSubject:input_type -> CContentModeration_ResolveSubject_Request
	33, // 27: ContentModeration.ResolveSubjectGroup:input_type -> CContentModeration_ResolveSubjectGroup_Request
	35, // 28: ContentModeration.UpdateSubject:input_type -> CContentModeration_UpdateSubject_Request
	3,  // 29: ContentModeration.CancelContentReport:output_type -> CContentModeration_CancelContentReport_Response
	5,  // 30: ContentModeration.ClaimBatchForModeration:output_type -> CContentModeration_ClaimBatchForModeration_Response
	7,  // 31: ContentModeration.CreateContentReport:output_type -> CContentModeration_CreateContentReport_Response
	9,  // 32: ContentModeration.DisputeModerationForReport:output_type -> CContentModeration_DisputeModerationForReport_Response
	11, // 33: ContentModeration.DisputeModerationForSubject:output_type -> CContentModeration_DisputeModerationForSubject_Response
	13, // 34: ContentModeration.EscalateSubject:output_type -> CContentModeration_EscalateSubject_Response
	15, // 35: ContentModeration.GetClaimed:output_type -> CContentModeration_GetClaimed_Response
	17, // 36: ContentModeration.GetContentReportSubject:output_type -> CContentModeration_GetContentReportSubject_Response
	19, // 37: ContentModeration.GetContentReportSubjectGroup:output_type -> CContentModeration_GetContentReportSubjectGroup_Response
	21, // 38: ContentModeration.GetReportedSubjectsByOwner:output_type -> CContentModeration_GetReportedSubjectsByOwner_Response
	23, // 39: ContentModeration.GetReportsSubmittedByUser:output_type -> CContentModeration_GetReportsSubmittedByUser_Response
	25, // 40: ContentModeration.GetSubjectOverview:output_type -> CContentModeration_GetSubjectOverview_Response
	28, // 41: ContentModeration.ReleaseClaimed:output_type -> CContentModeration_ReleaseClaimed_Response
	30, // 42: ContentModeration.ResolveDisputedSubject:output_type -> CContentModeration_ResolveDisputedSubject_Response
	32, // 43: ContentModeration.ResolveSubject:output_type -> CContentModeration_ResolveSubject_Response
	34, // 44: ContentModeration.ResolveSubjectGroup:output_type -> CContentModeration_ResolveSubjectGroup_Response
	36, // 45: ContentModeration.UpdateSubject:output_type -> CContentModeration_UpdateSubject_Response
	29, // [29:46] is the sub-list for method output_type
	12, // [12:29] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_service_contentmoderation_proto_init() }
func file_service_contentmoderation_proto_init() {
	if File_service_contentmoderation_proto != nil {
		return
	}
	file_common_base_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_service_contentmoderation_proto_rawDesc), len(file_service_contentmoderation_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   39,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_contentmoderation_proto_goTypes,
		DependencyIndexes: file_service_contentmoderation_proto_depIdxs,
		MessageInfos:      file_service_contentmoderation_proto_msgTypes,
	}.Build()
	File_service_contentmoderation_proto = out.File
	file_service_contentmoderation_proto_goTypes = nil
	file_service_contentmoderation_proto_depIdxs = nil
}
