// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.32.0
// source: service_steamnotification.proto

package webui

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CSteamNotification_GetPreferences_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CSteamNotification_GetPreferences_Request) Reset() {
	*x = CSteamNotification_GetPreferences_Request{}
	mi := &file_service_steamnotification_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamNotification_GetPreferences_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamNotification_GetPreferences_Request) ProtoMessage() {}

func (x *CSteamNotification_GetPreferences_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamnotification_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamNotification_GetPreferences_Request.ProtoReflect.Descriptor instead.
func (*CSteamNotification_GetPreferences_Request) Descriptor() ([]byte, []int) {
	return file_service_steamnotification_proto_rawDescGZIP(), []int{0}
}

type CSteamNotification_GetPreferences_Response struct {
	state         protoimpl.MessageState         `protogen:"open.v1"`
	Preferences   []*SteamNotificationPreference `protobuf:"bytes,1,rep,name=preferences" json:"preferences,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CSteamNotification_GetPreferences_Response) Reset() {
	*x = CSteamNotification_GetPreferences_Response{}
	mi := &file_service_steamnotification_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamNotification_GetPreferences_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamNotification_GetPreferences_Response) ProtoMessage() {}

func (x *CSteamNotification_GetPreferences_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamnotification_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamNotification_GetPreferences_Response.ProtoReflect.Descriptor instead.
func (*CSteamNotification_GetPreferences_Response) Descriptor() ([]byte, []int) {
	return file_service_steamnotification_proto_rawDescGZIP(), []int{1}
}

func (x *CSteamNotification_GetPreferences_Response) GetPreferences() []*SteamNotificationPreference {
	if x != nil {
		return x.Preferences
	}
	return nil
}

type CSteamNotification_GetSteamNotifications_Request struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	IncludeHidden            *bool                  `protobuf:"varint,1,opt,name=include_hidden,json=includeHidden,def=0" json:"include_hidden,omitempty"`
	Language                 *int32                 `protobuf:"varint,2,opt,name=language,def=0" json:"language,omitempty"`
	IncludeConfirmationCount *bool                  `protobuf:"varint,3,opt,name=include_confirmation_count,json=includeConfirmationCount,def=1" json:"include_confirmation_count,omitempty"`
	IncludePinnedCounts      *bool                  `protobuf:"varint,4,opt,name=include_pinned_counts,json=includePinnedCounts,def=0" json:"include_pinned_counts,omitempty"`
	IncludeRead              *bool                  `protobuf:"varint,5,opt,name=include_read,json=includeRead,def=1" json:"include_read,omitempty"`
	CountOnly                *bool                  `protobuf:"varint,6,opt,name=count_only,json=countOnly,def=0" json:"count_only,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

// Default values for CSteamNotification_GetSteamNotifications_Request fields.
const (
	Default_CSteamNotification_GetSteamNotifications_Request_IncludeHidden            = bool(false)
	Default_CSteamNotification_GetSteamNotifications_Request_Language                 = int32(0)
	Default_CSteamNotification_GetSteamNotifications_Request_IncludeConfirmationCount = bool(true)
	Default_CSteamNotification_GetSteamNotifications_Request_IncludePinnedCounts      = bool(false)
	Default_CSteamNotification_GetSteamNotifications_Request_IncludeRead              = bool(true)
	Default_CSteamNotification_GetSteamNotifications_Request_CountOnly                = bool(false)
)

func (x *CSteamNotification_GetSteamNotifications_Request) Reset() {
	*x = CSteamNotification_GetSteamNotifications_Request{}
	mi := &file_service_steamnotification_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamNotification_GetSteamNotifications_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamNotification_GetSteamNotifications_Request) ProtoMessage() {}

func (x *CSteamNotification_GetSteamNotifications_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamnotification_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamNotification_GetSteamNotifications_Request.ProtoReflect.Descriptor instead.
func (*CSteamNotification_GetSteamNotifications_Request) Descriptor() ([]byte, []int) {
	return file_service_steamnotification_proto_rawDescGZIP(), []int{2}
}

func (x *CSteamNotification_GetSteamNotifications_Request) GetIncludeHidden() bool {
	if x != nil && x.IncludeHidden != nil {
		return *x.IncludeHidden
	}
	return Default_CSteamNotification_GetSteamNotifications_Request_IncludeHidden
}

func (x *CSteamNotification_GetSteamNotifications_Request) GetLanguage() int32 {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return Default_CSteamNotification_GetSteamNotifications_Request_Language
}

func (x *CSteamNotification_GetSteamNotifications_Request) GetIncludeConfirmationCount() bool {
	if x != nil && x.IncludeConfirmationCount != nil {
		return *x.IncludeConfirmationCount
	}
	return Default_CSteamNotification_GetSteamNotifications_Request_IncludeConfirmationCount
}

func (x *CSteamNotification_GetSteamNotifications_Request) GetIncludePinnedCounts() bool {
	if x != nil && x.IncludePinnedCounts != nil {
		return *x.IncludePinnedCounts
	}
	return Default_CSteamNotification_GetSteamNotifications_Request_IncludePinnedCounts
}

func (x *CSteamNotification_GetSteamNotifications_Request) GetIncludeRead() bool {
	if x != nil && x.IncludeRead != nil {
		return *x.IncludeRead
	}
	return Default_CSteamNotification_GetSteamNotifications_Request_IncludeRead
}

func (x *CSteamNotification_GetSteamNotifications_Request) GetCountOnly() bool {
	if x != nil && x.CountOnly != nil {
		return *x.CountOnly
	}
	return Default_CSteamNotification_GetSteamNotifications_Request_CountOnly
}

type CSteamNotification_GetSteamNotifications_Response struct {
	state                    protoimpl.MessageState   `protogen:"open.v1"`
	Notifications            []*SteamNotificationData `protobuf:"bytes,1,rep,name=notifications" json:"notifications,omitempty"`
	ConfirmationCount        *int32                   `protobuf:"varint,2,opt,name=confirmation_count,json=confirmationCount" json:"confirmation_count,omitempty"`
	PendingGiftCount         *uint32                  `protobuf:"varint,3,opt,name=pending_gift_count,json=pendingGiftCount" json:"pending_gift_count,omitempty"`
	PendingFriendCount       *uint32                  `protobuf:"varint,5,opt,name=pending_friend_count,json=pendingFriendCount" json:"pending_friend_count,omitempty"`
	UnreadCount              *uint32                  `protobuf:"varint,6,opt,name=unread_count,json=unreadCount" json:"unread_count,omitempty"`
	PendingFamilyInviteCount *uint32                  `protobuf:"varint,7,opt,name=pending_family_invite_count,json=pendingFamilyInviteCount" json:"pending_family_invite_count,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *CSteamNotification_GetSteamNotifications_Response) Reset() {
	*x = CSteamNotification_GetSteamNotifications_Response{}
	mi := &file_service_steamnotification_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamNotification_GetSteamNotifications_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamNotification_GetSteamNotifications_Response) ProtoMessage() {}

func (x *CSteamNotification_GetSteamNotifications_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamnotification_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamNotification_GetSteamNotifications_Response.ProtoReflect.Descriptor instead.
func (*CSteamNotification_GetSteamNotifications_Response) Descriptor() ([]byte, []int) {
	return file_service_steamnotification_proto_rawDescGZIP(), []int{3}
}

func (x *CSteamNotification_GetSteamNotifications_Response) GetNotifications() []*SteamNotificationData {
	if x != nil {
		return x.Notifications
	}
	return nil
}

func (x *CSteamNotification_GetSteamNotifications_Response) GetConfirmationCount() int32 {
	if x != nil && x.ConfirmationCount != nil {
		return *x.ConfirmationCount
	}
	return 0
}

func (x *CSteamNotification_GetSteamNotifications_Response) GetPendingGiftCount() uint32 {
	if x != nil && x.PendingGiftCount != nil {
		return *x.PendingGiftCount
	}
	return 0
}

func (x *CSteamNotification_GetSteamNotifications_Response) GetPendingFriendCount() uint32 {
	if x != nil && x.PendingFriendCount != nil {
		return *x.PendingFriendCount
	}
	return 0
}

func (x *CSteamNotification_GetSteamNotifications_Response) GetUnreadCount() uint32 {
	if x != nil && x.UnreadCount != nil {
		return *x.UnreadCount
	}
	return 0
}

func (x *CSteamNotification_GetSteamNotifications_Response) GetPendingFamilyInviteCount() uint32 {
	if x != nil && x.PendingFamilyInviteCount != nil {
		return *x.PendingFamilyInviteCount
	}
	return 0
}

type CSteamNotification_HideNotification_Notification struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	NotificationIds []uint64               `protobuf:"varint,1,rep,name=notification_ids,json=notificationIds" json:"notification_ids,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CSteamNotification_HideNotification_Notification) Reset() {
	*x = CSteamNotification_HideNotification_Notification{}
	mi := &file_service_steamnotification_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamNotification_HideNotification_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamNotification_HideNotification_Notification) ProtoMessage() {}

func (x *CSteamNotification_HideNotification_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamnotification_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamNotification_HideNotification_Notification.ProtoReflect.Descriptor instead.
func (*CSteamNotification_HideNotification_Notification) Descriptor() ([]byte, []int) {
	return file_service_steamnotification_proto_rawDescGZIP(), []int{4}
}

func (x *CSteamNotification_HideNotification_Notification) GetNotificationIds() []uint64 {
	if x != nil {
		return x.NotificationIds
	}
	return nil
}

type CSteamNotification_MarkNotificationsRead_Notification struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Timestamp        *uint32                `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
	NotificationType *int32                 `protobuf:"varint,2,opt,name=notification_type,json=notificationType" json:"notification_type,omitempty"`
	NotificationIds  []uint64               `protobuf:"varint,3,rep,name=notification_ids,json=notificationIds" json:"notification_ids,omitempty"`
	MarkAllRead      *bool                  `protobuf:"varint,4,opt,name=mark_all_read,json=markAllRead" json:"mark_all_read,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CSteamNotification_MarkNotificationsRead_Notification) Reset() {
	*x = CSteamNotification_MarkNotificationsRead_Notification{}
	mi := &file_service_steamnotification_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamNotification_MarkNotificationsRead_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamNotification_MarkNotificationsRead_Notification) ProtoMessage() {}

func (x *CSteamNotification_MarkNotificationsRead_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamnotification_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamNotification_MarkNotificationsRead_Notification.ProtoReflect.Descriptor instead.
func (*CSteamNotification_MarkNotificationsRead_Notification) Descriptor() ([]byte, []int) {
	return file_service_steamnotification_proto_rawDescGZIP(), []int{5}
}

func (x *CSteamNotification_MarkNotificationsRead_Notification) GetTimestamp() uint32 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *CSteamNotification_MarkNotificationsRead_Notification) GetNotificationType() int32 {
	if x != nil && x.NotificationType != nil {
		return *x.NotificationType
	}
	return 0
}

func (x *CSteamNotification_MarkNotificationsRead_Notification) GetNotificationIds() []uint64 {
	if x != nil {
		return x.NotificationIds
	}
	return nil
}

func (x *CSteamNotification_MarkNotificationsRead_Notification) GetMarkAllRead() bool {
	if x != nil && x.MarkAllRead != nil {
		return *x.MarkAllRead
	}
	return false
}

type CSteamNotification_MarkNotificationsViewed_Notification struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	RemoteClientId   *uint64                `protobuf:"varint,1,opt,name=remote_client_id,json=remoteClientId" json:"remote_client_id,omitempty"`
	TargetClientType *uint32                `protobuf:"varint,2,opt,name=target_client_type,json=targetClientType" json:"target_client_type,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CSteamNotification_MarkNotificationsViewed_Notification) Reset() {
	*x = CSteamNotification_MarkNotificationsViewed_Notification{}
	mi := &file_service_steamnotification_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamNotification_MarkNotificationsViewed_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamNotification_MarkNotificationsViewed_Notification) ProtoMessage() {}

func (x *CSteamNotification_MarkNotificationsViewed_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamnotification_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamNotification_MarkNotificationsViewed_Notification.ProtoReflect.Descriptor instead.
func (*CSteamNotification_MarkNotificationsViewed_Notification) Descriptor() ([]byte, []int) {
	return file_service_steamnotification_proto_rawDescGZIP(), []int{6}
}

func (x *CSteamNotification_MarkNotificationsViewed_Notification) GetRemoteClientId() uint64 {
	if x != nil && x.RemoteClientId != nil {
		return *x.RemoteClientId
	}
	return 0
}

func (x *CSteamNotification_MarkNotificationsViewed_Notification) GetTargetClientType() uint32 {
	if x != nil && x.TargetClientType != nil {
		return *x.TargetClientType
	}
	return 0
}

type CSteamNotification_NotificationsReceived_Notification struct {
	state                    protoimpl.MessageState   `protogen:"open.v1"`
	Notifications            []*SteamNotificationData `protobuf:"bytes,1,rep,name=notifications" json:"notifications,omitempty"`
	PendingGiftCount         *uint32                  `protobuf:"varint,2,opt,name=pending_gift_count,json=pendingGiftCount" json:"pending_gift_count,omitempty"`
	PendingFriendCount       *uint32                  `protobuf:"varint,3,opt,name=pending_friend_count,json=pendingFriendCount" json:"pending_friend_count,omitempty"`
	PendingFamilyInviteCount *uint32                  `protobuf:"varint,4,opt,name=pending_family_invite_count,json=pendingFamilyInviteCount" json:"pending_family_invite_count,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *CSteamNotification_NotificationsReceived_Notification) Reset() {
	*x = CSteamNotification_NotificationsReceived_Notification{}
	mi := &file_service_steamnotification_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamNotification_NotificationsReceived_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamNotification_NotificationsReceived_Notification) ProtoMessage() {}

func (x *CSteamNotification_NotificationsReceived_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamnotification_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamNotification_NotificationsReceived_Notification.ProtoReflect.Descriptor instead.
func (*CSteamNotification_NotificationsReceived_Notification) Descriptor() ([]byte, []int) {
	return file_service_steamnotification_proto_rawDescGZIP(), []int{7}
}

func (x *CSteamNotification_NotificationsReceived_Notification) GetNotifications() []*SteamNotificationData {
	if x != nil {
		return x.Notifications
	}
	return nil
}

func (x *CSteamNotification_NotificationsReceived_Notification) GetPendingGiftCount() uint32 {
	if x != nil && x.PendingGiftCount != nil {
		return *x.PendingGiftCount
	}
	return 0
}

func (x *CSteamNotification_NotificationsReceived_Notification) GetPendingFriendCount() uint32 {
	if x != nil && x.PendingFriendCount != nil {
		return *x.PendingFriendCount
	}
	return 0
}

func (x *CSteamNotification_NotificationsReceived_Notification) GetPendingFamilyInviteCount() uint32 {
	if x != nil && x.PendingFamilyInviteCount != nil {
		return *x.PendingFamilyInviteCount
	}
	return 0
}

type CSteamNotification_PreferencesUpdated_Notification struct {
	state         protoimpl.MessageState         `protogen:"open.v1"`
	Preferences   []*SteamNotificationPreference `protobuf:"bytes,1,rep,name=preferences" json:"preferences,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CSteamNotification_PreferencesUpdated_Notification) Reset() {
	*x = CSteamNotification_PreferencesUpdated_Notification{}
	mi := &file_service_steamnotification_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamNotification_PreferencesUpdated_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamNotification_PreferencesUpdated_Notification) ProtoMessage() {}

func (x *CSteamNotification_PreferencesUpdated_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamnotification_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamNotification_PreferencesUpdated_Notification.ProtoReflect.Descriptor instead.
func (*CSteamNotification_PreferencesUpdated_Notification) Descriptor() ([]byte, []int) {
	return file_service_steamnotification_proto_rawDescGZIP(), []int{8}
}

func (x *CSteamNotification_PreferencesUpdated_Notification) GetPreferences() []*SteamNotificationPreference {
	if x != nil {
		return x.Preferences
	}
	return nil
}

type CSteamNotification_SetPreferences_Request struct {
	state         protoimpl.MessageState         `protogen:"open.v1"`
	Preferences   []*SteamNotificationPreference `protobuf:"bytes,1,rep,name=preferences" json:"preferences,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CSteamNotification_SetPreferences_Request) Reset() {
	*x = CSteamNotification_SetPreferences_Request{}
	mi := &file_service_steamnotification_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamNotification_SetPreferences_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamNotification_SetPreferences_Request) ProtoMessage() {}

func (x *CSteamNotification_SetPreferences_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamnotification_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamNotification_SetPreferences_Request.ProtoReflect.Descriptor instead.
func (*CSteamNotification_SetPreferences_Request) Descriptor() ([]byte, []int) {
	return file_service_steamnotification_proto_rawDescGZIP(), []int{9}
}

func (x *CSteamNotification_SetPreferences_Request) GetPreferences() []*SteamNotificationPreference {
	if x != nil {
		return x.Preferences
	}
	return nil
}

type CSteamNotification_SetPreferences_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CSteamNotification_SetPreferences_Response) Reset() {
	*x = CSteamNotification_SetPreferences_Response{}
	mi := &file_service_steamnotification_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamNotification_SetPreferences_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamNotification_SetPreferences_Response) ProtoMessage() {}

func (x *CSteamNotification_SetPreferences_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamnotification_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamNotification_SetPreferences_Response.ProtoReflect.Descriptor instead.
func (*CSteamNotification_SetPreferences_Response) Descriptor() ([]byte, []int) {
	return file_service_steamnotification_proto_rawDescGZIP(), []int{10}
}

type SteamNotificationData struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	NotificationId      *uint64                `protobuf:"varint,1,opt,name=notification_id,json=notificationId" json:"notification_id,omitempty"`
	NotificationTargets *uint32                `protobuf:"varint,2,opt,name=notification_targets,json=notificationTargets" json:"notification_targets,omitempty"`
	NotificationType    *int32                 `protobuf:"varint,3,opt,name=notification_type,json=notificationType" json:"notification_type,omitempty"`
	BodyData            *string                `protobuf:"bytes,4,opt,name=body_data,json=bodyData" json:"body_data,omitempty"`
	Read                *bool                  `protobuf:"varint,7,opt,name=read" json:"read,omitempty"`
	Timestamp           *uint32                `protobuf:"varint,8,opt,name=timestamp" json:"timestamp,omitempty"`
	Hidden              *bool                  `protobuf:"varint,9,opt,name=hidden" json:"hidden,omitempty"`
	Expiry              *uint32                `protobuf:"varint,10,opt,name=expiry" json:"expiry,omitempty"`
	Viewed              *uint32                `protobuf:"varint,11,opt,name=viewed" json:"viewed,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *SteamNotificationData) Reset() {
	*x = SteamNotificationData{}
	mi := &file_service_steamnotification_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SteamNotificationData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SteamNotificationData) ProtoMessage() {}

func (x *SteamNotificationData) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamnotification_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SteamNotificationData.ProtoReflect.Descriptor instead.
func (*SteamNotificationData) Descriptor() ([]byte, []int) {
	return file_service_steamnotification_proto_rawDescGZIP(), []int{11}
}

func (x *SteamNotificationData) GetNotificationId() uint64 {
	if x != nil && x.NotificationId != nil {
		return *x.NotificationId
	}
	return 0
}

func (x *SteamNotificationData) GetNotificationTargets() uint32 {
	if x != nil && x.NotificationTargets != nil {
		return *x.NotificationTargets
	}
	return 0
}

func (x *SteamNotificationData) GetNotificationType() int32 {
	if x != nil && x.NotificationType != nil {
		return *x.NotificationType
	}
	return 0
}

func (x *SteamNotificationData) GetBodyData() string {
	if x != nil && x.BodyData != nil {
		return *x.BodyData
	}
	return ""
}

func (x *SteamNotificationData) GetRead() bool {
	if x != nil && x.Read != nil {
		return *x.Read
	}
	return false
}

func (x *SteamNotificationData) GetTimestamp() uint32 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *SteamNotificationData) GetHidden() bool {
	if x != nil && x.Hidden != nil {
		return *x.Hidden
	}
	return false
}

func (x *SteamNotificationData) GetExpiry() uint32 {
	if x != nil && x.Expiry != nil {
		return *x.Expiry
	}
	return 0
}

func (x *SteamNotificationData) GetViewed() uint32 {
	if x != nil && x.Viewed != nil {
		return *x.Viewed
	}
	return 0
}

type SteamNotificationPreference struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	NotificationType    *int32                 `protobuf:"varint,1,opt,name=notification_type,json=notificationType" json:"notification_type,omitempty"`
	NotificationTargets *uint32                `protobuf:"varint,2,opt,name=notification_targets,json=notificationTargets" json:"notification_targets,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *SteamNotificationPreference) Reset() {
	*x = SteamNotificationPreference{}
	mi := &file_service_steamnotification_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SteamNotificationPreference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SteamNotificationPreference) ProtoMessage() {}

func (x *SteamNotificationPreference) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamnotification_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SteamNotificationPreference.ProtoReflect.Descriptor instead.
func (*SteamNotificationPreference) Descriptor() ([]byte, []int) {
	return file_service_steamnotification_proto_rawDescGZIP(), []int{12}
}

func (x *SteamNotificationPreference) GetNotificationType() int32 {
	if x != nil && x.NotificationType != nil {
		return *x.NotificationType
	}
	return 0
}

func (x *SteamNotificationPreference) GetNotificationTargets() uint32 {
	if x != nil && x.NotificationTargets != nil {
		return *x.NotificationTargets
	}
	return 0
}

var File_service_steamnotification_proto protoreflect.FileDescriptor

const file_service_steamnotification_proto_rawDesc = "" +
	"\n" +
	"\x1fservice_steamnotification.proto\x1a\x11common_base.proto\"+\n" +
	")CSteamNotification_GetPreferences_Request\"l\n" +
	"*CSteamNotification_GetPreferences_Response\x12>\n" +
	"\vpreferences\x18\x01 \x03(\v2\x1c.SteamNotificationPreferenceR\vpreferences\"\xcd\x02\n" +
	"0CSteamNotification_GetSteamNotifications_Request\x12,\n" +
	"\x0einclude_hidden\x18\x01 \x01(\b:\x05falseR\rincludeHidden\x12\x1d\n" +
	"\blanguage\x18\x02 \x01(\x05:\x010R\blanguage\x12B\n" +
	"\x1ainclude_confirmation_count\x18\x03 \x01(\b:\x04trueR\x18includeConfirmationCount\x129\n" +
	"\x15include_pinned_counts\x18\x04 \x01(\b:\x05falseR\x13includePinnedCounts\x12'\n" +
	"\finclude_read\x18\x05 \x01(\b:\x04trueR\vincludeRead\x12$\n" +
	"\n" +
	"count_only\x18\x06 \x01(\b:\x05falseR\tcountOnly\"\xe2\x02\n" +
	"1CSteamNotification_GetSteamNotifications_Response\x12<\n" +
	"\rnotifications\x18\x01 \x03(\v2\x16.SteamNotificationDataR\rnotifications\x12-\n" +
	"\x12confirmation_count\x18\x02 \x01(\x05R\x11confirmationCount\x12,\n" +
	"\x12pending_gift_count\x18\x03 \x01(\rR\x10pendingGiftCount\x120\n" +
	"\x14pending_friend_count\x18\x05 \x01(\rR\x12pendingFriendCount\x12!\n" +
	"\funread_count\x18\x06 \x01(\rR\vunreadCount\x12=\n" +
	"\x1bpending_family_invite_count\x18\a \x01(\rR\x18pendingFamilyInviteCount\"]\n" +
	"0CSteamNotification_HideNotification_Notification\x12)\n" +
	"\x10notification_ids\x18\x01 \x03(\x04R\x0fnotificationIds\"\xdb\x01\n" +
	"5CSteamNotification_MarkNotificationsRead_Notification\x12\x1c\n" +
	"\ttimestamp\x18\x01 \x01(\rR\ttimestamp\x125\n" +
	"\x11notification_type\x18\x02 \x01(\x05B\b\x82\xb5\x18\x04enumR\x10notificationType\x12)\n" +
	"\x10notification_ids\x18\x03 \x03(\x04R\x0fnotificationIds\x12\"\n" +
	"\rmark_all_read\x18\x04 \x01(\bR\vmarkAllRead\"\x91\x01\n" +
	"7CSteamNotification_MarkNotificationsViewed_Notification\x12(\n" +
	"\x10remote_client_id\x18\x01 \x01(\x04R\x0eremoteClientId\x12,\n" +
	"\x12target_client_type\x18\x02 \x01(\rR\x10targetClientType\"\x94\x02\n" +
	"5CSteamNotification_NotificationsReceived_Notification\x12<\n" +
	"\rnotifications\x18\x01 \x03(\v2\x16.SteamNotificationDataR\rnotifications\x12,\n" +
	"\x12pending_gift_count\x18\x02 \x01(\rR\x10pendingGiftCount\x120\n" +
	"\x14pending_friend_count\x18\x03 \x01(\rR\x12pendingFriendCount\x12=\n" +
	"\x1bpending_family_invite_count\x18\x04 \x01(\rR\x18pendingFamilyInviteCount\"t\n" +
	"2CSteamNotification_PreferencesUpdated_Notification\x12>\n" +
	"\vpreferences\x18\x01 \x03(\v2\x1c.SteamNotificationPreferenceR\vpreferences\"k\n" +
	")CSteamNotification_SetPreferences_Request\x12>\n" +
	"\vpreferences\x18\x01 \x03(\v2\x1c.SteamNotificationPreferenceR\vpreferences\",\n" +
	"*CSteamNotification_SetPreferences_Response\"\xc1\x02\n" +
	"\x15SteamNotificationData\x12'\n" +
	"\x0fnotification_id\x18\x01 \x01(\x04R\x0enotificationId\x121\n" +
	"\x14notification_targets\x18\x02 \x01(\rR\x13notificationTargets\x125\n" +
	"\x11notification_type\x18\x03 \x01(\x05B\b\x82\xb5\x18\x04enumR\x10notificationType\x12\x1b\n" +
	"\tbody_data\x18\x04 \x01(\tR\bbodyData\x12\x12\n" +
	"\x04read\x18\a \x01(\bR\x04read\x12\x1c\n" +
	"\ttimestamp\x18\b \x01(\rR\ttimestamp\x12\x16\n" +
	"\x06hidden\x18\t \x01(\bR\x06hidden\x12\x16\n" +
	"\x06expiry\x18\n" +
	" \x01(\rR\x06expiry\x12\x16\n" +
	"\x06viewed\x18\v \x01(\rR\x06viewed\"\x87\x01\n" +
	"\x1bSteamNotificationPreference\x125\n" +
	"\x11notification_type\x18\x01 \x01(\x05B\b\x82\xb5\x18\x04enumR\x10notificationType\x121\n" +
	"\x14notification_targets\x18\x02 \x01(\rR\x13notificationTargets2\xfd\x04\n" +
	"\x11SteamNotification\x12i\n" +
	"\x0eGetPreferences\x12*.CSteamNotification_GetPreferences_Request\x1a+.CSteamNotification_GetPreferences_Response\x12~\n" +
	"\x15GetSteamNotifications\x121.CSteamNotification_GetSteamNotifications_Request\x1a2.CSteamNotification_GetSteamNotifications_Response\x12R\n" +
	"\x10HideNotification\x121.CSteamNotification_HideNotification_Notification\x1a\v.NoResponse\x12\\\n" +
	"\x15MarkNotificationsRead\x126.CSteamNotification_MarkNotificationsRead_Notification\x1a\v.NoResponse\x12`\n" +
	"\x17MarkNotificationsViewed\x128.CSteamNotification_MarkNotificationsViewed_Notification\x1a\v.NoResponse\x12i\n" +
	"\x0eSetPreferences\x12*.CSteamNotification_SetPreferences_Request\x1a+.CSteamNotification_SetPreferences_Response2\xcf\x01\n" +
	"\x17SteamNotificationClient\x12\\\n" +
	"\x15NotificationsReceived\x126.CSteamNotification_NotificationsReceived_Notification\x1a\v.NoResponse\x12V\n" +
	"\x12PreferencesUpdated\x123.CSteamNotification_PreferencesUpdated_Notification\x1a\v.NoResponse"

var (
	file_service_steamnotification_proto_rawDescOnce sync.Once
	file_service_steamnotification_proto_rawDescData []byte
)

func file_service_steamnotification_proto_rawDescGZIP() []byte {
	file_service_steamnotification_proto_rawDescOnce.Do(func() {
		file_service_steamnotification_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_service_steamnotification_proto_rawDesc), len(file_service_steamnotification_proto_rawDesc)))
	})
	return file_service_steamnotification_proto_rawDescData
}

var file_service_steamnotification_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_service_steamnotification_proto_goTypes = []any{
	(*CSteamNotification_GetPreferences_Request)(nil),               // 0: CSteamNotification_GetPreferences_Request
	(*CSteamNotification_GetPreferences_Response)(nil),              // 1: CSteamNotification_GetPreferences_Response
	(*CSteamNotification_GetSteamNotifications_Request)(nil),        // 2: CSteamNotification_GetSteamNotifications_Request
	(*CSteamNotification_GetSteamNotifications_Response)(nil),       // 3: CSteamNotification_GetSteamNotifications_Response
	(*CSteamNotification_HideNotification_Notification)(nil),        // 4: CSteamNotification_HideNotification_Notification
	(*CSteamNotification_MarkNotificationsRead_Notification)(nil),   // 5: CSteamNotification_MarkNotificationsRead_Notification
	(*CSteamNotification_MarkNotificationsViewed_Notification)(nil), // 6: CSteamNotification_MarkNotificationsViewed_Notification
	(*CSteamNotification_NotificationsReceived_Notification)(nil),   // 7: CSteamNotification_NotificationsReceived_Notification
	(*CSteamNotification_PreferencesUpdated_Notification)(nil),      // 8: CSteamNotification_PreferencesUpdated_Notification
	(*CSteamNotification_SetPreferences_Request)(nil),               // 9: CSteamNotification_SetPreferences_Request
	(*CSteamNotification_SetPreferences_Response)(nil),              // 10: CSteamNotification_SetPreferences_Response
	(*SteamNotificationData)(nil),                                   // 11: SteamNotificationData
	(*SteamNotificationPreference)(nil),                             // 12: SteamNotificationPreference
	(*NoResponse)(nil),                                              // 13: NoResponse
}
var file_service_steamnotification_proto_depIdxs = []int32{
	12, // 0: CSteamNotification_GetPreferences_Response.preferences:type_name -> SteamNotificationPreference
	11, // 1: CSteamNotification_GetSteamNotifications_Response.notifications:type_name -> SteamNotificationData
	11, // 2: CSteamNotification_NotificationsReceived_Notification.notifications:type_name -> SteamNotificationData
	12, // 3: CSteamNotification_PreferencesUpdated_Notification.preferences:type_name -> SteamNotificationPreference
	12, // 4: CSteamNotification_SetPreferences_Request.preferences:type_name -> SteamNotificationPreference
	0,  // 5: SteamNotification.GetPreferences:input_type -> CSteamNotification_GetPreferences_Request
	2,  // 6: SteamNotification.GetSteamNotifications:input_type -> CSteamNotification_GetSteamNotifications_Request
	4,  // 7: SteamNotification.HideNotification:input_type -> CSteamNotification_HideNotification_Notification
	5,  // 8: SteamNotification.MarkNotificationsRead:input_type -> CSteamNotification_MarkNotificationsRead_Notification
	6,  // 9: SteamNotification.MarkNotificationsViewed:input_type -> CSteamNotification_MarkNotificationsViewed_Notification
	9,  // 10: SteamNotification.SetPreferences:input_type -> CSteamNotification_SetPreferences_Request
	7,  // 11: SteamNotificationClient.NotificationsReceived:input_type -> CSteamNotification_NotificationsReceived_Notification
	8,  // 12: SteamNotificationClient.PreferencesUpdated:input_type -> CSteamNotification_PreferencesUpdated_Notification
	1,  // 13: SteamNotification.GetPreferences:output_type -> CSteamNotification_GetPreferences_Response
	3,  // 14: SteamNotification.GetSteamNotifications:output_type -> CSteamNotification_GetSteamNotifications_Response
	13, // 15: SteamNotification.HideNotification:output_type -> NoResponse
	13, // 16: SteamNotification.MarkNotificationsRead:output_type -> NoResponse
	13, // 17: SteamNotification.MarkNotificationsViewed:output_type -> NoResponse
	10, // 18: SteamNotification.SetPreferences:output_type -> CSteamNotification_SetPreferences_Response
	13, // 19: SteamNotificationClient.NotificationsReceived:output_type -> NoResponse
	13, // 20: SteamNotificationClient.PreferencesUpdated:output_type -> NoResponse
	13, // [13:21] is the sub-list for method output_type
	5,  // [5:13] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_service_steamnotification_proto_init() }
func file_service_steamnotification_proto_init() {
	if File_service_steamnotification_proto != nil {
		return
	}
	file_common_base_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_service_steamnotification_proto_rawDesc), len(file_service_steamnotification_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_service_steamnotification_proto_goTypes,
		DependencyIndexes: file_service_steamnotification_proto_depIdxs,
		MessageInfos:      file_service_steamnotification_proto_msgTypes,
	}.Build()
	File_service_steamnotification_proto = out.File
	file_service_steamnotification_proto_goTypes = nil
	file_service_steamnotification_proto_depIdxs = nil
}
