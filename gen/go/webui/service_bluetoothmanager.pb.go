// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.32.0
// source: service_bluetoothmanager.proto

package webui

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CBluetoothManager_CancelPair_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Device        *uint32                `protobuf:"varint,1,opt,name=device" json:"device,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CBluetoothManager_CancelPair_Request) Reset() {
	*x = CBluetoothManager_CancelPair_Request{}
	mi := &file_service_bluetoothmanager_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CBluetoothManager_CancelPair_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBluetoothManager_CancelPair_Request) ProtoMessage() {}

func (x *CBluetoothManager_CancelPair_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_bluetoothmanager_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBluetoothManager_CancelPair_Request.ProtoReflect.Descriptor instead.
func (*CBluetoothManager_CancelPair_Request) Descriptor() ([]byte, []int) {
	return file_service_bluetoothmanager_proto_rawDescGZIP(), []int{0}
}

func (x *CBluetoothManager_CancelPair_Request) GetDevice() uint32 {
	if x != nil && x.Device != nil {
		return *x.Device
	}
	return 0
}

type CBluetoothManager_CancelPair_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CBluetoothManager_CancelPair_Response) Reset() {
	*x = CBluetoothManager_CancelPair_Response{}
	mi := &file_service_bluetoothmanager_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CBluetoothManager_CancelPair_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBluetoothManager_CancelPair_Response) ProtoMessage() {}

func (x *CBluetoothManager_CancelPair_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_bluetoothmanager_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBluetoothManager_CancelPair_Response.ProtoReflect.Descriptor instead.
func (*CBluetoothManager_CancelPair_Response) Descriptor() ([]byte, []int) {
	return file_service_bluetoothmanager_proto_rawDescGZIP(), []int{1}
}

type CBluetoothManager_Connect_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Device        *uint32                `protobuf:"varint,1,opt,name=device" json:"device,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CBluetoothManager_Connect_Request) Reset() {
	*x = CBluetoothManager_Connect_Request{}
	mi := &file_service_bluetoothmanager_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CBluetoothManager_Connect_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBluetoothManager_Connect_Request) ProtoMessage() {}

func (x *CBluetoothManager_Connect_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_bluetoothmanager_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBluetoothManager_Connect_Request.ProtoReflect.Descriptor instead.
func (*CBluetoothManager_Connect_Request) Descriptor() ([]byte, []int) {
	return file_service_bluetoothmanager_proto_rawDescGZIP(), []int{2}
}

func (x *CBluetoothManager_Connect_Request) GetDevice() uint32 {
	if x != nil && x.Device != nil {
		return *x.Device
	}
	return 0
}

type CBluetoothManager_Connect_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CBluetoothManager_Connect_Response) Reset() {
	*x = CBluetoothManager_Connect_Response{}
	mi := &file_service_bluetoothmanager_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CBluetoothManager_Connect_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBluetoothManager_Connect_Response) ProtoMessage() {}

func (x *CBluetoothManager_Connect_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_bluetoothmanager_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBluetoothManager_Connect_Response.ProtoReflect.Descriptor instead.
func (*CBluetoothManager_Connect_Response) Descriptor() ([]byte, []int) {
	return file_service_bluetoothmanager_proto_rawDescGZIP(), []int{3}
}

type CBluetoothManager_Disconnect_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Device        *uint32                `protobuf:"varint,1,opt,name=device" json:"device,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CBluetoothManager_Disconnect_Request) Reset() {
	*x = CBluetoothManager_Disconnect_Request{}
	mi := &file_service_bluetoothmanager_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CBluetoothManager_Disconnect_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBluetoothManager_Disconnect_Request) ProtoMessage() {}

func (x *CBluetoothManager_Disconnect_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_bluetoothmanager_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBluetoothManager_Disconnect_Request.ProtoReflect.Descriptor instead.
func (*CBluetoothManager_Disconnect_Request) Descriptor() ([]byte, []int) {
	return file_service_bluetoothmanager_proto_rawDescGZIP(), []int{4}
}

func (x *CBluetoothManager_Disconnect_Request) GetDevice() uint32 {
	if x != nil && x.Device != nil {
		return *x.Device
	}
	return 0
}

type CBluetoothManager_Disconnect_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CBluetoothManager_Disconnect_Response) Reset() {
	*x = CBluetoothManager_Disconnect_Response{}
	mi := &file_service_bluetoothmanager_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CBluetoothManager_Disconnect_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBluetoothManager_Disconnect_Response) ProtoMessage() {}

func (x *CBluetoothManager_Disconnect_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_bluetoothmanager_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBluetoothManager_Disconnect_Response.ProtoReflect.Descriptor instead.
func (*CBluetoothManager_Disconnect_Response) Descriptor() ([]byte, []int) {
	return file_service_bluetoothmanager_proto_rawDescGZIP(), []int{5}
}

type CBluetoothManager_Forget_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Device        *uint32                `protobuf:"varint,1,opt,name=device" json:"device,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CBluetoothManager_Forget_Request) Reset() {
	*x = CBluetoothManager_Forget_Request{}
	mi := &file_service_bluetoothmanager_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CBluetoothManager_Forget_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBluetoothManager_Forget_Request) ProtoMessage() {}

func (x *CBluetoothManager_Forget_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_bluetoothmanager_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBluetoothManager_Forget_Request.ProtoReflect.Descriptor instead.
func (*CBluetoothManager_Forget_Request) Descriptor() ([]byte, []int) {
	return file_service_bluetoothmanager_proto_rawDescGZIP(), []int{6}
}

func (x *CBluetoothManager_Forget_Request) GetDevice() uint32 {
	if x != nil && x.Device != nil {
		return *x.Device
	}
	return 0
}

type CBluetoothManager_Forget_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CBluetoothManager_Forget_Response) Reset() {
	*x = CBluetoothManager_Forget_Response{}
	mi := &file_service_bluetoothmanager_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CBluetoothManager_Forget_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBluetoothManager_Forget_Response) ProtoMessage() {}

func (x *CBluetoothManager_Forget_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_bluetoothmanager_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBluetoothManager_Forget_Response.ProtoReflect.Descriptor instead.
func (*CBluetoothManager_Forget_Response) Descriptor() ([]byte, []int) {
	return file_service_bluetoothmanager_proto_rawDescGZIP(), []int{7}
}

type CBluetoothManager_GetAdapterDetails_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            *uint32                `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CBluetoothManager_GetAdapterDetails_Request) Reset() {
	*x = CBluetoothManager_GetAdapterDetails_Request{}
	mi := &file_service_bluetoothmanager_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CBluetoothManager_GetAdapterDetails_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBluetoothManager_GetAdapterDetails_Request) ProtoMessage() {}

func (x *CBluetoothManager_GetAdapterDetails_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_bluetoothmanager_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBluetoothManager_GetAdapterDetails_Request.ProtoReflect.Descriptor instead.
func (*CBluetoothManager_GetAdapterDetails_Request) Descriptor() ([]byte, []int) {
	return file_service_bluetoothmanager_proto_rawDescGZIP(), []int{8}
}

func (x *CBluetoothManager_GetAdapterDetails_Request) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

type CBluetoothManager_GetAdapterDetails_Response struct {
	state         protoimpl.MessageState              `protogen:"open.v1"`
	Adapter       *CMsgBluetoothManagerAdapterDetails `protobuf:"bytes,1,opt,name=adapter" json:"adapter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CBluetoothManager_GetAdapterDetails_Response) Reset() {
	*x = CBluetoothManager_GetAdapterDetails_Response{}
	mi := &file_service_bluetoothmanager_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CBluetoothManager_GetAdapterDetails_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBluetoothManager_GetAdapterDetails_Response) ProtoMessage() {}

func (x *CBluetoothManager_GetAdapterDetails_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_bluetoothmanager_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBluetoothManager_GetAdapterDetails_Response.ProtoReflect.Descriptor instead.
func (*CBluetoothManager_GetAdapterDetails_Response) Descriptor() ([]byte, []int) {
	return file_service_bluetoothmanager_proto_rawDescGZIP(), []int{9}
}

func (x *CBluetoothManager_GetAdapterDetails_Response) GetAdapter() *CMsgBluetoothManagerAdapterDetails {
	if x != nil {
		return x.Adapter
	}
	return nil
}

type CBluetoothManager_GetDeviceDetails_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            *uint32                `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CBluetoothManager_GetDeviceDetails_Request) Reset() {
	*x = CBluetoothManager_GetDeviceDetails_Request{}
	mi := &file_service_bluetoothmanager_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CBluetoothManager_GetDeviceDetails_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBluetoothManager_GetDeviceDetails_Request) ProtoMessage() {}

func (x *CBluetoothManager_GetDeviceDetails_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_bluetoothmanager_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBluetoothManager_GetDeviceDetails_Request.ProtoReflect.Descriptor instead.
func (*CBluetoothManager_GetDeviceDetails_Request) Descriptor() ([]byte, []int) {
	return file_service_bluetoothmanager_proto_rawDescGZIP(), []int{10}
}

func (x *CBluetoothManager_GetDeviceDetails_Request) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

type CBluetoothManager_GetDeviceDetails_Response struct {
	state         protoimpl.MessageState             `protogen:"open.v1"`
	Device        *CMsgBluetoothManagerDeviceDetails `protobuf:"bytes,1,opt,name=device" json:"device,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CBluetoothManager_GetDeviceDetails_Response) Reset() {
	*x = CBluetoothManager_GetDeviceDetails_Response{}
	mi := &file_service_bluetoothmanager_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CBluetoothManager_GetDeviceDetails_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBluetoothManager_GetDeviceDetails_Response) ProtoMessage() {}

func (x *CBluetoothManager_GetDeviceDetails_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_bluetoothmanager_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBluetoothManager_GetDeviceDetails_Response.ProtoReflect.Descriptor instead.
func (*CBluetoothManager_GetDeviceDetails_Response) Descriptor() ([]byte, []int) {
	return file_service_bluetoothmanager_proto_rawDescGZIP(), []int{11}
}

func (x *CBluetoothManager_GetDeviceDetails_Response) GetDevice() *CMsgBluetoothManagerDeviceDetails {
	if x != nil {
		return x.Device
	}
	return nil
}

type CBluetoothManager_GetState_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CBluetoothManager_GetState_Request) Reset() {
	*x = CBluetoothManager_GetState_Request{}
	mi := &file_service_bluetoothmanager_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CBluetoothManager_GetState_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBluetoothManager_GetState_Request) ProtoMessage() {}

func (x *CBluetoothManager_GetState_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_bluetoothmanager_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBluetoothManager_GetState_Request.ProtoReflect.Descriptor instead.
func (*CBluetoothManager_GetState_Request) Descriptor() ([]byte, []int) {
	return file_service_bluetoothmanager_proto_rawDescGZIP(), []int{12}
}

type CBluetoothManager_GetState_Response struct {
	state              protoimpl.MessageState             `protogen:"open.v1"`
	IsServiceAvailable *bool                              `protobuf:"varint,1,opt,name=is_service_available,json=isServiceAvailable" json:"is_service_available,omitempty"`
	IsEnabled          *bool                              `protobuf:"varint,2,opt,name=is_enabled,json=isEnabled" json:"is_enabled,omitempty"`
	IsDiscovering      *bool                              `protobuf:"varint,3,opt,name=is_discovering,json=isDiscovering" json:"is_discovering,omitempty"`
	Adapters           []*CMsgBluetoothManagerAdapterInfo `protobuf:"bytes,4,rep,name=adapters" json:"adapters,omitempty"`
	Devices            []*CMsgBluetoothManagerDeviceInfo  `protobuf:"bytes,5,rep,name=devices" json:"devices,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *CBluetoothManager_GetState_Response) Reset() {
	*x = CBluetoothManager_GetState_Response{}
	mi := &file_service_bluetoothmanager_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CBluetoothManager_GetState_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBluetoothManager_GetState_Response) ProtoMessage() {}

func (x *CBluetoothManager_GetState_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_bluetoothmanager_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBluetoothManager_GetState_Response.ProtoReflect.Descriptor instead.
func (*CBluetoothManager_GetState_Response) Descriptor() ([]byte, []int) {
	return file_service_bluetoothmanager_proto_rawDescGZIP(), []int{13}
}

func (x *CBluetoothManager_GetState_Response) GetIsServiceAvailable() bool {
	if x != nil && x.IsServiceAvailable != nil {
		return *x.IsServiceAvailable
	}
	return false
}

func (x *CBluetoothManager_GetState_Response) GetIsEnabled() bool {
	if x != nil && x.IsEnabled != nil {
		return *x.IsEnabled
	}
	return false
}

func (x *CBluetoothManager_GetState_Response) GetIsDiscovering() bool {
	if x != nil && x.IsDiscovering != nil {
		return *x.IsDiscovering
	}
	return false
}

func (x *CBluetoothManager_GetState_Response) GetAdapters() []*CMsgBluetoothManagerAdapterInfo {
	if x != nil {
		return x.Adapters
	}
	return nil
}

func (x *CBluetoothManager_GetState_Response) GetDevices() []*CMsgBluetoothManagerDeviceInfo {
	if x != nil {
		return x.Devices
	}
	return nil
}

type CBluetoothManager_Pair_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Device        *uint32                `protobuf:"varint,1,opt,name=device" json:"device,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CBluetoothManager_Pair_Request) Reset() {
	*x = CBluetoothManager_Pair_Request{}
	mi := &file_service_bluetoothmanager_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CBluetoothManager_Pair_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBluetoothManager_Pair_Request) ProtoMessage() {}

func (x *CBluetoothManager_Pair_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_bluetoothmanager_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBluetoothManager_Pair_Request.ProtoReflect.Descriptor instead.
func (*CBluetoothManager_Pair_Request) Descriptor() ([]byte, []int) {
	return file_service_bluetoothmanager_proto_rawDescGZIP(), []int{14}
}

func (x *CBluetoothManager_Pair_Request) GetDevice() uint32 {
	if x != nil && x.Device != nil {
		return *x.Device
	}
	return 0
}

type CBluetoothManager_Pair_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CBluetoothManager_Pair_Response) Reset() {
	*x = CBluetoothManager_Pair_Response{}
	mi := &file_service_bluetoothmanager_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CBluetoothManager_Pair_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBluetoothManager_Pair_Response) ProtoMessage() {}

func (x *CBluetoothManager_Pair_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_bluetoothmanager_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBluetoothManager_Pair_Response.ProtoReflect.Descriptor instead.
func (*CBluetoothManager_Pair_Response) Descriptor() ([]byte, []int) {
	return file_service_bluetoothmanager_proto_rawDescGZIP(), []int{15}
}

type CBluetoothManager_SetDiscovering_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Enabled       *bool                  `protobuf:"varint,1,opt,name=enabled" json:"enabled,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CBluetoothManager_SetDiscovering_Request) Reset() {
	*x = CBluetoothManager_SetDiscovering_Request{}
	mi := &file_service_bluetoothmanager_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CBluetoothManager_SetDiscovering_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBluetoothManager_SetDiscovering_Request) ProtoMessage() {}

func (x *CBluetoothManager_SetDiscovering_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_bluetoothmanager_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBluetoothManager_SetDiscovering_Request.ProtoReflect.Descriptor instead.
func (*CBluetoothManager_SetDiscovering_Request) Descriptor() ([]byte, []int) {
	return file_service_bluetoothmanager_proto_rawDescGZIP(), []int{16}
}

func (x *CBluetoothManager_SetDiscovering_Request) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

type CBluetoothManager_SetDiscovering_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CBluetoothManager_SetDiscovering_Response) Reset() {
	*x = CBluetoothManager_SetDiscovering_Response{}
	mi := &file_service_bluetoothmanager_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CBluetoothManager_SetDiscovering_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBluetoothManager_SetDiscovering_Response) ProtoMessage() {}

func (x *CBluetoothManager_SetDiscovering_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_bluetoothmanager_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBluetoothManager_SetDiscovering_Response.ProtoReflect.Descriptor instead.
func (*CBluetoothManager_SetDiscovering_Response) Descriptor() ([]byte, []int) {
	return file_service_bluetoothmanager_proto_rawDescGZIP(), []int{17}
}

type CBluetoothManager_SetTrusted_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Device        *uint32                `protobuf:"varint,1,opt,name=device" json:"device,omitempty"`
	Trusted       *bool                  `protobuf:"varint,2,opt,name=trusted" json:"trusted,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CBluetoothManager_SetTrusted_Request) Reset() {
	*x = CBluetoothManager_SetTrusted_Request{}
	mi := &file_service_bluetoothmanager_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CBluetoothManager_SetTrusted_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBluetoothManager_SetTrusted_Request) ProtoMessage() {}

func (x *CBluetoothManager_SetTrusted_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_bluetoothmanager_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBluetoothManager_SetTrusted_Request.ProtoReflect.Descriptor instead.
func (*CBluetoothManager_SetTrusted_Request) Descriptor() ([]byte, []int) {
	return file_service_bluetoothmanager_proto_rawDescGZIP(), []int{18}
}

func (x *CBluetoothManager_SetTrusted_Request) GetDevice() uint32 {
	if x != nil && x.Device != nil {
		return *x.Device
	}
	return 0
}

func (x *CBluetoothManager_SetTrusted_Request) GetTrusted() bool {
	if x != nil && x.Trusted != nil {
		return *x.Trusted
	}
	return false
}

type CBluetoothManager_SetTrusted_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CBluetoothManager_SetTrusted_Response) Reset() {
	*x = CBluetoothManager_SetTrusted_Response{}
	mi := &file_service_bluetoothmanager_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CBluetoothManager_SetTrusted_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBluetoothManager_SetTrusted_Response) ProtoMessage() {}

func (x *CBluetoothManager_SetTrusted_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_bluetoothmanager_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBluetoothManager_SetTrusted_Response.ProtoReflect.Descriptor instead.
func (*CBluetoothManager_SetTrusted_Response) Descriptor() ([]byte, []int) {
	return file_service_bluetoothmanager_proto_rawDescGZIP(), []int{19}
}

type CBluetoothManager_SetWakeAllowed_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Device        *uint32                `protobuf:"varint,1,opt,name=device" json:"device,omitempty"`
	Allowed       *bool                  `protobuf:"varint,2,opt,name=allowed" json:"allowed,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CBluetoothManager_SetWakeAllowed_Request) Reset() {
	*x = CBluetoothManager_SetWakeAllowed_Request{}
	mi := &file_service_bluetoothmanager_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CBluetoothManager_SetWakeAllowed_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBluetoothManager_SetWakeAllowed_Request) ProtoMessage() {}

func (x *CBluetoothManager_SetWakeAllowed_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_bluetoothmanager_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBluetoothManager_SetWakeAllowed_Request.ProtoReflect.Descriptor instead.
func (*CBluetoothManager_SetWakeAllowed_Request) Descriptor() ([]byte, []int) {
	return file_service_bluetoothmanager_proto_rawDescGZIP(), []int{20}
}

func (x *CBluetoothManager_SetWakeAllowed_Request) GetDevice() uint32 {
	if x != nil && x.Device != nil {
		return *x.Device
	}
	return 0
}

func (x *CBluetoothManager_SetWakeAllowed_Request) GetAllowed() bool {
	if x != nil && x.Allowed != nil {
		return *x.Allowed
	}
	return false
}

type CBluetoothManager_SetWakeAllowed_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CBluetoothManager_SetWakeAllowed_Response) Reset() {
	*x = CBluetoothManager_SetWakeAllowed_Response{}
	mi := &file_service_bluetoothmanager_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CBluetoothManager_SetWakeAllowed_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBluetoothManager_SetWakeAllowed_Response) ProtoMessage() {}

func (x *CBluetoothManager_SetWakeAllowed_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_bluetoothmanager_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBluetoothManager_SetWakeAllowed_Response.ProtoReflect.Descriptor instead.
func (*CBluetoothManager_SetWakeAllowed_Response) Descriptor() ([]byte, []int) {
	return file_service_bluetoothmanager_proto_rawDescGZIP(), []int{21}
}

type CBluetoothManager_StateChanged_Notification struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CBluetoothManager_StateChanged_Notification) Reset() {
	*x = CBluetoothManager_StateChanged_Notification{}
	mi := &file_service_bluetoothmanager_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CBluetoothManager_StateChanged_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBluetoothManager_StateChanged_Notification) ProtoMessage() {}

func (x *CBluetoothManager_StateChanged_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_service_bluetoothmanager_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBluetoothManager_StateChanged_Notification.ProtoReflect.Descriptor instead.
func (*CBluetoothManager_StateChanged_Notification) Descriptor() ([]byte, []int) {
	return file_service_bluetoothmanager_proto_rawDescGZIP(), []int{22}
}

type CMsgBluetoothManagerAdapterDetails struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            *uint32                `protobuf:"varint,1,opt,name=id,def=0" json:"id,omitempty"`
	Mac           *string                `protobuf:"bytes,2,opt,name=mac" json:"mac,omitempty"`
	Name          *string                `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	IsEnabled     *bool                  `protobuf:"varint,4,opt,name=is_enabled,json=isEnabled" json:"is_enabled,omitempty"`
	IsDiscovering *bool                  `protobuf:"varint,5,opt,name=is_discovering,json=isDiscovering" json:"is_discovering,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgBluetoothManagerAdapterDetails fields.
const (
	Default_CMsgBluetoothManagerAdapterDetails_Id = uint32(0)
)

func (x *CMsgBluetoothManagerAdapterDetails) Reset() {
	*x = CMsgBluetoothManagerAdapterDetails{}
	mi := &file_service_bluetoothmanager_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgBluetoothManagerAdapterDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgBluetoothManagerAdapterDetails) ProtoMessage() {}

func (x *CMsgBluetoothManagerAdapterDetails) ProtoReflect() protoreflect.Message {
	mi := &file_service_bluetoothmanager_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgBluetoothManagerAdapterDetails.ProtoReflect.Descriptor instead.
func (*CMsgBluetoothManagerAdapterDetails) Descriptor() ([]byte, []int) {
	return file_service_bluetoothmanager_proto_rawDescGZIP(), []int{23}
}

func (x *CMsgBluetoothManagerAdapterDetails) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return Default_CMsgBluetoothManagerAdapterDetails_Id
}

func (x *CMsgBluetoothManagerAdapterDetails) GetMac() string {
	if x != nil && x.Mac != nil {
		return *x.Mac
	}
	return ""
}

func (x *CMsgBluetoothManagerAdapterDetails) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CMsgBluetoothManagerAdapterDetails) GetIsEnabled() bool {
	if x != nil && x.IsEnabled != nil {
		return *x.IsEnabled
	}
	return false
}

func (x *CMsgBluetoothManagerAdapterDetails) GetIsDiscovering() bool {
	if x != nil && x.IsDiscovering != nil {
		return *x.IsDiscovering
	}
	return false
}

type CMsgBluetoothManagerAdapterInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            *uint32                `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgBluetoothManagerAdapterInfo) Reset() {
	*x = CMsgBluetoothManagerAdapterInfo{}
	mi := &file_service_bluetoothmanager_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgBluetoothManagerAdapterInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgBluetoothManagerAdapterInfo) ProtoMessage() {}

func (x *CMsgBluetoothManagerAdapterInfo) ProtoReflect() protoreflect.Message {
	mi := &file_service_bluetoothmanager_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgBluetoothManagerAdapterInfo.ProtoReflect.Descriptor instead.
func (*CMsgBluetoothManagerAdapterInfo) Descriptor() ([]byte, []int) {
	return file_service_bluetoothmanager_proto_rawDescGZIP(), []int{24}
}

func (x *CMsgBluetoothManagerAdapterInfo) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

type CMsgBluetoothManagerDeviceDetails struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Id                   *uint32                `protobuf:"varint,1,opt,name=id,def=0" json:"id,omitempty"`
	AdapterId            *uint32                `protobuf:"varint,2,opt,name=adapter_id,json=adapterId,def=0" json:"adapter_id,omitempty"`
	Etype                *int32                 `protobuf:"varint,3,opt,name=etype" json:"etype,omitempty"`
	Mac                  *string                `protobuf:"bytes,4,opt,name=mac" json:"mac,omitempty"`
	Name                 *string                `protobuf:"bytes,5,opt,name=name" json:"name,omitempty"`
	IsConnected          *bool                  `protobuf:"varint,6,opt,name=is_connected,json=isConnected" json:"is_connected,omitempty"`
	IsPaired             *bool                  `protobuf:"varint,7,opt,name=is_paired,json=isPaired" json:"is_paired,omitempty"`
	IsPairing            *bool                  `protobuf:"varint,8,opt,name=is_pairing,json=isPairing" json:"is_pairing,omitempty"`
	WakeAllowed          *bool                  `protobuf:"varint,9,opt,name=wake_allowed,json=wakeAllowed" json:"wake_allowed,omitempty"`
	WakeAllowedSupported *bool                  `protobuf:"varint,10,opt,name=wake_allowed_supported,json=wakeAllowedSupported" json:"wake_allowed_supported,omitempty"`
	BatteryPercent       *int32                 `protobuf:"varint,11,opt,name=battery_percent,json=batteryPercent" json:"battery_percent,omitempty"`
	OperationInProgress  *bool                  `protobuf:"varint,12,opt,name=operation_in_progress,json=operationInProgress" json:"operation_in_progress,omitempty"`
	IsTrusted            *bool                  `protobuf:"varint,13,opt,name=is_trusted,json=isTrusted" json:"is_trusted,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

// Default values for CMsgBluetoothManagerDeviceDetails fields.
const (
	Default_CMsgBluetoothManagerDeviceDetails_Id        = uint32(0)
	Default_CMsgBluetoothManagerDeviceDetails_AdapterId = uint32(0)
)

func (x *CMsgBluetoothManagerDeviceDetails) Reset() {
	*x = CMsgBluetoothManagerDeviceDetails{}
	mi := &file_service_bluetoothmanager_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgBluetoothManagerDeviceDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgBluetoothManagerDeviceDetails) ProtoMessage() {}

func (x *CMsgBluetoothManagerDeviceDetails) ProtoReflect() protoreflect.Message {
	mi := &file_service_bluetoothmanager_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgBluetoothManagerDeviceDetails.ProtoReflect.Descriptor instead.
func (*CMsgBluetoothManagerDeviceDetails) Descriptor() ([]byte, []int) {
	return file_service_bluetoothmanager_proto_rawDescGZIP(), []int{25}
}

func (x *CMsgBluetoothManagerDeviceDetails) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return Default_CMsgBluetoothManagerDeviceDetails_Id
}

func (x *CMsgBluetoothManagerDeviceDetails) GetAdapterId() uint32 {
	if x != nil && x.AdapterId != nil {
		return *x.AdapterId
	}
	return Default_CMsgBluetoothManagerDeviceDetails_AdapterId
}

func (x *CMsgBluetoothManagerDeviceDetails) GetEtype() int32 {
	if x != nil && x.Etype != nil {
		return *x.Etype
	}
	return 0
}

func (x *CMsgBluetoothManagerDeviceDetails) GetMac() string {
	if x != nil && x.Mac != nil {
		return *x.Mac
	}
	return ""
}

func (x *CMsgBluetoothManagerDeviceDetails) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CMsgBluetoothManagerDeviceDetails) GetIsConnected() bool {
	if x != nil && x.IsConnected != nil {
		return *x.IsConnected
	}
	return false
}

func (x *CMsgBluetoothManagerDeviceDetails) GetIsPaired() bool {
	if x != nil && x.IsPaired != nil {
		return *x.IsPaired
	}
	return false
}

func (x *CMsgBluetoothManagerDeviceDetails) GetIsPairing() bool {
	if x != nil && x.IsPairing != nil {
		return *x.IsPairing
	}
	return false
}

func (x *CMsgBluetoothManagerDeviceDetails) GetWakeAllowed() bool {
	if x != nil && x.WakeAllowed != nil {
		return *x.WakeAllowed
	}
	return false
}

func (x *CMsgBluetoothManagerDeviceDetails) GetWakeAllowedSupported() bool {
	if x != nil && x.WakeAllowedSupported != nil {
		return *x.WakeAllowedSupported
	}
	return false
}

func (x *CMsgBluetoothManagerDeviceDetails) GetBatteryPercent() int32 {
	if x != nil && x.BatteryPercent != nil {
		return *x.BatteryPercent
	}
	return 0
}

func (x *CMsgBluetoothManagerDeviceDetails) GetOperationInProgress() bool {
	if x != nil && x.OperationInProgress != nil {
		return *x.OperationInProgress
	}
	return false
}

func (x *CMsgBluetoothManagerDeviceDetails) GetIsTrusted() bool {
	if x != nil && x.IsTrusted != nil {
		return *x.IsTrusted
	}
	return false
}

type CMsgBluetoothManagerDeviceInfo struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Id             *uint32                `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	ShouldHideHint *bool                  `protobuf:"varint,2,opt,name=should_hide_hint,json=shouldHideHint" json:"should_hide_hint,omitempty"`
	Etype          *int32                 `protobuf:"varint,3,opt,name=etype" json:"etype,omitempty"`
	IsConnected    *bool                  `protobuf:"varint,4,opt,name=is_connected,json=isConnected" json:"is_connected,omitempty"`
	IsPaired       *bool                  `protobuf:"varint,5,opt,name=is_paired,json=isPaired" json:"is_paired,omitempty"`
	StrengthRaw    *int32                 `protobuf:"varint,6,opt,name=strength_raw,json=strengthRaw" json:"strength_raw,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CMsgBluetoothManagerDeviceInfo) Reset() {
	*x = CMsgBluetoothManagerDeviceInfo{}
	mi := &file_service_bluetoothmanager_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgBluetoothManagerDeviceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgBluetoothManagerDeviceInfo) ProtoMessage() {}

func (x *CMsgBluetoothManagerDeviceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_service_bluetoothmanager_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgBluetoothManagerDeviceInfo.ProtoReflect.Descriptor instead.
func (*CMsgBluetoothManagerDeviceInfo) Descriptor() ([]byte, []int) {
	return file_service_bluetoothmanager_proto_rawDescGZIP(), []int{26}
}

func (x *CMsgBluetoothManagerDeviceInfo) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *CMsgBluetoothManagerDeviceInfo) GetShouldHideHint() bool {
	if x != nil && x.ShouldHideHint != nil {
		return *x.ShouldHideHint
	}
	return false
}

func (x *CMsgBluetoothManagerDeviceInfo) GetEtype() int32 {
	if x != nil && x.Etype != nil {
		return *x.Etype
	}
	return 0
}

func (x *CMsgBluetoothManagerDeviceInfo) GetIsConnected() bool {
	if x != nil && x.IsConnected != nil {
		return *x.IsConnected
	}
	return false
}

func (x *CMsgBluetoothManagerDeviceInfo) GetIsPaired() bool {
	if x != nil && x.IsPaired != nil {
		return *x.IsPaired
	}
	return false
}

func (x *CMsgBluetoothManagerDeviceInfo) GetStrengthRaw() int32 {
	if x != nil && x.StrengthRaw != nil {
		return *x.StrengthRaw
	}
	return 0
}

var File_service_bluetoothmanager_proto protoreflect.FileDescriptor

const file_service_bluetoothmanager_proto_rawDesc = "" +
	"\n" +
	"\x1eservice_bluetoothmanager.proto\x1a\x11common_base.proto\">\n" +
	"$CBluetoothManager_CancelPair_Request\x12\x16\n" +
	"\x06device\x18\x01 \x01(\rR\x06device\"'\n" +
	"%CBluetoothManager_CancelPair_Response\";\n" +
	"!CBluetoothManager_Connect_Request\x12\x16\n" +
	"\x06device\x18\x01 \x01(\rR\x06device\"$\n" +
	"\"CBluetoothManager_Connect_Response\">\n" +
	"$CBluetoothManager_Disconnect_Request\x12\x16\n" +
	"\x06device\x18\x01 \x01(\rR\x06device\"'\n" +
	"%CBluetoothManager_Disconnect_Response\":\n" +
	" CBluetoothManager_Forget_Request\x12\x16\n" +
	"\x06device\x18\x01 \x01(\rR\x06device\"#\n" +
	"!CBluetoothManager_Forget_Response\"=\n" +
	"+CBluetoothManager_GetAdapterDetails_Request\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\rR\x02id\"m\n" +
	",CBluetoothManager_GetAdapterDetails_Response\x12=\n" +
	"\aadapter\x18\x01 \x01(\v2#.CMsgBluetoothManagerAdapterDetailsR\aadapter\"<\n" +
	"*CBluetoothManager_GetDeviceDetails_Request\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\rR\x02id\"i\n" +
	"+CBluetoothManager_GetDeviceDetails_Response\x12:\n" +
	"\x06device\x18\x01 \x01(\v2\".CMsgBluetoothManagerDeviceDetailsR\x06device\"$\n" +
	"\"CBluetoothManager_GetState_Request\"\x96\x02\n" +
	"#CBluetoothManager_GetState_Response\x120\n" +
	"\x14is_service_available\x18\x01 \x01(\bR\x12isServiceAvailable\x12\x1d\n" +
	"\n" +
	"is_enabled\x18\x02 \x01(\bR\tisEnabled\x12%\n" +
	"\x0eis_discovering\x18\x03 \x01(\bR\risDiscovering\x12<\n" +
	"\badapters\x18\x04 \x03(\v2 .CMsgBluetoothManagerAdapterInfoR\badapters\x129\n" +
	"\adevices\x18\x05 \x03(\v2\x1f.CMsgBluetoothManagerDeviceInfoR\adevices\"8\n" +
	"\x1eCBluetoothManager_Pair_Request\x12\x16\n" +
	"\x06device\x18\x01 \x01(\rR\x06device\"!\n" +
	"\x1fCBluetoothManager_Pair_Response\"D\n" +
	"(CBluetoothManager_SetDiscovering_Request\x12\x18\n" +
	"\aenabled\x18\x01 \x01(\bR\aenabled\"+\n" +
	")CBluetoothManager_SetDiscovering_Response\"X\n" +
	"$CBluetoothManager_SetTrusted_Request\x12\x16\n" +
	"\x06device\x18\x01 \x01(\rR\x06device\x12\x18\n" +
	"\atrusted\x18\x02 \x01(\bR\atrusted\"'\n" +
	"%CBluetoothManager_SetTrusted_Response\"\\\n" +
	"(CBluetoothManager_SetWakeAllowed_Request\x12\x16\n" +
	"\x06device\x18\x01 \x01(\rR\x06device\x12\x18\n" +
	"\aallowed\x18\x02 \x01(\bR\aallowed\"+\n" +
	")CBluetoothManager_SetWakeAllowed_Response\"-\n" +
	"+CBluetoothManager_StateChanged_Notification\"\xa3\x01\n" +
	"\"CMsgBluetoothManagerAdapterDetails\x12\x11\n" +
	"\x02id\x18\x01 \x01(\r:\x010R\x02id\x12\x10\n" +
	"\x03mac\x18\x02 \x01(\tR\x03mac\x12\x12\n" +
	"\x04name\x18\x03 \x01(\tR\x04name\x12\x1d\n" +
	"\n" +
	"is_enabled\x18\x04 \x01(\bR\tisEnabled\x12%\n" +
	"\x0eis_discovering\x18\x05 \x01(\bR\risDiscovering\"1\n" +
	"\x1fCMsgBluetoothManagerAdapterInfo\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\rR\x02id\"\xd2\x03\n" +
	"!CMsgBluetoothManagerDeviceDetails\x12\x11\n" +
	"\x02id\x18\x01 \x01(\r:\x010R\x02id\x12 \n" +
	"\n" +
	"adapter_id\x18\x02 \x01(\r:\x010R\tadapterId\x12\x1e\n" +
	"\x05etype\x18\x03 \x01(\x05B\b\x82\xb5\x18\x04enumR\x05etype\x12\x10\n" +
	"\x03mac\x18\x04 \x01(\tR\x03mac\x12\x12\n" +
	"\x04name\x18\x05 \x01(\tR\x04name\x12!\n" +
	"\fis_connected\x18\x06 \x01(\bR\visConnected\x12\x1b\n" +
	"\tis_paired\x18\a \x01(\bR\bisPaired\x12\x1d\n" +
	"\n" +
	"is_pairing\x18\b \x01(\bR\tisPairing\x12!\n" +
	"\fwake_allowed\x18\t \x01(\bR\vwakeAllowed\x124\n" +
	"\x16wake_allowed_supported\x18\n" +
	" \x01(\bR\x14wakeAllowedSupported\x12'\n" +
	"\x0fbattery_percent\x18\v \x01(\x05R\x0ebatteryPercent\x122\n" +
	"\x15operation_in_progress\x18\f \x01(\bR\x13operationInProgress\x12\x1d\n" +
	"\n" +
	"is_trusted\x18\r \x01(\bR\tisTrusted\"\xdd\x01\n" +
	"\x1eCMsgBluetoothManagerDeviceInfo\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\rR\x02id\x12(\n" +
	"\x10should_hide_hint\x18\x02 \x01(\bR\x0eshouldHideHint\x12\x1e\n" +
	"\x05etype\x18\x03 \x01(\x05B\b\x82\xb5\x18\x04enumR\x05etype\x12!\n" +
	"\fis_connected\x18\x04 \x01(\bR\visConnected\x12\x1b\n" +
	"\tis_paired\x18\x05 \x01(\bR\bisPaired\x12!\n" +
	"\fstrength_raw\x18\x06 \x01(\x05R\vstrengthRaw2\xf4\b\n" +
	"\x10BluetoothManager\x12[\n" +
	"\n" +
	"CancelPair\x12%.CBluetoothManager_CancelPair_Request\x1a&.CBluetoothManager_CancelPair_Response\x12R\n" +
	"\aConnect\x12\".CBluetoothManager_Connect_Request\x1a#.CBluetoothManager_Connect_Response\x12[\n" +
	"\n" +
	"Disconnect\x12%.CBluetoothManager_Disconnect_Request\x1a&.CBluetoothManager_Disconnect_Response\x12O\n" +
	"\x06Forget\x12!.CBluetoothManager_Forget_Request\x1a\".CBluetoothManager_Forget_Response\x12p\n" +
	"\x11GetAdapterDetails\x12,.CBluetoothManager_GetAdapterDetails_Request\x1a-.CBluetoothManager_GetAdapterDetails_Response\x12m\n" +
	"\x10GetDeviceDetails\x12+.CBluetoothManager_GetDeviceDetails_Request\x1a,.CBluetoothManager_GetDeviceDetails_Response\x12U\n" +
	"\bGetState\x12#.CBluetoothManager_GetState_Request\x1a$.CBluetoothManager_GetState_Response\x12O\n" +
	"\x12NotifyStateChanged\x12,.CBluetoothManager_StateChanged_Notification\x1a\v.NoResponse\x12I\n" +
	"\x04Pair\x12\x1f.CBluetoothManager_Pair_Request\x1a .CBluetoothManager_Pair_Response\x12g\n" +
	"\x0eSetDiscovering\x12).CBluetoothManager_SetDiscovering_Request\x1a*.CBluetoothManager_SetDiscovering_Response\x12[\n" +
	"\n" +
	"SetTrusted\x12%.CBluetoothManager_SetTrusted_Request\x1a&.CBluetoothManager_SetTrusted_Response\x12g\n" +
	"\x0eSetWakeAllowed\x12).CBluetoothManager_SetWakeAllowed_Request\x1a*.CBluetoothManager_SetWakeAllowed_Response"

var (
	file_service_bluetoothmanager_proto_rawDescOnce sync.Once
	file_service_bluetoothmanager_proto_rawDescData []byte
)

func file_service_bluetoothmanager_proto_rawDescGZIP() []byte {
	file_service_bluetoothmanager_proto_rawDescOnce.Do(func() {
		file_service_bluetoothmanager_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_service_bluetoothmanager_proto_rawDesc), len(file_service_bluetoothmanager_proto_rawDesc)))
	})
	return file_service_bluetoothmanager_proto_rawDescData
}

var file_service_bluetoothmanager_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_service_bluetoothmanager_proto_goTypes = []any{
	(*CBluetoothManager_CancelPair_Request)(nil),         // 0: CBluetoothManager_CancelPair_Request
	(*CBluetoothManager_CancelPair_Response)(nil),        // 1: CBluetoothManager_CancelPair_Response
	(*CBluetoothManager_Connect_Request)(nil),            // 2: CBluetoothManager_Connect_Request
	(*CBluetoothManager_Connect_Response)(nil),           // 3: CBluetoothManager_Connect_Response
	(*CBluetoothManager_Disconnect_Request)(nil),         // 4: CBluetoothManager_Disconnect_Request
	(*CBluetoothManager_Disconnect_Response)(nil),        // 5: CBluetoothManager_Disconnect_Response
	(*CBluetoothManager_Forget_Request)(nil),             // 6: CBluetoothManager_Forget_Request
	(*CBluetoothManager_Forget_Response)(nil),            // 7: CBluetoothManager_Forget_Response
	(*CBluetoothManager_GetAdapterDetails_Request)(nil),  // 8: CBluetoothManager_GetAdapterDetails_Request
	(*CBluetoothManager_GetAdapterDetails_Response)(nil), // 9: CBluetoothManager_GetAdapterDetails_Response
	(*CBluetoothManager_GetDeviceDetails_Request)(nil),   // 10: CBluetoothManager_GetDeviceDetails_Request
	(*CBluetoothManager_GetDeviceDetails_Response)(nil),  // 11: CBluetoothManager_GetDeviceDetails_Response
	(*CBluetoothManager_GetState_Request)(nil),           // 12: CBluetoothManager_GetState_Request
	(*CBluetoothManager_GetState_Response)(nil),          // 13: CBluetoothManager_GetState_Response
	(*CBluetoothManager_Pair_Request)(nil),               // 14: CBluetoothManager_Pair_Request
	(*CBluetoothManager_Pair_Response)(nil),              // 15: CBluetoothManager_Pair_Response
	(*CBluetoothManager_SetDiscovering_Request)(nil),     // 16: CBluetoothManager_SetDiscovering_Request
	(*CBluetoothManager_SetDiscovering_Response)(nil),    // 17: CBluetoothManager_SetDiscovering_Response
	(*CBluetoothManager_SetTrusted_Request)(nil),         // 18: CBluetoothManager_SetTrusted_Request
	(*CBluetoothManager_SetTrusted_Response)(nil),        // 19: CBluetoothManager_SetTrusted_Response
	(*CBluetoothManager_SetWakeAllowed_Request)(nil),     // 20: CBluetoothManager_SetWakeAllowed_Request
	(*CBluetoothManager_SetWakeAllowed_Response)(nil),    // 21: CBluetoothManager_SetWakeAllowed_Response
	(*CBluetoothManager_StateChanged_Notification)(nil),  // 22: CBluetoothManager_StateChanged_Notification
	(*CMsgBluetoothManagerAdapterDetails)(nil),           // 23: CMsgBluetoothManagerAdapterDetails
	(*CMsgBluetoothManagerAdapterInfo)(nil),              // 24: CMsgBluetoothManagerAdapterInfo
	(*CMsgBluetoothManagerDeviceDetails)(nil),            // 25: CMsgBluetoothManagerDeviceDetails
	(*CMsgBluetoothManagerDeviceInfo)(nil),               // 26: CMsgBluetoothManagerDeviceInfo
	(*NoResponse)(nil),                                   // 27: NoResponse
}
var file_service_bluetoothmanager_proto_depIdxs = []int32{
	23, // 0: CBluetoothManager_GetAdapterDetails_Response.adapter:type_name -> CMsgBluetoothManagerAdapterDetails
	25, // 1: CBluetoothManager_GetDeviceDetails_Response.device:type_name -> CMsgBluetoothManagerDeviceDetails
	24, // 2: CBluetoothManager_GetState_Response.adapters:type_name -> CMsgBluetoothManagerAdapterInfo
	26, // 3: CBluetoothManager_GetState_Response.devices:type_name -> CMsgBluetoothManagerDeviceInfo
	0,  // 4: BluetoothManager.CancelPair:input_type -> CBluetoothManager_CancelPair_Request
	2,  // 5: BluetoothManager.Connect:input_type -> CBluetoothManager_Connect_Request
	4,  // 6: BluetoothManager.Disconnect:input_type -> CBluetoothManager_Disconnect_Request
	6,  // 7: BluetoothManager.Forget:input_type -> CBluetoothManager_Forget_Request
	8,  // 8: BluetoothManager.GetAdapterDetails:input_type -> CBluetoothManager_GetAdapterDetails_Request
	10, // 9: BluetoothManager.GetDeviceDetails:input_type -> CBluetoothManager_GetDeviceDetails_Request
	12, // 10: BluetoothManager.GetState:input_type -> CBluetoothManager_GetState_Request
	22, // 11: BluetoothManager.NotifyStateChanged:input_type -> CBluetoothManager_StateChanged_Notification
	14, // 12: BluetoothManager.Pair:input_type -> CBluetoothManager_Pair_Request
	16, // 13: BluetoothManager.SetDiscovering:input_type -> CBluetoothManager_SetDiscovering_Request
	18, // 14: BluetoothManager.SetTrusted:input_type -> CBluetoothManager_SetTrusted_Request
	20, // 15: BluetoothManager.SetWakeAllowed:input_type -> CBluetoothManager_SetWakeAllowed_Request
	1,  // 16: BluetoothManager.CancelPair:output_type -> CBluetoothManager_CancelPair_Response
	3,  // 17: BluetoothManager.Connect:output_type -> CBluetoothManager_Connect_Response
	5,  // 18: BluetoothManager.Disconnect:output_type -> CBluetoothManager_Disconnect_Response
	7,  // 19: BluetoothManager.Forget:output_type -> CBluetoothManager_Forget_Response
	9,  // 20: BluetoothManager.GetAdapterDetails:output_type -> CBluetoothManager_GetAdapterDetails_Response
	11, // 21: BluetoothManager.GetDeviceDetails:output_type -> CBluetoothManager_GetDeviceDetails_Response
	13, // 22: BluetoothManager.GetState:output_type -> CBluetoothManager_GetState_Response
	27, // 23: BluetoothManager.NotifyStateChanged:output_type -> NoResponse
	15, // 24: BluetoothManager.Pair:output_type -> CBluetoothManager_Pair_Response
	17, // 25: BluetoothManager.SetDiscovering:output_type -> CBluetoothManager_SetDiscovering_Response
	19, // 26: BluetoothManager.SetTrusted:output_type -> CBluetoothManager_SetTrusted_Response
	21, // 27: BluetoothManager.SetWakeAllowed:output_type -> CBluetoothManager_SetWakeAllowed_Response
	16, // [16:28] is the sub-list for method output_type
	4,  // [4:16] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_service_bluetoothmanager_proto_init() }
func file_service_bluetoothmanager_proto_init() {
	if File_service_bluetoothmanager_proto != nil {
		return
	}
	file_common_base_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_service_bluetoothmanager_proto_rawDesc), len(file_service_bluetoothmanager_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_bluetoothmanager_proto_goTypes,
		DependencyIndexes: file_service_bluetoothmanager_proto_depIdxs,
		MessageInfos:      file_service_bluetoothmanager_proto_msgTypes,
	}.Build()
	File_service_bluetoothmanager_proto = out.File
	file_service_bluetoothmanager_proto_goTypes = nil
	file_service_bluetoothmanager_proto_depIdxs = nil
}
