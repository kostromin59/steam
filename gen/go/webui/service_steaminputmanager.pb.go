// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.32.0
// source: service_steaminputmanager.proto

package webui

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CControllerAccessibilityString struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Key             *CControllerOriginKey  `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	LocalizedString *string                `protobuf:"bytes,2,opt,name=localized_string,json=localizedString" json:"localized_string,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CControllerAccessibilityString) Reset() {
	*x = CControllerAccessibilityString{}
	mi := &file_service_steaminputmanager_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CControllerAccessibilityString) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CControllerAccessibilityString) ProtoMessage() {}

func (x *CControllerAccessibilityString) ProtoReflect() protoreflect.Message {
	mi := &file_service_steaminputmanager_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CControllerAccessibilityString.ProtoReflect.Descriptor instead.
func (*CControllerAccessibilityString) Descriptor() ([]byte, []int) {
	return file_service_steaminputmanager_proto_rawDescGZIP(), []int{0}
}

func (x *CControllerAccessibilityString) GetKey() *CControllerOriginKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *CControllerAccessibilityString) GetLocalizedString() string {
	if x != nil && x.LocalizedString != nil {
		return *x.LocalizedString
	}
	return ""
}

type CControllerOriginKey struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	ControllerType  *int32                 `protobuf:"varint,1,opt,name=controller_type,json=controllerType" json:"controller_type,omitempty"`
	ControllerStyle *int32                 `protobuf:"varint,2,opt,name=controller_style,json=controllerStyle" json:"controller_style,omitempty"`
	Source          *int32                 `protobuf:"varint,3,opt,name=source" json:"source,omitempty"`
	Input           *int32                 `protobuf:"varint,4,opt,name=input" json:"input,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CControllerOriginKey) Reset() {
	*x = CControllerOriginKey{}
	mi := &file_service_steaminputmanager_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CControllerOriginKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CControllerOriginKey) ProtoMessage() {}

func (x *CControllerOriginKey) ProtoReflect() protoreflect.Message {
	mi := &file_service_steaminputmanager_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CControllerOriginKey.ProtoReflect.Descriptor instead.
func (*CControllerOriginKey) Descriptor() ([]byte, []int) {
	return file_service_steaminputmanager_proto_rawDescGZIP(), []int{1}
}

func (x *CControllerOriginKey) GetControllerType() int32 {
	if x != nil && x.ControllerType != nil {
		return *x.ControllerType
	}
	return 0
}

func (x *CControllerOriginKey) GetControllerStyle() int32 {
	if x != nil && x.ControllerStyle != nil {
		return *x.ControllerStyle
	}
	return 0
}

func (x *CControllerOriginKey) GetSource() int32 {
	if x != nil && x.Source != nil {
		return *x.Source
	}
	return 0
}

func (x *CControllerOriginKey) GetInput() int32 {
	if x != nil && x.Input != nil {
		return *x.Input
	}
	return 0
}

type ControllerGyroEulerAngles struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pitch         *float32               `protobuf:"fixed32,1,opt,name=pitch" json:"pitch,omitempty"`
	Yaw           *float32               `protobuf:"fixed32,2,opt,name=yaw" json:"yaw,omitempty"`
	Roll          *float32               `protobuf:"fixed32,3,opt,name=roll" json:"roll,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ControllerGyroEulerAngles) Reset() {
	*x = ControllerGyroEulerAngles{}
	mi := &file_service_steaminputmanager_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ControllerGyroEulerAngles) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControllerGyroEulerAngles) ProtoMessage() {}

func (x *ControllerGyroEulerAngles) ProtoReflect() protoreflect.Message {
	mi := &file_service_steaminputmanager_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControllerGyroEulerAngles.ProtoReflect.Descriptor instead.
func (*ControllerGyroEulerAngles) Descriptor() ([]byte, []int) {
	return file_service_steaminputmanager_proto_rawDescGZIP(), []int{2}
}

func (x *ControllerGyroEulerAngles) GetPitch() float32 {
	if x != nil && x.Pitch != nil {
		return *x.Pitch
	}
	return 0
}

func (x *ControllerGyroEulerAngles) GetYaw() float32 {
	if x != nil && x.Yaw != nil {
		return *x.Yaw
	}
	return 0
}

func (x *ControllerGyroEulerAngles) GetRoll() float32 {
	if x != nil && x.Roll != nil {
		return *x.Roll
	}
	return 0
}

type ControllerQuaternion struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	W             *float32               `protobuf:"fixed32,1,opt,name=w" json:"w,omitempty"`
	X             *float32               `protobuf:"fixed32,2,opt,name=x" json:"x,omitempty"`
	Y             *float32               `protobuf:"fixed32,3,opt,name=y" json:"y,omitempty"`
	Z             *float32               `protobuf:"fixed32,4,opt,name=z" json:"z,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ControllerQuaternion) Reset() {
	*x = ControllerQuaternion{}
	mi := &file_service_steaminputmanager_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ControllerQuaternion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControllerQuaternion) ProtoMessage() {}

func (x *ControllerQuaternion) ProtoReflect() protoreflect.Message {
	mi := &file_service_steaminputmanager_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControllerQuaternion.ProtoReflect.Descriptor instead.
func (*ControllerQuaternion) Descriptor() ([]byte, []int) {
	return file_service_steaminputmanager_proto_rawDescGZIP(), []int{3}
}

func (x *ControllerQuaternion) GetW() float32 {
	if x != nil && x.W != nil {
		return *x.W
	}
	return 0
}

func (x *ControllerQuaternion) GetX() float32 {
	if x != nil && x.X != nil {
		return *x.X
	}
	return 0
}

func (x *ControllerQuaternion) GetY() float32 {
	if x != nil && x.Y != nil {
		return *x.Y
	}
	return 0
}

func (x *ControllerQuaternion) GetZ() float32 {
	if x != nil && x.Z != nil {
		return *x.Z
	}
	return 0
}

type ControllerVector2 struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	X             *float32               `protobuf:"fixed32,1,opt,name=x" json:"x,omitempty"`
	Y             *float32               `protobuf:"fixed32,2,opt,name=y" json:"y,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ControllerVector2) Reset() {
	*x = ControllerVector2{}
	mi := &file_service_steaminputmanager_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ControllerVector2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControllerVector2) ProtoMessage() {}

func (x *ControllerVector2) ProtoReflect() protoreflect.Message {
	mi := &file_service_steaminputmanager_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControllerVector2.ProtoReflect.Descriptor instead.
func (*ControllerVector2) Descriptor() ([]byte, []int) {
	return file_service_steaminputmanager_proto_rawDescGZIP(), []int{4}
}

func (x *ControllerVector2) GetX() float32 {
	if x != nil && x.X != nil {
		return *x.X
	}
	return 0
}

func (x *ControllerVector2) GetY() float32 {
	if x != nil && x.Y != nil {
		return *x.Y
	}
	return 0
}

type ControllerVector3 struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	X             *float32               `protobuf:"fixed32,1,opt,name=x" json:"x,omitempty"`
	Y             *float32               `protobuf:"fixed32,2,opt,name=y" json:"y,omitempty"`
	Z             *float32               `protobuf:"fixed32,3,opt,name=z" json:"z,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ControllerVector3) Reset() {
	*x = ControllerVector3{}
	mi := &file_service_steaminputmanager_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ControllerVector3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControllerVector3) ProtoMessage() {}

func (x *ControllerVector3) ProtoReflect() protoreflect.Message {
	mi := &file_service_steaminputmanager_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControllerVector3.ProtoReflect.Descriptor instead.
func (*ControllerVector3) Descriptor() ([]byte, []int) {
	return file_service_steaminputmanager_proto_rawDescGZIP(), []int{5}
}

func (x *ControllerVector3) GetX() float32 {
	if x != nil && x.X != nil {
		return *x.X
	}
	return 0
}

func (x *ControllerVector3) GetY() float32 {
	if x != nil && x.Y != nil {
		return *x.Y
	}
	return 0
}

func (x *ControllerVector3) GetZ() float32 {
	if x != nil && x.Z != nil {
		return *x.Z
	}
	return 0
}

type CSteamInputService_ControllerAccessibilityStrings_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CSteamInputService_ControllerAccessibilityStrings_Request) Reset() {
	*x = CSteamInputService_ControllerAccessibilityStrings_Request{}
	mi := &file_service_steaminputmanager_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamInputService_ControllerAccessibilityStrings_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamInputService_ControllerAccessibilityStrings_Request) ProtoMessage() {}

func (x *CSteamInputService_ControllerAccessibilityStrings_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_steaminputmanager_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamInputService_ControllerAccessibilityStrings_Request.ProtoReflect.Descriptor instead.
func (*CSteamInputService_ControllerAccessibilityStrings_Request) Descriptor() ([]byte, []int) {
	return file_service_steaminputmanager_proto_rawDescGZIP(), []int{6}
}

type CSteamInputService_ControllerAccessibilityStrings_Response struct {
	state         protoimpl.MessageState            `protogen:"open.v1"`
	Strings       []*CControllerAccessibilityString `protobuf:"bytes,1,rep,name=strings" json:"strings,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CSteamInputService_ControllerAccessibilityStrings_Response) Reset() {
	*x = CSteamInputService_ControllerAccessibilityStrings_Response{}
	mi := &file_service_steaminputmanager_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamInputService_ControllerAccessibilityStrings_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamInputService_ControllerAccessibilityStrings_Response) ProtoMessage() {}

func (x *CSteamInputService_ControllerAccessibilityStrings_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_steaminputmanager_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamInputService_ControllerAccessibilityStrings_Response.ProtoReflect.Descriptor instead.
func (*CSteamInputService_ControllerAccessibilityStrings_Response) Descriptor() ([]byte, []int) {
	return file_service_steaminputmanager_proto_rawDescGZIP(), []int{7}
}

func (x *CSteamInputService_ControllerAccessibilityStrings_Response) GetStrings() []*CControllerAccessibilityString {
	if x != nil {
		return x.Strings
	}
	return nil
}

type CSteamInputService_ControllerAxesStateChange_Notification struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	ControllerIndex       *uint32                `protobuf:"varint,1,opt,name=controller_index,json=controllerIndex" json:"controller_index,omitempty"`
	JoystickLeft          *ControllerVector2     `protobuf:"bytes,2,opt,name=joystick_left,json=joystickLeft" json:"joystick_left,omitempty"`
	JoystickRight         *ControllerVector2     `protobuf:"bytes,3,opt,name=joystick_right,json=joystickRight" json:"joystick_right,omitempty"`
	TrackpadLeft          *ControllerVector2     `protobuf:"bytes,4,opt,name=trackpad_left,json=trackpadLeft" json:"trackpad_left,omitempty"`
	TrackpadRight         *ControllerVector2     `protobuf:"bytes,5,opt,name=trackpad_right,json=trackpadRight" json:"trackpad_right,omitempty"`
	TrackpadCenter        *ControllerVector2     `protobuf:"bytes,6,opt,name=trackpad_center,json=trackpadCenter" json:"trackpad_center,omitempty"`
	TrackpadPressureLeft  *float32               `protobuf:"fixed32,7,opt,name=trackpad_pressure_left,json=trackpadPressureLeft" json:"trackpad_pressure_left,omitempty"`
	TrackpadPressureRight *float32               `protobuf:"fixed32,8,opt,name=trackpad_pressure_right,json=trackpadPressureRight" json:"trackpad_pressure_right,omitempty"`
	TriggerLeft           *float32               `protobuf:"fixed32,9,opt,name=trigger_left,json=triggerLeft" json:"trigger_left,omitempty"`
	TriggerRight          *float32               `protobuf:"fixed32,10,opt,name=trigger_right,json=triggerRight" json:"trigger_right,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *CSteamInputService_ControllerAxesStateChange_Notification) Reset() {
	*x = CSteamInputService_ControllerAxesStateChange_Notification{}
	mi := &file_service_steaminputmanager_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamInputService_ControllerAxesStateChange_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamInputService_ControllerAxesStateChange_Notification) ProtoMessage() {}

func (x *CSteamInputService_ControllerAxesStateChange_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_service_steaminputmanager_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamInputService_ControllerAxesStateChange_Notification.ProtoReflect.Descriptor instead.
func (*CSteamInputService_ControllerAxesStateChange_Notification) Descriptor() ([]byte, []int) {
	return file_service_steaminputmanager_proto_rawDescGZIP(), []int{8}
}

func (x *CSteamInputService_ControllerAxesStateChange_Notification) GetControllerIndex() uint32 {
	if x != nil && x.ControllerIndex != nil {
		return *x.ControllerIndex
	}
	return 0
}

func (x *CSteamInputService_ControllerAxesStateChange_Notification) GetJoystickLeft() *ControllerVector2 {
	if x != nil {
		return x.JoystickLeft
	}
	return nil
}

func (x *CSteamInputService_ControllerAxesStateChange_Notification) GetJoystickRight() *ControllerVector2 {
	if x != nil {
		return x.JoystickRight
	}
	return nil
}

func (x *CSteamInputService_ControllerAxesStateChange_Notification) GetTrackpadLeft() *ControllerVector2 {
	if x != nil {
		return x.TrackpadLeft
	}
	return nil
}

func (x *CSteamInputService_ControllerAxesStateChange_Notification) GetTrackpadRight() *ControllerVector2 {
	if x != nil {
		return x.TrackpadRight
	}
	return nil
}

func (x *CSteamInputService_ControllerAxesStateChange_Notification) GetTrackpadCenter() *ControllerVector2 {
	if x != nil {
		return x.TrackpadCenter
	}
	return nil
}

func (x *CSteamInputService_ControllerAxesStateChange_Notification) GetTrackpadPressureLeft() float32 {
	if x != nil && x.TrackpadPressureLeft != nil {
		return *x.TrackpadPressureLeft
	}
	return 0
}

func (x *CSteamInputService_ControllerAxesStateChange_Notification) GetTrackpadPressureRight() float32 {
	if x != nil && x.TrackpadPressureRight != nil {
		return *x.TrackpadPressureRight
	}
	return 0
}

func (x *CSteamInputService_ControllerAxesStateChange_Notification) GetTriggerLeft() float32 {
	if x != nil && x.TriggerLeft != nil {
		return *x.TriggerLeft
	}
	return 0
}

func (x *CSteamInputService_ControllerAxesStateChange_Notification) GetTriggerRight() float32 {
	if x != nil && x.TriggerRight != nil {
		return *x.TriggerRight
	}
	return 0
}

type CSteamInputService_ControllerButtonStateChanged_Notification struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	ControllerIndex     *uint32                `protobuf:"varint,1,opt,name=controller_index,json=controllerIndex" json:"controller_index,omitempty"`
	DpadUp              *bool                  `protobuf:"varint,2,opt,name=dpad_up,json=dpadUp" json:"dpad_up,omitempty"`
	DpadDown            *bool                  `protobuf:"varint,3,opt,name=dpad_down,json=dpadDown" json:"dpad_down,omitempty"`
	DpadLeft            *bool                  `protobuf:"varint,4,opt,name=dpad_left,json=dpadLeft" json:"dpad_left,omitempty"`
	DpadRight           *bool                  `protobuf:"varint,5,opt,name=dpad_right,json=dpadRight" json:"dpad_right,omitempty"`
	ButtonSouth         *bool                  `protobuf:"varint,6,opt,name=button_south,json=buttonSouth" json:"button_south,omitempty"`
	ButtonEast          *bool                  `protobuf:"varint,7,opt,name=button_east,json=buttonEast" json:"button_east,omitempty"`
	ButtonWest          *bool                  `protobuf:"varint,8,opt,name=button_west,json=buttonWest" json:"button_west,omitempty"`
	ButtonNorth         *bool                  `protobuf:"varint,9,opt,name=button_north,json=buttonNorth" json:"button_north,omitempty"`
	ButtonBackView      *bool                  `protobuf:"varint,10,opt,name=button_back_view,json=buttonBackView" json:"button_back_view,omitempty"`
	ButtonStartOptions  *bool                  `protobuf:"varint,11,opt,name=button_start_options,json=buttonStartOptions" json:"button_start_options,omitempty"`
	ButtonSteam         *bool                  `protobuf:"varint,12,opt,name=button_steam,json=buttonSteam" json:"button_steam,omitempty"`
	ButtonQuickAccess   *bool                  `protobuf:"varint,13,opt,name=button_quick_access,json=buttonQuickAccess" json:"button_quick_access,omitempty"`
	ButtonMuteCapture   *bool                  `protobuf:"varint,14,opt,name=button_mute_capture,json=buttonMuteCapture" json:"button_mute_capture,omitempty"`
	LeftStickClick      *bool                  `protobuf:"varint,15,opt,name=left_stick_click,json=leftStickClick" json:"left_stick_click,omitempty"`
	LeftStickTouch      *bool                  `protobuf:"varint,16,opt,name=left_stick_touch,json=leftStickTouch" json:"left_stick_touch,omitempty"`
	LeftStickDeflect    *bool                  `protobuf:"varint,17,opt,name=left_stick_deflect,json=leftStickDeflect" json:"left_stick_deflect,omitempty"`
	RightStickClick     *bool                  `protobuf:"varint,18,opt,name=right_stick_click,json=rightStickClick" json:"right_stick_click,omitempty"`
	RightStickTouch     *bool                  `protobuf:"varint,19,opt,name=right_stick_touch,json=rightStickTouch" json:"right_stick_touch,omitempty"`
	RightStickDeflect   *bool                  `protobuf:"varint,20,opt,name=right_stick_deflect,json=rightStickDeflect" json:"right_stick_deflect,omitempty"`
	CenterTrackpadTouch *bool                  `protobuf:"varint,21,opt,name=center_trackpad_touch,json=centerTrackpadTouch" json:"center_trackpad_touch,omitempty"`
	CenterTrackpadClick *bool                  `protobuf:"varint,22,opt,name=center_trackpad_click,json=centerTrackpadClick" json:"center_trackpad_click,omitempty"`
	LeftTrackpadTouch   *bool                  `protobuf:"varint,23,opt,name=left_trackpad_touch,json=leftTrackpadTouch" json:"left_trackpad_touch,omitempty"`
	LeftTrackpadClick   *bool                  `protobuf:"varint,24,opt,name=left_trackpad_click,json=leftTrackpadClick" json:"left_trackpad_click,omitempty"`
	RightTrackpadTouch  *bool                  `protobuf:"varint,25,opt,name=right_trackpad_touch,json=rightTrackpadTouch" json:"right_trackpad_touch,omitempty"`
	RightTrackpadClick  *bool                  `protobuf:"varint,26,opt,name=right_trackpad_click,json=rightTrackpadClick" json:"right_trackpad_click,omitempty"`
	LeftBumper          *bool                  `protobuf:"varint,27,opt,name=left_bumper,json=leftBumper" json:"left_bumper,omitempty"`
	LeftTrigger         *bool                  `protobuf:"varint,28,opt,name=left_trigger,json=leftTrigger" json:"left_trigger,omitempty"`
	L4                  *bool                  `protobuf:"varint,29,opt,name=l4" json:"l4,omitempty"`
	L5                  *bool                  `protobuf:"varint,30,opt,name=l5" json:"l5,omitempty"`
	LeftAux             *bool                  `protobuf:"varint,31,opt,name=left_aux,json=leftAux" json:"left_aux,omitempty"`
	RightBumper         *bool                  `protobuf:"varint,32,opt,name=right_bumper,json=rightBumper" json:"right_bumper,omitempty"`
	RightTrigger        *bool                  `protobuf:"varint,33,opt,name=right_trigger,json=rightTrigger" json:"right_trigger,omitempty"`
	R4                  *bool                  `protobuf:"varint,34,opt,name=r4" json:"r4,omitempty"`
	R5                  *bool                  `protobuf:"varint,35,opt,name=r5" json:"r5,omitempty"`
	RightAux            *bool                  `protobuf:"varint,36,opt,name=right_aux,json=rightAux" json:"right_aux,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *CSteamInputService_ControllerButtonStateChanged_Notification) Reset() {
	*x = CSteamInputService_ControllerButtonStateChanged_Notification{}
	mi := &file_service_steaminputmanager_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamInputService_ControllerButtonStateChanged_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamInputService_ControllerButtonStateChanged_Notification) ProtoMessage() {}

func (x *CSteamInputService_ControllerButtonStateChanged_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_service_steaminputmanager_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamInputService_ControllerButtonStateChanged_Notification.ProtoReflect.Descriptor instead.
func (*CSteamInputService_ControllerButtonStateChanged_Notification) Descriptor() ([]byte, []int) {
	return file_service_steaminputmanager_proto_rawDescGZIP(), []int{9}
}

func (x *CSteamInputService_ControllerButtonStateChanged_Notification) GetControllerIndex() uint32 {
	if x != nil && x.ControllerIndex != nil {
		return *x.ControllerIndex
	}
	return 0
}

func (x *CSteamInputService_ControllerButtonStateChanged_Notification) GetDpadUp() bool {
	if x != nil && x.DpadUp != nil {
		return *x.DpadUp
	}
	return false
}

func (x *CSteamInputService_ControllerButtonStateChanged_Notification) GetDpadDown() bool {
	if x != nil && x.DpadDown != nil {
		return *x.DpadDown
	}
	return false
}

func (x *CSteamInputService_ControllerButtonStateChanged_Notification) GetDpadLeft() bool {
	if x != nil && x.DpadLeft != nil {
		return *x.DpadLeft
	}
	return false
}

func (x *CSteamInputService_ControllerButtonStateChanged_Notification) GetDpadRight() bool {
	if x != nil && x.DpadRight != nil {
		return *x.DpadRight
	}
	return false
}

func (x *CSteamInputService_ControllerButtonStateChanged_Notification) GetButtonSouth() bool {
	if x != nil && x.ButtonSouth != nil {
		return *x.ButtonSouth
	}
	return false
}

func (x *CSteamInputService_ControllerButtonStateChanged_Notification) GetButtonEast() bool {
	if x != nil && x.ButtonEast != nil {
		return *x.ButtonEast
	}
	return false
}

func (x *CSteamInputService_ControllerButtonStateChanged_Notification) GetButtonWest() bool {
	if x != nil && x.ButtonWest != nil {
		return *x.ButtonWest
	}
	return false
}

func (x *CSteamInputService_ControllerButtonStateChanged_Notification) GetButtonNorth() bool {
	if x != nil && x.ButtonNorth != nil {
		return *x.ButtonNorth
	}
	return false
}

func (x *CSteamInputService_ControllerButtonStateChanged_Notification) GetButtonBackView() bool {
	if x != nil && x.ButtonBackView != nil {
		return *x.ButtonBackView
	}
	return false
}

func (x *CSteamInputService_ControllerButtonStateChanged_Notification) GetButtonStartOptions() bool {
	if x != nil && x.ButtonStartOptions != nil {
		return *x.ButtonStartOptions
	}
	return false
}

func (x *CSteamInputService_ControllerButtonStateChanged_Notification) GetButtonSteam() bool {
	if x != nil && x.ButtonSteam != nil {
		return *x.ButtonSteam
	}
	return false
}

func (x *CSteamInputService_ControllerButtonStateChanged_Notification) GetButtonQuickAccess() bool {
	if x != nil && x.ButtonQuickAccess != nil {
		return *x.ButtonQuickAccess
	}
	return false
}

func (x *CSteamInputService_ControllerButtonStateChanged_Notification) GetButtonMuteCapture() bool {
	if x != nil && x.ButtonMuteCapture != nil {
		return *x.ButtonMuteCapture
	}
	return false
}

func (x *CSteamInputService_ControllerButtonStateChanged_Notification) GetLeftStickClick() bool {
	if x != nil && x.LeftStickClick != nil {
		return *x.LeftStickClick
	}
	return false
}

func (x *CSteamInputService_ControllerButtonStateChanged_Notification) GetLeftStickTouch() bool {
	if x != nil && x.LeftStickTouch != nil {
		return *x.LeftStickTouch
	}
	return false
}

func (x *CSteamInputService_ControllerButtonStateChanged_Notification) GetLeftStickDeflect() bool {
	if x != nil && x.LeftStickDeflect != nil {
		return *x.LeftStickDeflect
	}
	return false
}

func (x *CSteamInputService_ControllerButtonStateChanged_Notification) GetRightStickClick() bool {
	if x != nil && x.RightStickClick != nil {
		return *x.RightStickClick
	}
	return false
}

func (x *CSteamInputService_ControllerButtonStateChanged_Notification) GetRightStickTouch() bool {
	if x != nil && x.RightStickTouch != nil {
		return *x.RightStickTouch
	}
	return false
}

func (x *CSteamInputService_ControllerButtonStateChanged_Notification) GetRightStickDeflect() bool {
	if x != nil && x.RightStickDeflect != nil {
		return *x.RightStickDeflect
	}
	return false
}

func (x *CSteamInputService_ControllerButtonStateChanged_Notification) GetCenterTrackpadTouch() bool {
	if x != nil && x.CenterTrackpadTouch != nil {
		return *x.CenterTrackpadTouch
	}
	return false
}

func (x *CSteamInputService_ControllerButtonStateChanged_Notification) GetCenterTrackpadClick() bool {
	if x != nil && x.CenterTrackpadClick != nil {
		return *x.CenterTrackpadClick
	}
	return false
}

func (x *CSteamInputService_ControllerButtonStateChanged_Notification) GetLeftTrackpadTouch() bool {
	if x != nil && x.LeftTrackpadTouch != nil {
		return *x.LeftTrackpadTouch
	}
	return false
}

func (x *CSteamInputService_ControllerButtonStateChanged_Notification) GetLeftTrackpadClick() bool {
	if x != nil && x.LeftTrackpadClick != nil {
		return *x.LeftTrackpadClick
	}
	return false
}

func (x *CSteamInputService_ControllerButtonStateChanged_Notification) GetRightTrackpadTouch() bool {
	if x != nil && x.RightTrackpadTouch != nil {
		return *x.RightTrackpadTouch
	}
	return false
}

func (x *CSteamInputService_ControllerButtonStateChanged_Notification) GetRightTrackpadClick() bool {
	if x != nil && x.RightTrackpadClick != nil {
		return *x.RightTrackpadClick
	}
	return false
}

func (x *CSteamInputService_ControllerButtonStateChanged_Notification) GetLeftBumper() bool {
	if x != nil && x.LeftBumper != nil {
		return *x.LeftBumper
	}
	return false
}

func (x *CSteamInputService_ControllerButtonStateChanged_Notification) GetLeftTrigger() bool {
	if x != nil && x.LeftTrigger != nil {
		return *x.LeftTrigger
	}
	return false
}

func (x *CSteamInputService_ControllerButtonStateChanged_Notification) GetL4() bool {
	if x != nil && x.L4 != nil {
		return *x.L4
	}
	return false
}

func (x *CSteamInputService_ControllerButtonStateChanged_Notification) GetL5() bool {
	if x != nil && x.L5 != nil {
		return *x.L5
	}
	return false
}

func (x *CSteamInputService_ControllerButtonStateChanged_Notification) GetLeftAux() bool {
	if x != nil && x.LeftAux != nil {
		return *x.LeftAux
	}
	return false
}

func (x *CSteamInputService_ControllerButtonStateChanged_Notification) GetRightBumper() bool {
	if x != nil && x.RightBumper != nil {
		return *x.RightBumper
	}
	return false
}

func (x *CSteamInputService_ControllerButtonStateChanged_Notification) GetRightTrigger() bool {
	if x != nil && x.RightTrigger != nil {
		return *x.RightTrigger
	}
	return false
}

func (x *CSteamInputService_ControllerButtonStateChanged_Notification) GetR4() bool {
	if x != nil && x.R4 != nil {
		return *x.R4
	}
	return false
}

func (x *CSteamInputService_ControllerButtonStateChanged_Notification) GetR5() bool {
	if x != nil && x.R5 != nil {
		return *x.R5
	}
	return false
}

func (x *CSteamInputService_ControllerButtonStateChanged_Notification) GetRightAux() bool {
	if x != nil && x.RightAux != nil {
		return *x.RightAux
	}
	return false
}

type CSteamInputService_ControllerStateFlow_Request struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	ControllerIndex *uint32                `protobuf:"varint,1,opt,name=controller_index,json=controllerIndex" json:"controller_index,omitempty"`
	FlowMode        *uint32                `protobuf:"varint,2,opt,name=flow_mode,json=flowMode" json:"flow_mode,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CSteamInputService_ControllerStateFlow_Request) Reset() {
	*x = CSteamInputService_ControllerStateFlow_Request{}
	mi := &file_service_steaminputmanager_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamInputService_ControllerStateFlow_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamInputService_ControllerStateFlow_Request) ProtoMessage() {}

func (x *CSteamInputService_ControllerStateFlow_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_steaminputmanager_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamInputService_ControllerStateFlow_Request.ProtoReflect.Descriptor instead.
func (*CSteamInputService_ControllerStateFlow_Request) Descriptor() ([]byte, []int) {
	return file_service_steaminputmanager_proto_rawDescGZIP(), []int{10}
}

func (x *CSteamInputService_ControllerStateFlow_Request) GetControllerIndex() uint32 {
	if x != nil && x.ControllerIndex != nil {
		return *x.ControllerIndex
	}
	return 0
}

func (x *CSteamInputService_ControllerStateFlow_Request) GetFlowMode() uint32 {
	if x != nil && x.FlowMode != nil {
		return *x.FlowMode
	}
	return 0
}

type CSteamInputService_ControllerStateFlow_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CSteamInputService_ControllerStateFlow_Response) Reset() {
	*x = CSteamInputService_ControllerStateFlow_Response{}
	mi := &file_service_steaminputmanager_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamInputService_ControllerStateFlow_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamInputService_ControllerStateFlow_Response) ProtoMessage() {}

func (x *CSteamInputService_ControllerStateFlow_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_steaminputmanager_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamInputService_ControllerStateFlow_Response.ProtoReflect.Descriptor instead.
func (*CSteamInputService_ControllerStateFlow_Response) Descriptor() ([]byte, []int) {
	return file_service_steaminputmanager_proto_rawDescGZIP(), []int{11}
}

type CSteamInputService_GyroAccelerometerChanged_Notification struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	ControllerIndex   *uint32                `protobuf:"varint,1,opt,name=controller_index,json=controllerIndex" json:"controller_index,omitempty"`
	ImuIndex          *uint32                `protobuf:"varint,2,opt,name=imu_index,json=imuIndex" json:"imu_index,omitempty"`
	Acceleromter_1G   *ControllerVector3     `protobuf:"bytes,4,opt,name=acceleromter_1g,json=acceleromter1g" json:"acceleromter_1g,omitempty"`
	TrustedGravity_1G *ControllerVector3     `protobuf:"bytes,5,opt,name=trusted_gravity_1g,json=trustedGravity1g" json:"trusted_gravity_1g,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *CSteamInputService_GyroAccelerometerChanged_Notification) Reset() {
	*x = CSteamInputService_GyroAccelerometerChanged_Notification{}
	mi := &file_service_steaminputmanager_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamInputService_GyroAccelerometerChanged_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamInputService_GyroAccelerometerChanged_Notification) ProtoMessage() {}

func (x *CSteamInputService_GyroAccelerometerChanged_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_service_steaminputmanager_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamInputService_GyroAccelerometerChanged_Notification.ProtoReflect.Descriptor instead.
func (*CSteamInputService_GyroAccelerometerChanged_Notification) Descriptor() ([]byte, []int) {
	return file_service_steaminputmanager_proto_rawDescGZIP(), []int{12}
}

func (x *CSteamInputService_GyroAccelerometerChanged_Notification) GetControllerIndex() uint32 {
	if x != nil && x.ControllerIndex != nil {
		return *x.ControllerIndex
	}
	return 0
}

func (x *CSteamInputService_GyroAccelerometerChanged_Notification) GetImuIndex() uint32 {
	if x != nil && x.ImuIndex != nil {
		return *x.ImuIndex
	}
	return 0
}

func (x *CSteamInputService_GyroAccelerometerChanged_Notification) GetAcceleromter_1G() *ControllerVector3 {
	if x != nil {
		return x.Acceleromter_1G
	}
	return nil
}

func (x *CSteamInputService_GyroAccelerometerChanged_Notification) GetTrustedGravity_1G() *ControllerVector3 {
	if x != nil {
		return x.TrustedGravity_1G
	}
	return nil
}

type CSteamInputService_GyroCalibration_Notification struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	ControllerIndex     *uint32                `protobuf:"varint,1,opt,name=controller_index,json=controllerIndex" json:"controller_index,omitempty"`
	ImuIndex            *uint32                `protobuf:"varint,2,opt,name=imu_index,json=imuIndex" json:"imu_index,omitempty"`
	AcceleromterNoise   *float32               `protobuf:"fixed32,3,opt,name=acceleromter_noise,json=acceleromterNoise" json:"acceleromter_noise,omitempty"`
	GyroscopeNoise      *float32               `protobuf:"fixed32,4,opt,name=gyroscope_noise,json=gyroscopeNoise" json:"gyroscope_noise,omitempty"`
	CalibrationProgress *float32               `protobuf:"fixed32,5,opt,name=calibration_progress,json=calibrationProgress" json:"calibration_progress,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *CSteamInputService_GyroCalibration_Notification) Reset() {
	*x = CSteamInputService_GyroCalibration_Notification{}
	mi := &file_service_steaminputmanager_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamInputService_GyroCalibration_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamInputService_GyroCalibration_Notification) ProtoMessage() {}

func (x *CSteamInputService_GyroCalibration_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_service_steaminputmanager_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamInputService_GyroCalibration_Notification.ProtoReflect.Descriptor instead.
func (*CSteamInputService_GyroCalibration_Notification) Descriptor() ([]byte, []int) {
	return file_service_steaminputmanager_proto_rawDescGZIP(), []int{13}
}

func (x *CSteamInputService_GyroCalibration_Notification) GetControllerIndex() uint32 {
	if x != nil && x.ControllerIndex != nil {
		return *x.ControllerIndex
	}
	return 0
}

func (x *CSteamInputService_GyroCalibration_Notification) GetImuIndex() uint32 {
	if x != nil && x.ImuIndex != nil {
		return *x.ImuIndex
	}
	return 0
}

func (x *CSteamInputService_GyroCalibration_Notification) GetAcceleromterNoise() float32 {
	if x != nil && x.AcceleromterNoise != nil {
		return *x.AcceleromterNoise
	}
	return 0
}

func (x *CSteamInputService_GyroCalibration_Notification) GetGyroscopeNoise() float32 {
	if x != nil && x.GyroscopeNoise != nil {
		return *x.GyroscopeNoise
	}
	return 0
}

func (x *CSteamInputService_GyroCalibration_Notification) GetCalibrationProgress() float32 {
	if x != nil && x.CalibrationProgress != nil {
		return *x.CalibrationProgress
	}
	return 0
}

type CSteamInputService_GyroQuaternionChanged_Notification struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	ControllerIndex        *uint32                `protobuf:"varint,1,opt,name=controller_index,json=controllerIndex" json:"controller_index,omitempty"`
	ImuIndex               *uint32                `protobuf:"varint,2,opt,name=imu_index,json=imuIndex" json:"imu_index,omitempty"`
	GyroRawQuaternion      *ControllerQuaternion  `protobuf:"bytes,3,opt,name=gyro_raw_quaternion,json=gyroRawQuaternion" json:"gyro_raw_quaternion,omitempty"`
	GyroFilteredQuaternion *ControllerQuaternion  `protobuf:"bytes,4,opt,name=gyro_filtered_quaternion,json=gyroFilteredQuaternion" json:"gyro_filtered_quaternion,omitempty"`
	ImuSensorDeltaTime     *uint32                `protobuf:"varint,5,opt,name=imu_sensor_delta_time,json=imuSensorDeltaTime" json:"imu_sensor_delta_time,omitempty"`
	EstimatedPacketRate    *uint32                `protobuf:"varint,6,opt,name=estimated_packet_rate,json=estimatedPacketRate" json:"estimated_packet_rate,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *CSteamInputService_GyroQuaternionChanged_Notification) Reset() {
	*x = CSteamInputService_GyroQuaternionChanged_Notification{}
	mi := &file_service_steaminputmanager_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamInputService_GyroQuaternionChanged_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamInputService_GyroQuaternionChanged_Notification) ProtoMessage() {}

func (x *CSteamInputService_GyroQuaternionChanged_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_service_steaminputmanager_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamInputService_GyroQuaternionChanged_Notification.ProtoReflect.Descriptor instead.
func (*CSteamInputService_GyroQuaternionChanged_Notification) Descriptor() ([]byte, []int) {
	return file_service_steaminputmanager_proto_rawDescGZIP(), []int{14}
}

func (x *CSteamInputService_GyroQuaternionChanged_Notification) GetControllerIndex() uint32 {
	if x != nil && x.ControllerIndex != nil {
		return *x.ControllerIndex
	}
	return 0
}

func (x *CSteamInputService_GyroQuaternionChanged_Notification) GetImuIndex() uint32 {
	if x != nil && x.ImuIndex != nil {
		return *x.ImuIndex
	}
	return 0
}

func (x *CSteamInputService_GyroQuaternionChanged_Notification) GetGyroRawQuaternion() *ControllerQuaternion {
	if x != nil {
		return x.GyroRawQuaternion
	}
	return nil
}

func (x *CSteamInputService_GyroQuaternionChanged_Notification) GetGyroFilteredQuaternion() *ControllerQuaternion {
	if x != nil {
		return x.GyroFilteredQuaternion
	}
	return nil
}

func (x *CSteamInputService_GyroQuaternionChanged_Notification) GetImuSensorDeltaTime() uint32 {
	if x != nil && x.ImuSensorDeltaTime != nil {
		return *x.ImuSensorDeltaTime
	}
	return 0
}

func (x *CSteamInputService_GyroQuaternionChanged_Notification) GetEstimatedPacketRate() uint32 {
	if x != nil && x.EstimatedPacketRate != nil {
		return *x.EstimatedPacketRate
	}
	return 0
}

type CSteamInputService_GyroSpeedChanged_Notification struct {
	state             protoimpl.MessageState     `protogen:"open.v1"`
	ControllerIndex   *uint32                    `protobuf:"varint,1,opt,name=controller_index,json=controllerIndex" json:"controller_index,omitempty"`
	ImuIndex          *uint32                    `protobuf:"varint,2,opt,name=imu_index,json=imuIndex" json:"imu_index,omitempty"`
	GyroRawSpeed      *ControllerGyroEulerAngles `protobuf:"bytes,3,opt,name=gyro_raw_speed,json=gyroRawSpeed" json:"gyro_raw_speed,omitempty"`
	GyroFilteredSpeed *ControllerGyroEulerAngles `protobuf:"bytes,4,opt,name=gyro_filtered_speed,json=gyroFilteredSpeed" json:"gyro_filtered_speed,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *CSteamInputService_GyroSpeedChanged_Notification) Reset() {
	*x = CSteamInputService_GyroSpeedChanged_Notification{}
	mi := &file_service_steaminputmanager_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamInputService_GyroSpeedChanged_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamInputService_GyroSpeedChanged_Notification) ProtoMessage() {}

func (x *CSteamInputService_GyroSpeedChanged_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_service_steaminputmanager_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamInputService_GyroSpeedChanged_Notification.ProtoReflect.Descriptor instead.
func (*CSteamInputService_GyroSpeedChanged_Notification) Descriptor() ([]byte, []int) {
	return file_service_steaminputmanager_proto_rawDescGZIP(), []int{15}
}

func (x *CSteamInputService_GyroSpeedChanged_Notification) GetControllerIndex() uint32 {
	if x != nil && x.ControllerIndex != nil {
		return *x.ControllerIndex
	}
	return 0
}

func (x *CSteamInputService_GyroSpeedChanged_Notification) GetImuIndex() uint32 {
	if x != nil && x.ImuIndex != nil {
		return *x.ImuIndex
	}
	return 0
}

func (x *CSteamInputService_GyroSpeedChanged_Notification) GetGyroRawSpeed() *ControllerGyroEulerAngles {
	if x != nil {
		return x.GyroRawSpeed
	}
	return nil
}

func (x *CSteamInputService_GyroSpeedChanged_Notification) GetGyroFilteredSpeed() *ControllerGyroEulerAngles {
	if x != nil {
		return x.GyroFilteredSpeed
	}
	return nil
}

var File_service_steaminputmanager_proto protoreflect.FileDescriptor

const file_service_steaminputmanager_proto_rawDesc = "" +
	"\n" +
	"\x1fservice_steaminputmanager.proto\x1a\x11common_base.proto\"t\n" +
	"\x1eCControllerAccessibilityString\x12'\n" +
	"\x03key\x18\x01 \x01(\v2\x15.CControllerOriginKeyR\x03key\x12)\n" +
	"\x10localized_string\x18\x02 \x01(\tR\x0flocalizedString\"\x98\x01\n" +
	"\x14CControllerOriginKey\x12'\n" +
	"\x0fcontroller_type\x18\x01 \x01(\x05R\x0econtrollerType\x12)\n" +
	"\x10controller_style\x18\x02 \x01(\x05R\x0fcontrollerStyle\x12\x16\n" +
	"\x06source\x18\x03 \x01(\x05R\x06source\x12\x14\n" +
	"\x05input\x18\x04 \x01(\x05R\x05input\"W\n" +
	"\x19ControllerGyroEulerAngles\x12\x14\n" +
	"\x05pitch\x18\x01 \x01(\x02R\x05pitch\x12\x10\n" +
	"\x03yaw\x18\x02 \x01(\x02R\x03yaw\x12\x12\n" +
	"\x04roll\x18\x03 \x01(\x02R\x04roll\"N\n" +
	"\x14ControllerQuaternion\x12\f\n" +
	"\x01w\x18\x01 \x01(\x02R\x01w\x12\f\n" +
	"\x01x\x18\x02 \x01(\x02R\x01x\x12\f\n" +
	"\x01y\x18\x03 \x01(\x02R\x01y\x12\f\n" +
	"\x01z\x18\x04 \x01(\x02R\x01z\"/\n" +
	"\x11ControllerVector2\x12\f\n" +
	"\x01x\x18\x01 \x01(\x02R\x01x\x12\f\n" +
	"\x01y\x18\x02 \x01(\x02R\x01y\"=\n" +
	"\x11ControllerVector3\x12\f\n" +
	"\x01x\x18\x01 \x01(\x02R\x01x\x12\f\n" +
	"\x01y\x18\x02 \x01(\x02R\x01y\x12\f\n" +
	"\x01z\x18\x03 \x01(\x02R\x01z\";\n" +
	"9CSteamInputService_ControllerAccessibilityStrings_Request\"w\n" +
	":CSteamInputService_ControllerAccessibilityStrings_Response\x129\n" +
	"\astrings\x18\x01 \x03(\v2\x1f.CControllerAccessibilityStringR\astrings\"\xc1\x04\n" +
	"9CSteamInputService_ControllerAxesStateChange_Notification\x12)\n" +
	"\x10controller_index\x18\x01 \x01(\rR\x0fcontrollerIndex\x127\n" +
	"\rjoystick_left\x18\x02 \x01(\v2\x12.ControllerVector2R\fjoystickLeft\x129\n" +
	"\x0ejoystick_right\x18\x03 \x01(\v2\x12.ControllerVector2R\rjoystickRight\x127\n" +
	"\rtrackpad_left\x18\x04 \x01(\v2\x12.ControllerVector2R\ftrackpadLeft\x129\n" +
	"\x0etrackpad_right\x18\x05 \x01(\v2\x12.ControllerVector2R\rtrackpadRight\x12;\n" +
	"\x0ftrackpad_center\x18\x06 \x01(\v2\x12.ControllerVector2R\x0etrackpadCenter\x124\n" +
	"\x16trackpad_pressure_left\x18\a \x01(\x02R\x14trackpadPressureLeft\x126\n" +
	"\x17trackpad_pressure_right\x18\b \x01(\x02R\x15trackpadPressureRight\x12!\n" +
	"\ftrigger_left\x18\t \x01(\x02R\vtriggerLeft\x12#\n" +
	"\rtrigger_right\x18\n" +
	" \x01(\x02R\ftriggerRight\"\xfc\n" +
	"\n" +
	"<CSteamInputService_ControllerButtonStateChanged_Notification\x12)\n" +
	"\x10controller_index\x18\x01 \x01(\rR\x0fcontrollerIndex\x12\x17\n" +
	"\adpad_up\x18\x02 \x01(\bR\x06dpadUp\x12\x1b\n" +
	"\tdpad_down\x18\x03 \x01(\bR\bdpadDown\x12\x1b\n" +
	"\tdpad_left\x18\x04 \x01(\bR\bdpadLeft\x12\x1d\n" +
	"\n" +
	"dpad_right\x18\x05 \x01(\bR\tdpadRight\x12!\n" +
	"\fbutton_south\x18\x06 \x01(\bR\vbuttonSouth\x12\x1f\n" +
	"\vbutton_east\x18\a \x01(\bR\n" +
	"buttonEast\x12\x1f\n" +
	"\vbutton_west\x18\b \x01(\bR\n" +
	"buttonWest\x12!\n" +
	"\fbutton_north\x18\t \x01(\bR\vbuttonNorth\x12(\n" +
	"\x10button_back_view\x18\n" +
	" \x01(\bR\x0ebuttonBackView\x120\n" +
	"\x14button_start_options\x18\v \x01(\bR\x12buttonStartOptions\x12!\n" +
	"\fbutton_steam\x18\f \x01(\bR\vbuttonSteam\x12.\n" +
	"\x13button_quick_access\x18\r \x01(\bR\x11buttonQuickAccess\x12.\n" +
	"\x13button_mute_capture\x18\x0e \x01(\bR\x11buttonMuteCapture\x12(\n" +
	"\x10left_stick_click\x18\x0f \x01(\bR\x0eleftStickClick\x12(\n" +
	"\x10left_stick_touch\x18\x10 \x01(\bR\x0eleftStickTouch\x12,\n" +
	"\x12left_stick_deflect\x18\x11 \x01(\bR\x10leftStickDeflect\x12*\n" +
	"\x11right_stick_click\x18\x12 \x01(\bR\x0frightStickClick\x12*\n" +
	"\x11right_stick_touch\x18\x13 \x01(\bR\x0frightStickTouch\x12.\n" +
	"\x13right_stick_deflect\x18\x14 \x01(\bR\x11rightStickDeflect\x122\n" +
	"\x15center_trackpad_touch\x18\x15 \x01(\bR\x13centerTrackpadTouch\x122\n" +
	"\x15center_trackpad_click\x18\x16 \x01(\bR\x13centerTrackpadClick\x12.\n" +
	"\x13left_trackpad_touch\x18\x17 \x01(\bR\x11leftTrackpadTouch\x12.\n" +
	"\x13left_trackpad_click\x18\x18 \x01(\bR\x11leftTrackpadClick\x120\n" +
	"\x14right_trackpad_touch\x18\x19 \x01(\bR\x12rightTrackpadTouch\x120\n" +
	"\x14right_trackpad_click\x18\x1a \x01(\bR\x12rightTrackpadClick\x12\x1f\n" +
	"\vleft_bumper\x18\x1b \x01(\bR\n" +
	"leftBumper\x12!\n" +
	"\fleft_trigger\x18\x1c \x01(\bR\vleftTrigger\x12\x0e\n" +
	"\x02l4\x18\x1d \x01(\bR\x02l4\x12\x0e\n" +
	"\x02l5\x18\x1e \x01(\bR\x02l5\x12\x19\n" +
	"\bleft_aux\x18\x1f \x01(\bR\aleftAux\x12!\n" +
	"\fright_bumper\x18  \x01(\bR\vrightBumper\x12#\n" +
	"\rright_trigger\x18! \x01(\bR\frightTrigger\x12\x0e\n" +
	"\x02r4\x18\" \x01(\bR\x02r4\x12\x0e\n" +
	"\x02r5\x18# \x01(\bR\x02r5\x12\x1b\n" +
	"\tright_aux\x18$ \x01(\bR\brightAux\"x\n" +
	".CSteamInputService_ControllerStateFlow_Request\x12)\n" +
	"\x10controller_index\x18\x01 \x01(\rR\x0fcontrollerIndex\x12\x1b\n" +
	"\tflow_mode\x18\x02 \x01(\rR\bflowMode\"1\n" +
	"/CSteamInputService_ControllerStateFlow_Response\"\x81\x02\n" +
	"8CSteamInputService_GyroAccelerometerChanged_Notification\x12)\n" +
	"\x10controller_index\x18\x01 \x01(\rR\x0fcontrollerIndex\x12\x1b\n" +
	"\timu_index\x18\x02 \x01(\rR\bimuIndex\x12;\n" +
	"\x0facceleromter_1g\x18\x04 \x01(\v2\x12.ControllerVector3R\x0eacceleromter1g\x12@\n" +
	"\x12trusted_gravity_1g\x18\x05 \x01(\v2\x12.ControllerVector3R\x10trustedGravity1g\"\x84\x02\n" +
	"/CSteamInputService_GyroCalibration_Notification\x12)\n" +
	"\x10controller_index\x18\x01 \x01(\rR\x0fcontrollerIndex\x12\x1b\n" +
	"\timu_index\x18\x02 \x01(\rR\bimuIndex\x12-\n" +
	"\x12acceleromter_noise\x18\x03 \x01(\x02R\x11acceleromterNoise\x12'\n" +
	"\x0fgyroscope_noise\x18\x04 \x01(\x02R\x0egyroscopeNoise\x121\n" +
	"\x14calibration_progress\x18\x05 \x01(\x02R\x13calibrationProgress\"\xfe\x02\n" +
	"5CSteamInputService_GyroQuaternionChanged_Notification\x12)\n" +
	"\x10controller_index\x18\x01 \x01(\rR\x0fcontrollerIndex\x12\x1b\n" +
	"\timu_index\x18\x02 \x01(\rR\bimuIndex\x12E\n" +
	"\x13gyro_raw_quaternion\x18\x03 \x01(\v2\x15.ControllerQuaternionR\x11gyroRawQuaternion\x12O\n" +
	"\x18gyro_filtered_quaternion\x18\x04 \x01(\v2\x15.ControllerQuaternionR\x16gyroFilteredQuaternion\x121\n" +
	"\x15imu_sensor_delta_time\x18\x05 \x01(\rR\x12imuSensorDeltaTime\x122\n" +
	"\x15estimated_packet_rate\x18\x06 \x01(\rR\x13estimatedPacketRate\"\x88\x02\n" +
	"0CSteamInputService_GyroSpeedChanged_Notification\x12)\n" +
	"\x10controller_index\x18\x01 \x01(\rR\x0fcontrollerIndex\x12\x1b\n" +
	"\timu_index\x18\x02 \x01(\rR\bimuIndex\x12@\n" +
	"\x0egyro_raw_speed\x18\x03 \x01(\v2\x1a.ControllerGyroEulerAnglesR\fgyroRawSpeed\x12J\n" +
	"\x13gyro_filtered_speed\x18\x04 \x01(\v2\x1a.ControllerGyroEulerAnglesR\x11gyroFilteredSpeed2\x94\b\n" +
	"\x11SteamInputManager\x12{\n" +
	"\x16EndControllerStateFlow\x12/.CSteamInputService_ControllerStateFlow_Request\x1a0.CSteamInputService_ControllerStateFlow_Response\x12\x9c\x01\n" +
	"!GetControllerAccessibilityStrings\x12:.CSteamInputService_ControllerAccessibilityStrings_Request\x1a;.CSteamInputService_ControllerAccessibilityStrings_Response\x12a\n" +
	"\x16NotifyAxesStateChanged\x12:.CSteamInputService_ControllerAxesStateChange_Notification\x1a\v.NoResponse\x12f\n" +
	"\x18NotifyButtonStateChanged\x12=.CSteamInputService_ControllerButtonStateChanged_Notification\x1a\v.NoResponse\x12m\n" +
	"#NotifyGyroAccelerometerStateChanged\x129.CSteamInputService_GyroAccelerometerChanged_Notification\x1a\v.NoResponse\x12b\n" +
	"!NotifyGyroCalibrationStateChanged\x120.CSteamInputService_GyroCalibration_Notification\x1a\v.NoResponse\x12g\n" +
	" NotifyGyroQuaternionStateChanged\x126.CSteamInputService_GyroQuaternionChanged_Notification\x1a\v.NoResponse\x12]\n" +
	"\x1bNotifyGyroSpeedStateChanged\x121.CSteamInputService_GyroSpeedChanged_Notification\x1a\v.NoResponse\x12}\n" +
	"\x18StartControllerStateFlow\x12/.CSteamInputService_ControllerStateFlow_Request\x1a0.CSteamInputService_ControllerStateFlow_Response"

var (
	file_service_steaminputmanager_proto_rawDescOnce sync.Once
	file_service_steaminputmanager_proto_rawDescData []byte
)

func file_service_steaminputmanager_proto_rawDescGZIP() []byte {
	file_service_steaminputmanager_proto_rawDescOnce.Do(func() {
		file_service_steaminputmanager_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_service_steaminputmanager_proto_rawDesc), len(file_service_steaminputmanager_proto_rawDesc)))
	})
	return file_service_steaminputmanager_proto_rawDescData
}

var file_service_steaminputmanager_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_service_steaminputmanager_proto_goTypes = []any{
	(*CControllerAccessibilityString)(nil),                               // 0: CControllerAccessibilityString
	(*CControllerOriginKey)(nil),                                         // 1: CControllerOriginKey
	(*ControllerGyroEulerAngles)(nil),                                    // 2: ControllerGyroEulerAngles
	(*ControllerQuaternion)(nil),                                         // 3: ControllerQuaternion
	(*ControllerVector2)(nil),                                            // 4: ControllerVector2
	(*ControllerVector3)(nil),                                            // 5: ControllerVector3
	(*CSteamInputService_ControllerAccessibilityStrings_Request)(nil),    // 6: CSteamInputService_ControllerAccessibilityStrings_Request
	(*CSteamInputService_ControllerAccessibilityStrings_Response)(nil),   // 7: CSteamInputService_ControllerAccessibilityStrings_Response
	(*CSteamInputService_ControllerAxesStateChange_Notification)(nil),    // 8: CSteamInputService_ControllerAxesStateChange_Notification
	(*CSteamInputService_ControllerButtonStateChanged_Notification)(nil), // 9: CSteamInputService_ControllerButtonStateChanged_Notification
	(*CSteamInputService_ControllerStateFlow_Request)(nil),               // 10: CSteamInputService_ControllerStateFlow_Request
	(*CSteamInputService_ControllerStateFlow_Response)(nil),              // 11: CSteamInputService_ControllerStateFlow_Response
	(*CSteamInputService_GyroAccelerometerChanged_Notification)(nil),     // 12: CSteamInputService_GyroAccelerometerChanged_Notification
	(*CSteamInputService_GyroCalibration_Notification)(nil),              // 13: CSteamInputService_GyroCalibration_Notification
	(*CSteamInputService_GyroQuaternionChanged_Notification)(nil),        // 14: CSteamInputService_GyroQuaternionChanged_Notification
	(*CSteamInputService_GyroSpeedChanged_Notification)(nil),             // 15: CSteamInputService_GyroSpeedChanged_Notification
	(*NoResponse)(nil), // 16: NoResponse
}
var file_service_steaminputmanager_proto_depIdxs = []int32{
	1,  // 0: CControllerAccessibilityString.key:type_name -> CControllerOriginKey
	0,  // 1: CSteamInputService_ControllerAccessibilityStrings_Response.strings:type_name -> CControllerAccessibilityString
	4,  // 2: CSteamInputService_ControllerAxesStateChange_Notification.joystick_left:type_name -> ControllerVector2
	4,  // 3: CSteamInputService_ControllerAxesStateChange_Notification.joystick_right:type_name -> ControllerVector2
	4,  // 4: CSteamInputService_ControllerAxesStateChange_Notification.trackpad_left:type_name -> ControllerVector2
	4,  // 5: CSteamInputService_ControllerAxesStateChange_Notification.trackpad_right:type_name -> ControllerVector2
	4,  // 6: CSteamInputService_ControllerAxesStateChange_Notification.trackpad_center:type_name -> ControllerVector2
	5,  // 7: CSteamInputService_GyroAccelerometerChanged_Notification.acceleromter_1g:type_name -> ControllerVector3
	5,  // 8: CSteamInputService_GyroAccelerometerChanged_Notification.trusted_gravity_1g:type_name -> ControllerVector3
	3,  // 9: CSteamInputService_GyroQuaternionChanged_Notification.gyro_raw_quaternion:type_name -> ControllerQuaternion
	3,  // 10: CSteamInputService_GyroQuaternionChanged_Notification.gyro_filtered_quaternion:type_name -> ControllerQuaternion
	2,  // 11: CSteamInputService_GyroSpeedChanged_Notification.gyro_raw_speed:type_name -> ControllerGyroEulerAngles
	2,  // 12: CSteamInputService_GyroSpeedChanged_Notification.gyro_filtered_speed:type_name -> ControllerGyroEulerAngles
	10, // 13: SteamInputManager.EndControllerStateFlow:input_type -> CSteamInputService_ControllerStateFlow_Request
	6,  // 14: SteamInputManager.GetControllerAccessibilityStrings:input_type -> CSteamInputService_ControllerAccessibilityStrings_Request
	8,  // 15: SteamInputManager.NotifyAxesStateChanged:input_type -> CSteamInputService_ControllerAxesStateChange_Notification
	9,  // 16: SteamInputManager.NotifyButtonStateChanged:input_type -> CSteamInputService_ControllerButtonStateChanged_Notification
	12, // 17: SteamInputManager.NotifyGyroAccelerometerStateChanged:input_type -> CSteamInputService_GyroAccelerometerChanged_Notification
	13, // 18: SteamInputManager.NotifyGyroCalibrationStateChanged:input_type -> CSteamInputService_GyroCalibration_Notification
	14, // 19: SteamInputManager.NotifyGyroQuaternionStateChanged:input_type -> CSteamInputService_GyroQuaternionChanged_Notification
	15, // 20: SteamInputManager.NotifyGyroSpeedStateChanged:input_type -> CSteamInputService_GyroSpeedChanged_Notification
	10, // 21: SteamInputManager.StartControllerStateFlow:input_type -> CSteamInputService_ControllerStateFlow_Request
	11, // 22: SteamInputManager.EndControllerStateFlow:output_type -> CSteamInputService_ControllerStateFlow_Response
	7,  // 23: SteamInputManager.GetControllerAccessibilityStrings:output_type -> CSteamInputService_ControllerAccessibilityStrings_Response
	16, // 24: SteamInputManager.NotifyAxesStateChanged:output_type -> NoResponse
	16, // 25: SteamInputManager.NotifyButtonStateChanged:output_type -> NoResponse
	16, // 26: SteamInputManager.NotifyGyroAccelerometerStateChanged:output_type -> NoResponse
	16, // 27: SteamInputManager.NotifyGyroCalibrationStateChanged:output_type -> NoResponse
	16, // 28: SteamInputManager.NotifyGyroQuaternionStateChanged:output_type -> NoResponse
	16, // 29: SteamInputManager.NotifyGyroSpeedStateChanged:output_type -> NoResponse
	11, // 30: SteamInputManager.StartControllerStateFlow:output_type -> CSteamInputService_ControllerStateFlow_Response
	22, // [22:31] is the sub-list for method output_type
	13, // [13:22] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_service_steaminputmanager_proto_init() }
func file_service_steaminputmanager_proto_init() {
	if File_service_steaminputmanager_proto != nil {
		return
	}
	file_common_base_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_service_steaminputmanager_proto_rawDesc), len(file_service_steaminputmanager_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_steaminputmanager_proto_goTypes,
		DependencyIndexes: file_service_steaminputmanager_proto_depIdxs,
		MessageInfos:      file_service_steaminputmanager_proto_msgTypes,
	}.Build()
	File_service_steaminputmanager_proto = out.File
	file_service_steaminputmanager_proto_goTypes = nil
	file_service_steaminputmanager_proto_depIdxs = nil
}
