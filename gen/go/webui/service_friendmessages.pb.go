// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.32.0
// source: service_friendmessages.proto

package webui

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CFriendMessages_AckMessage_Notification struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	SteamidPartner *uint64                `protobuf:"fixed64,1,opt,name=steamid_partner,json=steamidPartner" json:"steamid_partner,omitempty"`
	Timestamp      *uint32                `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CFriendMessages_AckMessage_Notification) Reset() {
	*x = CFriendMessages_AckMessage_Notification{}
	mi := &file_service_friendmessages_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CFriendMessages_AckMessage_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFriendMessages_AckMessage_Notification) ProtoMessage() {}

func (x *CFriendMessages_AckMessage_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_service_friendmessages_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFriendMessages_AckMessage_Notification.ProtoReflect.Descriptor instead.
func (*CFriendMessages_AckMessage_Notification) Descriptor() ([]byte, []int) {
	return file_service_friendmessages_proto_rawDescGZIP(), []int{0}
}

func (x *CFriendMessages_AckMessage_Notification) GetSteamidPartner() uint64 {
	if x != nil && x.SteamidPartner != nil {
		return *x.SteamidPartner
	}
	return 0
}

func (x *CFriendMessages_AckMessage_Notification) GetTimestamp() uint32 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

type CFriendMessages_GetRecentMessages_Request struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	Steamid1               *uint64                `protobuf:"fixed64,1,opt,name=steamid1" json:"steamid1,omitempty"`
	Steamid2               *uint64                `protobuf:"fixed64,2,opt,name=steamid2" json:"steamid2,omitempty"`
	Count                  *uint32                `protobuf:"varint,3,opt,name=count" json:"count,omitempty"`
	MostRecentConversation *bool                  `protobuf:"varint,4,opt,name=most_recent_conversation,json=mostRecentConversation" json:"most_recent_conversation,omitempty"`
	Rtime32StartTime       *uint32                `protobuf:"fixed32,5,opt,name=rtime32_start_time,json=rtime32StartTime" json:"rtime32_start_time,omitempty"`
	BbcodeFormat           *bool                  `protobuf:"varint,6,opt,name=bbcode_format,json=bbcodeFormat" json:"bbcode_format,omitempty"`
	StartOrdinal           *uint32                `protobuf:"varint,7,opt,name=start_ordinal,json=startOrdinal" json:"start_ordinal,omitempty"`
	TimeLast               *uint32                `protobuf:"varint,8,opt,name=time_last,json=timeLast" json:"time_last,omitempty"`
	OrdinalLast            *uint32                `protobuf:"varint,9,opt,name=ordinal_last,json=ordinalLast" json:"ordinal_last,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *CFriendMessages_GetRecentMessages_Request) Reset() {
	*x = CFriendMessages_GetRecentMessages_Request{}
	mi := &file_service_friendmessages_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CFriendMessages_GetRecentMessages_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFriendMessages_GetRecentMessages_Request) ProtoMessage() {}

func (x *CFriendMessages_GetRecentMessages_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_friendmessages_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFriendMessages_GetRecentMessages_Request.ProtoReflect.Descriptor instead.
func (*CFriendMessages_GetRecentMessages_Request) Descriptor() ([]byte, []int) {
	return file_service_friendmessages_proto_rawDescGZIP(), []int{1}
}

func (x *CFriendMessages_GetRecentMessages_Request) GetSteamid1() uint64 {
	if x != nil && x.Steamid1 != nil {
		return *x.Steamid1
	}
	return 0
}

func (x *CFriendMessages_GetRecentMessages_Request) GetSteamid2() uint64 {
	if x != nil && x.Steamid2 != nil {
		return *x.Steamid2
	}
	return 0
}

func (x *CFriendMessages_GetRecentMessages_Request) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *CFriendMessages_GetRecentMessages_Request) GetMostRecentConversation() bool {
	if x != nil && x.MostRecentConversation != nil {
		return *x.MostRecentConversation
	}
	return false
}

func (x *CFriendMessages_GetRecentMessages_Request) GetRtime32StartTime() uint32 {
	if x != nil && x.Rtime32StartTime != nil {
		return *x.Rtime32StartTime
	}
	return 0
}

func (x *CFriendMessages_GetRecentMessages_Request) GetBbcodeFormat() bool {
	if x != nil && x.BbcodeFormat != nil {
		return *x.BbcodeFormat
	}
	return false
}

func (x *CFriendMessages_GetRecentMessages_Request) GetStartOrdinal() uint32 {
	if x != nil && x.StartOrdinal != nil {
		return *x.StartOrdinal
	}
	return 0
}

func (x *CFriendMessages_GetRecentMessages_Request) GetTimeLast() uint32 {
	if x != nil && x.TimeLast != nil {
		return *x.TimeLast
	}
	return 0
}

func (x *CFriendMessages_GetRecentMessages_Request) GetOrdinalLast() uint32 {
	if x != nil && x.OrdinalLast != nil {
		return *x.OrdinalLast
	}
	return 0
}

type CFriendMessages_GetRecentMessages_Response struct {
	state         protoimpl.MessageState                                      `protogen:"open.v1"`
	Messages      []*CFriendMessages_GetRecentMessages_Response_FriendMessage `protobuf:"bytes,1,rep,name=messages" json:"messages,omitempty"`
	MoreAvailable *bool                                                       `protobuf:"varint,4,opt,name=more_available,json=moreAvailable" json:"more_available,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CFriendMessages_GetRecentMessages_Response) Reset() {
	*x = CFriendMessages_GetRecentMessages_Response{}
	mi := &file_service_friendmessages_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CFriendMessages_GetRecentMessages_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFriendMessages_GetRecentMessages_Response) ProtoMessage() {}

func (x *CFriendMessages_GetRecentMessages_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_friendmessages_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFriendMessages_GetRecentMessages_Response.ProtoReflect.Descriptor instead.
func (*CFriendMessages_GetRecentMessages_Response) Descriptor() ([]byte, []int) {
	return file_service_friendmessages_proto_rawDescGZIP(), []int{2}
}

func (x *CFriendMessages_GetRecentMessages_Response) GetMessages() []*CFriendMessages_GetRecentMessages_Response_FriendMessage {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *CFriendMessages_GetRecentMessages_Response) GetMoreAvailable() bool {
	if x != nil && x.MoreAvailable != nil {
		return *x.MoreAvailable
	}
	return false
}

type CFriendMessages_GetRecentMessages_Response_FriendMessage struct {
	state         protoimpl.MessageState                                                      `protogen:"open.v1"`
	Accountid     *uint32                                                                     `protobuf:"varint,1,opt,name=accountid" json:"accountid,omitempty"`
	Timestamp     *uint32                                                                     `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
	Message       *string                                                                     `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Ordinal       *uint32                                                                     `protobuf:"varint,4,opt,name=ordinal" json:"ordinal,omitempty"`
	Reactions     []*CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction `protobuf:"bytes,5,rep,name=reactions" json:"reactions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CFriendMessages_GetRecentMessages_Response_FriendMessage) Reset() {
	*x = CFriendMessages_GetRecentMessages_Response_FriendMessage{}
	mi := &file_service_friendmessages_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CFriendMessages_GetRecentMessages_Response_FriendMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFriendMessages_GetRecentMessages_Response_FriendMessage) ProtoMessage() {}

func (x *CFriendMessages_GetRecentMessages_Response_FriendMessage) ProtoReflect() protoreflect.Message {
	mi := &file_service_friendmessages_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFriendMessages_GetRecentMessages_Response_FriendMessage.ProtoReflect.Descriptor instead.
func (*CFriendMessages_GetRecentMessages_Response_FriendMessage) Descriptor() ([]byte, []int) {
	return file_service_friendmessages_proto_rawDescGZIP(), []int{3}
}

func (x *CFriendMessages_GetRecentMessages_Response_FriendMessage) GetAccountid() uint32 {
	if x != nil && x.Accountid != nil {
		return *x.Accountid
	}
	return 0
}

func (x *CFriendMessages_GetRecentMessages_Response_FriendMessage) GetTimestamp() uint32 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *CFriendMessages_GetRecentMessages_Response_FriendMessage) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *CFriendMessages_GetRecentMessages_Response_FriendMessage) GetOrdinal() uint32 {
	if x != nil && x.Ordinal != nil {
		return *x.Ordinal
	}
	return 0
}

func (x *CFriendMessages_GetRecentMessages_Response_FriendMessage) GetReactions() []*CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction {
	if x != nil {
		return x.Reactions
	}
	return nil
}

type CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ReactionType  *int32                 `protobuf:"varint,1,opt,name=reaction_type,json=reactionType" json:"reaction_type,omitempty"`
	Reaction      *string                `protobuf:"bytes,2,opt,name=reaction" json:"reaction,omitempty"`
	Reactors      []uint32               `protobuf:"varint,3,rep,name=reactors" json:"reactors,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction) Reset() {
	*x = CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction{}
	mi := &file_service_friendmessages_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction) ProtoMessage() {}

func (x *CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction) ProtoReflect() protoreflect.Message {
	mi := &file_service_friendmessages_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction.ProtoReflect.Descriptor instead.
func (*CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction) Descriptor() ([]byte, []int) {
	return file_service_friendmessages_proto_rawDescGZIP(), []int{4}
}

func (x *CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction) GetReactionType() int32 {
	if x != nil && x.ReactionType != nil {
		return *x.ReactionType
	}
	return 0
}

func (x *CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction) GetReaction() string {
	if x != nil && x.Reaction != nil {
		return *x.Reaction
	}
	return ""
}

func (x *CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction) GetReactors() []uint32 {
	if x != nil {
		return x.Reactors
	}
	return nil
}

type CFriendMessages_IncomingMessage_Notification struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	SteamidFriend          *uint64                `protobuf:"fixed64,1,opt,name=steamid_friend,json=steamidFriend" json:"steamid_friend,omitempty"`
	ChatEntryType          *int32                 `protobuf:"varint,2,opt,name=chat_entry_type,json=chatEntryType" json:"chat_entry_type,omitempty"`
	FromLimitedAccount     *bool                  `protobuf:"varint,3,opt,name=from_limited_account,json=fromLimitedAccount" json:"from_limited_account,omitempty"`
	Message                *string                `protobuf:"bytes,4,opt,name=message" json:"message,omitempty"`
	Rtime32ServerTimestamp *uint32                `protobuf:"fixed32,5,opt,name=rtime32_server_timestamp,json=rtime32ServerTimestamp" json:"rtime32_server_timestamp,omitempty"`
	Ordinal                *uint32                `protobuf:"varint,6,opt,name=ordinal" json:"ordinal,omitempty"`
	LocalEcho              *bool                  `protobuf:"varint,7,opt,name=local_echo,json=localEcho" json:"local_echo,omitempty"`
	MessageNoBbcode        *string                `protobuf:"bytes,8,opt,name=message_no_bbcode,json=messageNoBbcode" json:"message_no_bbcode,omitempty"`
	LowPriority            *bool                  `protobuf:"varint,9,opt,name=low_priority,json=lowPriority" json:"low_priority,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *CFriendMessages_IncomingMessage_Notification) Reset() {
	*x = CFriendMessages_IncomingMessage_Notification{}
	mi := &file_service_friendmessages_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CFriendMessages_IncomingMessage_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFriendMessages_IncomingMessage_Notification) ProtoMessage() {}

func (x *CFriendMessages_IncomingMessage_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_service_friendmessages_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFriendMessages_IncomingMessage_Notification.ProtoReflect.Descriptor instead.
func (*CFriendMessages_IncomingMessage_Notification) Descriptor() ([]byte, []int) {
	return file_service_friendmessages_proto_rawDescGZIP(), []int{5}
}

func (x *CFriendMessages_IncomingMessage_Notification) GetSteamidFriend() uint64 {
	if x != nil && x.SteamidFriend != nil {
		return *x.SteamidFriend
	}
	return 0
}

func (x *CFriendMessages_IncomingMessage_Notification) GetChatEntryType() int32 {
	if x != nil && x.ChatEntryType != nil {
		return *x.ChatEntryType
	}
	return 0
}

func (x *CFriendMessages_IncomingMessage_Notification) GetFromLimitedAccount() bool {
	if x != nil && x.FromLimitedAccount != nil {
		return *x.FromLimitedAccount
	}
	return false
}

func (x *CFriendMessages_IncomingMessage_Notification) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *CFriendMessages_IncomingMessage_Notification) GetRtime32ServerTimestamp() uint32 {
	if x != nil && x.Rtime32ServerTimestamp != nil {
		return *x.Rtime32ServerTimestamp
	}
	return 0
}

func (x *CFriendMessages_IncomingMessage_Notification) GetOrdinal() uint32 {
	if x != nil && x.Ordinal != nil {
		return *x.Ordinal
	}
	return 0
}

func (x *CFriendMessages_IncomingMessage_Notification) GetLocalEcho() bool {
	if x != nil && x.LocalEcho != nil {
		return *x.LocalEcho
	}
	return false
}

func (x *CFriendMessages_IncomingMessage_Notification) GetMessageNoBbcode() string {
	if x != nil && x.MessageNoBbcode != nil {
		return *x.MessageNoBbcode
	}
	return ""
}

func (x *CFriendMessages_IncomingMessage_Notification) GetLowPriority() bool {
	if x != nil && x.LowPriority != nil {
		return *x.LowPriority
	}
	return false
}

type CFriendMessages_IsInFriendsUIBeta_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Steamid       *uint64                `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CFriendMessages_IsInFriendsUIBeta_Request) Reset() {
	*x = CFriendMessages_IsInFriendsUIBeta_Request{}
	mi := &file_service_friendmessages_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CFriendMessages_IsInFriendsUIBeta_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFriendMessages_IsInFriendsUIBeta_Request) ProtoMessage() {}

func (x *CFriendMessages_IsInFriendsUIBeta_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_friendmessages_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFriendMessages_IsInFriendsUIBeta_Request.ProtoReflect.Descriptor instead.
func (*CFriendMessages_IsInFriendsUIBeta_Request) Descriptor() ([]byte, []int) {
	return file_service_friendmessages_proto_rawDescGZIP(), []int{6}
}

func (x *CFriendMessages_IsInFriendsUIBeta_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

type CFriendMessages_IsInFriendsUIBeta_Response struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	OnlineInFriendsui *bool                  `protobuf:"varint,1,opt,name=online_in_friendsui,json=onlineInFriendsui" json:"online_in_friendsui,omitempty"`
	HasUsedFriendsui  *bool                  `protobuf:"varint,2,opt,name=has_used_friendsui,json=hasUsedFriendsui" json:"has_used_friendsui,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *CFriendMessages_IsInFriendsUIBeta_Response) Reset() {
	*x = CFriendMessages_IsInFriendsUIBeta_Response{}
	mi := &file_service_friendmessages_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CFriendMessages_IsInFriendsUIBeta_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFriendMessages_IsInFriendsUIBeta_Response) ProtoMessage() {}

func (x *CFriendMessages_IsInFriendsUIBeta_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_friendmessages_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFriendMessages_IsInFriendsUIBeta_Response.ProtoReflect.Descriptor instead.
func (*CFriendMessages_IsInFriendsUIBeta_Response) Descriptor() ([]byte, []int) {
	return file_service_friendmessages_proto_rawDescGZIP(), []int{7}
}

func (x *CFriendMessages_IsInFriendsUIBeta_Response) GetOnlineInFriendsui() bool {
	if x != nil && x.OnlineInFriendsui != nil {
		return *x.OnlineInFriendsui
	}
	return false
}

func (x *CFriendMessages_IsInFriendsUIBeta_Response) GetHasUsedFriendsui() bool {
	if x != nil && x.HasUsedFriendsui != nil {
		return *x.HasUsedFriendsui
	}
	return false
}

type CFriendMessages_MessageReaction_Notification struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	SteamidFriend   *uint64                `protobuf:"fixed64,1,opt,name=steamid_friend,json=steamidFriend" json:"steamid_friend,omitempty"`
	ServerTimestamp *uint32                `protobuf:"varint,2,opt,name=server_timestamp,json=serverTimestamp" json:"server_timestamp,omitempty"`
	Ordinal         *uint32                `protobuf:"varint,3,opt,name=ordinal" json:"ordinal,omitempty"`
	Reactor         *uint64                `protobuf:"fixed64,4,opt,name=reactor" json:"reactor,omitempty"`
	ReactionType    *int32                 `protobuf:"varint,5,opt,name=reaction_type,json=reactionType" json:"reaction_type,omitempty"`
	Reaction        *string                `protobuf:"bytes,6,opt,name=reaction" json:"reaction,omitempty"`
	IsAdd           *bool                  `protobuf:"varint,7,opt,name=is_add,json=isAdd" json:"is_add,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CFriendMessages_MessageReaction_Notification) Reset() {
	*x = CFriendMessages_MessageReaction_Notification{}
	mi := &file_service_friendmessages_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CFriendMessages_MessageReaction_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFriendMessages_MessageReaction_Notification) ProtoMessage() {}

func (x *CFriendMessages_MessageReaction_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_service_friendmessages_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFriendMessages_MessageReaction_Notification.ProtoReflect.Descriptor instead.
func (*CFriendMessages_MessageReaction_Notification) Descriptor() ([]byte, []int) {
	return file_service_friendmessages_proto_rawDescGZIP(), []int{8}
}

func (x *CFriendMessages_MessageReaction_Notification) GetSteamidFriend() uint64 {
	if x != nil && x.SteamidFriend != nil {
		return *x.SteamidFriend
	}
	return 0
}

func (x *CFriendMessages_MessageReaction_Notification) GetServerTimestamp() uint32 {
	if x != nil && x.ServerTimestamp != nil {
		return *x.ServerTimestamp
	}
	return 0
}

func (x *CFriendMessages_MessageReaction_Notification) GetOrdinal() uint32 {
	if x != nil && x.Ordinal != nil {
		return *x.Ordinal
	}
	return 0
}

func (x *CFriendMessages_MessageReaction_Notification) GetReactor() uint64 {
	if x != nil && x.Reactor != nil {
		return *x.Reactor
	}
	return 0
}

func (x *CFriendMessages_MessageReaction_Notification) GetReactionType() int32 {
	if x != nil && x.ReactionType != nil {
		return *x.ReactionType
	}
	return 0
}

func (x *CFriendMessages_MessageReaction_Notification) GetReaction() string {
	if x != nil && x.Reaction != nil {
		return *x.Reaction
	}
	return ""
}

func (x *CFriendMessages_MessageReaction_Notification) GetIsAdd() bool {
	if x != nil && x.IsAdd != nil {
		return *x.IsAdd
	}
	return false
}

type CFriendMessages_ReportMessage_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SteamidFrom   *uint64                `protobuf:"fixed64,1,opt,name=steamid_from,json=steamidFrom" json:"steamid_from,omitempty"`
	SteamidTo     *uint64                `protobuf:"fixed64,2,opt,name=steamid_to,json=steamidTo" json:"steamid_to,omitempty"`
	Timestamp     *uint32                `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
	Ordinal       *uint32                `protobuf:"varint,4,opt,name=ordinal" json:"ordinal,omitempty"`
	ReportReason  *int32                 `protobuf:"varint,5,opt,name=report_reason,json=reportReason" json:"report_reason,omitempty"`
	ReportText    *string                `protobuf:"bytes,6,opt,name=report_text,json=reportText" json:"report_text,omitempty"`
	Language      *string                `protobuf:"bytes,7,opt,name=language" json:"language,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CFriendMessages_ReportMessage_Request) Reset() {
	*x = CFriendMessages_ReportMessage_Request{}
	mi := &file_service_friendmessages_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CFriendMessages_ReportMessage_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFriendMessages_ReportMessage_Request) ProtoMessage() {}

func (x *CFriendMessages_ReportMessage_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_friendmessages_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFriendMessages_ReportMessage_Request.ProtoReflect.Descriptor instead.
func (*CFriendMessages_ReportMessage_Request) Descriptor() ([]byte, []int) {
	return file_service_friendmessages_proto_rawDescGZIP(), []int{9}
}

func (x *CFriendMessages_ReportMessage_Request) GetSteamidFrom() uint64 {
	if x != nil && x.SteamidFrom != nil {
		return *x.SteamidFrom
	}
	return 0
}

func (x *CFriendMessages_ReportMessage_Request) GetSteamidTo() uint64 {
	if x != nil && x.SteamidTo != nil {
		return *x.SteamidTo
	}
	return 0
}

func (x *CFriendMessages_ReportMessage_Request) GetTimestamp() uint32 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *CFriendMessages_ReportMessage_Request) GetOrdinal() uint32 {
	if x != nil && x.Ordinal != nil {
		return *x.Ordinal
	}
	return 0
}

func (x *CFriendMessages_ReportMessage_Request) GetReportReason() int32 {
	if x != nil && x.ReportReason != nil {
		return *x.ReportReason
	}
	return 0
}

func (x *CFriendMessages_ReportMessage_Request) GetReportText() string {
	if x != nil && x.ReportText != nil {
		return *x.ReportText
	}
	return ""
}

func (x *CFriendMessages_ReportMessage_Request) GetLanguage() string {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return ""
}

type CFriendMessages_ReportMessage_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CFriendMessages_ReportMessage_Response) Reset() {
	*x = CFriendMessages_ReportMessage_Response{}
	mi := &file_service_friendmessages_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CFriendMessages_ReportMessage_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFriendMessages_ReportMessage_Response) ProtoMessage() {}

func (x *CFriendMessages_ReportMessage_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_friendmessages_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFriendMessages_ReportMessage_Response.ProtoReflect.Descriptor instead.
func (*CFriendMessages_ReportMessage_Response) Descriptor() ([]byte, []int) {
	return file_service_friendmessages_proto_rawDescGZIP(), []int{10}
}

type CFriendMessages_SendMessage_Request struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Steamid         *uint64                `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	ChatEntryType   *int32                 `protobuf:"varint,2,opt,name=chat_entry_type,json=chatEntryType" json:"chat_entry_type,omitempty"`
	Message         *string                `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	ContainsBbcode  *bool                  `protobuf:"varint,4,opt,name=contains_bbcode,json=containsBbcode" json:"contains_bbcode,omitempty"`
	EchoToSender    *bool                  `protobuf:"varint,5,opt,name=echo_to_sender,json=echoToSender" json:"echo_to_sender,omitempty"`
	LowPriority     *bool                  `protobuf:"varint,6,opt,name=low_priority,json=lowPriority" json:"low_priority,omitempty"`
	OverrideLimits  *bool                  `protobuf:"varint,7,opt,name=override_limits,json=overrideLimits" json:"override_limits,omitempty"`
	ClientMessageId *string                `protobuf:"bytes,8,opt,name=client_message_id,json=clientMessageId" json:"client_message_id,omitempty"`
	BlockedInChina  *bool                  `protobuf:"varint,9,opt,name=blocked_in_china,json=blockedInChina" json:"blocked_in_china,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CFriendMessages_SendMessage_Request) Reset() {
	*x = CFriendMessages_SendMessage_Request{}
	mi := &file_service_friendmessages_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CFriendMessages_SendMessage_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFriendMessages_SendMessage_Request) ProtoMessage() {}

func (x *CFriendMessages_SendMessage_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_friendmessages_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFriendMessages_SendMessage_Request.ProtoReflect.Descriptor instead.
func (*CFriendMessages_SendMessage_Request) Descriptor() ([]byte, []int) {
	return file_service_friendmessages_proto_rawDescGZIP(), []int{11}
}

func (x *CFriendMessages_SendMessage_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CFriendMessages_SendMessage_Request) GetChatEntryType() int32 {
	if x != nil && x.ChatEntryType != nil {
		return *x.ChatEntryType
	}
	return 0
}

func (x *CFriendMessages_SendMessage_Request) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *CFriendMessages_SendMessage_Request) GetContainsBbcode() bool {
	if x != nil && x.ContainsBbcode != nil {
		return *x.ContainsBbcode
	}
	return false
}

func (x *CFriendMessages_SendMessage_Request) GetEchoToSender() bool {
	if x != nil && x.EchoToSender != nil {
		return *x.EchoToSender
	}
	return false
}

func (x *CFriendMessages_SendMessage_Request) GetLowPriority() bool {
	if x != nil && x.LowPriority != nil {
		return *x.LowPriority
	}
	return false
}

func (x *CFriendMessages_SendMessage_Request) GetOverrideLimits() bool {
	if x != nil && x.OverrideLimits != nil {
		return *x.OverrideLimits
	}
	return false
}

func (x *CFriendMessages_SendMessage_Request) GetClientMessageId() string {
	if x != nil && x.ClientMessageId != nil {
		return *x.ClientMessageId
	}
	return ""
}

func (x *CFriendMessages_SendMessage_Request) GetBlockedInChina() bool {
	if x != nil && x.BlockedInChina != nil {
		return *x.BlockedInChina
	}
	return false
}

type CFriendMessages_SendMessage_Response struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	ModifiedMessage      *string                `protobuf:"bytes,1,opt,name=modified_message,json=modifiedMessage" json:"modified_message,omitempty"`
	ServerTimestamp      *uint32                `protobuf:"varint,2,opt,name=server_timestamp,json=serverTimestamp" json:"server_timestamp,omitempty"`
	Ordinal              *uint32                `protobuf:"varint,3,opt,name=ordinal" json:"ordinal,omitempty"`
	MessageWithoutBbCode *string                `protobuf:"bytes,4,opt,name=message_without_bb_code,json=messageWithoutBbCode" json:"message_without_bb_code,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *CFriendMessages_SendMessage_Response) Reset() {
	*x = CFriendMessages_SendMessage_Response{}
	mi := &file_service_friendmessages_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CFriendMessages_SendMessage_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFriendMessages_SendMessage_Response) ProtoMessage() {}

func (x *CFriendMessages_SendMessage_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_friendmessages_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFriendMessages_SendMessage_Response.ProtoReflect.Descriptor instead.
func (*CFriendMessages_SendMessage_Response) Descriptor() ([]byte, []int) {
	return file_service_friendmessages_proto_rawDescGZIP(), []int{12}
}

func (x *CFriendMessages_SendMessage_Response) GetModifiedMessage() string {
	if x != nil && x.ModifiedMessage != nil {
		return *x.ModifiedMessage
	}
	return ""
}

func (x *CFriendMessages_SendMessage_Response) GetServerTimestamp() uint32 {
	if x != nil && x.ServerTimestamp != nil {
		return *x.ServerTimestamp
	}
	return 0
}

func (x *CFriendMessages_SendMessage_Response) GetOrdinal() uint32 {
	if x != nil && x.Ordinal != nil {
		return *x.Ordinal
	}
	return 0
}

func (x *CFriendMessages_SendMessage_Response) GetMessageWithoutBbCode() string {
	if x != nil && x.MessageWithoutBbCode != nil {
		return *x.MessageWithoutBbCode
	}
	return ""
}

type CFriendMessages_UpdateMessageReaction_Request struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Steamid         *uint64                `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	ServerTimestamp *uint32                `protobuf:"varint,2,opt,name=server_timestamp,json=serverTimestamp" json:"server_timestamp,omitempty"`
	Ordinal         *uint32                `protobuf:"varint,3,opt,name=ordinal" json:"ordinal,omitempty"`
	ReactionType    *int32                 `protobuf:"varint,4,opt,name=reaction_type,json=reactionType" json:"reaction_type,omitempty"`
	Reaction        *string                `protobuf:"bytes,5,opt,name=reaction" json:"reaction,omitempty"`
	IsAdd           *bool                  `protobuf:"varint,6,opt,name=is_add,json=isAdd" json:"is_add,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CFriendMessages_UpdateMessageReaction_Request) Reset() {
	*x = CFriendMessages_UpdateMessageReaction_Request{}
	mi := &file_service_friendmessages_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CFriendMessages_UpdateMessageReaction_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFriendMessages_UpdateMessageReaction_Request) ProtoMessage() {}

func (x *CFriendMessages_UpdateMessageReaction_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_friendmessages_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFriendMessages_UpdateMessageReaction_Request.ProtoReflect.Descriptor instead.
func (*CFriendMessages_UpdateMessageReaction_Request) Descriptor() ([]byte, []int) {
	return file_service_friendmessages_proto_rawDescGZIP(), []int{13}
}

func (x *CFriendMessages_UpdateMessageReaction_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CFriendMessages_UpdateMessageReaction_Request) GetServerTimestamp() uint32 {
	if x != nil && x.ServerTimestamp != nil {
		return *x.ServerTimestamp
	}
	return 0
}

func (x *CFriendMessages_UpdateMessageReaction_Request) GetOrdinal() uint32 {
	if x != nil && x.Ordinal != nil {
		return *x.Ordinal
	}
	return 0
}

func (x *CFriendMessages_UpdateMessageReaction_Request) GetReactionType() int32 {
	if x != nil && x.ReactionType != nil {
		return *x.ReactionType
	}
	return 0
}

func (x *CFriendMessages_UpdateMessageReaction_Request) GetReaction() string {
	if x != nil && x.Reaction != nil {
		return *x.Reaction
	}
	return ""
}

func (x *CFriendMessages_UpdateMessageReaction_Request) GetIsAdd() bool {
	if x != nil && x.IsAdd != nil {
		return *x.IsAdd
	}
	return false
}

type CFriendMessages_UpdateMessageReaction_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Reactors      []uint32               `protobuf:"varint,1,rep,name=reactors" json:"reactors,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CFriendMessages_UpdateMessageReaction_Response) Reset() {
	*x = CFriendMessages_UpdateMessageReaction_Response{}
	mi := &file_service_friendmessages_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CFriendMessages_UpdateMessageReaction_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFriendMessages_UpdateMessageReaction_Response) ProtoMessage() {}

func (x *CFriendMessages_UpdateMessageReaction_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_friendmessages_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFriendMessages_UpdateMessageReaction_Response.ProtoReflect.Descriptor instead.
func (*CFriendMessages_UpdateMessageReaction_Response) Descriptor() ([]byte, []int) {
	return file_service_friendmessages_proto_rawDescGZIP(), []int{14}
}

func (x *CFriendMessages_UpdateMessageReaction_Response) GetReactors() []uint32 {
	if x != nil {
		return x.Reactors
	}
	return nil
}

type CFriendsMessages_GetActiveMessageSessions_Request struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	LastmessageSince         *uint32                `protobuf:"varint,1,opt,name=lastmessage_since,json=lastmessageSince" json:"lastmessage_since,omitempty"`
	OnlySessionsWithMessages *bool                  `protobuf:"varint,2,opt,name=only_sessions_with_messages,json=onlySessionsWithMessages" json:"only_sessions_with_messages,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *CFriendsMessages_GetActiveMessageSessions_Request) Reset() {
	*x = CFriendsMessages_GetActiveMessageSessions_Request{}
	mi := &file_service_friendmessages_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CFriendsMessages_GetActiveMessageSessions_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFriendsMessages_GetActiveMessageSessions_Request) ProtoMessage() {}

func (x *CFriendsMessages_GetActiveMessageSessions_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_friendmessages_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFriendsMessages_GetActiveMessageSessions_Request.ProtoReflect.Descriptor instead.
func (*CFriendsMessages_GetActiveMessageSessions_Request) Descriptor() ([]byte, []int) {
	return file_service_friendmessages_proto_rawDescGZIP(), []int{15}
}

func (x *CFriendsMessages_GetActiveMessageSessions_Request) GetLastmessageSince() uint32 {
	if x != nil && x.LastmessageSince != nil {
		return *x.LastmessageSince
	}
	return 0
}

func (x *CFriendsMessages_GetActiveMessageSessions_Request) GetOnlySessionsWithMessages() bool {
	if x != nil && x.OnlySessionsWithMessages != nil {
		return *x.OnlySessionsWithMessages
	}
	return false
}

type CFriendsMessages_GetActiveMessageSessions_Response struct {
	state           protoimpl.MessageState                                                     `protogen:"open.v1"`
	MessageSessions []*CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession `protobuf:"bytes,1,rep,name=message_sessions,json=messageSessions" json:"message_sessions,omitempty"`
	Timestamp       *uint32                                                                    `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CFriendsMessages_GetActiveMessageSessions_Response) Reset() {
	*x = CFriendsMessages_GetActiveMessageSessions_Response{}
	mi := &file_service_friendmessages_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CFriendsMessages_GetActiveMessageSessions_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFriendsMessages_GetActiveMessageSessions_Response) ProtoMessage() {}

func (x *CFriendsMessages_GetActiveMessageSessions_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_friendmessages_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFriendsMessages_GetActiveMessageSessions_Response.ProtoReflect.Descriptor instead.
func (*CFriendsMessages_GetActiveMessageSessions_Response) Descriptor() ([]byte, []int) {
	return file_service_friendmessages_proto_rawDescGZIP(), []int{16}
}

func (x *CFriendsMessages_GetActiveMessageSessions_Response) GetMessageSessions() []*CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession {
	if x != nil {
		return x.MessageSessions
	}
	return nil
}

func (x *CFriendsMessages_GetActiveMessageSessions_Response) GetTimestamp() uint32 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

type CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	AccountidFriend    *uint32                `protobuf:"varint,1,opt,name=accountid_friend,json=accountidFriend" json:"accountid_friend,omitempty"`
	LastMessage        *uint32                `protobuf:"varint,2,opt,name=last_message,json=lastMessage" json:"last_message,omitempty"`
	LastView           *uint32                `protobuf:"varint,3,opt,name=last_view,json=lastView" json:"last_view,omitempty"`
	UnreadMessageCount *uint32                `protobuf:"varint,4,opt,name=unread_message_count,json=unreadMessageCount" json:"unread_message_count,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession) Reset() {
	*x = CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession{}
	mi := &file_service_friendmessages_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession) ProtoMessage() {}

func (x *CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession) ProtoReflect() protoreflect.Message {
	mi := &file_service_friendmessages_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession.ProtoReflect.Descriptor instead.
func (*CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession) Descriptor() ([]byte, []int) {
	return file_service_friendmessages_proto_rawDescGZIP(), []int{17}
}

func (x *CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession) GetAccountidFriend() uint32 {
	if x != nil && x.AccountidFriend != nil {
		return *x.AccountidFriend
	}
	return 0
}

func (x *CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession) GetLastMessage() uint32 {
	if x != nil && x.LastMessage != nil {
		return *x.LastMessage
	}
	return 0
}

func (x *CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession) GetLastView() uint32 {
	if x != nil && x.LastView != nil {
		return *x.LastView
	}
	return 0
}

func (x *CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession) GetUnreadMessageCount() uint32 {
	if x != nil && x.UnreadMessageCount != nil {
		return *x.UnreadMessageCount
	}
	return 0
}

var File_service_friendmessages_proto protoreflect.FileDescriptor

const file_service_friendmessages_proto_rawDesc = "" +
	"\n" +
	"\x1cservice_friendmessages.proto\x1a\x11common_base.proto\"p\n" +
	"'CFriendMessages_AckMessage_Notification\x12'\n" +
	"\x0fsteamid_partner\x18\x01 \x01(\x06R\x0esteamidPartner\x12\x1c\n" +
	"\ttimestamp\x18\x02 \x01(\rR\ttimestamp\"\xeb\x02\n" +
	")CFriendMessages_GetRecentMessages_Request\x12\x1a\n" +
	"\bsteamid1\x18\x01 \x01(\x06R\bsteamid1\x12\x1a\n" +
	"\bsteamid2\x18\x02 \x01(\x06R\bsteamid2\x12\x14\n" +
	"\x05count\x18\x03 \x01(\rR\x05count\x128\n" +
	"\x18most_recent_conversation\x18\x04 \x01(\bR\x16mostRecentConversation\x12,\n" +
	"\x12rtime32_start_time\x18\x05 \x01(\aR\x10rtime32StartTime\x12#\n" +
	"\rbbcode_format\x18\x06 \x01(\bR\fbbcodeFormat\x12#\n" +
	"\rstart_ordinal\x18\a \x01(\rR\fstartOrdinal\x12\x1b\n" +
	"\ttime_last\x18\b \x01(\rR\btimeLast\x12!\n" +
	"\fordinal_last\x18\t \x01(\rR\vordinalLast\"\xaa\x01\n" +
	"*CFriendMessages_GetRecentMessages_Response\x12U\n" +
	"\bmessages\x18\x01 \x03(\v29.CFriendMessages_GetRecentMessages_Response_FriendMessageR\bmessages\x12%\n" +
	"\x0emore_available\x18\x04 \x01(\bR\rmoreAvailable\"\x93\x02\n" +
	"8CFriendMessages_GetRecentMessages_Response_FriendMessage\x12\x1c\n" +
	"\taccountid\x18\x01 \x01(\rR\taccountid\x12\x1c\n" +
	"\ttimestamp\x18\x02 \x01(\rR\ttimestamp\x12\x18\n" +
	"\amessage\x18\x03 \x01(\tR\amessage\x12\x18\n" +
	"\aordinal\x18\x04 \x01(\rR\aordinal\x12g\n" +
	"\treactions\x18\x05 \x03(\v2I.CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReactionR\treactions\"\xb1\x01\n" +
	"HCFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction\x12-\n" +
	"\rreaction_type\x18\x01 \x01(\x05B\b\x82\xb5\x18\x04enumR\freactionType\x12\x1a\n" +
	"\breaction\x18\x02 \x01(\tR\breaction\x12\x1a\n" +
	"\breactors\x18\x03 \x03(\rR\breactors\"\x8b\x03\n" +
	",CFriendMessages_IncomingMessage_Notification\x12%\n" +
	"\x0esteamid_friend\x18\x01 \x01(\x06R\rsteamidFriend\x12&\n" +
	"\x0fchat_entry_type\x18\x02 \x01(\x05R\rchatEntryType\x120\n" +
	"\x14from_limited_account\x18\x03 \x01(\bR\x12fromLimitedAccount\x12\x18\n" +
	"\amessage\x18\x04 \x01(\tR\amessage\x128\n" +
	"\x18rtime32_server_timestamp\x18\x05 \x01(\aR\x16rtime32ServerTimestamp\x12\x18\n" +
	"\aordinal\x18\x06 \x01(\rR\aordinal\x12\x1d\n" +
	"\n" +
	"local_echo\x18\a \x01(\bR\tlocalEcho\x12*\n" +
	"\x11message_no_bbcode\x18\b \x01(\tR\x0fmessageNoBbcode\x12!\n" +
	"\flow_priority\x18\t \x01(\bR\vlowPriority\"E\n" +
	")CFriendMessages_IsInFriendsUIBeta_Request\x12\x18\n" +
	"\asteamid\x18\x01 \x01(\x06R\asteamid\"\x8a\x01\n" +
	"*CFriendMessages_IsInFriendsUIBeta_Response\x12.\n" +
	"\x13online_in_friendsui\x18\x01 \x01(\bR\x11onlineInFriendsui\x12,\n" +
	"\x12has_used_friendsui\x18\x02 \x01(\bR\x10hasUsedFriendsui\"\x96\x02\n" +
	",CFriendMessages_MessageReaction_Notification\x12%\n" +
	"\x0esteamid_friend\x18\x01 \x01(\x06R\rsteamidFriend\x12)\n" +
	"\x10server_timestamp\x18\x02 \x01(\rR\x0fserverTimestamp\x12\x18\n" +
	"\aordinal\x18\x03 \x01(\rR\aordinal\x12\x18\n" +
	"\areactor\x18\x04 \x01(\x06R\areactor\x12-\n" +
	"\rreaction_type\x18\x05 \x01(\x05B\b\x82\xb5\x18\x04enumR\freactionType\x12\x1a\n" +
	"\breaction\x18\x06 \x01(\tR\breaction\x12\x15\n" +
	"\x06is_add\x18\a \x01(\bR\x05isAdd\"\x8d\x02\n" +
	"%CFriendMessages_ReportMessage_Request\x12!\n" +
	"\fsteamid_from\x18\x01 \x01(\x06R\vsteamidFrom\x12\x1d\n" +
	"\n" +
	"steamid_to\x18\x02 \x01(\x06R\tsteamidTo\x12\x1c\n" +
	"\ttimestamp\x18\x03 \x01(\rR\ttimestamp\x12\x18\n" +
	"\aordinal\x18\x04 \x01(\rR\aordinal\x12-\n" +
	"\rreport_reason\x18\x05 \x01(\x05B\b\x82\xb5\x18\x04enumR\freportReason\x12\x1f\n" +
	"\vreport_text\x18\x06 \x01(\tR\n" +
	"reportText\x12\x1a\n" +
	"\blanguage\x18\a \x01(\tR\blanguage\"(\n" +
	"&CFriendMessages_ReportMessage_Response\"\xf2\x02\n" +
	"#CFriendMessages_SendMessage_Request\x12\x18\n" +
	"\asteamid\x18\x01 \x01(\x06R\asteamid\x12&\n" +
	"\x0fchat_entry_type\x18\x02 \x01(\x05R\rchatEntryType\x12\x18\n" +
	"\amessage\x18\x03 \x01(\tR\amessage\x12'\n" +
	"\x0fcontains_bbcode\x18\x04 \x01(\bR\x0econtainsBbcode\x12$\n" +
	"\x0eecho_to_sender\x18\x05 \x01(\bR\fechoToSender\x12!\n" +
	"\flow_priority\x18\x06 \x01(\bR\vlowPriority\x12'\n" +
	"\x0foverride_limits\x18\a \x01(\bR\x0eoverrideLimits\x12*\n" +
	"\x11client_message_id\x18\b \x01(\tR\x0fclientMessageId\x12(\n" +
	"\x10blocked_in_china\x18\t \x01(\bR\x0eblockedInChina\"\xcd\x01\n" +
	"$CFriendMessages_SendMessage_Response\x12)\n" +
	"\x10modified_message\x18\x01 \x01(\tR\x0fmodifiedMessage\x12)\n" +
	"\x10server_timestamp\x18\x02 \x01(\rR\x0fserverTimestamp\x12\x18\n" +
	"\aordinal\x18\x03 \x01(\rR\aordinal\x125\n" +
	"\x17message_without_bb_code\x18\x04 \x01(\tR\x14messageWithoutBbCode\"\xf0\x01\n" +
	"-CFriendMessages_UpdateMessageReaction_Request\x12\x18\n" +
	"\asteamid\x18\x01 \x01(\x06R\asteamid\x12)\n" +
	"\x10server_timestamp\x18\x02 \x01(\rR\x0fserverTimestamp\x12\x18\n" +
	"\aordinal\x18\x03 \x01(\rR\aordinal\x12-\n" +
	"\rreaction_type\x18\x04 \x01(\x05B\b\x82\xb5\x18\x04enumR\freactionType\x12\x1a\n" +
	"\breaction\x18\x05 \x01(\tR\breaction\x12\x15\n" +
	"\x06is_add\x18\x06 \x01(\bR\x05isAdd\"L\n" +
	".CFriendMessages_UpdateMessageReaction_Response\x12\x1a\n" +
	"\breactors\x18\x01 \x03(\rR\breactors\"\x9f\x01\n" +
	"1CFriendsMessages_GetActiveMessageSessions_Request\x12+\n" +
	"\x11lastmessage_since\x18\x01 \x01(\rR\x10lastmessageSince\x12=\n" +
	"\x1bonly_sessions_with_messages\x18\x02 \x01(\bR\x18onlySessionsWithMessages\"\xc7\x01\n" +
	"2CFriendsMessages_GetActiveMessageSessions_Response\x12s\n" +
	"\x10message_sessions\x18\x01 \x03(\v2H.CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSessionR\x0fmessageSessions\x12\x1c\n" +
	"\ttimestamp\x18\x02 \x01(\rR\ttimestamp\"\xe6\x01\n" +
	"GCFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession\x12)\n" +
	"\x10accountid_friend\x18\x01 \x01(\rR\x0faccountidFriend\x12!\n" +
	"\flast_message\x18\x02 \x01(\rR\vlastMessage\x12\x1b\n" +
	"\tlast_view\x18\x03 \x01(\rR\blastView\x120\n" +
	"\x14unread_message_count\x18\x04 \x01(\rR\x12unreadMessageCount2\xef\x05\n" +
	"\x0eFriendMessages\x12C\n" +
	"\n" +
	"AckMessage\x12(.CFriendMessages_AckMessage_Notification\x1a\v.NoResponse\x12\x83\x01\n" +
	"\x18GetActiveMessageSessions\x122.CFriendsMessages_GetActiveMessageSessions_Request\x1a3.CFriendsMessages_GetActiveMessageSessions_Response\x12l\n" +
	"\x11GetRecentMessages\x12*.CFriendMessages_GetRecentMessages_Request\x1a+.CFriendMessages_GetRecentMessages_Response\x12l\n" +
	"\x11IsInFriendsUIBeta\x12*.CFriendMessages_IsInFriendsUIBeta_Request\x1a+.CFriendMessages_IsInFriendsUIBeta_Response\x12`\n" +
	"\rReportMessage\x12&.CFriendMessages_ReportMessage_Request\x1a'.CFriendMessages_ReportMessage_Response\x12Z\n" +
	"\vSendMessage\x12$.CFriendMessages_SendMessage_Request\x1a%.CFriendMessages_SendMessage_Response\x12x\n" +
	"\x15UpdateMessageReaction\x12..CFriendMessages_UpdateMessageReaction_Request\x1a/.CFriendMessages_UpdateMessageReaction_Response2\x83\x02\n" +
	"\x14FriendMessagesClient\x12M\n" +
	"\x0fIncomingMessage\x12-.CFriendMessages_IncomingMessage_Notification\x1a\v.NoResponse\x12M\n" +
	"\x0fMessageReaction\x12-.CFriendMessages_MessageReaction_Notification\x1a\v.NoResponse\x12M\n" +
	"\x14NotifyAckMessageEcho\x12(.CFriendMessages_AckMessage_Notification\x1a\v.NoResponse"

var (
	file_service_friendmessages_proto_rawDescOnce sync.Once
	file_service_friendmessages_proto_rawDescData []byte
)

func file_service_friendmessages_proto_rawDescGZIP() []byte {
	file_service_friendmessages_proto_rawDescOnce.Do(func() {
		file_service_friendmessages_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_service_friendmessages_proto_rawDesc), len(file_service_friendmessages_proto_rawDesc)))
	})
	return file_service_friendmessages_proto_rawDescData
}

var file_service_friendmessages_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_service_friendmessages_proto_goTypes = []any{
	(*CFriendMessages_AckMessage_Notification)(nil),                                  // 0: CFriendMessages_AckMessage_Notification
	(*CFriendMessages_GetRecentMessages_Request)(nil),                                // 1: CFriendMessages_GetRecentMessages_Request
	(*CFriendMessages_GetRecentMessages_Response)(nil),                               // 2: CFriendMessages_GetRecentMessages_Response
	(*CFriendMessages_GetRecentMessages_Response_FriendMessage)(nil),                 // 3: CFriendMessages_GetRecentMessages_Response_FriendMessage
	(*CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction)(nil), // 4: CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction
	(*CFriendMessages_IncomingMessage_Notification)(nil),                             // 5: CFriendMessages_IncomingMessage_Notification
	(*CFriendMessages_IsInFriendsUIBeta_Request)(nil),                                // 6: CFriendMessages_IsInFriendsUIBeta_Request
	(*CFriendMessages_IsInFriendsUIBeta_Response)(nil),                               // 7: CFriendMessages_IsInFriendsUIBeta_Response
	(*CFriendMessages_MessageReaction_Notification)(nil),                             // 8: CFriendMessages_MessageReaction_Notification
	(*CFriendMessages_ReportMessage_Request)(nil),                                    // 9: CFriendMessages_ReportMessage_Request
	(*CFriendMessages_ReportMessage_Response)(nil),                                   // 10: CFriendMessages_ReportMessage_Response
	(*CFriendMessages_SendMessage_Request)(nil),                                      // 11: CFriendMessages_SendMessage_Request
	(*CFriendMessages_SendMessage_Response)(nil),                                     // 12: CFriendMessages_SendMessage_Response
	(*CFriendMessages_UpdateMessageReaction_Request)(nil),                            // 13: CFriendMessages_UpdateMessageReaction_Request
	(*CFriendMessages_UpdateMessageReaction_Response)(nil),                           // 14: CFriendMessages_UpdateMessageReaction_Response
	(*CFriendsMessages_GetActiveMessageSessions_Request)(nil),                        // 15: CFriendsMessages_GetActiveMessageSessions_Request
	(*CFriendsMessages_GetActiveMessageSessions_Response)(nil),                       // 16: CFriendsMessages_GetActiveMessageSessions_Response
	(*CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession)(nil),  // 17: CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession
	(*NoResponse)(nil), // 18: NoResponse
}
var file_service_friendmessages_proto_depIdxs = []int32{
	3,  // 0: CFriendMessages_GetRecentMessages_Response.messages:type_name -> CFriendMessages_GetRecentMessages_Response_FriendMessage
	4,  // 1: CFriendMessages_GetRecentMessages_Response_FriendMessage.reactions:type_name -> CFriendMessages_GetRecentMessages_Response_FriendMessage_MessageReaction
	17, // 2: CFriendsMessages_GetActiveMessageSessions_Response.message_sessions:type_name -> CFriendsMessages_GetActiveMessageSessions_Response_FriendMessageSession
	0,  // 3: FriendMessages.AckMessage:input_type -> CFriendMessages_AckMessage_Notification
	15, // 4: FriendMessages.GetActiveMessageSessions:input_type -> CFriendsMessages_GetActiveMessageSessions_Request
	1,  // 5: FriendMessages.GetRecentMessages:input_type -> CFriendMessages_GetRecentMessages_Request
	6,  // 6: FriendMessages.IsInFriendsUIBeta:input_type -> CFriendMessages_IsInFriendsUIBeta_Request
	9,  // 7: FriendMessages.ReportMessage:input_type -> CFriendMessages_ReportMessage_Request
	11, // 8: FriendMessages.SendMessage:input_type -> CFriendMessages_SendMessage_Request
	13, // 9: FriendMessages.UpdateMessageReaction:input_type -> CFriendMessages_UpdateMessageReaction_Request
	5,  // 10: FriendMessagesClient.IncomingMessage:input_type -> CFriendMessages_IncomingMessage_Notification
	8,  // 11: FriendMessagesClient.MessageReaction:input_type -> CFriendMessages_MessageReaction_Notification
	0,  // 12: FriendMessagesClient.NotifyAckMessageEcho:input_type -> CFriendMessages_AckMessage_Notification
	18, // 13: FriendMessages.AckMessage:output_type -> NoResponse
	16, // 14: FriendMessages.GetActiveMessageSessions:output_type -> CFriendsMessages_GetActiveMessageSessions_Response
	2,  // 15: FriendMessages.GetRecentMessages:output_type -> CFriendMessages_GetRecentMessages_Response
	7,  // 16: FriendMessages.IsInFriendsUIBeta:output_type -> CFriendMessages_IsInFriendsUIBeta_Response
	10, // 17: FriendMessages.ReportMessage:output_type -> CFriendMessages_ReportMessage_Response
	12, // 18: FriendMessages.SendMessage:output_type -> CFriendMessages_SendMessage_Response
	14, // 19: FriendMessages.UpdateMessageReaction:output_type -> CFriendMessages_UpdateMessageReaction_Response
	18, // 20: FriendMessagesClient.IncomingMessage:output_type -> NoResponse
	18, // 21: FriendMessagesClient.MessageReaction:output_type -> NoResponse
	18, // 22: FriendMessagesClient.NotifyAckMessageEcho:output_type -> NoResponse
	13, // [13:23] is the sub-list for method output_type
	3,  // [3:13] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_service_friendmessages_proto_init() }
func file_service_friendmessages_proto_init() {
	if File_service_friendmessages_proto != nil {
		return
	}
	file_common_base_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_service_friendmessages_proto_rawDesc), len(file_service_friendmessages_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_service_friendmessages_proto_goTypes,
		DependencyIndexes: file_service_friendmessages_proto_depIdxs,
		MessageInfos:      file_service_friendmessages_proto_msgTypes,
	}.Build()
	File_service_friendmessages_proto = out.File
	file_service_friendmessages_proto_goTypes = nil
	file_service_friendmessages_proto_depIdxs = nil
}
