// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.32.0
// source: service_steamcharts.proto

package webui

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CSteamCharts_GetBestOfYearPages_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CSteamCharts_GetBestOfYearPages_Request) Reset() {
	*x = CSteamCharts_GetBestOfYearPages_Request{}
	mi := &file_service_steamcharts_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamCharts_GetBestOfYearPages_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamCharts_GetBestOfYearPages_Request) ProtoMessage() {}

func (x *CSteamCharts_GetBestOfYearPages_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamcharts_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamCharts_GetBestOfYearPages_Request.ProtoReflect.Descriptor instead.
func (*CSteamCharts_GetBestOfYearPages_Request) Descriptor() ([]byte, []int) {
	return file_service_steamcharts_proto_rawDescGZIP(), []int{0}
}

type CSteamCharts_GetBestOfYearPages_Response struct {
	state         protoimpl.MessageState                                     `protogen:"open.v1"`
	Pages         []*CSteamCharts_GetBestOfYearPages_Response_BestOfYearPage `protobuf:"bytes,1,rep,name=pages" json:"pages,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CSteamCharts_GetBestOfYearPages_Response) Reset() {
	*x = CSteamCharts_GetBestOfYearPages_Response{}
	mi := &file_service_steamcharts_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamCharts_GetBestOfYearPages_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamCharts_GetBestOfYearPages_Response) ProtoMessage() {}

func (x *CSteamCharts_GetBestOfYearPages_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamcharts_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamCharts_GetBestOfYearPages_Response.ProtoReflect.Descriptor instead.
func (*CSteamCharts_GetBestOfYearPages_Response) Descriptor() ([]byte, []int) {
	return file_service_steamcharts_proto_rawDescGZIP(), []int{1}
}

func (x *CSteamCharts_GetBestOfYearPages_Response) GetPages() []*CSteamCharts_GetBestOfYearPages_Response_BestOfYearPage {
	if x != nil {
		return x.Pages
	}
	return nil
}

type CSteamCharts_GetBestOfYearPages_Response_BestOfYearPage struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Name            *string                `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	UrlPath         *string                `protobuf:"bytes,2,opt,name=url_path,json=urlPath" json:"url_path,omitempty"`
	BannerUrl       []string               `protobuf:"bytes,3,rep,name=banner_url,json=bannerUrl" json:"banner_url,omitempty"`
	BannerUrlMobile []string               `protobuf:"bytes,4,rep,name=banner_url_mobile,json=bannerUrlMobile" json:"banner_url_mobile,omitempty"`
	StartDate       *uint32                `protobuf:"varint,5,opt,name=start_date,json=startDate" json:"start_date,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CSteamCharts_GetBestOfYearPages_Response_BestOfYearPage) Reset() {
	*x = CSteamCharts_GetBestOfYearPages_Response_BestOfYearPage{}
	mi := &file_service_steamcharts_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamCharts_GetBestOfYearPages_Response_BestOfYearPage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamCharts_GetBestOfYearPages_Response_BestOfYearPage) ProtoMessage() {}

func (x *CSteamCharts_GetBestOfYearPages_Response_BestOfYearPage) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamcharts_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamCharts_GetBestOfYearPages_Response_BestOfYearPage.ProtoReflect.Descriptor instead.
func (*CSteamCharts_GetBestOfYearPages_Response_BestOfYearPage) Descriptor() ([]byte, []int) {
	return file_service_steamcharts_proto_rawDescGZIP(), []int{2}
}

func (x *CSteamCharts_GetBestOfYearPages_Response_BestOfYearPage) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CSteamCharts_GetBestOfYearPages_Response_BestOfYearPage) GetUrlPath() string {
	if x != nil && x.UrlPath != nil {
		return *x.UrlPath
	}
	return ""
}

func (x *CSteamCharts_GetBestOfYearPages_Response_BestOfYearPage) GetBannerUrl() []string {
	if x != nil {
		return x.BannerUrl
	}
	return nil
}

func (x *CSteamCharts_GetBestOfYearPages_Response_BestOfYearPage) GetBannerUrlMobile() []string {
	if x != nil {
		return x.BannerUrlMobile
	}
	return nil
}

func (x *CSteamCharts_GetBestOfYearPages_Response_BestOfYearPage) GetStartDate() uint32 {
	if x != nil && x.StartDate != nil {
		return *x.StartDate
	}
	return 0
}

type CSteamCharts_GetGamesByConcurrentPlayers_Request struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	Context       *StoreBrowseContext         `protobuf:"bytes,1,opt,name=context" json:"context,omitempty"`
	DataRequest   *StoreBrowseItemDataRequest `protobuf:"bytes,2,opt,name=data_request,json=dataRequest" json:"data_request,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CSteamCharts_GetGamesByConcurrentPlayers_Request) Reset() {
	*x = CSteamCharts_GetGamesByConcurrentPlayers_Request{}
	mi := &file_service_steamcharts_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamCharts_GetGamesByConcurrentPlayers_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamCharts_GetGamesByConcurrentPlayers_Request) ProtoMessage() {}

func (x *CSteamCharts_GetGamesByConcurrentPlayers_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamcharts_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamCharts_GetGamesByConcurrentPlayers_Request.ProtoReflect.Descriptor instead.
func (*CSteamCharts_GetGamesByConcurrentPlayers_Request) Descriptor() ([]byte, []int) {
	return file_service_steamcharts_proto_rawDescGZIP(), []int{3}
}

func (x *CSteamCharts_GetGamesByConcurrentPlayers_Request) GetContext() *StoreBrowseContext {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *CSteamCharts_GetGamesByConcurrentPlayers_Request) GetDataRequest() *StoreBrowseItemDataRequest {
	if x != nil {
		return x.DataRequest
	}
	return nil
}

type CSteamCharts_GetGamesByConcurrentPlayers_Response struct {
	state         protoimpl.MessageState                                              `protogen:"open.v1"`
	LastUpdate    *uint32                                                             `protobuf:"varint,1,opt,name=last_update,json=lastUpdate" json:"last_update,omitempty"`
	Ranks         []*CSteamCharts_GetGamesByConcurrentPlayers_Response_MostPlayedRank `protobuf:"bytes,2,rep,name=ranks" json:"ranks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CSteamCharts_GetGamesByConcurrentPlayers_Response) Reset() {
	*x = CSteamCharts_GetGamesByConcurrentPlayers_Response{}
	mi := &file_service_steamcharts_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamCharts_GetGamesByConcurrentPlayers_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamCharts_GetGamesByConcurrentPlayers_Response) ProtoMessage() {}

func (x *CSteamCharts_GetGamesByConcurrentPlayers_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamcharts_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamCharts_GetGamesByConcurrentPlayers_Response.ProtoReflect.Descriptor instead.
func (*CSteamCharts_GetGamesByConcurrentPlayers_Response) Descriptor() ([]byte, []int) {
	return file_service_steamcharts_proto_rawDescGZIP(), []int{4}
}

func (x *CSteamCharts_GetGamesByConcurrentPlayers_Response) GetLastUpdate() uint32 {
	if x != nil && x.LastUpdate != nil {
		return *x.LastUpdate
	}
	return 0
}

func (x *CSteamCharts_GetGamesByConcurrentPlayers_Response) GetRanks() []*CSteamCharts_GetGamesByConcurrentPlayers_Response_MostPlayedRank {
	if x != nil {
		return x.Ranks
	}
	return nil
}

type CSteamCharts_GetGamesByConcurrentPlayers_Response_MostPlayedRank struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Rank             *int32                 `protobuf:"varint,1,opt,name=rank" json:"rank,omitempty"`
	Appid            *uint32                `protobuf:"varint,2,opt,name=appid" json:"appid,omitempty"`
	Item             *StoreItem             `protobuf:"bytes,3,opt,name=item" json:"item,omitempty"`
	ConcurrentInGame *uint32                `protobuf:"varint,4,opt,name=concurrent_in_game,json=concurrentInGame" json:"concurrent_in_game,omitempty"`
	PeakInGame       *uint32                `protobuf:"varint,5,opt,name=peak_in_game,json=peakInGame" json:"peak_in_game,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CSteamCharts_GetGamesByConcurrentPlayers_Response_MostPlayedRank) Reset() {
	*x = CSteamCharts_GetGamesByConcurrentPlayers_Response_MostPlayedRank{}
	mi := &file_service_steamcharts_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamCharts_GetGamesByConcurrentPlayers_Response_MostPlayedRank) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamCharts_GetGamesByConcurrentPlayers_Response_MostPlayedRank) ProtoMessage() {}

func (x *CSteamCharts_GetGamesByConcurrentPlayers_Response_MostPlayedRank) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamcharts_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamCharts_GetGamesByConcurrentPlayers_Response_MostPlayedRank.ProtoReflect.Descriptor instead.
func (*CSteamCharts_GetGamesByConcurrentPlayers_Response_MostPlayedRank) Descriptor() ([]byte, []int) {
	return file_service_steamcharts_proto_rawDescGZIP(), []int{5}
}

func (x *CSteamCharts_GetGamesByConcurrentPlayers_Response_MostPlayedRank) GetRank() int32 {
	if x != nil && x.Rank != nil {
		return *x.Rank
	}
	return 0
}

func (x *CSteamCharts_GetGamesByConcurrentPlayers_Response_MostPlayedRank) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CSteamCharts_GetGamesByConcurrentPlayers_Response_MostPlayedRank) GetItem() *StoreItem {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *CSteamCharts_GetGamesByConcurrentPlayers_Response_MostPlayedRank) GetConcurrentInGame() uint32 {
	if x != nil && x.ConcurrentInGame != nil {
		return *x.ConcurrentInGame
	}
	return 0
}

func (x *CSteamCharts_GetGamesByConcurrentPlayers_Response_MostPlayedRank) GetPeakInGame() uint32 {
	if x != nil && x.PeakInGame != nil {
		return *x.PeakInGame
	}
	return 0
}

type CSteamCharts_GetMonthTopAppReleases_Request struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	RtimeMonth      *uint32                `protobuf:"varint,1,opt,name=rtime_month,json=rtimeMonth" json:"rtime_month,omitempty"`
	IncludeDlc      *bool                  `protobuf:"varint,2,opt,name=include_dlc,json=includeDlc" json:"include_dlc,omitempty"`
	TopResultsLimit *uint32                `protobuf:"varint,3,opt,name=top_results_limit,json=topResultsLimit" json:"top_results_limit,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CSteamCharts_GetMonthTopAppReleases_Request) Reset() {
	*x = CSteamCharts_GetMonthTopAppReleases_Request{}
	mi := &file_service_steamcharts_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamCharts_GetMonthTopAppReleases_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamCharts_GetMonthTopAppReleases_Request) ProtoMessage() {}

func (x *CSteamCharts_GetMonthTopAppReleases_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamcharts_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamCharts_GetMonthTopAppReleases_Request.ProtoReflect.Descriptor instead.
func (*CSteamCharts_GetMonthTopAppReleases_Request) Descriptor() ([]byte, []int) {
	return file_service_steamcharts_proto_rawDescGZIP(), []int{6}
}

func (x *CSteamCharts_GetMonthTopAppReleases_Request) GetRtimeMonth() uint32 {
	if x != nil && x.RtimeMonth != nil {
		return *x.RtimeMonth
	}
	return 0
}

func (x *CSteamCharts_GetMonthTopAppReleases_Request) GetIncludeDlc() bool {
	if x != nil && x.IncludeDlc != nil {
		return *x.IncludeDlc
	}
	return false
}

func (x *CSteamCharts_GetMonthTopAppReleases_Request) GetTopResultsLimit() uint32 {
	if x != nil && x.TopResultsLimit != nil {
		return *x.TopResultsLimit
	}
	return 0
}

type CSteamCharts_GetMonthTopAppReleases_Response struct {
	state                        protoimpl.MessageState                                        `protogen:"open.v1"`
	TopDlcReleases               []*CSteamCharts_GetMonthTopAppReleases_Response_AppNewRelease `protobuf:"bytes,2,rep,name=top_dlc_releases,json=topDlcReleases" json:"top_dlc_releases,omitempty"`
	TopCombinedAppAndDlcReleases []*CSteamCharts_GetMonthTopAppReleases_Response_AppNewRelease `protobuf:"bytes,3,rep,name=top_combined_app_and_dlc_releases,json=topCombinedAppAndDlcReleases" json:"top_combined_app_and_dlc_releases,omitempty"`
	unknownFields                protoimpl.UnknownFields
	sizeCache                    protoimpl.SizeCache
}

func (x *CSteamCharts_GetMonthTopAppReleases_Response) Reset() {
	*x = CSteamCharts_GetMonthTopAppReleases_Response{}
	mi := &file_service_steamcharts_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamCharts_GetMonthTopAppReleases_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamCharts_GetMonthTopAppReleases_Response) ProtoMessage() {}

func (x *CSteamCharts_GetMonthTopAppReleases_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamcharts_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamCharts_GetMonthTopAppReleases_Response.ProtoReflect.Descriptor instead.
func (*CSteamCharts_GetMonthTopAppReleases_Response) Descriptor() ([]byte, []int) {
	return file_service_steamcharts_proto_rawDescGZIP(), []int{7}
}

func (x *CSteamCharts_GetMonthTopAppReleases_Response) GetTopDlcReleases() []*CSteamCharts_GetMonthTopAppReleases_Response_AppNewRelease {
	if x != nil {
		return x.TopDlcReleases
	}
	return nil
}

func (x *CSteamCharts_GetMonthTopAppReleases_Response) GetTopCombinedAppAndDlcReleases() []*CSteamCharts_GetMonthTopAppReleases_Response_AppNewRelease {
	if x != nil {
		return x.TopCombinedAppAndDlcReleases
	}
	return nil
}

type CSteamCharts_GetMonthTopAppReleases_Response_AppNewRelease struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Appid          *uint32                `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	RtimeRelease   *uint32                `protobuf:"varint,2,opt,name=rtime_release,json=rtimeRelease" json:"rtime_release,omitempty"`
	AppReleaseRank *int32                 `protobuf:"varint,3,opt,name=app_release_rank,json=appReleaseRank" json:"app_release_rank,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CSteamCharts_GetMonthTopAppReleases_Response_AppNewRelease) Reset() {
	*x = CSteamCharts_GetMonthTopAppReleases_Response_AppNewRelease{}
	mi := &file_service_steamcharts_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamCharts_GetMonthTopAppReleases_Response_AppNewRelease) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamCharts_GetMonthTopAppReleases_Response_AppNewRelease) ProtoMessage() {}

func (x *CSteamCharts_GetMonthTopAppReleases_Response_AppNewRelease) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamcharts_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamCharts_GetMonthTopAppReleases_Response_AppNewRelease.ProtoReflect.Descriptor instead.
func (*CSteamCharts_GetMonthTopAppReleases_Response_AppNewRelease) Descriptor() ([]byte, []int) {
	return file_service_steamcharts_proto_rawDescGZIP(), []int{8}
}

func (x *CSteamCharts_GetMonthTopAppReleases_Response_AppNewRelease) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CSteamCharts_GetMonthTopAppReleases_Response_AppNewRelease) GetRtimeRelease() uint32 {
	if x != nil && x.RtimeRelease != nil {
		return *x.RtimeRelease
	}
	return 0
}

func (x *CSteamCharts_GetMonthTopAppReleases_Response_AppNewRelease) GetAppReleaseRank() int32 {
	if x != nil && x.AppReleaseRank != nil {
		return *x.AppReleaseRank
	}
	return 0
}

type CSteamCharts_GetMostPlayedGames_Request struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	Context       *StoreBrowseContext         `protobuf:"bytes,1,opt,name=context" json:"context,omitempty"`
	DataRequest   *StoreBrowseItemDataRequest `protobuf:"bytes,2,opt,name=data_request,json=dataRequest" json:"data_request,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CSteamCharts_GetMostPlayedGames_Request) Reset() {
	*x = CSteamCharts_GetMostPlayedGames_Request{}
	mi := &file_service_steamcharts_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamCharts_GetMostPlayedGames_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamCharts_GetMostPlayedGames_Request) ProtoMessage() {}

func (x *CSteamCharts_GetMostPlayedGames_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamcharts_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamCharts_GetMostPlayedGames_Request.ProtoReflect.Descriptor instead.
func (*CSteamCharts_GetMostPlayedGames_Request) Descriptor() ([]byte, []int) {
	return file_service_steamcharts_proto_rawDescGZIP(), []int{9}
}

func (x *CSteamCharts_GetMostPlayedGames_Request) GetContext() *StoreBrowseContext {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *CSteamCharts_GetMostPlayedGames_Request) GetDataRequest() *StoreBrowseItemDataRequest {
	if x != nil {
		return x.DataRequest
	}
	return nil
}

type CSteamCharts_GetMostPlayedGames_Response struct {
	state         protoimpl.MessageState                                     `protogen:"open.v1"`
	RollupDate    *uint32                                                    `protobuf:"varint,1,opt,name=rollup_date,json=rollupDate" json:"rollup_date,omitempty"`
	Ranks         []*CSteamCharts_GetMostPlayedGames_Response_MostPlayedRank `protobuf:"bytes,2,rep,name=ranks" json:"ranks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CSteamCharts_GetMostPlayedGames_Response) Reset() {
	*x = CSteamCharts_GetMostPlayedGames_Response{}
	mi := &file_service_steamcharts_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamCharts_GetMostPlayedGames_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamCharts_GetMostPlayedGames_Response) ProtoMessage() {}

func (x *CSteamCharts_GetMostPlayedGames_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamcharts_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamCharts_GetMostPlayedGames_Response.ProtoReflect.Descriptor instead.
func (*CSteamCharts_GetMostPlayedGames_Response) Descriptor() ([]byte, []int) {
	return file_service_steamcharts_proto_rawDescGZIP(), []int{10}
}

func (x *CSteamCharts_GetMostPlayedGames_Response) GetRollupDate() uint32 {
	if x != nil && x.RollupDate != nil {
		return *x.RollupDate
	}
	return 0
}

func (x *CSteamCharts_GetMostPlayedGames_Response) GetRanks() []*CSteamCharts_GetMostPlayedGames_Response_MostPlayedRank {
	if x != nil {
		return x.Ranks
	}
	return nil
}

type CSteamCharts_GetMostPlayedGames_Response_MostPlayedRank struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Rank               *int32                 `protobuf:"varint,1,opt,name=rank" json:"rank,omitempty"`
	Appid              *uint32                `protobuf:"varint,2,opt,name=appid" json:"appid,omitempty"`
	Item               *StoreItem             `protobuf:"bytes,3,opt,name=item" json:"item,omitempty"`
	LastWeekRank       *int32                 `protobuf:"varint,4,opt,name=last_week_rank,json=lastWeekRank" json:"last_week_rank,omitempty"`
	PeakInGame         *uint32                `protobuf:"varint,5,opt,name=peak_in_game,json=peakInGame" json:"peak_in_game,omitempty"`
	DailyActivePlayers *uint32                `protobuf:"varint,6,opt,name=daily_active_players,json=dailyActivePlayers" json:"daily_active_players,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *CSteamCharts_GetMostPlayedGames_Response_MostPlayedRank) Reset() {
	*x = CSteamCharts_GetMostPlayedGames_Response_MostPlayedRank{}
	mi := &file_service_steamcharts_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamCharts_GetMostPlayedGames_Response_MostPlayedRank) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamCharts_GetMostPlayedGames_Response_MostPlayedRank) ProtoMessage() {}

func (x *CSteamCharts_GetMostPlayedGames_Response_MostPlayedRank) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamcharts_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamCharts_GetMostPlayedGames_Response_MostPlayedRank.ProtoReflect.Descriptor instead.
func (*CSteamCharts_GetMostPlayedGames_Response_MostPlayedRank) Descriptor() ([]byte, []int) {
	return file_service_steamcharts_proto_rawDescGZIP(), []int{11}
}

func (x *CSteamCharts_GetMostPlayedGames_Response_MostPlayedRank) GetRank() int32 {
	if x != nil && x.Rank != nil {
		return *x.Rank
	}
	return 0
}

func (x *CSteamCharts_GetMostPlayedGames_Response_MostPlayedRank) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CSteamCharts_GetMostPlayedGames_Response_MostPlayedRank) GetItem() *StoreItem {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *CSteamCharts_GetMostPlayedGames_Response_MostPlayedRank) GetLastWeekRank() int32 {
	if x != nil && x.LastWeekRank != nil {
		return *x.LastWeekRank
	}
	return 0
}

func (x *CSteamCharts_GetMostPlayedGames_Response_MostPlayedRank) GetPeakInGame() uint32 {
	if x != nil && x.PeakInGame != nil {
		return *x.PeakInGame
	}
	return 0
}

func (x *CSteamCharts_GetMostPlayedGames_Response_MostPlayedRank) GetDailyActivePlayers() uint32 {
	if x != nil && x.DailyActivePlayers != nil {
		return *x.DailyActivePlayers
	}
	return 0
}

type CSteamCharts_GetMostPlayedSteamDeckGames_Request struct {
	state           protoimpl.MessageState      `protogen:"open.v1"`
	Context         *StoreBrowseContext         `protobuf:"bytes,1,opt,name=context" json:"context,omitempty"`
	DataRequest     *StoreBrowseItemDataRequest `protobuf:"bytes,2,opt,name=data_request,json=dataRequest" json:"data_request,omitempty"`
	TopPlayedPeriod *int32                      `protobuf:"varint,3,opt,name=top_played_period,json=topPlayedPeriod" json:"top_played_period,omitempty"`
	Count           *int32                      `protobuf:"varint,4,opt,name=count" json:"count,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CSteamCharts_GetMostPlayedSteamDeckGames_Request) Reset() {
	*x = CSteamCharts_GetMostPlayedSteamDeckGames_Request{}
	mi := &file_service_steamcharts_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamCharts_GetMostPlayedSteamDeckGames_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamCharts_GetMostPlayedSteamDeckGames_Request) ProtoMessage() {}

func (x *CSteamCharts_GetMostPlayedSteamDeckGames_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamcharts_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamCharts_GetMostPlayedSteamDeckGames_Request.ProtoReflect.Descriptor instead.
func (*CSteamCharts_GetMostPlayedSteamDeckGames_Request) Descriptor() ([]byte, []int) {
	return file_service_steamcharts_proto_rawDescGZIP(), []int{12}
}

func (x *CSteamCharts_GetMostPlayedSteamDeckGames_Request) GetContext() *StoreBrowseContext {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *CSteamCharts_GetMostPlayedSteamDeckGames_Request) GetDataRequest() *StoreBrowseItemDataRequest {
	if x != nil {
		return x.DataRequest
	}
	return nil
}

func (x *CSteamCharts_GetMostPlayedSteamDeckGames_Request) GetTopPlayedPeriod() int32 {
	if x != nil && x.TopPlayedPeriod != nil {
		return *x.TopPlayedPeriod
	}
	return 0
}

func (x *CSteamCharts_GetMostPlayedSteamDeckGames_Request) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

type CSteamCharts_GetMostPlayedSteamDeckGames_Response struct {
	state           protoimpl.MessageState                                              `protogen:"open.v1"`
	Ranks           []*CSteamCharts_GetMostPlayedSteamDeckGames_Response_MostPlayedRank `protobuf:"bytes,1,rep,name=ranks" json:"ranks,omitempty"`
	TopPlayedPeriod *int32                                                              `protobuf:"varint,2,opt,name=top_played_period,json=topPlayedPeriod" json:"top_played_period,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CSteamCharts_GetMostPlayedSteamDeckGames_Response) Reset() {
	*x = CSteamCharts_GetMostPlayedSteamDeckGames_Response{}
	mi := &file_service_steamcharts_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamCharts_GetMostPlayedSteamDeckGames_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamCharts_GetMostPlayedSteamDeckGames_Response) ProtoMessage() {}

func (x *CSteamCharts_GetMostPlayedSteamDeckGames_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamcharts_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamCharts_GetMostPlayedSteamDeckGames_Response.ProtoReflect.Descriptor instead.
func (*CSteamCharts_GetMostPlayedSteamDeckGames_Response) Descriptor() ([]byte, []int) {
	return file_service_steamcharts_proto_rawDescGZIP(), []int{13}
}

func (x *CSteamCharts_GetMostPlayedSteamDeckGames_Response) GetRanks() []*CSteamCharts_GetMostPlayedSteamDeckGames_Response_MostPlayedRank {
	if x != nil {
		return x.Ranks
	}
	return nil
}

func (x *CSteamCharts_GetMostPlayedSteamDeckGames_Response) GetTopPlayedPeriod() int32 {
	if x != nil && x.TopPlayedPeriod != nil {
		return *x.TopPlayedPeriod
	}
	return 0
}

type CSteamCharts_GetMostPlayedSteamDeckGames_Response_MostPlayedRank struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Rank           *int32                 `protobuf:"varint,1,opt,name=rank" json:"rank,omitempty"`
	Appid          *uint32                `protobuf:"varint,2,opt,name=appid" json:"appid,omitempty"`
	Item           *StoreItem             `protobuf:"bytes,3,opt,name=item" json:"item,omitempty"`
	LastPeriodRank *int32                 `protobuf:"varint,4,opt,name=last_period_rank,json=lastPeriodRank" json:"last_period_rank,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CSteamCharts_GetMostPlayedSteamDeckGames_Response_MostPlayedRank) Reset() {
	*x = CSteamCharts_GetMostPlayedSteamDeckGames_Response_MostPlayedRank{}
	mi := &file_service_steamcharts_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamCharts_GetMostPlayedSteamDeckGames_Response_MostPlayedRank) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamCharts_GetMostPlayedSteamDeckGames_Response_MostPlayedRank) ProtoMessage() {}

func (x *CSteamCharts_GetMostPlayedSteamDeckGames_Response_MostPlayedRank) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamcharts_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamCharts_GetMostPlayedSteamDeckGames_Response_MostPlayedRank.ProtoReflect.Descriptor instead.
func (*CSteamCharts_GetMostPlayedSteamDeckGames_Response_MostPlayedRank) Descriptor() ([]byte, []int) {
	return file_service_steamcharts_proto_rawDescGZIP(), []int{14}
}

func (x *CSteamCharts_GetMostPlayedSteamDeckGames_Response_MostPlayedRank) GetRank() int32 {
	if x != nil && x.Rank != nil {
		return *x.Rank
	}
	return 0
}

func (x *CSteamCharts_GetMostPlayedSteamDeckGames_Response_MostPlayedRank) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CSteamCharts_GetMostPlayedSteamDeckGames_Response_MostPlayedRank) GetItem() *StoreItem {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *CSteamCharts_GetMostPlayedSteamDeckGames_Response_MostPlayedRank) GetLastPeriodRank() int32 {
	if x != nil && x.LastPeriodRank != nil {
		return *x.LastPeriodRank
	}
	return 0
}

type CSteamCharts_GetTopReleasesPages_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CSteamCharts_GetTopReleasesPages_Request) Reset() {
	*x = CSteamCharts_GetTopReleasesPages_Request{}
	mi := &file_service_steamcharts_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamCharts_GetTopReleasesPages_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamCharts_GetTopReleasesPages_Request) ProtoMessage() {}

func (x *CSteamCharts_GetTopReleasesPages_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamcharts_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamCharts_GetTopReleasesPages_Request.ProtoReflect.Descriptor instead.
func (*CSteamCharts_GetTopReleasesPages_Request) Descriptor() ([]byte, []int) {
	return file_service_steamcharts_proto_rawDescGZIP(), []int{15}
}

type CSteamCharts_GetTopReleasesPages_Response struct {
	state         protoimpl.MessageState                                       `protogen:"open.v1"`
	Pages         []*CSteamCharts_GetTopReleasesPages_Response_TopReleasesPage `protobuf:"bytes,1,rep,name=pages" json:"pages,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CSteamCharts_GetTopReleasesPages_Response) Reset() {
	*x = CSteamCharts_GetTopReleasesPages_Response{}
	mi := &file_service_steamcharts_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamCharts_GetTopReleasesPages_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamCharts_GetTopReleasesPages_Response) ProtoMessage() {}

func (x *CSteamCharts_GetTopReleasesPages_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamcharts_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamCharts_GetTopReleasesPages_Response.ProtoReflect.Descriptor instead.
func (*CSteamCharts_GetTopReleasesPages_Response) Descriptor() ([]byte, []int) {
	return file_service_steamcharts_proto_rawDescGZIP(), []int{16}
}

func (x *CSteamCharts_GetTopReleasesPages_Response) GetPages() []*CSteamCharts_GetTopReleasesPages_Response_TopReleasesPage {
	if x != nil {
		return x.Pages
	}
	return nil
}

type CSteamCharts_GetTopReleasesPages_Response_TopReleasesPage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          *string                `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	StartOfMonth  *uint32                `protobuf:"varint,2,opt,name=start_of_month,json=startOfMonth" json:"start_of_month,omitempty"`
	UrlPath       *string                `protobuf:"bytes,3,opt,name=url_path,json=urlPath" json:"url_path,omitempty"`
	ItemIds       []*StoreItemID         `protobuf:"bytes,4,rep,name=item_ids,json=itemIds" json:"item_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CSteamCharts_GetTopReleasesPages_Response_TopReleasesPage) Reset() {
	*x = CSteamCharts_GetTopReleasesPages_Response_TopReleasesPage{}
	mi := &file_service_steamcharts_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamCharts_GetTopReleasesPages_Response_TopReleasesPage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamCharts_GetTopReleasesPages_Response_TopReleasesPage) ProtoMessage() {}

func (x *CSteamCharts_GetTopReleasesPages_Response_TopReleasesPage) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamcharts_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamCharts_GetTopReleasesPages_Response_TopReleasesPage.ProtoReflect.Descriptor instead.
func (*CSteamCharts_GetTopReleasesPages_Response_TopReleasesPage) Descriptor() ([]byte, []int) {
	return file_service_steamcharts_proto_rawDescGZIP(), []int{17}
}

func (x *CSteamCharts_GetTopReleasesPages_Response_TopReleasesPage) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CSteamCharts_GetTopReleasesPages_Response_TopReleasesPage) GetStartOfMonth() uint32 {
	if x != nil && x.StartOfMonth != nil {
		return *x.StartOfMonth
	}
	return 0
}

func (x *CSteamCharts_GetTopReleasesPages_Response_TopReleasesPage) GetUrlPath() string {
	if x != nil && x.UrlPath != nil {
		return *x.UrlPath
	}
	return ""
}

func (x *CSteamCharts_GetTopReleasesPages_Response_TopReleasesPage) GetItemIds() []*StoreItemID {
	if x != nil {
		return x.ItemIds
	}
	return nil
}

var File_service_steamcharts_proto protoreflect.FileDescriptor

const file_service_steamcharts_proto_rawDesc = "" +
	"\n" +
	"\x19service_steamcharts.proto\x1a\x11common_base.proto\x1a\fcommon.proto\")\n" +
	"'CSteamCharts_GetBestOfYearPages_Request\"z\n" +
	"(CSteamCharts_GetBestOfYearPages_Response\x12N\n" +
	"\x05pages\x18\x01 \x03(\v28.CSteamCharts_GetBestOfYearPages_Response_BestOfYearPageR\x05pages\"\xd2\x01\n" +
	"7CSteamCharts_GetBestOfYearPages_Response_BestOfYearPage\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x19\n" +
	"\burl_path\x18\x02 \x01(\tR\aurlPath\x12\x1d\n" +
	"\n" +
	"banner_url\x18\x03 \x03(\tR\tbannerUrl\x12*\n" +
	"\x11banner_url_mobile\x18\x04 \x03(\tR\x0fbannerUrlMobile\x12\x1d\n" +
	"\n" +
	"start_date\x18\x05 \x01(\rR\tstartDate\"\xa1\x01\n" +
	"0CSteamCharts_GetGamesByConcurrentPlayers_Request\x12-\n" +
	"\acontext\x18\x01 \x01(\v2\x13.StoreBrowseContextR\acontext\x12>\n" +
	"\fdata_request\x18\x02 \x01(\v2\x1b.StoreBrowseItemDataRequestR\vdataRequest\"\xad\x01\n" +
	"1CSteamCharts_GetGamesByConcurrentPlayers_Response\x12\x1f\n" +
	"\vlast_update\x18\x01 \x01(\rR\n" +
	"lastUpdate\x12W\n" +
	"\x05ranks\x18\x02 \x03(\v2A.CSteamCharts_GetGamesByConcurrentPlayers_Response_MostPlayedRankR\x05ranks\"\xdc\x01\n" +
	"@CSteamCharts_GetGamesByConcurrentPlayers_Response_MostPlayedRank\x12\x12\n" +
	"\x04rank\x18\x01 \x01(\x05R\x04rank\x12\x14\n" +
	"\x05appid\x18\x02 \x01(\rR\x05appid\x12\x1e\n" +
	"\x04item\x18\x03 \x01(\v2\n" +
	".StoreItemR\x04item\x12,\n" +
	"\x12concurrent_in_game\x18\x04 \x01(\rR\x10concurrentInGame\x12 \n" +
	"\fpeak_in_game\x18\x05 \x01(\rR\n" +
	"peakInGame\"\x9b\x01\n" +
	"+CSteamCharts_GetMonthTopAppReleases_Request\x12\x1f\n" +
	"\vrtime_month\x18\x01 \x01(\rR\n" +
	"rtimeMonth\x12\x1f\n" +
	"\vinclude_dlc\x18\x02 \x01(\bR\n" +
	"includeDlc\x12*\n" +
	"\x11top_results_limit\x18\x03 \x01(\rR\x0ftopResultsLimit\"\x9c\x02\n" +
	",CSteamCharts_GetMonthTopAppReleases_Response\x12e\n" +
	"\x10top_dlc_releases\x18\x02 \x03(\v2;.CSteamCharts_GetMonthTopAppReleases_Response_AppNewReleaseR\x0etopDlcReleases\x12\x84\x01\n" +
	"!top_combined_app_and_dlc_releases\x18\x03 \x03(\v2;.CSteamCharts_GetMonthTopAppReleases_Response_AppNewReleaseR\x1ctopCombinedAppAndDlcReleases\"\xab\x01\n" +
	":CSteamCharts_GetMonthTopAppReleases_Response_AppNewRelease\x12\x14\n" +
	"\x05appid\x18\x01 \x01(\rR\x05appid\x12#\n" +
	"\rrtime_release\x18\x02 \x01(\rR\frtimeRelease\x122\n" +
	"\x10app_release_rank\x18\x03 \x01(\x05B\b\x82\xb5\x18\x04enumR\x0eappReleaseRank\"\x98\x01\n" +
	"'CSteamCharts_GetMostPlayedGames_Request\x12-\n" +
	"\acontext\x18\x01 \x01(\v2\x13.StoreBrowseContextR\acontext\x12>\n" +
	"\fdata_request\x18\x02 \x01(\v2\x1b.StoreBrowseItemDataRequestR\vdataRequest\"\x9b\x01\n" +
	"(CSteamCharts_GetMostPlayedGames_Response\x12\x1f\n" +
	"\vrollup_date\x18\x01 \x01(\rR\n" +
	"rollupDate\x12N\n" +
	"\x05ranks\x18\x02 \x03(\v28.CSteamCharts_GetMostPlayedGames_Response_MostPlayedRankR\x05ranks\"\xfd\x01\n" +
	"7CSteamCharts_GetMostPlayedGames_Response_MostPlayedRank\x12\x12\n" +
	"\x04rank\x18\x01 \x01(\x05R\x04rank\x12\x14\n" +
	"\x05appid\x18\x02 \x01(\rR\x05appid\x12\x1e\n" +
	"\x04item\x18\x03 \x01(\v2\n" +
	".StoreItemR\x04item\x12$\n" +
	"\x0elast_week_rank\x18\x04 \x01(\x05R\flastWeekRank\x12 \n" +
	"\fpeak_in_game\x18\x05 \x01(\rR\n" +
	"peakInGame\x120\n" +
	"\x14daily_active_players\x18\x06 \x01(\rR\x12dailyActivePlayers\"\xed\x01\n" +
	"0CSteamCharts_GetMostPlayedSteamDeckGames_Request\x12-\n" +
	"\acontext\x18\x01 \x01(\v2\x13.StoreBrowseContextR\acontext\x12>\n" +
	"\fdata_request\x18\x02 \x01(\v2\x1b.StoreBrowseItemDataRequestR\vdataRequest\x124\n" +
	"\x11top_played_period\x18\x03 \x01(\x05B\b\x82\xb5\x18\x04enumR\x0ftopPlayedPeriod\x12\x14\n" +
	"\x05count\x18\x04 \x01(\x05R\x05count\"\xc2\x01\n" +
	"1CSteamCharts_GetMostPlayedSteamDeckGames_Response\x12W\n" +
	"\x05ranks\x18\x01 \x03(\v2A.CSteamCharts_GetMostPlayedSteamDeckGames_Response_MostPlayedRankR\x05ranks\x124\n" +
	"\x11top_played_period\x18\x02 \x01(\x05B\b\x82\xb5\x18\x04enumR\x0ftopPlayedPeriod\"\xb6\x01\n" +
	"@CSteamCharts_GetMostPlayedSteamDeckGames_Response_MostPlayedRank\x12\x12\n" +
	"\x04rank\x18\x01 \x01(\x05R\x04rank\x12\x14\n" +
	"\x05appid\x18\x02 \x01(\rR\x05appid\x12\x1e\n" +
	"\x04item\x18\x03 \x01(\v2\n" +
	".StoreItemR\x04item\x12(\n" +
	"\x10last_period_rank\x18\x04 \x01(\x05R\x0elastPeriodRank\"*\n" +
	"(CSteamCharts_GetTopReleasesPages_Request\"}\n" +
	")CSteamCharts_GetTopReleasesPages_Response\x12P\n" +
	"\x05pages\x18\x01 \x03(\v2:.CSteamCharts_GetTopReleasesPages_Response_TopReleasesPageR\x05pages\"\xb9\x01\n" +
	"9CSteamCharts_GetTopReleasesPages_Response_TopReleasesPage\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12$\n" +
	"\x0estart_of_month\x18\x02 \x01(\rR\fstartOfMonth\x12\x19\n" +
	"\burl_path\x18\x03 \x01(\tR\aurlPath\x12'\n" +
	"\bitem_ids\x18\x04 \x03(\v2\f.StoreItemIDR\aitemIds2\xd6\x05\n" +
	"\vSteamCharts\x12i\n" +
	"\x12GetBestOfYearPages\x12(.CSteamCharts_GetBestOfYearPages_Request\x1a).CSteamCharts_GetBestOfYearPages_Response\x12\x84\x01\n" +
	"\x1bGetGamesByConcurrentPlayers\x121.CSteamCharts_GetGamesByConcurrentPlayers_Request\x1a2.CSteamCharts_GetGamesByConcurrentPlayers_Response\x12u\n" +
	"\x16GetMonthTopAppReleases\x12,.CSteamCharts_GetMonthTopAppReleases_Request\x1a-.CSteamCharts_GetMonthTopAppReleases_Response\x12i\n" +
	"\x12GetMostPlayedGames\x12(.CSteamCharts_GetMostPlayedGames_Request\x1a).CSteamCharts_GetMostPlayedGames_Response\x12\x84\x01\n" +
	"\x1bGetMostPlayedSteamDeckGames\x121.CSteamCharts_GetMostPlayedSteamDeckGames_Request\x1a2.CSteamCharts_GetMostPlayedSteamDeckGames_Response\x12l\n" +
	"\x13GetTopReleasesPages\x12).CSteamCharts_GetTopReleasesPages_Request\x1a*.CSteamCharts_GetTopReleasesPages_Response"

var (
	file_service_steamcharts_proto_rawDescOnce sync.Once
	file_service_steamcharts_proto_rawDescData []byte
)

func file_service_steamcharts_proto_rawDescGZIP() []byte {
	file_service_steamcharts_proto_rawDescOnce.Do(func() {
		file_service_steamcharts_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_service_steamcharts_proto_rawDesc), len(file_service_steamcharts_proto_rawDesc)))
	})
	return file_service_steamcharts_proto_rawDescData
}

var file_service_steamcharts_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_service_steamcharts_proto_goTypes = []any{
	(*CSteamCharts_GetBestOfYearPages_Request)(nil),                          // 0: CSteamCharts_GetBestOfYearPages_Request
	(*CSteamCharts_GetBestOfYearPages_Response)(nil),                         // 1: CSteamCharts_GetBestOfYearPages_Response
	(*CSteamCharts_GetBestOfYearPages_Response_BestOfYearPage)(nil),          // 2: CSteamCharts_GetBestOfYearPages_Response_BestOfYearPage
	(*CSteamCharts_GetGamesByConcurrentPlayers_Request)(nil),                 // 3: CSteamCharts_GetGamesByConcurrentPlayers_Request
	(*CSteamCharts_GetGamesByConcurrentPlayers_Response)(nil),                // 4: CSteamCharts_GetGamesByConcurrentPlayers_Response
	(*CSteamCharts_GetGamesByConcurrentPlayers_Response_MostPlayedRank)(nil), // 5: CSteamCharts_GetGamesByConcurrentPlayers_Response_MostPlayedRank
	(*CSteamCharts_GetMonthTopAppReleases_Request)(nil),                      // 6: CSteamCharts_GetMonthTopAppReleases_Request
	(*CSteamCharts_GetMonthTopAppReleases_Response)(nil),                     // 7: CSteamCharts_GetMonthTopAppReleases_Response
	(*CSteamCharts_GetMonthTopAppReleases_Response_AppNewRelease)(nil),       // 8: CSteamCharts_GetMonthTopAppReleases_Response_AppNewRelease
	(*CSteamCharts_GetMostPlayedGames_Request)(nil),                          // 9: CSteamCharts_GetMostPlayedGames_Request
	(*CSteamCharts_GetMostPlayedGames_Response)(nil),                         // 10: CSteamCharts_GetMostPlayedGames_Response
	(*CSteamCharts_GetMostPlayedGames_Response_MostPlayedRank)(nil),          // 11: CSteamCharts_GetMostPlayedGames_Response_MostPlayedRank
	(*CSteamCharts_GetMostPlayedSteamDeckGames_Request)(nil),                 // 12: CSteamCharts_GetMostPlayedSteamDeckGames_Request
	(*CSteamCharts_GetMostPlayedSteamDeckGames_Response)(nil),                // 13: CSteamCharts_GetMostPlayedSteamDeckGames_Response
	(*CSteamCharts_GetMostPlayedSteamDeckGames_Response_MostPlayedRank)(nil), // 14: CSteamCharts_GetMostPlayedSteamDeckGames_Response_MostPlayedRank
	(*CSteamCharts_GetTopReleasesPages_Request)(nil),                         // 15: CSteamCharts_GetTopReleasesPages_Request
	(*CSteamCharts_GetTopReleasesPages_Response)(nil),                        // 16: CSteamCharts_GetTopReleasesPages_Response
	(*CSteamCharts_GetTopReleasesPages_Response_TopReleasesPage)(nil),        // 17: CSteamCharts_GetTopReleasesPages_Response_TopReleasesPage
	(*StoreBrowseContext)(nil),                                               // 18: StoreBrowseContext
	(*StoreBrowseItemDataRequest)(nil),                                       // 19: StoreBrowseItemDataRequest
	(*StoreItem)(nil),                                                        // 20: StoreItem
	(*StoreItemID)(nil),                                                      // 21: StoreItemID
}
var file_service_steamcharts_proto_depIdxs = []int32{
	2,  // 0: CSteamCharts_GetBestOfYearPages_Response.pages:type_name -> CSteamCharts_GetBestOfYearPages_Response_BestOfYearPage
	18, // 1: CSteamCharts_GetGamesByConcurrentPlayers_Request.context:type_name -> StoreBrowseContext
	19, // 2: CSteamCharts_GetGamesByConcurrentPlayers_Request.data_request:type_name -> StoreBrowseItemDataRequest
	5,  // 3: CSteamCharts_GetGamesByConcurrentPlayers_Response.ranks:type_name -> CSteamCharts_GetGamesByConcurrentPlayers_Response_MostPlayedRank
	20, // 4: CSteamCharts_GetGamesByConcurrentPlayers_Response_MostPlayedRank.item:type_name -> StoreItem
	8,  // 5: CSteamCharts_GetMonthTopAppReleases_Response.top_dlc_releases:type_name -> CSteamCharts_GetMonthTopAppReleases_Response_AppNewRelease
	8,  // 6: CSteamCharts_GetMonthTopAppReleases_Response.top_combined_app_and_dlc_releases:type_name -> CSteamCharts_GetMonthTopAppReleases_Response_AppNewRelease
	18, // 7: CSteamCharts_GetMostPlayedGames_Request.context:type_name -> StoreBrowseContext
	19, // 8: CSteamCharts_GetMostPlayedGames_Request.data_request:type_name -> StoreBrowseItemDataRequest
	11, // 9: CSteamCharts_GetMostPlayedGames_Response.ranks:type_name -> CSteamCharts_GetMostPlayedGames_Response_MostPlayedRank
	20, // 10: CSteamCharts_GetMostPlayedGames_Response_MostPlayedRank.item:type_name -> StoreItem
	18, // 11: CSteamCharts_GetMostPlayedSteamDeckGames_Request.context:type_name -> StoreBrowseContext
	19, // 12: CSteamCharts_GetMostPlayedSteamDeckGames_Request.data_request:type_name -> StoreBrowseItemDataRequest
	14, // 13: CSteamCharts_GetMostPlayedSteamDeckGames_Response.ranks:type_name -> CSteamCharts_GetMostPlayedSteamDeckGames_Response_MostPlayedRank
	20, // 14: CSteamCharts_GetMostPlayedSteamDeckGames_Response_MostPlayedRank.item:type_name -> StoreItem
	17, // 15: CSteamCharts_GetTopReleasesPages_Response.pages:type_name -> CSteamCharts_GetTopReleasesPages_Response_TopReleasesPage
	21, // 16: CSteamCharts_GetTopReleasesPages_Response_TopReleasesPage.item_ids:type_name -> StoreItemID
	0,  // 17: SteamCharts.GetBestOfYearPages:input_type -> CSteamCharts_GetBestOfYearPages_Request
	3,  // 18: SteamCharts.GetGamesByConcurrentPlayers:input_type -> CSteamCharts_GetGamesByConcurrentPlayers_Request
	6,  // 19: SteamCharts.GetMonthTopAppReleases:input_type -> CSteamCharts_GetMonthTopAppReleases_Request
	9,  // 20: SteamCharts.GetMostPlayedGames:input_type -> CSteamCharts_GetMostPlayedGames_Request
	12, // 21: SteamCharts.GetMostPlayedSteamDeckGames:input_type -> CSteamCharts_GetMostPlayedSteamDeckGames_Request
	15, // 22: SteamCharts.GetTopReleasesPages:input_type -> CSteamCharts_GetTopReleasesPages_Request
	1,  // 23: SteamCharts.GetBestOfYearPages:output_type -> CSteamCharts_GetBestOfYearPages_Response
	4,  // 24: SteamCharts.GetGamesByConcurrentPlayers:output_type -> CSteamCharts_GetGamesByConcurrentPlayers_Response
	7,  // 25: SteamCharts.GetMonthTopAppReleases:output_type -> CSteamCharts_GetMonthTopAppReleases_Response
	10, // 26: SteamCharts.GetMostPlayedGames:output_type -> CSteamCharts_GetMostPlayedGames_Response
	13, // 27: SteamCharts.GetMostPlayedSteamDeckGames:output_type -> CSteamCharts_GetMostPlayedSteamDeckGames_Response
	16, // 28: SteamCharts.GetTopReleasesPages:output_type -> CSteamCharts_GetTopReleasesPages_Response
	23, // [23:29] is the sub-list for method output_type
	17, // [17:23] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_service_steamcharts_proto_init() }
func file_service_steamcharts_proto_init() {
	if File_service_steamcharts_proto != nil {
		return
	}
	file_common_base_proto_init()
	file_common_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_service_steamcharts_proto_rawDesc), len(file_service_steamcharts_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_steamcharts_proto_goTypes,
		DependencyIndexes: file_service_steamcharts_proto_depIdxs,
		MessageInfos:      file_service_steamcharts_proto_msgTypes,
	}.Build()
	File_service_steamcharts_proto = out.File
	file_service_steamcharts_proto_goTypes = nil
	file_service_steamcharts_proto_depIdxs = nil
}
