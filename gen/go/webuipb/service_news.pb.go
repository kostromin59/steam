// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v6.32.0
// source: service_news.proto

package webuipb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CNews_ConvertHTMLToBBCode_Request struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Content          *string                `protobuf:"bytes,1,opt,name=content" json:"content,omitempty"`
	PreserveNewlines *bool                  `protobuf:"varint,2,opt,name=preserve_newlines,json=preserveNewlines,def=0" json:"preserve_newlines,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

// Default values for CNews_ConvertHTMLToBBCode_Request fields.
const (
	Default_CNews_ConvertHTMLToBBCode_Request_PreserveNewlines = bool(false)
)

func (x *CNews_ConvertHTMLToBBCode_Request) Reset() {
	*x = CNews_ConvertHTMLToBBCode_Request{}
	mi := &file_service_news_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CNews_ConvertHTMLToBBCode_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CNews_ConvertHTMLToBBCode_Request) ProtoMessage() {}

func (x *CNews_ConvertHTMLToBBCode_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_news_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CNews_ConvertHTMLToBBCode_Request.ProtoReflect.Descriptor instead.
func (*CNews_ConvertHTMLToBBCode_Request) Descriptor() ([]byte, []int) {
	return file_service_news_proto_rawDescGZIP(), []int{0}
}

func (x *CNews_ConvertHTMLToBBCode_Request) GetContent() string {
	if x != nil && x.Content != nil {
		return *x.Content
	}
	return ""
}

func (x *CNews_ConvertHTMLToBBCode_Request) GetPreserveNewlines() bool {
	if x != nil && x.PreserveNewlines != nil {
		return *x.PreserveNewlines
	}
	return Default_CNews_ConvertHTMLToBBCode_Request_PreserveNewlines
}

type CNews_ConvertHTMLToBBCode_Response struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	ConvertedContent *string                `protobuf:"bytes,1,opt,name=converted_content,json=convertedContent" json:"converted_content,omitempty"`
	FoundHtml        *bool                  `protobuf:"varint,2,opt,name=found_html,json=foundHtml" json:"found_html,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CNews_ConvertHTMLToBBCode_Response) Reset() {
	*x = CNews_ConvertHTMLToBBCode_Response{}
	mi := &file_service_news_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CNews_ConvertHTMLToBBCode_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CNews_ConvertHTMLToBBCode_Response) ProtoMessage() {}

func (x *CNews_ConvertHTMLToBBCode_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_news_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CNews_ConvertHTMLToBBCode_Response.ProtoReflect.Descriptor instead.
func (*CNews_ConvertHTMLToBBCode_Response) Descriptor() ([]byte, []int) {
	return file_service_news_proto_rawDescGZIP(), []int{1}
}

func (x *CNews_ConvertHTMLToBBCode_Response) GetConvertedContent() string {
	if x != nil && x.ConvertedContent != nil {
		return *x.ConvertedContent
	}
	return ""
}

func (x *CNews_ConvertHTMLToBBCode_Response) GetFoundHtml() bool {
	if x != nil && x.FoundHtml != nil {
		return *x.FoundHtml
	}
	return false
}

type CNews_GetBatchPublishedPartnerEvent_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NewsFeedGid   *uint64                `protobuf:"fixed64,1,opt,name=news_feed_gid,json=newsFeedGid" json:"news_feed_gid,omitempty"`
	StartIndex    *uint32                `protobuf:"varint,2,opt,name=start_index,json=startIndex,def=0" json:"start_index,omitempty"`
	Amount        *uint32                `protobuf:"varint,3,opt,name=amount,def=100" json:"amount,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CNews_GetBatchPublishedPartnerEvent_Request fields.
const (
	Default_CNews_GetBatchPublishedPartnerEvent_Request_StartIndex = uint32(0)
	Default_CNews_GetBatchPublishedPartnerEvent_Request_Amount     = uint32(100)
)

func (x *CNews_GetBatchPublishedPartnerEvent_Request) Reset() {
	*x = CNews_GetBatchPublishedPartnerEvent_Request{}
	mi := &file_service_news_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CNews_GetBatchPublishedPartnerEvent_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CNews_GetBatchPublishedPartnerEvent_Request) ProtoMessage() {}

func (x *CNews_GetBatchPublishedPartnerEvent_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_news_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CNews_GetBatchPublishedPartnerEvent_Request.ProtoReflect.Descriptor instead.
func (*CNews_GetBatchPublishedPartnerEvent_Request) Descriptor() ([]byte, []int) {
	return file_service_news_proto_rawDescGZIP(), []int{2}
}

func (x *CNews_GetBatchPublishedPartnerEvent_Request) GetNewsFeedGid() uint64 {
	if x != nil && x.NewsFeedGid != nil {
		return *x.NewsFeedGid
	}
	return 0
}

func (x *CNews_GetBatchPublishedPartnerEvent_Request) GetStartIndex() uint32 {
	if x != nil && x.StartIndex != nil {
		return *x.StartIndex
	}
	return Default_CNews_GetBatchPublishedPartnerEvent_Request_StartIndex
}

func (x *CNews_GetBatchPublishedPartnerEvent_Request) GetAmount() uint32 {
	if x != nil && x.Amount != nil {
		return *x.Amount
	}
	return Default_CNews_GetBatchPublishedPartnerEvent_Request_Amount
}

type CNews_GetBatchPublishedPartnerEvent_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ClanAccountId *uint32                `protobuf:"varint,1,opt,name=clan_account_id,json=clanAccountId" json:"clan_account_id,omitempty"`
	NewsFeedGid   *uint64                `protobuf:"fixed64,2,opt,name=news_feed_gid,json=newsFeedGid" json:"news_feed_gid,omitempty"`
	ClanEventGid  []uint64               `protobuf:"fixed64,3,rep,name=clan_event_gid,json=clanEventGid" json:"clan_event_gid,omitempty"`
	NewsPostGid   []uint64               `protobuf:"fixed64,4,rep,name=news_post_gid,json=newsPostGid" json:"news_post_gid,omitempty"`
	NewsUrl       []string               `protobuf:"bytes,5,rep,name=news_url,json=newsUrl" json:"news_url,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CNews_GetBatchPublishedPartnerEvent_Response) Reset() {
	*x = CNews_GetBatchPublishedPartnerEvent_Response{}
	mi := &file_service_news_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CNews_GetBatchPublishedPartnerEvent_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CNews_GetBatchPublishedPartnerEvent_Response) ProtoMessage() {}

func (x *CNews_GetBatchPublishedPartnerEvent_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_news_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CNews_GetBatchPublishedPartnerEvent_Response.ProtoReflect.Descriptor instead.
func (*CNews_GetBatchPublishedPartnerEvent_Response) Descriptor() ([]byte, []int) {
	return file_service_news_proto_rawDescGZIP(), []int{3}
}

func (x *CNews_GetBatchPublishedPartnerEvent_Response) GetClanAccountId() uint32 {
	if x != nil && x.ClanAccountId != nil {
		return *x.ClanAccountId
	}
	return 0
}

func (x *CNews_GetBatchPublishedPartnerEvent_Response) GetNewsFeedGid() uint64 {
	if x != nil && x.NewsFeedGid != nil {
		return *x.NewsFeedGid
	}
	return 0
}

func (x *CNews_GetBatchPublishedPartnerEvent_Response) GetClanEventGid() []uint64 {
	if x != nil {
		return x.ClanEventGid
	}
	return nil
}

func (x *CNews_GetBatchPublishedPartnerEvent_Response) GetNewsPostGid() []uint64 {
	if x != nil {
		return x.NewsPostGid
	}
	return nil
}

func (x *CNews_GetBatchPublishedPartnerEvent_Response) GetNewsUrl() []string {
	if x != nil {
		return x.NewsUrl
	}
	return nil
}

type CNews_GetNewsFeedByRepublishClan_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ClanAccountId *uint32                `protobuf:"varint,1,opt,name=clan_account_id,json=clanAccountId" json:"clan_account_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CNews_GetNewsFeedByRepublishClan_Request) Reset() {
	*x = CNews_GetNewsFeedByRepublishClan_Request{}
	mi := &file_service_news_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CNews_GetNewsFeedByRepublishClan_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CNews_GetNewsFeedByRepublishClan_Request) ProtoMessage() {}

func (x *CNews_GetNewsFeedByRepublishClan_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_news_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CNews_GetNewsFeedByRepublishClan_Request.ProtoReflect.Descriptor instead.
func (*CNews_GetNewsFeedByRepublishClan_Request) Descriptor() ([]byte, []int) {
	return file_service_news_proto_rawDescGZIP(), []int{4}
}

func (x *CNews_GetNewsFeedByRepublishClan_Request) GetClanAccountId() uint32 {
	if x != nil && x.ClanAccountId != nil {
		return *x.ClanAccountId
	}
	return 0
}

type CNews_GetNewsFeedByRepublishClan_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Feeds         []*CNewsFeedDef        `protobuf:"bytes,1,rep,name=feeds" json:"feeds,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CNews_GetNewsFeedByRepublishClan_Response) Reset() {
	*x = CNews_GetNewsFeedByRepublishClan_Response{}
	mi := &file_service_news_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CNews_GetNewsFeedByRepublishClan_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CNews_GetNewsFeedByRepublishClan_Response) ProtoMessage() {}

func (x *CNews_GetNewsFeedByRepublishClan_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_news_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CNews_GetNewsFeedByRepublishClan_Response.ProtoReflect.Descriptor instead.
func (*CNews_GetNewsFeedByRepublishClan_Response) Descriptor() ([]byte, []int) {
	return file_service_news_proto_rawDescGZIP(), []int{5}
}

func (x *CNews_GetNewsFeedByRepublishClan_Response) GetFeeds() []*CNewsFeedDef {
	if x != nil {
		return x.Feeds
	}
	return nil
}

type CNews_PreviewPartnerEvents_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RssUrl        *string                `protobuf:"bytes,1,opt,name=rss_url,json=rssUrl" json:"rss_url,omitempty"`
	Lang          *uint32                `protobuf:"varint,2,opt,name=lang" json:"lang,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CNews_PreviewPartnerEvents_Request) Reset() {
	*x = CNews_PreviewPartnerEvents_Request{}
	mi := &file_service_news_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CNews_PreviewPartnerEvents_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CNews_PreviewPartnerEvents_Request) ProtoMessage() {}

func (x *CNews_PreviewPartnerEvents_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_news_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CNews_PreviewPartnerEvents_Request.ProtoReflect.Descriptor instead.
func (*CNews_PreviewPartnerEvents_Request) Descriptor() ([]byte, []int) {
	return file_service_news_proto_rawDescGZIP(), []int{6}
}

func (x *CNews_PreviewPartnerEvents_Request) GetRssUrl() string {
	if x != nil && x.RssUrl != nil {
		return *x.RssUrl
	}
	return ""
}

func (x *CNews_PreviewPartnerEvents_Request) GetLang() uint32 {
	if x != nil && x.Lang != nil {
		return *x.Lang
	}
	return 0
}

type CNews_PreviewPartnerEvents_Response struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	RssUrl        *string                     `protobuf:"bytes,1,opt,name=rss_url,json=rssUrl" json:"rss_url,omitempty"`
	Results       []*CNewsPartnerEventPreview `protobuf:"bytes,2,rep,name=results" json:"results,omitempty"`
	ErrorMsg      *string                     `protobuf:"bytes,3,opt,name=error_msg,json=errorMsg" json:"error_msg,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CNews_PreviewPartnerEvents_Response) Reset() {
	*x = CNews_PreviewPartnerEvents_Response{}
	mi := &file_service_news_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CNews_PreviewPartnerEvents_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CNews_PreviewPartnerEvents_Response) ProtoMessage() {}

func (x *CNews_PreviewPartnerEvents_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_news_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CNews_PreviewPartnerEvents_Response.ProtoReflect.Descriptor instead.
func (*CNews_PreviewPartnerEvents_Response) Descriptor() ([]byte, []int) {
	return file_service_news_proto_rawDescGZIP(), []int{7}
}

func (x *CNews_PreviewPartnerEvents_Response) GetRssUrl() string {
	if x != nil && x.RssUrl != nil {
		return *x.RssUrl
	}
	return ""
}

func (x *CNews_PreviewPartnerEvents_Response) GetResults() []*CNewsPartnerEventPreview {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *CNews_PreviewPartnerEvents_Response) GetErrorMsg() string {
	if x != nil && x.ErrorMsg != nil {
		return *x.ErrorMsg
	}
	return ""
}

type CNews_PublishPartnerEvent_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Post          *CNewsFeedPostDef      `protobuf:"bytes,1,opt,name=post" json:"post,omitempty"`
	Draft         *bool                  `protobuf:"varint,2,opt,name=draft" json:"draft,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CNews_PublishPartnerEvent_Request) Reset() {
	*x = CNews_PublishPartnerEvent_Request{}
	mi := &file_service_news_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CNews_PublishPartnerEvent_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CNews_PublishPartnerEvent_Request) ProtoMessage() {}

func (x *CNews_PublishPartnerEvent_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_news_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CNews_PublishPartnerEvent_Request.ProtoReflect.Descriptor instead.
func (*CNews_PublishPartnerEvent_Request) Descriptor() ([]byte, []int) {
	return file_service_news_proto_rawDescGZIP(), []int{8}
}

func (x *CNews_PublishPartnerEvent_Request) GetPost() *CNewsFeedPostDef {
	if x != nil {
		return x.Post
	}
	return nil
}

func (x *CNews_PublishPartnerEvent_Request) GetDraft() bool {
	if x != nil && x.Draft != nil {
		return *x.Draft
	}
	return false
}

type CNews_PublishPartnerEvent_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ClanEventGid  *uint64                `protobuf:"fixed64,1,opt,name=clan_event_gid,json=clanEventGid" json:"clan_event_gid,omitempty"`
	NewsPostGid   *uint64                `protobuf:"fixed64,2,opt,name=news_post_gid,json=newsPostGid" json:"news_post_gid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CNews_PublishPartnerEvent_Response) Reset() {
	*x = CNews_PublishPartnerEvent_Response{}
	mi := &file_service_news_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CNews_PublishPartnerEvent_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CNews_PublishPartnerEvent_Response) ProtoMessage() {}

func (x *CNews_PublishPartnerEvent_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_news_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CNews_PublishPartnerEvent_Response.ProtoReflect.Descriptor instead.
func (*CNews_PublishPartnerEvent_Response) Descriptor() ([]byte, []int) {
	return file_service_news_proto_rawDescGZIP(), []int{9}
}

func (x *CNews_PublishPartnerEvent_Response) GetClanEventGid() uint64 {
	if x != nil && x.ClanEventGid != nil {
		return *x.ClanEventGid
	}
	return 0
}

func (x *CNews_PublishPartnerEvent_Response) GetNewsPostGid() uint64 {
	if x != nil && x.NewsPostGid != nil {
		return *x.NewsPostGid
	}
	return 0
}

type CNewsFeedDef struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	Gid                    *uint64                `protobuf:"fixed64,1,opt,name=gid" json:"gid,omitempty"`
	Name                   *string                `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Type                   *uint32                `protobuf:"varint,3,opt,name=type,def=0" json:"type,omitempty"`
	Url                    *string                `protobuf:"bytes,4,opt,name=url" json:"url,omitempty"`
	AssociatedApps         []uint32               `protobuf:"varint,5,rep,name=associated_apps,json=associatedApps" json:"associated_apps,omitempty"`
	PollInterval           *uint32                `protobuf:"varint,6,opt,name=poll_interval,json=pollInterval,def=300" json:"poll_interval,omitempty"`
	KvDescription          *string                `protobuf:"bytes,7,opt,name=kv_description,json=kvDescription" json:"kv_description,omitempty"`
	KvFilter               *string                `protobuf:"bytes,8,opt,name=kv_filter,json=kvFilter" json:"kv_filter,omitempty"`
	PublishToClanAccountId *uint32                `protobuf:"varint,9,opt,name=publish_to_clan_account_id,json=publishToClanAccountId" json:"publish_to_clan_account_id,omitempty"`
	Language               *uint32                `protobuf:"varint,10,opt,name=language" json:"language,omitempty"`
	LastError              *uint32                `protobuf:"varint,11,opt,name=last_error,json=lastError" json:"last_error,omitempty"`
	LastUpdate             *uint32                `protobuf:"varint,12,opt,name=last_update,json=lastUpdate" json:"last_update,omitempty"`
	LastChecked            *uint32                `protobuf:"varint,13,opt,name=last_checked,json=lastChecked" json:"last_checked,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

// Default values for CNewsFeedDef fields.
const (
	Default_CNewsFeedDef_Type         = uint32(0)
	Default_CNewsFeedDef_PollInterval = uint32(300)
)

func (x *CNewsFeedDef) Reset() {
	*x = CNewsFeedDef{}
	mi := &file_service_news_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CNewsFeedDef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CNewsFeedDef) ProtoMessage() {}

func (x *CNewsFeedDef) ProtoReflect() protoreflect.Message {
	mi := &file_service_news_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CNewsFeedDef.ProtoReflect.Descriptor instead.
func (*CNewsFeedDef) Descriptor() ([]byte, []int) {
	return file_service_news_proto_rawDescGZIP(), []int{10}
}

func (x *CNewsFeedDef) GetGid() uint64 {
	if x != nil && x.Gid != nil {
		return *x.Gid
	}
	return 0
}

func (x *CNewsFeedDef) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CNewsFeedDef) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_CNewsFeedDef_Type
}

func (x *CNewsFeedDef) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *CNewsFeedDef) GetAssociatedApps() []uint32 {
	if x != nil {
		return x.AssociatedApps
	}
	return nil
}

func (x *CNewsFeedDef) GetPollInterval() uint32 {
	if x != nil && x.PollInterval != nil {
		return *x.PollInterval
	}
	return Default_CNewsFeedDef_PollInterval
}

func (x *CNewsFeedDef) GetKvDescription() string {
	if x != nil && x.KvDescription != nil {
		return *x.KvDescription
	}
	return ""
}

func (x *CNewsFeedDef) GetKvFilter() string {
	if x != nil && x.KvFilter != nil {
		return *x.KvFilter
	}
	return ""
}

func (x *CNewsFeedDef) GetPublishToClanAccountId() uint32 {
	if x != nil && x.PublishToClanAccountId != nil {
		return *x.PublishToClanAccountId
	}
	return 0
}

func (x *CNewsFeedDef) GetLanguage() uint32 {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return 0
}

func (x *CNewsFeedDef) GetLastError() uint32 {
	if x != nil && x.LastError != nil {
		return *x.LastError
	}
	return 0
}

func (x *CNewsFeedDef) GetLastUpdate() uint32 {
	if x != nil && x.LastUpdate != nil {
		return *x.LastUpdate
	}
	return 0
}

func (x *CNewsFeedDef) GetLastChecked() uint32 {
	if x != nil && x.LastChecked != nil {
		return *x.LastChecked
	}
	return 0
}

type CNewsFeedPostDef struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Gid                  *uint64                `protobuf:"fixed64,1,opt,name=gid" json:"gid,omitempty"`
	NewsFeedGid          *uint64                `protobuf:"fixed64,2,opt,name=news_feed_gid,json=newsFeedGid" json:"news_feed_gid,omitempty"`
	Title                *string                `protobuf:"bytes,3,opt,name=title" json:"title,omitempty"`
	Url                  *string                `protobuf:"bytes,4,opt,name=url" json:"url,omitempty"`
	Author               *string                `protobuf:"bytes,5,opt,name=author" json:"author,omitempty"`
	RtimeDate            *uint32                `protobuf:"varint,6,opt,name=rtime_date,json=rtimeDate" json:"rtime_date,omitempty"`
	Contents             *string                `protobuf:"bytes,7,opt,name=contents" json:"contents,omitempty"`
	Commited             *bool                  `protobuf:"varint,8,opt,name=commited" json:"commited,omitempty"`
	Deleted              *bool                  `protobuf:"varint,9,opt,name=deleted" json:"deleted,omitempty"`
	Tags                 *string                `protobuf:"bytes,10,opt,name=tags" json:"tags,omitempty"`
	Appids               []uint32               `protobuf:"varint,11,rep,name=appids" json:"appids,omitempty"`
	RecommendationState  *int32                 `protobuf:"varint,12,opt,name=recommendation_state,json=recommendationState" json:"recommendation_state,omitempty"`
	ReceivedCompensation *bool                  `protobuf:"varint,13,opt,name=received_compensation,json=receivedCompensation" json:"received_compensation,omitempty"`
	ReceivedForFree      *bool                  `protobuf:"varint,14,opt,name=received_for_free,json=receivedForFree" json:"received_for_free,omitempty"`
	Blurb                *string                `protobuf:"bytes,15,opt,name=blurb" json:"blurb,omitempty"`
	EventSubtitle        *string                `protobuf:"bytes,16,opt,name=event_subtitle,json=eventSubtitle" json:"event_subtitle,omitempty"`
	EventSummary         *string                `protobuf:"bytes,17,opt,name=event_summary,json=eventSummary" json:"event_summary,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *CNewsFeedPostDef) Reset() {
	*x = CNewsFeedPostDef{}
	mi := &file_service_news_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CNewsFeedPostDef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CNewsFeedPostDef) ProtoMessage() {}

func (x *CNewsFeedPostDef) ProtoReflect() protoreflect.Message {
	mi := &file_service_news_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CNewsFeedPostDef.ProtoReflect.Descriptor instead.
func (*CNewsFeedPostDef) Descriptor() ([]byte, []int) {
	return file_service_news_proto_rawDescGZIP(), []int{11}
}

func (x *CNewsFeedPostDef) GetGid() uint64 {
	if x != nil && x.Gid != nil {
		return *x.Gid
	}
	return 0
}

func (x *CNewsFeedPostDef) GetNewsFeedGid() uint64 {
	if x != nil && x.NewsFeedGid != nil {
		return *x.NewsFeedGid
	}
	return 0
}

func (x *CNewsFeedPostDef) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *CNewsFeedPostDef) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *CNewsFeedPostDef) GetAuthor() string {
	if x != nil && x.Author != nil {
		return *x.Author
	}
	return ""
}

func (x *CNewsFeedPostDef) GetRtimeDate() uint32 {
	if x != nil && x.RtimeDate != nil {
		return *x.RtimeDate
	}
	return 0
}

func (x *CNewsFeedPostDef) GetContents() string {
	if x != nil && x.Contents != nil {
		return *x.Contents
	}
	return ""
}

func (x *CNewsFeedPostDef) GetCommited() bool {
	if x != nil && x.Commited != nil {
		return *x.Commited
	}
	return false
}

func (x *CNewsFeedPostDef) GetDeleted() bool {
	if x != nil && x.Deleted != nil {
		return *x.Deleted
	}
	return false
}

func (x *CNewsFeedPostDef) GetTags() string {
	if x != nil && x.Tags != nil {
		return *x.Tags
	}
	return ""
}

func (x *CNewsFeedPostDef) GetAppids() []uint32 {
	if x != nil {
		return x.Appids
	}
	return nil
}

func (x *CNewsFeedPostDef) GetRecommendationState() int32 {
	if x != nil && x.RecommendationState != nil {
		return *x.RecommendationState
	}
	return 0
}

func (x *CNewsFeedPostDef) GetReceivedCompensation() bool {
	if x != nil && x.ReceivedCompensation != nil {
		return *x.ReceivedCompensation
	}
	return false
}

func (x *CNewsFeedPostDef) GetReceivedForFree() bool {
	if x != nil && x.ReceivedForFree != nil {
		return *x.ReceivedForFree
	}
	return false
}

func (x *CNewsFeedPostDef) GetBlurb() string {
	if x != nil && x.Blurb != nil {
		return *x.Blurb
	}
	return ""
}

func (x *CNewsFeedPostDef) GetEventSubtitle() string {
	if x != nil && x.EventSubtitle != nil {
		return *x.EventSubtitle
	}
	return ""
}

func (x *CNewsFeedPostDef) GetEventSummary() string {
	if x != nil && x.EventSummary != nil {
		return *x.EventSummary
	}
	return ""
}

type CNewsPartnerEventPreview struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RssMessage    *string                `protobuf:"bytes,1,opt,name=rss_message,json=rssMessage" json:"rss_message,omitempty"`
	UniqueId      *string                `protobuf:"bytes,2,opt,name=unique_id,json=uniqueId" json:"unique_id,omitempty"`
	Title         *string                `protobuf:"bytes,3,opt,name=title" json:"title,omitempty"`
	Desc          *string                `protobuf:"bytes,4,opt,name=desc" json:"desc,omitempty"`
	Jsondata      *string                `protobuf:"bytes,5,opt,name=jsondata" json:"jsondata,omitempty"`
	Post          *CNewsFeedPostDef      `protobuf:"bytes,6,opt,name=post" json:"post,omitempty"`
	ValidPost     *bool                  `protobuf:"varint,7,opt,name=valid_post,json=validPost" json:"valid_post,omitempty"`
	PostErrorMsg  *string                `protobuf:"bytes,8,opt,name=post_error_msg,json=postErrorMsg" json:"post_error_msg,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CNewsPartnerEventPreview) Reset() {
	*x = CNewsPartnerEventPreview{}
	mi := &file_service_news_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CNewsPartnerEventPreview) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CNewsPartnerEventPreview) ProtoMessage() {}

func (x *CNewsPartnerEventPreview) ProtoReflect() protoreflect.Message {
	mi := &file_service_news_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CNewsPartnerEventPreview.ProtoReflect.Descriptor instead.
func (*CNewsPartnerEventPreview) Descriptor() ([]byte, []int) {
	return file_service_news_proto_rawDescGZIP(), []int{12}
}

func (x *CNewsPartnerEventPreview) GetRssMessage() string {
	if x != nil && x.RssMessage != nil {
		return *x.RssMessage
	}
	return ""
}

func (x *CNewsPartnerEventPreview) GetUniqueId() string {
	if x != nil && x.UniqueId != nil {
		return *x.UniqueId
	}
	return ""
}

func (x *CNewsPartnerEventPreview) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *CNewsPartnerEventPreview) GetDesc() string {
	if x != nil && x.Desc != nil {
		return *x.Desc
	}
	return ""
}

func (x *CNewsPartnerEventPreview) GetJsondata() string {
	if x != nil && x.Jsondata != nil {
		return *x.Jsondata
	}
	return ""
}

func (x *CNewsPartnerEventPreview) GetPost() *CNewsFeedPostDef {
	if x != nil {
		return x.Post
	}
	return nil
}

func (x *CNewsPartnerEventPreview) GetValidPost() bool {
	if x != nil && x.ValidPost != nil {
		return *x.ValidPost
	}
	return false
}

func (x *CNewsPartnerEventPreview) GetPostErrorMsg() string {
	if x != nil && x.PostErrorMsg != nil {
		return *x.PostErrorMsg
	}
	return ""
}

var File_service_news_proto protoreflect.FileDescriptor

const file_service_news_proto_rawDesc = "" +
	"\n" +
	"\x12service_news.proto\x1a\x11common_base.proto\"q\n" +
	"!CNews_ConvertHTMLToBBCode_Request\x12\x18\n" +
	"\acontent\x18\x01 \x01(\tR\acontent\x122\n" +
	"\x11preserve_newlines\x18\x02 \x01(\b:\x05falseR\x10preserveNewlines\"p\n" +
	"\"CNews_ConvertHTMLToBBCode_Response\x12+\n" +
	"\x11converted_content\x18\x01 \x01(\tR\x10convertedContent\x12\x1d\n" +
	"\n" +
	"found_html\x18\x02 \x01(\bR\tfoundHtml\"\x92\x01\n" +
	"+CNews_GetBatchPublishedPartnerEvent_Request\x12\"\n" +
	"\rnews_feed_gid\x18\x01 \x01(\x06R\vnewsFeedGid\x12\"\n" +
	"\vstart_index\x18\x02 \x01(\r:\x010R\n" +
	"startIndex\x12\x1b\n" +
	"\x06amount\x18\x03 \x01(\r:\x03100R\x06amount\"\xdf\x01\n" +
	",CNews_GetBatchPublishedPartnerEvent_Response\x12&\n" +
	"\x0fclan_account_id\x18\x01 \x01(\rR\rclanAccountId\x12\"\n" +
	"\rnews_feed_gid\x18\x02 \x01(\x06R\vnewsFeedGid\x12$\n" +
	"\x0eclan_event_gid\x18\x03 \x03(\x06R\fclanEventGid\x12\"\n" +
	"\rnews_post_gid\x18\x04 \x03(\x06R\vnewsPostGid\x12\x19\n" +
	"\bnews_url\x18\x05 \x03(\tR\anewsUrl\"R\n" +
	"(CNews_GetNewsFeedByRepublishClan_Request\x12&\n" +
	"\x0fclan_account_id\x18\x01 \x01(\rR\rclanAccountId\"P\n" +
	")CNews_GetNewsFeedByRepublishClan_Response\x12#\n" +
	"\x05feeds\x18\x01 \x03(\v2\r.CNewsFeedDefR\x05feeds\"Q\n" +
	"\"CNews_PreviewPartnerEvents_Request\x12\x17\n" +
	"\arss_url\x18\x01 \x01(\tR\x06rssUrl\x12\x12\n" +
	"\x04lang\x18\x02 \x01(\rR\x04lang\"\x90\x01\n" +
	"#CNews_PreviewPartnerEvents_Response\x12\x17\n" +
	"\arss_url\x18\x01 \x01(\tR\x06rssUrl\x123\n" +
	"\aresults\x18\x02 \x03(\v2\x19.CNewsPartnerEventPreviewR\aresults\x12\x1b\n" +
	"\terror_msg\x18\x03 \x01(\tR\berrorMsg\"`\n" +
	"!CNews_PublishPartnerEvent_Request\x12%\n" +
	"\x04post\x18\x01 \x01(\v2\x11.CNewsFeedPostDefR\x04post\x12\x14\n" +
	"\x05draft\x18\x02 \x01(\bR\x05draft\"n\n" +
	"\"CNews_PublishPartnerEvent_Response\x12$\n" +
	"\x0eclan_event_gid\x18\x01 \x01(\x06R\fclanEventGid\x12\"\n" +
	"\rnews_post_gid\x18\x02 \x01(\x06R\vnewsPostGid\"\xaf\x03\n" +
	"\fCNewsFeedDef\x12\x10\n" +
	"\x03gid\x18\x01 \x01(\x06R\x03gid\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x15\n" +
	"\x04type\x18\x03 \x01(\r:\x010R\x04type\x12\x10\n" +
	"\x03url\x18\x04 \x01(\tR\x03url\x12'\n" +
	"\x0fassociated_apps\x18\x05 \x03(\rR\x0eassociatedApps\x12(\n" +
	"\rpoll_interval\x18\x06 \x01(\r:\x03300R\fpollInterval\x12%\n" +
	"\x0ekv_description\x18\a \x01(\tR\rkvDescription\x12\x1b\n" +
	"\tkv_filter\x18\b \x01(\tR\bkvFilter\x12:\n" +
	"\x1apublish_to_clan_account_id\x18\t \x01(\rR\x16publishToClanAccountId\x12\x1a\n" +
	"\blanguage\x18\n" +
	" \x01(\rR\blanguage\x12\x1d\n" +
	"\n" +
	"last_error\x18\v \x01(\rR\tlastError\x12\x1f\n" +
	"\vlast_update\x18\f \x01(\rR\n" +
	"lastUpdate\x12!\n" +
	"\flast_checked\x18\r \x01(\rR\vlastChecked\"\xa5\x04\n" +
	"\x10CNewsFeedPostDef\x12\x10\n" +
	"\x03gid\x18\x01 \x01(\x06R\x03gid\x12\"\n" +
	"\rnews_feed_gid\x18\x02 \x01(\x06R\vnewsFeedGid\x12\x14\n" +
	"\x05title\x18\x03 \x01(\tR\x05title\x12\x10\n" +
	"\x03url\x18\x04 \x01(\tR\x03url\x12\x16\n" +
	"\x06author\x18\x05 \x01(\tR\x06author\x12\x1d\n" +
	"\n" +
	"rtime_date\x18\x06 \x01(\rR\trtimeDate\x12\x1a\n" +
	"\bcontents\x18\a \x01(\tR\bcontents\x12\x1a\n" +
	"\bcommited\x18\b \x01(\bR\bcommited\x12\x18\n" +
	"\adeleted\x18\t \x01(\bR\adeleted\x12\x12\n" +
	"\x04tags\x18\n" +
	" \x01(\tR\x04tags\x12\x16\n" +
	"\x06appids\x18\v \x03(\rR\x06appids\x12;\n" +
	"\x14recommendation_state\x18\f \x01(\x05B\b\x82\xb5\x18\x04enumR\x13recommendationState\x123\n" +
	"\x15received_compensation\x18\r \x01(\bR\x14receivedCompensation\x12*\n" +
	"\x11received_for_free\x18\x0e \x01(\bR\x0freceivedForFree\x12\x14\n" +
	"\x05blurb\x18\x0f \x01(\tR\x05blurb\x12%\n" +
	"\x0eevent_subtitle\x18\x10 \x01(\tR\reventSubtitle\x12#\n" +
	"\revent_summary\x18\x11 \x01(\tR\feventSummary\"\x8a\x02\n" +
	"\x18CNewsPartnerEventPreview\x12\x1f\n" +
	"\vrss_message\x18\x01 \x01(\tR\n" +
	"rssMessage\x12\x1b\n" +
	"\tunique_id\x18\x02 \x01(\tR\buniqueId\x12\x14\n" +
	"\x05title\x18\x03 \x01(\tR\x05title\x12\x12\n" +
	"\x04desc\x18\x04 \x01(\tR\x04desc\x12\x1a\n" +
	"\bjsondata\x18\x05 \x01(\tR\bjsondata\x12%\n" +
	"\x04post\x18\x06 \x01(\v2\x11.CNewsFeedPostDefR\x04post\x12\x1d\n" +
	"\n" +
	"valid_post\x18\a \x01(\bR\tvalidPost\x12$\n" +
	"\x0epost_error_msg\x18\b \x01(\tR\fpostErrorMsg2\x9c\x04\n" +
	"\x04News\x12^\n" +
	"\x13ConvertHTMLToBBCode\x12\".CNews_ConvertHTMLToBBCode_Request\x1a#.CNews_ConvertHTMLToBBCode_Response\x12|\n" +
	"\x1dGetBatchPublishedPartnerEvent\x12,.CNews_GetBatchPublishedPartnerEvent_Request\x1a-.CNews_GetBatchPublishedPartnerEvent_Response\x12s\n" +
	"\x1aGetNewsFeedByRepublishClan\x12).CNews_GetNewsFeedByRepublishClan_Request\x1a*.CNews_GetNewsFeedByRepublishClan_Response\x12a\n" +
	"\x14PreviewPartnerEvents\x12#.CNews_PreviewPartnerEvents_Request\x1a$.CNews_PreviewPartnerEvents_Response\x12^\n" +
	"\x13PublishPartnerEvent\x12\".CNews_PublishPartnerEvent_Request\x1a#.CNews_PublishPartnerEvent_Response"

var (
	file_service_news_proto_rawDescOnce sync.Once
	file_service_news_proto_rawDescData []byte
)

func file_service_news_proto_rawDescGZIP() []byte {
	file_service_news_proto_rawDescOnce.Do(func() {
		file_service_news_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_service_news_proto_rawDesc), len(file_service_news_proto_rawDesc)))
	})
	return file_service_news_proto_rawDescData
}

var file_service_news_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_service_news_proto_goTypes = []any{
	(*CNews_ConvertHTMLToBBCode_Request)(nil),            // 0: CNews_ConvertHTMLToBBCode_Request
	(*CNews_ConvertHTMLToBBCode_Response)(nil),           // 1: CNews_ConvertHTMLToBBCode_Response
	(*CNews_GetBatchPublishedPartnerEvent_Request)(nil),  // 2: CNews_GetBatchPublishedPartnerEvent_Request
	(*CNews_GetBatchPublishedPartnerEvent_Response)(nil), // 3: CNews_GetBatchPublishedPartnerEvent_Response
	(*CNews_GetNewsFeedByRepublishClan_Request)(nil),     // 4: CNews_GetNewsFeedByRepublishClan_Request
	(*CNews_GetNewsFeedByRepublishClan_Response)(nil),    // 5: CNews_GetNewsFeedByRepublishClan_Response
	(*CNews_PreviewPartnerEvents_Request)(nil),           // 6: CNews_PreviewPartnerEvents_Request
	(*CNews_PreviewPartnerEvents_Response)(nil),          // 7: CNews_PreviewPartnerEvents_Response
	(*CNews_PublishPartnerEvent_Request)(nil),            // 8: CNews_PublishPartnerEvent_Request
	(*CNews_PublishPartnerEvent_Response)(nil),           // 9: CNews_PublishPartnerEvent_Response
	(*CNewsFeedDef)(nil),                                 // 10: CNewsFeedDef
	(*CNewsFeedPostDef)(nil),                             // 11: CNewsFeedPostDef
	(*CNewsPartnerEventPreview)(nil),                     // 12: CNewsPartnerEventPreview
}
var file_service_news_proto_depIdxs = []int32{
	10, // 0: CNews_GetNewsFeedByRepublishClan_Response.feeds:type_name -> CNewsFeedDef
	12, // 1: CNews_PreviewPartnerEvents_Response.results:type_name -> CNewsPartnerEventPreview
	11, // 2: CNews_PublishPartnerEvent_Request.post:type_name -> CNewsFeedPostDef
	11, // 3: CNewsPartnerEventPreview.post:type_name -> CNewsFeedPostDef
	0,  // 4: News.ConvertHTMLToBBCode:input_type -> CNews_ConvertHTMLToBBCode_Request
	2,  // 5: News.GetBatchPublishedPartnerEvent:input_type -> CNews_GetBatchPublishedPartnerEvent_Request
	4,  // 6: News.GetNewsFeedByRepublishClan:input_type -> CNews_GetNewsFeedByRepublishClan_Request
	6,  // 7: News.PreviewPartnerEvents:input_type -> CNews_PreviewPartnerEvents_Request
	8,  // 8: News.PublishPartnerEvent:input_type -> CNews_PublishPartnerEvent_Request
	1,  // 9: News.ConvertHTMLToBBCode:output_type -> CNews_ConvertHTMLToBBCode_Response
	3,  // 10: News.GetBatchPublishedPartnerEvent:output_type -> CNews_GetBatchPublishedPartnerEvent_Response
	5,  // 11: News.GetNewsFeedByRepublishClan:output_type -> CNews_GetNewsFeedByRepublishClan_Response
	7,  // 12: News.PreviewPartnerEvents:output_type -> CNews_PreviewPartnerEvents_Response
	9,  // 13: News.PublishPartnerEvent:output_type -> CNews_PublishPartnerEvent_Response
	9,  // [9:14] is the sub-list for method output_type
	4,  // [4:9] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_service_news_proto_init() }
func file_service_news_proto_init() {
	if File_service_news_proto != nil {
		return
	}
	file_common_base_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_service_news_proto_rawDesc), len(file_service_news_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_news_proto_goTypes,
		DependencyIndexes: file_service_news_proto_depIdxs,
		MessageInfos:      file_service_news_proto_msgTypes,
	}.Build()
	File_service_news_proto = out.File
	file_service_news_proto_goTypes = nil
	file_service_news_proto_depIdxs = nil
}
