// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v6.32.0
// source: service_steamawards.proto

package webuipb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CSteamAwards_GetNominationRecommendations_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CategoryId    *uint32                `protobuf:"varint,1,opt,name=category_id,json=categoryId" json:"category_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CSteamAwards_GetNominationRecommendations_Request) Reset() {
	*x = CSteamAwards_GetNominationRecommendations_Request{}
	mi := &file_service_steamawards_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamAwards_GetNominationRecommendations_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamAwards_GetNominationRecommendations_Request) ProtoMessage() {}

func (x *CSteamAwards_GetNominationRecommendations_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamawards_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamAwards_GetNominationRecommendations_Request.ProtoReflect.Descriptor instead.
func (*CSteamAwards_GetNominationRecommendations_Request) Descriptor() ([]byte, []int) {
	return file_service_steamawards_proto_rawDescGZIP(), []int{0}
}

func (x *CSteamAwards_GetNominationRecommendations_Request) GetCategoryId() uint32 {
	if x != nil && x.CategoryId != nil {
		return *x.CategoryId
	}
	return 0
}

type CSteamAwards_GetNominationRecommendations_Response struct {
	state           protoimpl.MessageState                                               `protogen:"open.v1"`
	PlayedApp       []*CSteamAwards_GetNominationRecommendations_Response_PlayedApps     `protobuf:"bytes,1,rep,name=played_app,json=playedApp" json:"played_app,omitempty"`
	SuggestedEvents []*CSteamAwards_GetNominationRecommendations_Response_SuggestedEvent `protobuf:"bytes,2,rep,name=suggested_events,json=suggestedEvents" json:"suggested_events,omitempty"`
	SuggestedApps   []*CSteamAwards_GetNominationRecommendations_Response_SuggestedApp   `protobuf:"bytes,3,rep,name=suggested_apps,json=suggestedApps" json:"suggested_apps,omitempty"`
	DebugQuery      *string                                                              `protobuf:"bytes,4,opt,name=debug_query,json=debugQuery" json:"debug_query,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CSteamAwards_GetNominationRecommendations_Response) Reset() {
	*x = CSteamAwards_GetNominationRecommendations_Response{}
	mi := &file_service_steamawards_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamAwards_GetNominationRecommendations_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamAwards_GetNominationRecommendations_Response) ProtoMessage() {}

func (x *CSteamAwards_GetNominationRecommendations_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamawards_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamAwards_GetNominationRecommendations_Response.ProtoReflect.Descriptor instead.
func (*CSteamAwards_GetNominationRecommendations_Response) Descriptor() ([]byte, []int) {
	return file_service_steamawards_proto_rawDescGZIP(), []int{1}
}

func (x *CSteamAwards_GetNominationRecommendations_Response) GetPlayedApp() []*CSteamAwards_GetNominationRecommendations_Response_PlayedApps {
	if x != nil {
		return x.PlayedApp
	}
	return nil
}

func (x *CSteamAwards_GetNominationRecommendations_Response) GetSuggestedEvents() []*CSteamAwards_GetNominationRecommendations_Response_SuggestedEvent {
	if x != nil {
		return x.SuggestedEvents
	}
	return nil
}

func (x *CSteamAwards_GetNominationRecommendations_Response) GetSuggestedApps() []*CSteamAwards_GetNominationRecommendations_Response_SuggestedApp {
	if x != nil {
		return x.SuggestedApps
	}
	return nil
}

func (x *CSteamAwards_GetNominationRecommendations_Response) GetDebugQuery() string {
	if x != nil && x.DebugQuery != nil {
		return *x.DebugQuery
	}
	return ""
}

type CSteamAwards_GetNominationRecommendations_Response_PlayedApps struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Appid         *uint32                `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	Playtime      *int32                 `protobuf:"varint,2,opt,name=playtime" json:"playtime,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CSteamAwards_GetNominationRecommendations_Response_PlayedApps) Reset() {
	*x = CSteamAwards_GetNominationRecommendations_Response_PlayedApps{}
	mi := &file_service_steamawards_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamAwards_GetNominationRecommendations_Response_PlayedApps) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamAwards_GetNominationRecommendations_Response_PlayedApps) ProtoMessage() {}

func (x *CSteamAwards_GetNominationRecommendations_Response_PlayedApps) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamawards_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamAwards_GetNominationRecommendations_Response_PlayedApps.ProtoReflect.Descriptor instead.
func (*CSteamAwards_GetNominationRecommendations_Response_PlayedApps) Descriptor() ([]byte, []int) {
	return file_service_steamawards_proto_rawDescGZIP(), []int{2}
}

func (x *CSteamAwards_GetNominationRecommendations_Response_PlayedApps) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CSteamAwards_GetNominationRecommendations_Response_PlayedApps) GetPlaytime() int32 {
	if x != nil && x.Playtime != nil {
		return *x.Playtime
	}
	return 0
}

type CSteamAwards_GetNominationRecommendations_Response_SuggestedApp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Appid         *uint32                `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CSteamAwards_GetNominationRecommendations_Response_SuggestedApp) Reset() {
	*x = CSteamAwards_GetNominationRecommendations_Response_SuggestedApp{}
	mi := &file_service_steamawards_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamAwards_GetNominationRecommendations_Response_SuggestedApp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamAwards_GetNominationRecommendations_Response_SuggestedApp) ProtoMessage() {}

func (x *CSteamAwards_GetNominationRecommendations_Response_SuggestedApp) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamawards_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamAwards_GetNominationRecommendations_Response_SuggestedApp.ProtoReflect.Descriptor instead.
func (*CSteamAwards_GetNominationRecommendations_Response_SuggestedApp) Descriptor() ([]byte, []int) {
	return file_service_steamawards_proto_rawDescGZIP(), []int{3}
}

func (x *CSteamAwards_GetNominationRecommendations_Response_SuggestedApp) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

type CSteamAwards_GetNominationRecommendations_Response_SuggestedEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Clanid        *uint32                `protobuf:"varint,1,opt,name=clanid" json:"clanid,omitempty"`
	EventGid      *uint64                `protobuf:"varint,2,opt,name=event_gid,json=eventGid" json:"event_gid,omitempty"`
	Appid         *uint32                `protobuf:"varint,3,opt,name=appid" json:"appid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CSteamAwards_GetNominationRecommendations_Response_SuggestedEvent) Reset() {
	*x = CSteamAwards_GetNominationRecommendations_Response_SuggestedEvent{}
	mi := &file_service_steamawards_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamAwards_GetNominationRecommendations_Response_SuggestedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamAwards_GetNominationRecommendations_Response_SuggestedEvent) ProtoMessage() {}

func (x *CSteamAwards_GetNominationRecommendations_Response_SuggestedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamawards_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamAwards_GetNominationRecommendations_Response_SuggestedEvent.ProtoReflect.Descriptor instead.
func (*CSteamAwards_GetNominationRecommendations_Response_SuggestedEvent) Descriptor() ([]byte, []int) {
	return file_service_steamawards_proto_rawDescGZIP(), []int{4}
}

func (x *CSteamAwards_GetNominationRecommendations_Response_SuggestedEvent) GetClanid() uint32 {
	if x != nil && x.Clanid != nil {
		return *x.Clanid
	}
	return 0
}

func (x *CSteamAwards_GetNominationRecommendations_Response_SuggestedEvent) GetEventGid() uint64 {
	if x != nil && x.EventGid != nil {
		return *x.EventGid
	}
	return 0
}

func (x *CSteamAwards_GetNominationRecommendations_Response_SuggestedEvent) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

type CSteamAwards_GetNominationShareLink_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GenerateNew   *bool                  `protobuf:"varint,1,opt,name=generate_new,json=generateNew" json:"generate_new,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CSteamAwards_GetNominationShareLink_Request) Reset() {
	*x = CSteamAwards_GetNominationShareLink_Request{}
	mi := &file_service_steamawards_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamAwards_GetNominationShareLink_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamAwards_GetNominationShareLink_Request) ProtoMessage() {}

func (x *CSteamAwards_GetNominationShareLink_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamawards_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamAwards_GetNominationShareLink_Request.ProtoReflect.Descriptor instead.
func (*CSteamAwards_GetNominationShareLink_Request) Descriptor() ([]byte, []int) {
	return file_service_steamawards_proto_rawDescGZIP(), []int{5}
}

func (x *CSteamAwards_GetNominationShareLink_Request) GetGenerateNew() bool {
	if x != nil && x.GenerateNew != nil {
		return *x.GenerateNew
	}
	return false
}

type CSteamAwards_GetNominationShareLink_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          *uint64                `protobuf:"fixed64,1,opt,name=code" json:"code,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CSteamAwards_GetNominationShareLink_Response) Reset() {
	*x = CSteamAwards_GetNominationShareLink_Response{}
	mi := &file_service_steamawards_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamAwards_GetNominationShareLink_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamAwards_GetNominationShareLink_Response) ProtoMessage() {}

func (x *CSteamAwards_GetNominationShareLink_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamawards_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamAwards_GetNominationShareLink_Response.ProtoReflect.Descriptor instead.
func (*CSteamAwards_GetNominationShareLink_Response) Descriptor() ([]byte, []int) {
	return file_service_steamawards_proto_rawDescGZIP(), []int{6}
}

func (x *CSteamAwards_GetNominationShareLink_Response) GetCode() uint64 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

type CSteamAwards_GetOtherUserNominations_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Steamid       *uint64                `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	Code          *uint64                `protobuf:"fixed64,2,opt,name=code" json:"code,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CSteamAwards_GetOtherUserNominations_Request) Reset() {
	*x = CSteamAwards_GetOtherUserNominations_Request{}
	mi := &file_service_steamawards_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamAwards_GetOtherUserNominations_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamAwards_GetOtherUserNominations_Request) ProtoMessage() {}

func (x *CSteamAwards_GetOtherUserNominations_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamawards_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamAwards_GetOtherUserNominations_Request.ProtoReflect.Descriptor instead.
func (*CSteamAwards_GetOtherUserNominations_Request) Descriptor() ([]byte, []int) {
	return file_service_steamawards_proto_rawDescGZIP(), []int{7}
}

func (x *CSteamAwards_GetOtherUserNominations_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CSteamAwards_GetOtherUserNominations_Request) GetCode() uint64 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

type CSteamAwards_GetUserNominations_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CSteamAwards_GetUserNominations_Request) Reset() {
	*x = CSteamAwards_GetUserNominations_Request{}
	mi := &file_service_steamawards_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamAwards_GetUserNominations_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamAwards_GetUserNominations_Request) ProtoMessage() {}

func (x *CSteamAwards_GetUserNominations_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamawards_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamAwards_GetUserNominations_Request.ProtoReflect.Descriptor instead.
func (*CSteamAwards_GetUserNominations_Request) Descriptor() ([]byte, []int) {
	return file_service_steamawards_proto_rawDescGZIP(), []int{8}
}

type CSteamAwards_GetUserNominations_Response struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Nominations   []*CSteamAwardsNomination `protobuf:"bytes,1,rep,name=nominations" json:"nominations,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CSteamAwards_GetUserNominations_Response) Reset() {
	*x = CSteamAwards_GetUserNominations_Response{}
	mi := &file_service_steamawards_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamAwards_GetUserNominations_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamAwards_GetUserNominations_Response) ProtoMessage() {}

func (x *CSteamAwards_GetUserNominations_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamawards_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamAwards_GetUserNominations_Response.ProtoReflect.Descriptor instead.
func (*CSteamAwards_GetUserNominations_Response) Descriptor() ([]byte, []int) {
	return file_service_steamawards_proto_rawDescGZIP(), []int{9}
}

func (x *CSteamAwards_GetUserNominations_Response) GetNominations() []*CSteamAwardsNomination {
	if x != nil {
		return x.Nominations
	}
	return nil
}

type CSteamAwards_Nominate_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CategoryId    *uint32                `protobuf:"varint,1,opt,name=category_id,json=categoryId" json:"category_id,omitempty"`
	NominatedId   *uint32                `protobuf:"varint,2,opt,name=nominated_id,json=nominatedId" json:"nominated_id,omitempty"`
	Source        *int32                 `protobuf:"varint,3,opt,name=source" json:"source,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CSteamAwards_Nominate_Request) Reset() {
	*x = CSteamAwards_Nominate_Request{}
	mi := &file_service_steamawards_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamAwards_Nominate_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamAwards_Nominate_Request) ProtoMessage() {}

func (x *CSteamAwards_Nominate_Request) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamawards_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamAwards_Nominate_Request.ProtoReflect.Descriptor instead.
func (*CSteamAwards_Nominate_Request) Descriptor() ([]byte, []int) {
	return file_service_steamawards_proto_rawDescGZIP(), []int{10}
}

func (x *CSteamAwards_Nominate_Request) GetCategoryId() uint32 {
	if x != nil && x.CategoryId != nil {
		return *x.CategoryId
	}
	return 0
}

func (x *CSteamAwards_Nominate_Request) GetNominatedId() uint32 {
	if x != nil && x.NominatedId != nil {
		return *x.NominatedId
	}
	return 0
}

func (x *CSteamAwards_Nominate_Request) GetSource() int32 {
	if x != nil && x.Source != nil {
		return *x.Source
	}
	return 0
}

type CSteamAwards_Nominate_Response struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Nominations   []*CSteamAwardsNomination `protobuf:"bytes,1,rep,name=nominations" json:"nominations,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CSteamAwards_Nominate_Response) Reset() {
	*x = CSteamAwards_Nominate_Response{}
	mi := &file_service_steamawards_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamAwards_Nominate_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamAwards_Nominate_Response) ProtoMessage() {}

func (x *CSteamAwards_Nominate_Response) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamawards_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamAwards_Nominate_Response.ProtoReflect.Descriptor instead.
func (*CSteamAwards_Nominate_Response) Descriptor() ([]byte, []int) {
	return file_service_steamawards_proto_rawDescGZIP(), []int{11}
}

func (x *CSteamAwards_Nominate_Response) GetNominations() []*CSteamAwardsNomination {
	if x != nil {
		return x.Nominations
	}
	return nil
}

type CSteamAwardsNomination struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CategoryId    *uint32                `protobuf:"varint,1,opt,name=category_id,json=categoryId" json:"category_id,omitempty"`
	Appid         *uint32                `protobuf:"varint,2,opt,name=appid" json:"appid,omitempty"`
	LastUpdated   *uint32                `protobuf:"varint,3,opt,name=last_updated,json=lastUpdated" json:"last_updated,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CSteamAwardsNomination) Reset() {
	*x = CSteamAwardsNomination{}
	mi := &file_service_steamawards_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSteamAwardsNomination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamAwardsNomination) ProtoMessage() {}

func (x *CSteamAwardsNomination) ProtoReflect() protoreflect.Message {
	mi := &file_service_steamawards_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamAwardsNomination.ProtoReflect.Descriptor instead.
func (*CSteamAwardsNomination) Descriptor() ([]byte, []int) {
	return file_service_steamawards_proto_rawDescGZIP(), []int{12}
}

func (x *CSteamAwardsNomination) GetCategoryId() uint32 {
	if x != nil && x.CategoryId != nil {
		return *x.CategoryId
	}
	return 0
}

func (x *CSteamAwardsNomination) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CSteamAwardsNomination) GetLastUpdated() uint32 {
	if x != nil && x.LastUpdated != nil {
		return *x.LastUpdated
	}
	return 0
}

var File_service_steamawards_proto protoreflect.FileDescriptor

const file_service_steamawards_proto_rawDesc = "" +
	"\n" +
	"\x19service_steamawards.proto\x1a\x11common_base.proto\"T\n" +
	"1CSteamAwards_GetNominationRecommendations_Request\x12\x1f\n" +
	"\vcategory_id\x18\x01 \x01(\rR\n" +
	"categoryId\"\x8c\x03\n" +
	"2CSteamAwards_GetNominationRecommendations_Response\x12]\n" +
	"\n" +
	"played_app\x18\x01 \x03(\v2>.CSteamAwards_GetNominationRecommendations_Response_PlayedAppsR\tplayedApp\x12m\n" +
	"\x10suggested_events\x18\x02 \x03(\v2B.CSteamAwards_GetNominationRecommendations_Response_SuggestedEventR\x0fsuggestedEvents\x12g\n" +
	"\x0esuggested_apps\x18\x03 \x03(\v2@.CSteamAwards_GetNominationRecommendations_Response_SuggestedAppR\rsuggestedApps\x12\x1f\n" +
	"\vdebug_query\x18\x04 \x01(\tR\n" +
	"debugQuery\"q\n" +
	"=CSteamAwards_GetNominationRecommendations_Response_PlayedApps\x12\x14\n" +
	"\x05appid\x18\x01 \x01(\rR\x05appid\x12\x1a\n" +
	"\bplaytime\x18\x02 \x01(\x05R\bplaytime\"W\n" +
	"?CSteamAwards_GetNominationRecommendations_Response_SuggestedApp\x12\x14\n" +
	"\x05appid\x18\x01 \x01(\rR\x05appid\"\x8e\x01\n" +
	"ACSteamAwards_GetNominationRecommendations_Response_SuggestedEvent\x12\x16\n" +
	"\x06clanid\x18\x01 \x01(\rR\x06clanid\x12\x1b\n" +
	"\tevent_gid\x18\x02 \x01(\x04R\beventGid\x12\x14\n" +
	"\x05appid\x18\x03 \x01(\rR\x05appid\"P\n" +
	"+CSteamAwards_GetNominationShareLink_Request\x12!\n" +
	"\fgenerate_new\x18\x01 \x01(\bR\vgenerateNew\"B\n" +
	",CSteamAwards_GetNominationShareLink_Response\x12\x12\n" +
	"\x04code\x18\x01 \x01(\x06R\x04code\"\\\n" +
	",CSteamAwards_GetOtherUserNominations_Request\x12\x18\n" +
	"\asteamid\x18\x01 \x01(\x06R\asteamid\x12\x12\n" +
	"\x04code\x18\x02 \x01(\x06R\x04code\")\n" +
	"'CSteamAwards_GetUserNominations_Request\"e\n" +
	"(CSteamAwards_GetUserNominations_Response\x129\n" +
	"\vnominations\x18\x01 \x03(\v2\x17.CSteamAwardsNominationR\vnominations\"\x85\x01\n" +
	"\x1dCSteamAwards_Nominate_Request\x12\x1f\n" +
	"\vcategory_id\x18\x01 \x01(\rR\n" +
	"categoryId\x12!\n" +
	"\fnominated_id\x18\x02 \x01(\rR\vnominatedId\x12 \n" +
	"\x06source\x18\x03 \x01(\x05B\b\x82\xb5\x18\x04enumR\x06source\"[\n" +
	"\x1eCSteamAwards_Nominate_Response\x129\n" +
	"\vnominations\x18\x01 \x03(\v2\x17.CSteamAwardsNominationR\vnominations\"r\n" +
	"\x16CSteamAwardsNomination\x12\x1f\n" +
	"\vcategory_id\x18\x01 \x01(\rR\n" +
	"categoryId\x12\x14\n" +
	"\x05appid\x18\x02 \x01(\rR\x05appid\x12!\n" +
	"\flast_updated\x18\x03 \x01(\rR\vlastUpdated2\xbb\x04\n" +
	"\vSteamAwards\x12\x87\x01\n" +
	"\x1cGetNominationRecommendations\x122.CSteamAwards_GetNominationRecommendations_Request\x1a3.CSteamAwards_GetNominationRecommendations_Response\x12u\n" +
	"\x16GetNominationShareLink\x12,.CSteamAwards_GetNominationShareLink_Request\x1a-.CSteamAwards_GetNominationShareLink_Response\x12s\n" +
	"\x17GetOtherUserNominations\x12-.CSteamAwards_GetOtherUserNominations_Request\x1a).CSteamAwards_GetUserNominations_Response\x12i\n" +
	"\x12GetUserNominations\x12(.CSteamAwards_GetUserNominations_Request\x1a).CSteamAwards_GetUserNominations_Response\x12K\n" +
	"\bNominate\x12\x1e.CSteamAwards_Nominate_Request\x1a\x1f.CSteamAwards_Nominate_Response"

var (
	file_service_steamawards_proto_rawDescOnce sync.Once
	file_service_steamawards_proto_rawDescData []byte
)

func file_service_steamawards_proto_rawDescGZIP() []byte {
	file_service_steamawards_proto_rawDescOnce.Do(func() {
		file_service_steamawards_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_service_steamawards_proto_rawDesc), len(file_service_steamawards_proto_rawDesc)))
	})
	return file_service_steamawards_proto_rawDescData
}

var file_service_steamawards_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_service_steamawards_proto_goTypes = []any{
	(*CSteamAwards_GetNominationRecommendations_Request)(nil),                 // 0: CSteamAwards_GetNominationRecommendations_Request
	(*CSteamAwards_GetNominationRecommendations_Response)(nil),                // 1: CSteamAwards_GetNominationRecommendations_Response
	(*CSteamAwards_GetNominationRecommendations_Response_PlayedApps)(nil),     // 2: CSteamAwards_GetNominationRecommendations_Response_PlayedApps
	(*CSteamAwards_GetNominationRecommendations_Response_SuggestedApp)(nil),   // 3: CSteamAwards_GetNominationRecommendations_Response_SuggestedApp
	(*CSteamAwards_GetNominationRecommendations_Response_SuggestedEvent)(nil), // 4: CSteamAwards_GetNominationRecommendations_Response_SuggestedEvent
	(*CSteamAwards_GetNominationShareLink_Request)(nil),                       // 5: CSteamAwards_GetNominationShareLink_Request
	(*CSteamAwards_GetNominationShareLink_Response)(nil),                      // 6: CSteamAwards_GetNominationShareLink_Response
	(*CSteamAwards_GetOtherUserNominations_Request)(nil),                      // 7: CSteamAwards_GetOtherUserNominations_Request
	(*CSteamAwards_GetUserNominations_Request)(nil),                           // 8: CSteamAwards_GetUserNominations_Request
	(*CSteamAwards_GetUserNominations_Response)(nil),                          // 9: CSteamAwards_GetUserNominations_Response
	(*CSteamAwards_Nominate_Request)(nil),                                     // 10: CSteamAwards_Nominate_Request
	(*CSteamAwards_Nominate_Response)(nil),                                    // 11: CSteamAwards_Nominate_Response
	(*CSteamAwardsNomination)(nil),                                            // 12: CSteamAwardsNomination
}
var file_service_steamawards_proto_depIdxs = []int32{
	2,  // 0: CSteamAwards_GetNominationRecommendations_Response.played_app:type_name -> CSteamAwards_GetNominationRecommendations_Response_PlayedApps
	4,  // 1: CSteamAwards_GetNominationRecommendations_Response.suggested_events:type_name -> CSteamAwards_GetNominationRecommendations_Response_SuggestedEvent
	3,  // 2: CSteamAwards_GetNominationRecommendations_Response.suggested_apps:type_name -> CSteamAwards_GetNominationRecommendations_Response_SuggestedApp
	12, // 3: CSteamAwards_GetUserNominations_Response.nominations:type_name -> CSteamAwardsNomination
	12, // 4: CSteamAwards_Nominate_Response.nominations:type_name -> CSteamAwardsNomination
	0,  // 5: SteamAwards.GetNominationRecommendations:input_type -> CSteamAwards_GetNominationRecommendations_Request
	5,  // 6: SteamAwards.GetNominationShareLink:input_type -> CSteamAwards_GetNominationShareLink_Request
	7,  // 7: SteamAwards.GetOtherUserNominations:input_type -> CSteamAwards_GetOtherUserNominations_Request
	8,  // 8: SteamAwards.GetUserNominations:input_type -> CSteamAwards_GetUserNominations_Request
	10, // 9: SteamAwards.Nominate:input_type -> CSteamAwards_Nominate_Request
	1,  // 10: SteamAwards.GetNominationRecommendations:output_type -> CSteamAwards_GetNominationRecommendations_Response
	6,  // 11: SteamAwards.GetNominationShareLink:output_type -> CSteamAwards_GetNominationShareLink_Response
	9,  // 12: SteamAwards.GetOtherUserNominations:output_type -> CSteamAwards_GetUserNominations_Response
	9,  // 13: SteamAwards.GetUserNominations:output_type -> CSteamAwards_GetUserNominations_Response
	11, // 14: SteamAwards.Nominate:output_type -> CSteamAwards_Nominate_Response
	10, // [10:15] is the sub-list for method output_type
	5,  // [5:10] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_service_steamawards_proto_init() }
func file_service_steamawards_proto_init() {
	if File_service_steamawards_proto != nil {
		return
	}
	file_common_base_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_service_steamawards_proto_rawDesc), len(file_service_steamawards_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_steamawards_proto_goTypes,
		DependencyIndexes: file_service_steamawards_proto_depIdxs,
		MessageInfos:      file_service_steamawards_proto_msgTypes,
	}.Build()
	File_service_steamawards_proto = out.File
	file_service_steamawards_proto_goTypes = nil
	file_service_steamawards_proto_depIdxs = nil
}
