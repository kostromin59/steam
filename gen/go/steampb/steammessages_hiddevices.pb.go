// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v6.32.0
// source: steammessages_hiddevices.proto

package steampb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EHIDDeviceLocation int32

const (
	EHIDDeviceLocation_k_EDeviceLocationLocal  EHIDDeviceLocation = 0
	EHIDDeviceLocation_k_EDeviceLocationRemote EHIDDeviceLocation = 2
	EHIDDeviceLocation_k_EDeviceLocationAny    EHIDDeviceLocation = 3
)

// Enum value maps for EHIDDeviceLocation.
var (
	EHIDDeviceLocation_name = map[int32]string{
		0: "k_EDeviceLocationLocal",
		2: "k_EDeviceLocationRemote",
		3: "k_EDeviceLocationAny",
	}
	EHIDDeviceLocation_value = map[string]int32{
		"k_EDeviceLocationLocal":  0,
		"k_EDeviceLocationRemote": 2,
		"k_EDeviceLocationAny":    3,
	}
)

func (x EHIDDeviceLocation) Enum() *EHIDDeviceLocation {
	p := new(EHIDDeviceLocation)
	*p = x
	return p
}

func (x EHIDDeviceLocation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EHIDDeviceLocation) Descriptor() protoreflect.EnumDescriptor {
	return file_steammessages_hiddevices_proto_enumTypes[0].Descriptor()
}

func (EHIDDeviceLocation) Type() protoreflect.EnumType {
	return &file_steammessages_hiddevices_proto_enumTypes[0]
}

func (x EHIDDeviceLocation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EHIDDeviceLocation) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EHIDDeviceLocation(num)
	return nil
}

// Deprecated: Use EHIDDeviceLocation.Descriptor instead.
func (EHIDDeviceLocation) EnumDescriptor() ([]byte, []int) {
	return file_steammessages_hiddevices_proto_rawDescGZIP(), []int{0}
}

type EHIDDeviceDisconnectMethod int32

const (
	EHIDDeviceDisconnectMethod_k_EDeviceDisconnectMethodUnknown       EHIDDeviceDisconnectMethod = 0
	EHIDDeviceDisconnectMethod_k_EDeviceDisconnectMethodBluetooth     EHIDDeviceDisconnectMethod = 1
	EHIDDeviceDisconnectMethod_k_EDeviceDisconnectMethodFeatureReport EHIDDeviceDisconnectMethod = 2
	EHIDDeviceDisconnectMethod_k_EDeviceDisconnectMethodOutputReport  EHIDDeviceDisconnectMethod = 3
)

// Enum value maps for EHIDDeviceDisconnectMethod.
var (
	EHIDDeviceDisconnectMethod_name = map[int32]string{
		0: "k_EDeviceDisconnectMethodUnknown",
		1: "k_EDeviceDisconnectMethodBluetooth",
		2: "k_EDeviceDisconnectMethodFeatureReport",
		3: "k_EDeviceDisconnectMethodOutputReport",
	}
	EHIDDeviceDisconnectMethod_value = map[string]int32{
		"k_EDeviceDisconnectMethodUnknown":       0,
		"k_EDeviceDisconnectMethodBluetooth":     1,
		"k_EDeviceDisconnectMethodFeatureReport": 2,
		"k_EDeviceDisconnectMethodOutputReport":  3,
	}
)

func (x EHIDDeviceDisconnectMethod) Enum() *EHIDDeviceDisconnectMethod {
	p := new(EHIDDeviceDisconnectMethod)
	*p = x
	return p
}

func (x EHIDDeviceDisconnectMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EHIDDeviceDisconnectMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_steammessages_hiddevices_proto_enumTypes[1].Descriptor()
}

func (EHIDDeviceDisconnectMethod) Type() protoreflect.EnumType {
	return &file_steammessages_hiddevices_proto_enumTypes[1]
}

func (x EHIDDeviceDisconnectMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EHIDDeviceDisconnectMethod) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EHIDDeviceDisconnectMethod(num)
	return nil
}

// Deprecated: Use EHIDDeviceDisconnectMethod.Descriptor instead.
func (EHIDDeviceDisconnectMethod) EnumDescriptor() ([]byte, []int) {
	return file_steammessages_hiddevices_proto_rawDescGZIP(), []int{1}
}

type CHIDDeviceInfo struct {
	state                          protoimpl.MessageState `protogen:"open.v1"`
	Location                       *EHIDDeviceLocation    `protobuf:"varint,1,opt,name=location,enum=EHIDDeviceLocation,def=0" json:"location,omitempty"`
	Path                           *string                `protobuf:"bytes,2,opt,name=path" json:"path,omitempty"`
	VendorId                       *uint32                `protobuf:"varint,3,opt,name=vendor_id,json=vendorId" json:"vendor_id,omitempty"`
	ProductId                      *uint32                `protobuf:"varint,4,opt,name=product_id,json=productId" json:"product_id,omitempty"`
	SerialNumber                   *string                `protobuf:"bytes,5,opt,name=serial_number,json=serialNumber" json:"serial_number,omitempty"`
	ReleaseNumber                  *uint32                `protobuf:"varint,6,opt,name=release_number,json=releaseNumber" json:"release_number,omitempty"`
	ManufacturerString             *string                `protobuf:"bytes,7,opt,name=manufacturer_string,json=manufacturerString" json:"manufacturer_string,omitempty"`
	ProductString                  *string                `protobuf:"bytes,8,opt,name=product_string,json=productString" json:"product_string,omitempty"`
	UsagePage                      *uint32                `protobuf:"varint,9,opt,name=usage_page,json=usagePage" json:"usage_page,omitempty"`
	Usage                          *uint32                `protobuf:"varint,10,opt,name=usage" json:"usage,omitempty"`
	InterfaceNumber                *int32                 `protobuf:"varint,11,opt,name=interface_number,json=interfaceNumber,def=-1" json:"interface_number,omitempty"`
	Ostype                         *int32                 `protobuf:"varint,12,opt,name=ostype,def=-1" json:"ostype,omitempty"`
	IsGenericGamepad               *bool                  `protobuf:"varint,13,opt,name=is_generic_gamepad,json=isGenericGamepad" json:"is_generic_gamepad,omitempty"`
	IsGenericJoystick              *bool                  `protobuf:"varint,14,opt,name=is_generic_joystick,json=isGenericJoystick" json:"is_generic_joystick,omitempty"`
	CapsBits                       *uint32                `protobuf:"varint,15,opt,name=caps_bits,json=capsBits" json:"caps_bits,omitempty"`
	SessionId                      *uint32                `protobuf:"varint,16,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	EControllerType_OBSOLETE       *uint32                `protobuf:"varint,17,opt,name=eControllerType_OBSOLETE,json=eControllerTypeOBSOLETE,def=0" json:"eControllerType_OBSOLETE,omitempty"`
	IsXinputDevice_OBSOLETE        *bool                  `protobuf:"varint,18,opt,name=is_xinput_device_OBSOLETE,json=isXinputDeviceOBSOLETE,def=0" json:"is_xinput_device_OBSOLETE,omitempty"`
	SessionRemotePlayTogetherAppid *uint32                `protobuf:"varint,19,opt,name=session_remote_play_together_appid,json=sessionRemotePlayTogetherAppid" json:"session_remote_play_together_appid,omitempty"`
	IsSteamvrDevice                *bool                  `protobuf:"varint,20,opt,name=is_steamvr_device,json=isSteamvrDevice,def=0" json:"is_steamvr_device,omitempty"`
	CapsBits2                      *uint32                `protobuf:"varint,21,opt,name=caps_bits2,json=capsBits2" json:"caps_bits2,omitempty"`
	unknownFields                  protoimpl.UnknownFields
	sizeCache                      protoimpl.SizeCache
}

// Default values for CHIDDeviceInfo fields.
const (
	Default_CHIDDeviceInfo_Location                 = EHIDDeviceLocation_k_EDeviceLocationLocal
	Default_CHIDDeviceInfo_InterfaceNumber          = int32(-1)
	Default_CHIDDeviceInfo_Ostype                   = int32(-1)
	Default_CHIDDeviceInfo_EControllerType_OBSOLETE = uint32(0)
	Default_CHIDDeviceInfo_IsXinputDevice_OBSOLETE  = bool(false)
	Default_CHIDDeviceInfo_IsSteamvrDevice          = bool(false)
)

func (x *CHIDDeviceInfo) Reset() {
	*x = CHIDDeviceInfo{}
	mi := &file_steammessages_hiddevices_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CHIDDeviceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CHIDDeviceInfo) ProtoMessage() {}

func (x *CHIDDeviceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_hiddevices_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CHIDDeviceInfo.ProtoReflect.Descriptor instead.
func (*CHIDDeviceInfo) Descriptor() ([]byte, []int) {
	return file_steammessages_hiddevices_proto_rawDescGZIP(), []int{0}
}

func (x *CHIDDeviceInfo) GetLocation() EHIDDeviceLocation {
	if x != nil && x.Location != nil {
		return *x.Location
	}
	return Default_CHIDDeviceInfo_Location
}

func (x *CHIDDeviceInfo) GetPath() string {
	if x != nil && x.Path != nil {
		return *x.Path
	}
	return ""
}

func (x *CHIDDeviceInfo) GetVendorId() uint32 {
	if x != nil && x.VendorId != nil {
		return *x.VendorId
	}
	return 0
}

func (x *CHIDDeviceInfo) GetProductId() uint32 {
	if x != nil && x.ProductId != nil {
		return *x.ProductId
	}
	return 0
}

func (x *CHIDDeviceInfo) GetSerialNumber() string {
	if x != nil && x.SerialNumber != nil {
		return *x.SerialNumber
	}
	return ""
}

func (x *CHIDDeviceInfo) GetReleaseNumber() uint32 {
	if x != nil && x.ReleaseNumber != nil {
		return *x.ReleaseNumber
	}
	return 0
}

func (x *CHIDDeviceInfo) GetManufacturerString() string {
	if x != nil && x.ManufacturerString != nil {
		return *x.ManufacturerString
	}
	return ""
}

func (x *CHIDDeviceInfo) GetProductString() string {
	if x != nil && x.ProductString != nil {
		return *x.ProductString
	}
	return ""
}

func (x *CHIDDeviceInfo) GetUsagePage() uint32 {
	if x != nil && x.UsagePage != nil {
		return *x.UsagePage
	}
	return 0
}

func (x *CHIDDeviceInfo) GetUsage() uint32 {
	if x != nil && x.Usage != nil {
		return *x.Usage
	}
	return 0
}

func (x *CHIDDeviceInfo) GetInterfaceNumber() int32 {
	if x != nil && x.InterfaceNumber != nil {
		return *x.InterfaceNumber
	}
	return Default_CHIDDeviceInfo_InterfaceNumber
}

func (x *CHIDDeviceInfo) GetOstype() int32 {
	if x != nil && x.Ostype != nil {
		return *x.Ostype
	}
	return Default_CHIDDeviceInfo_Ostype
}

func (x *CHIDDeviceInfo) GetIsGenericGamepad() bool {
	if x != nil && x.IsGenericGamepad != nil {
		return *x.IsGenericGamepad
	}
	return false
}

func (x *CHIDDeviceInfo) GetIsGenericJoystick() bool {
	if x != nil && x.IsGenericJoystick != nil {
		return *x.IsGenericJoystick
	}
	return false
}

func (x *CHIDDeviceInfo) GetCapsBits() uint32 {
	if x != nil && x.CapsBits != nil {
		return *x.CapsBits
	}
	return 0
}

func (x *CHIDDeviceInfo) GetSessionId() uint32 {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return 0
}

func (x *CHIDDeviceInfo) GetEControllerType_OBSOLETE() uint32 {
	if x != nil && x.EControllerType_OBSOLETE != nil {
		return *x.EControllerType_OBSOLETE
	}
	return Default_CHIDDeviceInfo_EControllerType_OBSOLETE
}

func (x *CHIDDeviceInfo) GetIsXinputDevice_OBSOLETE() bool {
	if x != nil && x.IsXinputDevice_OBSOLETE != nil {
		return *x.IsXinputDevice_OBSOLETE
	}
	return Default_CHIDDeviceInfo_IsXinputDevice_OBSOLETE
}

func (x *CHIDDeviceInfo) GetSessionRemotePlayTogetherAppid() uint32 {
	if x != nil && x.SessionRemotePlayTogetherAppid != nil {
		return *x.SessionRemotePlayTogetherAppid
	}
	return 0
}

func (x *CHIDDeviceInfo) GetIsSteamvrDevice() bool {
	if x != nil && x.IsSteamvrDevice != nil {
		return *x.IsSteamvrDevice
	}
	return Default_CHIDDeviceInfo_IsSteamvrDevice
}

func (x *CHIDDeviceInfo) GetCapsBits2() uint32 {
	if x != nil && x.CapsBits2 != nil {
		return *x.CapsBits2
	}
	return 0
}

type CHIDDeviceInputReport struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	FullReport      []byte                 `protobuf:"bytes,1,opt,name=full_report,json=fullReport" json:"full_report,omitempty"`
	DeltaReport     []byte                 `protobuf:"bytes,2,opt,name=delta_report,json=deltaReport" json:"delta_report,omitempty"`
	DeltaReportSize *uint32                `protobuf:"varint,3,opt,name=delta_report_size,json=deltaReportSize" json:"delta_report_size,omitempty"`
	DeltaReportCrc  *uint32                `protobuf:"varint,4,opt,name=delta_report_crc,json=deltaReportCrc" json:"delta_report_crc,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CHIDDeviceInputReport) Reset() {
	*x = CHIDDeviceInputReport{}
	mi := &file_steammessages_hiddevices_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CHIDDeviceInputReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CHIDDeviceInputReport) ProtoMessage() {}

func (x *CHIDDeviceInputReport) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_hiddevices_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CHIDDeviceInputReport.ProtoReflect.Descriptor instead.
func (*CHIDDeviceInputReport) Descriptor() ([]byte, []int) {
	return file_steammessages_hiddevices_proto_rawDescGZIP(), []int{1}
}

func (x *CHIDDeviceInputReport) GetFullReport() []byte {
	if x != nil {
		return x.FullReport
	}
	return nil
}

func (x *CHIDDeviceInputReport) GetDeltaReport() []byte {
	if x != nil {
		return x.DeltaReport
	}
	return nil
}

func (x *CHIDDeviceInputReport) GetDeltaReportSize() uint32 {
	if x != nil && x.DeltaReportSize != nil {
		return *x.DeltaReportSize
	}
	return 0
}

func (x *CHIDDeviceInputReport) GetDeltaReportCrc() uint32 {
	if x != nil && x.DeltaReportCrc != nil {
		return *x.DeltaReportCrc
	}
	return 0
}

type CHIDMessageToRemote struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	RequestId *uint32                `protobuf:"varint,1,opt,name=request_id,json=requestId" json:"request_id,omitempty"`
	// Types that are valid to be assigned to Command:
	//
	//	*CHIDMessageToRemote_DeviceOpen_
	//	*CHIDMessageToRemote_DeviceClose_
	//	*CHIDMessageToRemote_DeviceWrite_
	//	*CHIDMessageToRemote_DeviceRead_
	//	*CHIDMessageToRemote_DeviceSendFeatureReport_
	//	*CHIDMessageToRemote_DeviceGetFeatureReport_
	//	*CHIDMessageToRemote_DeviceGetVendorString_
	//	*CHIDMessageToRemote_DeviceGetProductString_
	//	*CHIDMessageToRemote_DeviceGetSerialNumberString_
	//	*CHIDMessageToRemote_DeviceStartInputReports_
	//	*CHIDMessageToRemote_DeviceRequestFullReport_
	//	*CHIDMessageToRemote_DeviceDisconnect_
	Command       isCHIDMessageToRemote_Command `protobuf_oneof:"command"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CHIDMessageToRemote) Reset() {
	*x = CHIDMessageToRemote{}
	mi := &file_steammessages_hiddevices_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CHIDMessageToRemote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CHIDMessageToRemote) ProtoMessage() {}

func (x *CHIDMessageToRemote) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_hiddevices_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CHIDMessageToRemote.ProtoReflect.Descriptor instead.
func (*CHIDMessageToRemote) Descriptor() ([]byte, []int) {
	return file_steammessages_hiddevices_proto_rawDescGZIP(), []int{2}
}

func (x *CHIDMessageToRemote) GetRequestId() uint32 {
	if x != nil && x.RequestId != nil {
		return *x.RequestId
	}
	return 0
}

func (x *CHIDMessageToRemote) GetCommand() isCHIDMessageToRemote_Command {
	if x != nil {
		return x.Command
	}
	return nil
}

func (x *CHIDMessageToRemote) GetDeviceOpen() *CHIDMessageToRemote_DeviceOpen {
	if x != nil {
		if x, ok := x.Command.(*CHIDMessageToRemote_DeviceOpen_); ok {
			return x.DeviceOpen
		}
	}
	return nil
}

func (x *CHIDMessageToRemote) GetDeviceClose() *CHIDMessageToRemote_DeviceClose {
	if x != nil {
		if x, ok := x.Command.(*CHIDMessageToRemote_DeviceClose_); ok {
			return x.DeviceClose
		}
	}
	return nil
}

func (x *CHIDMessageToRemote) GetDeviceWrite() *CHIDMessageToRemote_DeviceWrite {
	if x != nil {
		if x, ok := x.Command.(*CHIDMessageToRemote_DeviceWrite_); ok {
			return x.DeviceWrite
		}
	}
	return nil
}

func (x *CHIDMessageToRemote) GetDeviceRead() *CHIDMessageToRemote_DeviceRead {
	if x != nil {
		if x, ok := x.Command.(*CHIDMessageToRemote_DeviceRead_); ok {
			return x.DeviceRead
		}
	}
	return nil
}

func (x *CHIDMessageToRemote) GetDeviceSendFeatureReport() *CHIDMessageToRemote_DeviceSendFeatureReport {
	if x != nil {
		if x, ok := x.Command.(*CHIDMessageToRemote_DeviceSendFeatureReport_); ok {
			return x.DeviceSendFeatureReport
		}
	}
	return nil
}

func (x *CHIDMessageToRemote) GetDeviceGetFeatureReport() *CHIDMessageToRemote_DeviceGetFeatureReport {
	if x != nil {
		if x, ok := x.Command.(*CHIDMessageToRemote_DeviceGetFeatureReport_); ok {
			return x.DeviceGetFeatureReport
		}
	}
	return nil
}

func (x *CHIDMessageToRemote) GetDeviceGetVendorString() *CHIDMessageToRemote_DeviceGetVendorString {
	if x != nil {
		if x, ok := x.Command.(*CHIDMessageToRemote_DeviceGetVendorString_); ok {
			return x.DeviceGetVendorString
		}
	}
	return nil
}

func (x *CHIDMessageToRemote) GetDeviceGetProductString() *CHIDMessageToRemote_DeviceGetProductString {
	if x != nil {
		if x, ok := x.Command.(*CHIDMessageToRemote_DeviceGetProductString_); ok {
			return x.DeviceGetProductString
		}
	}
	return nil
}

func (x *CHIDMessageToRemote) GetDeviceGetSerialNumberString() *CHIDMessageToRemote_DeviceGetSerialNumberString {
	if x != nil {
		if x, ok := x.Command.(*CHIDMessageToRemote_DeviceGetSerialNumberString_); ok {
			return x.DeviceGetSerialNumberString
		}
	}
	return nil
}

func (x *CHIDMessageToRemote) GetDeviceStartInputReports() *CHIDMessageToRemote_DeviceStartInputReports {
	if x != nil {
		if x, ok := x.Command.(*CHIDMessageToRemote_DeviceStartInputReports_); ok {
			return x.DeviceStartInputReports
		}
	}
	return nil
}

func (x *CHIDMessageToRemote) GetDeviceRequestFullReport() *CHIDMessageToRemote_DeviceRequestFullReport {
	if x != nil {
		if x, ok := x.Command.(*CHIDMessageToRemote_DeviceRequestFullReport_); ok {
			return x.DeviceRequestFullReport
		}
	}
	return nil
}

func (x *CHIDMessageToRemote) GetDeviceDisconnect() *CHIDMessageToRemote_DeviceDisconnect {
	if x != nil {
		if x, ok := x.Command.(*CHIDMessageToRemote_DeviceDisconnect_); ok {
			return x.DeviceDisconnect
		}
	}
	return nil
}

type isCHIDMessageToRemote_Command interface {
	isCHIDMessageToRemote_Command()
}

type CHIDMessageToRemote_DeviceOpen_ struct {
	DeviceOpen *CHIDMessageToRemote_DeviceOpen `protobuf:"bytes,2,opt,name=device_open,json=deviceOpen,oneof"`
}

type CHIDMessageToRemote_DeviceClose_ struct {
	DeviceClose *CHIDMessageToRemote_DeviceClose `protobuf:"bytes,3,opt,name=device_close,json=deviceClose,oneof"`
}

type CHIDMessageToRemote_DeviceWrite_ struct {
	DeviceWrite *CHIDMessageToRemote_DeviceWrite `protobuf:"bytes,4,opt,name=device_write,json=deviceWrite,oneof"`
}

type CHIDMessageToRemote_DeviceRead_ struct {
	DeviceRead *CHIDMessageToRemote_DeviceRead `protobuf:"bytes,5,opt,name=device_read,json=deviceRead,oneof"`
}

type CHIDMessageToRemote_DeviceSendFeatureReport_ struct {
	DeviceSendFeatureReport *CHIDMessageToRemote_DeviceSendFeatureReport `protobuf:"bytes,6,opt,name=device_send_feature_report,json=deviceSendFeatureReport,oneof"`
}

type CHIDMessageToRemote_DeviceGetFeatureReport_ struct {
	DeviceGetFeatureReport *CHIDMessageToRemote_DeviceGetFeatureReport `protobuf:"bytes,7,opt,name=device_get_feature_report,json=deviceGetFeatureReport,oneof"`
}

type CHIDMessageToRemote_DeviceGetVendorString_ struct {
	DeviceGetVendorString *CHIDMessageToRemote_DeviceGetVendorString `protobuf:"bytes,8,opt,name=device_get_vendor_string,json=deviceGetVendorString,oneof"`
}

type CHIDMessageToRemote_DeviceGetProductString_ struct {
	DeviceGetProductString *CHIDMessageToRemote_DeviceGetProductString `protobuf:"bytes,9,opt,name=device_get_product_string,json=deviceGetProductString,oneof"`
}

type CHIDMessageToRemote_DeviceGetSerialNumberString_ struct {
	DeviceGetSerialNumberString *CHIDMessageToRemote_DeviceGetSerialNumberString `protobuf:"bytes,10,opt,name=device_get_serial_number_string,json=deviceGetSerialNumberString,oneof"`
}

type CHIDMessageToRemote_DeviceStartInputReports_ struct {
	DeviceStartInputReports *CHIDMessageToRemote_DeviceStartInputReports `protobuf:"bytes,11,opt,name=device_start_input_reports,json=deviceStartInputReports,oneof"`
}

type CHIDMessageToRemote_DeviceRequestFullReport_ struct {
	DeviceRequestFullReport *CHIDMessageToRemote_DeviceRequestFullReport `protobuf:"bytes,12,opt,name=device_request_full_report,json=deviceRequestFullReport,oneof"`
}

type CHIDMessageToRemote_DeviceDisconnect_ struct {
	DeviceDisconnect *CHIDMessageToRemote_DeviceDisconnect `protobuf:"bytes,13,opt,name=device_disconnect,json=deviceDisconnect,oneof"`
}

func (*CHIDMessageToRemote_DeviceOpen_) isCHIDMessageToRemote_Command() {}

func (*CHIDMessageToRemote_DeviceClose_) isCHIDMessageToRemote_Command() {}

func (*CHIDMessageToRemote_DeviceWrite_) isCHIDMessageToRemote_Command() {}

func (*CHIDMessageToRemote_DeviceRead_) isCHIDMessageToRemote_Command() {}

func (*CHIDMessageToRemote_DeviceSendFeatureReport_) isCHIDMessageToRemote_Command() {}

func (*CHIDMessageToRemote_DeviceGetFeatureReport_) isCHIDMessageToRemote_Command() {}

func (*CHIDMessageToRemote_DeviceGetVendorString_) isCHIDMessageToRemote_Command() {}

func (*CHIDMessageToRemote_DeviceGetProductString_) isCHIDMessageToRemote_Command() {}

func (*CHIDMessageToRemote_DeviceGetSerialNumberString_) isCHIDMessageToRemote_Command() {}

func (*CHIDMessageToRemote_DeviceStartInputReports_) isCHIDMessageToRemote_Command() {}

func (*CHIDMessageToRemote_DeviceRequestFullReport_) isCHIDMessageToRemote_Command() {}

func (*CHIDMessageToRemote_DeviceDisconnect_) isCHIDMessageToRemote_Command() {}

type CHIDMessageFromRemote struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Command:
	//
	//	*CHIDMessageFromRemote_UpdateDeviceList_
	//	*CHIDMessageFromRemote_Response
	//	*CHIDMessageFromRemote_Reports
	//	*CHIDMessageFromRemote_CloseDevice_
	//	*CHIDMessageFromRemote_CloseAllDevices_
	Command       isCHIDMessageFromRemote_Command `protobuf_oneof:"command"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CHIDMessageFromRemote) Reset() {
	*x = CHIDMessageFromRemote{}
	mi := &file_steammessages_hiddevices_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CHIDMessageFromRemote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CHIDMessageFromRemote) ProtoMessage() {}

func (x *CHIDMessageFromRemote) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_hiddevices_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CHIDMessageFromRemote.ProtoReflect.Descriptor instead.
func (*CHIDMessageFromRemote) Descriptor() ([]byte, []int) {
	return file_steammessages_hiddevices_proto_rawDescGZIP(), []int{3}
}

func (x *CHIDMessageFromRemote) GetCommand() isCHIDMessageFromRemote_Command {
	if x != nil {
		return x.Command
	}
	return nil
}

func (x *CHIDMessageFromRemote) GetUpdateDeviceList() *CHIDMessageFromRemote_UpdateDeviceList {
	if x != nil {
		if x, ok := x.Command.(*CHIDMessageFromRemote_UpdateDeviceList_); ok {
			return x.UpdateDeviceList
		}
	}
	return nil
}

func (x *CHIDMessageFromRemote) GetResponse() *CHIDMessageFromRemote_RequestResponse {
	if x != nil {
		if x, ok := x.Command.(*CHIDMessageFromRemote_Response); ok {
			return x.Response
		}
	}
	return nil
}

func (x *CHIDMessageFromRemote) GetReports() *CHIDMessageFromRemote_DeviceInputReports {
	if x != nil {
		if x, ok := x.Command.(*CHIDMessageFromRemote_Reports); ok {
			return x.Reports
		}
	}
	return nil
}

func (x *CHIDMessageFromRemote) GetCloseDevice() *CHIDMessageFromRemote_CloseDevice {
	if x != nil {
		if x, ok := x.Command.(*CHIDMessageFromRemote_CloseDevice_); ok {
			return x.CloseDevice
		}
	}
	return nil
}

func (x *CHIDMessageFromRemote) GetCloseAllDevices() *CHIDMessageFromRemote_CloseAllDevices {
	if x != nil {
		if x, ok := x.Command.(*CHIDMessageFromRemote_CloseAllDevices_); ok {
			return x.CloseAllDevices
		}
	}
	return nil
}

type isCHIDMessageFromRemote_Command interface {
	isCHIDMessageFromRemote_Command()
}

type CHIDMessageFromRemote_UpdateDeviceList_ struct {
	UpdateDeviceList *CHIDMessageFromRemote_UpdateDeviceList `protobuf:"bytes,1,opt,name=update_device_list,json=updateDeviceList,oneof"`
}

type CHIDMessageFromRemote_Response struct {
	Response *CHIDMessageFromRemote_RequestResponse `protobuf:"bytes,2,opt,name=response,oneof"`
}

type CHIDMessageFromRemote_Reports struct {
	Reports *CHIDMessageFromRemote_DeviceInputReports `protobuf:"bytes,3,opt,name=reports,oneof"`
}

type CHIDMessageFromRemote_CloseDevice_ struct {
	CloseDevice *CHIDMessageFromRemote_CloseDevice `protobuf:"bytes,4,opt,name=close_device,json=closeDevice,oneof"`
}

type CHIDMessageFromRemote_CloseAllDevices_ struct {
	CloseAllDevices *CHIDMessageFromRemote_CloseAllDevices `protobuf:"bytes,5,opt,name=close_all_devices,json=closeAllDevices,oneof"`
}

func (*CHIDMessageFromRemote_UpdateDeviceList_) isCHIDMessageFromRemote_Command() {}

func (*CHIDMessageFromRemote_Response) isCHIDMessageFromRemote_Command() {}

func (*CHIDMessageFromRemote_Reports) isCHIDMessageFromRemote_Command() {}

func (*CHIDMessageFromRemote_CloseDevice_) isCHIDMessageFromRemote_Command() {}

func (*CHIDMessageFromRemote_CloseAllDevices_) isCHIDMessageFromRemote_Command() {}

type CHIDMessageToRemote_DeviceOpen struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Info          *CHIDDeviceInfo        `protobuf:"bytes,1,opt,name=info" json:"info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CHIDMessageToRemote_DeviceOpen) Reset() {
	*x = CHIDMessageToRemote_DeviceOpen{}
	mi := &file_steammessages_hiddevices_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CHIDMessageToRemote_DeviceOpen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CHIDMessageToRemote_DeviceOpen) ProtoMessage() {}

func (x *CHIDMessageToRemote_DeviceOpen) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_hiddevices_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CHIDMessageToRemote_DeviceOpen.ProtoReflect.Descriptor instead.
func (*CHIDMessageToRemote_DeviceOpen) Descriptor() ([]byte, []int) {
	return file_steammessages_hiddevices_proto_rawDescGZIP(), []int{2, 0}
}

func (x *CHIDMessageToRemote_DeviceOpen) GetInfo() *CHIDDeviceInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type CHIDMessageToRemote_DeviceClose struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Device        *uint32                `protobuf:"varint,1,opt,name=device" json:"device,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CHIDMessageToRemote_DeviceClose) Reset() {
	*x = CHIDMessageToRemote_DeviceClose{}
	mi := &file_steammessages_hiddevices_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CHIDMessageToRemote_DeviceClose) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CHIDMessageToRemote_DeviceClose) ProtoMessage() {}

func (x *CHIDMessageToRemote_DeviceClose) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_hiddevices_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CHIDMessageToRemote_DeviceClose.ProtoReflect.Descriptor instead.
func (*CHIDMessageToRemote_DeviceClose) Descriptor() ([]byte, []int) {
	return file_steammessages_hiddevices_proto_rawDescGZIP(), []int{2, 1}
}

func (x *CHIDMessageToRemote_DeviceClose) GetDevice() uint32 {
	if x != nil && x.Device != nil {
		return *x.Device
	}
	return 0
}

type CHIDMessageToRemote_DeviceWrite struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Device        *uint32                `protobuf:"varint,1,opt,name=device" json:"device,omitempty"`
	Data          []byte                 `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CHIDMessageToRemote_DeviceWrite) Reset() {
	*x = CHIDMessageToRemote_DeviceWrite{}
	mi := &file_steammessages_hiddevices_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CHIDMessageToRemote_DeviceWrite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CHIDMessageToRemote_DeviceWrite) ProtoMessage() {}

func (x *CHIDMessageToRemote_DeviceWrite) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_hiddevices_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CHIDMessageToRemote_DeviceWrite.ProtoReflect.Descriptor instead.
func (*CHIDMessageToRemote_DeviceWrite) Descriptor() ([]byte, []int) {
	return file_steammessages_hiddevices_proto_rawDescGZIP(), []int{2, 2}
}

func (x *CHIDMessageToRemote_DeviceWrite) GetDevice() uint32 {
	if x != nil && x.Device != nil {
		return *x.Device
	}
	return 0
}

func (x *CHIDMessageToRemote_DeviceWrite) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type CHIDMessageToRemote_DeviceRead struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Device        *uint32                `protobuf:"varint,1,opt,name=device" json:"device,omitempty"`
	Length        *uint32                `protobuf:"varint,2,opt,name=length" json:"length,omitempty"`
	TimeoutMs     *int32                 `protobuf:"varint,3,opt,name=timeout_ms,json=timeoutMs" json:"timeout_ms,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CHIDMessageToRemote_DeviceRead) Reset() {
	*x = CHIDMessageToRemote_DeviceRead{}
	mi := &file_steammessages_hiddevices_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CHIDMessageToRemote_DeviceRead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CHIDMessageToRemote_DeviceRead) ProtoMessage() {}

func (x *CHIDMessageToRemote_DeviceRead) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_hiddevices_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CHIDMessageToRemote_DeviceRead.ProtoReflect.Descriptor instead.
func (*CHIDMessageToRemote_DeviceRead) Descriptor() ([]byte, []int) {
	return file_steammessages_hiddevices_proto_rawDescGZIP(), []int{2, 3}
}

func (x *CHIDMessageToRemote_DeviceRead) GetDevice() uint32 {
	if x != nil && x.Device != nil {
		return *x.Device
	}
	return 0
}

func (x *CHIDMessageToRemote_DeviceRead) GetLength() uint32 {
	if x != nil && x.Length != nil {
		return *x.Length
	}
	return 0
}

func (x *CHIDMessageToRemote_DeviceRead) GetTimeoutMs() int32 {
	if x != nil && x.TimeoutMs != nil {
		return *x.TimeoutMs
	}
	return 0
}

type CHIDMessageToRemote_DeviceSendFeatureReport struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Device        *uint32                `protobuf:"varint,1,opt,name=device" json:"device,omitempty"`
	Data          []byte                 `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CHIDMessageToRemote_DeviceSendFeatureReport) Reset() {
	*x = CHIDMessageToRemote_DeviceSendFeatureReport{}
	mi := &file_steammessages_hiddevices_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CHIDMessageToRemote_DeviceSendFeatureReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CHIDMessageToRemote_DeviceSendFeatureReport) ProtoMessage() {}

func (x *CHIDMessageToRemote_DeviceSendFeatureReport) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_hiddevices_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CHIDMessageToRemote_DeviceSendFeatureReport.ProtoReflect.Descriptor instead.
func (*CHIDMessageToRemote_DeviceSendFeatureReport) Descriptor() ([]byte, []int) {
	return file_steammessages_hiddevices_proto_rawDescGZIP(), []int{2, 4}
}

func (x *CHIDMessageToRemote_DeviceSendFeatureReport) GetDevice() uint32 {
	if x != nil && x.Device != nil {
		return *x.Device
	}
	return 0
}

func (x *CHIDMessageToRemote_DeviceSendFeatureReport) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type CHIDMessageToRemote_DeviceGetFeatureReport struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Device        *uint32                `protobuf:"varint,1,opt,name=device" json:"device,omitempty"`
	ReportNumber  []byte                 `protobuf:"bytes,2,opt,name=report_number,json=reportNumber" json:"report_number,omitempty"`
	Length        *uint32                `protobuf:"varint,3,opt,name=length" json:"length,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CHIDMessageToRemote_DeviceGetFeatureReport) Reset() {
	*x = CHIDMessageToRemote_DeviceGetFeatureReport{}
	mi := &file_steammessages_hiddevices_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CHIDMessageToRemote_DeviceGetFeatureReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CHIDMessageToRemote_DeviceGetFeatureReport) ProtoMessage() {}

func (x *CHIDMessageToRemote_DeviceGetFeatureReport) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_hiddevices_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CHIDMessageToRemote_DeviceGetFeatureReport.ProtoReflect.Descriptor instead.
func (*CHIDMessageToRemote_DeviceGetFeatureReport) Descriptor() ([]byte, []int) {
	return file_steammessages_hiddevices_proto_rawDescGZIP(), []int{2, 5}
}

func (x *CHIDMessageToRemote_DeviceGetFeatureReport) GetDevice() uint32 {
	if x != nil && x.Device != nil {
		return *x.Device
	}
	return 0
}

func (x *CHIDMessageToRemote_DeviceGetFeatureReport) GetReportNumber() []byte {
	if x != nil {
		return x.ReportNumber
	}
	return nil
}

func (x *CHIDMessageToRemote_DeviceGetFeatureReport) GetLength() uint32 {
	if x != nil && x.Length != nil {
		return *x.Length
	}
	return 0
}

type CHIDMessageToRemote_DeviceGetVendorString struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Device        *uint32                `protobuf:"varint,1,opt,name=device" json:"device,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CHIDMessageToRemote_DeviceGetVendorString) Reset() {
	*x = CHIDMessageToRemote_DeviceGetVendorString{}
	mi := &file_steammessages_hiddevices_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CHIDMessageToRemote_DeviceGetVendorString) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CHIDMessageToRemote_DeviceGetVendorString) ProtoMessage() {}

func (x *CHIDMessageToRemote_DeviceGetVendorString) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_hiddevices_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CHIDMessageToRemote_DeviceGetVendorString.ProtoReflect.Descriptor instead.
func (*CHIDMessageToRemote_DeviceGetVendorString) Descriptor() ([]byte, []int) {
	return file_steammessages_hiddevices_proto_rawDescGZIP(), []int{2, 6}
}

func (x *CHIDMessageToRemote_DeviceGetVendorString) GetDevice() uint32 {
	if x != nil && x.Device != nil {
		return *x.Device
	}
	return 0
}

type CHIDMessageToRemote_DeviceGetProductString struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Device        *uint32                `protobuf:"varint,1,opt,name=device" json:"device,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CHIDMessageToRemote_DeviceGetProductString) Reset() {
	*x = CHIDMessageToRemote_DeviceGetProductString{}
	mi := &file_steammessages_hiddevices_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CHIDMessageToRemote_DeviceGetProductString) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CHIDMessageToRemote_DeviceGetProductString) ProtoMessage() {}

func (x *CHIDMessageToRemote_DeviceGetProductString) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_hiddevices_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CHIDMessageToRemote_DeviceGetProductString.ProtoReflect.Descriptor instead.
func (*CHIDMessageToRemote_DeviceGetProductString) Descriptor() ([]byte, []int) {
	return file_steammessages_hiddevices_proto_rawDescGZIP(), []int{2, 7}
}

func (x *CHIDMessageToRemote_DeviceGetProductString) GetDevice() uint32 {
	if x != nil && x.Device != nil {
		return *x.Device
	}
	return 0
}

type CHIDMessageToRemote_DeviceGetSerialNumberString struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Device        *uint32                `protobuf:"varint,1,opt,name=device" json:"device,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CHIDMessageToRemote_DeviceGetSerialNumberString) Reset() {
	*x = CHIDMessageToRemote_DeviceGetSerialNumberString{}
	mi := &file_steammessages_hiddevices_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CHIDMessageToRemote_DeviceGetSerialNumberString) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CHIDMessageToRemote_DeviceGetSerialNumberString) ProtoMessage() {}

func (x *CHIDMessageToRemote_DeviceGetSerialNumberString) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_hiddevices_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CHIDMessageToRemote_DeviceGetSerialNumberString.ProtoReflect.Descriptor instead.
func (*CHIDMessageToRemote_DeviceGetSerialNumberString) Descriptor() ([]byte, []int) {
	return file_steammessages_hiddevices_proto_rawDescGZIP(), []int{2, 8}
}

func (x *CHIDMessageToRemote_DeviceGetSerialNumberString) GetDevice() uint32 {
	if x != nil && x.Device != nil {
		return *x.Device
	}
	return 0
}

type CHIDMessageToRemote_DeviceStartInputReports struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Device        *uint32                `protobuf:"varint,1,opt,name=device" json:"device,omitempty"`
	Length        *uint32                `protobuf:"varint,2,opt,name=length" json:"length,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CHIDMessageToRemote_DeviceStartInputReports) Reset() {
	*x = CHIDMessageToRemote_DeviceStartInputReports{}
	mi := &file_steammessages_hiddevices_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CHIDMessageToRemote_DeviceStartInputReports) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CHIDMessageToRemote_DeviceStartInputReports) ProtoMessage() {}

func (x *CHIDMessageToRemote_DeviceStartInputReports) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_hiddevices_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CHIDMessageToRemote_DeviceStartInputReports.ProtoReflect.Descriptor instead.
func (*CHIDMessageToRemote_DeviceStartInputReports) Descriptor() ([]byte, []int) {
	return file_steammessages_hiddevices_proto_rawDescGZIP(), []int{2, 9}
}

func (x *CHIDMessageToRemote_DeviceStartInputReports) GetDevice() uint32 {
	if x != nil && x.Device != nil {
		return *x.Device
	}
	return 0
}

func (x *CHIDMessageToRemote_DeviceStartInputReports) GetLength() uint32 {
	if x != nil && x.Length != nil {
		return *x.Length
	}
	return 0
}

type CHIDMessageToRemote_DeviceRequestFullReport struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Device        *uint32                `protobuf:"varint,1,opt,name=device" json:"device,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CHIDMessageToRemote_DeviceRequestFullReport) Reset() {
	*x = CHIDMessageToRemote_DeviceRequestFullReport{}
	mi := &file_steammessages_hiddevices_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CHIDMessageToRemote_DeviceRequestFullReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CHIDMessageToRemote_DeviceRequestFullReport) ProtoMessage() {}

func (x *CHIDMessageToRemote_DeviceRequestFullReport) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_hiddevices_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CHIDMessageToRemote_DeviceRequestFullReport.ProtoReflect.Descriptor instead.
func (*CHIDMessageToRemote_DeviceRequestFullReport) Descriptor() ([]byte, []int) {
	return file_steammessages_hiddevices_proto_rawDescGZIP(), []int{2, 10}
}

func (x *CHIDMessageToRemote_DeviceRequestFullReport) GetDevice() uint32 {
	if x != nil && x.Device != nil {
		return *x.Device
	}
	return 0
}

type CHIDMessageToRemote_DeviceDisconnect struct {
	state            protoimpl.MessageState      `protogen:"open.v1"`
	Device           *uint32                     `protobuf:"varint,1,opt,name=device" json:"device,omitempty"`
	DisconnectMethod *EHIDDeviceDisconnectMethod `protobuf:"varint,2,opt,name=disconnectMethod,enum=EHIDDeviceDisconnectMethod,def=0" json:"disconnectMethod,omitempty"`
	Data             []byte                      `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

// Default values for CHIDMessageToRemote_DeviceDisconnect fields.
const (
	Default_CHIDMessageToRemote_DeviceDisconnect_DisconnectMethod = EHIDDeviceDisconnectMethod_k_EDeviceDisconnectMethodUnknown
)

func (x *CHIDMessageToRemote_DeviceDisconnect) Reset() {
	*x = CHIDMessageToRemote_DeviceDisconnect{}
	mi := &file_steammessages_hiddevices_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CHIDMessageToRemote_DeviceDisconnect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CHIDMessageToRemote_DeviceDisconnect) ProtoMessage() {}

func (x *CHIDMessageToRemote_DeviceDisconnect) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_hiddevices_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CHIDMessageToRemote_DeviceDisconnect.ProtoReflect.Descriptor instead.
func (*CHIDMessageToRemote_DeviceDisconnect) Descriptor() ([]byte, []int) {
	return file_steammessages_hiddevices_proto_rawDescGZIP(), []int{2, 11}
}

func (x *CHIDMessageToRemote_DeviceDisconnect) GetDevice() uint32 {
	if x != nil && x.Device != nil {
		return *x.Device
	}
	return 0
}

func (x *CHIDMessageToRemote_DeviceDisconnect) GetDisconnectMethod() EHIDDeviceDisconnectMethod {
	if x != nil && x.DisconnectMethod != nil {
		return *x.DisconnectMethod
	}
	return Default_CHIDMessageToRemote_DeviceDisconnect_DisconnectMethod
}

func (x *CHIDMessageToRemote_DeviceDisconnect) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type CHIDMessageFromRemote_UpdateDeviceList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Devices       []*CHIDDeviceInfo      `protobuf:"bytes,1,rep,name=devices" json:"devices,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CHIDMessageFromRemote_UpdateDeviceList) Reset() {
	*x = CHIDMessageFromRemote_UpdateDeviceList{}
	mi := &file_steammessages_hiddevices_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CHIDMessageFromRemote_UpdateDeviceList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CHIDMessageFromRemote_UpdateDeviceList) ProtoMessage() {}

func (x *CHIDMessageFromRemote_UpdateDeviceList) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_hiddevices_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CHIDMessageFromRemote_UpdateDeviceList.ProtoReflect.Descriptor instead.
func (*CHIDMessageFromRemote_UpdateDeviceList) Descriptor() ([]byte, []int) {
	return file_steammessages_hiddevices_proto_rawDescGZIP(), []int{3, 0}
}

func (x *CHIDMessageFromRemote_UpdateDeviceList) GetDevices() []*CHIDDeviceInfo {
	if x != nil {
		return x.Devices
	}
	return nil
}

type CHIDMessageFromRemote_RequestResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RequestId     *uint32                `protobuf:"varint,1,opt,name=request_id,json=requestId" json:"request_id,omitempty"`
	Result        *int32                 `protobuf:"varint,2,opt,name=result" json:"result,omitempty"`
	Data          []byte                 `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CHIDMessageFromRemote_RequestResponse) Reset() {
	*x = CHIDMessageFromRemote_RequestResponse{}
	mi := &file_steammessages_hiddevices_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CHIDMessageFromRemote_RequestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CHIDMessageFromRemote_RequestResponse) ProtoMessage() {}

func (x *CHIDMessageFromRemote_RequestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_hiddevices_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CHIDMessageFromRemote_RequestResponse.ProtoReflect.Descriptor instead.
func (*CHIDMessageFromRemote_RequestResponse) Descriptor() ([]byte, []int) {
	return file_steammessages_hiddevices_proto_rawDescGZIP(), []int{3, 1}
}

func (x *CHIDMessageFromRemote_RequestResponse) GetRequestId() uint32 {
	if x != nil && x.RequestId != nil {
		return *x.RequestId
	}
	return 0
}

func (x *CHIDMessageFromRemote_RequestResponse) GetResult() int32 {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return 0
}

func (x *CHIDMessageFromRemote_RequestResponse) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type CHIDMessageFromRemote_DeviceInputReports struct {
	state         protoimpl.MessageState                                        `protogen:"open.v1"`
	DeviceReports []*CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport `protobuf:"bytes,1,rep,name=device_reports,json=deviceReports" json:"device_reports,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CHIDMessageFromRemote_DeviceInputReports) Reset() {
	*x = CHIDMessageFromRemote_DeviceInputReports{}
	mi := &file_steammessages_hiddevices_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CHIDMessageFromRemote_DeviceInputReports) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CHIDMessageFromRemote_DeviceInputReports) ProtoMessage() {}

func (x *CHIDMessageFromRemote_DeviceInputReports) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_hiddevices_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CHIDMessageFromRemote_DeviceInputReports.ProtoReflect.Descriptor instead.
func (*CHIDMessageFromRemote_DeviceInputReports) Descriptor() ([]byte, []int) {
	return file_steammessages_hiddevices_proto_rawDescGZIP(), []int{3, 2}
}

func (x *CHIDMessageFromRemote_DeviceInputReports) GetDeviceReports() []*CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport {
	if x != nil {
		return x.DeviceReports
	}
	return nil
}

type CHIDMessageFromRemote_CloseDevice struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Device        *uint32                `protobuf:"varint,1,opt,name=device" json:"device,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CHIDMessageFromRemote_CloseDevice) Reset() {
	*x = CHIDMessageFromRemote_CloseDevice{}
	mi := &file_steammessages_hiddevices_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CHIDMessageFromRemote_CloseDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CHIDMessageFromRemote_CloseDevice) ProtoMessage() {}

func (x *CHIDMessageFromRemote_CloseDevice) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_hiddevices_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CHIDMessageFromRemote_CloseDevice.ProtoReflect.Descriptor instead.
func (*CHIDMessageFromRemote_CloseDevice) Descriptor() ([]byte, []int) {
	return file_steammessages_hiddevices_proto_rawDescGZIP(), []int{3, 3}
}

func (x *CHIDMessageFromRemote_CloseDevice) GetDevice() uint32 {
	if x != nil && x.Device != nil {
		return *x.Device
	}
	return 0
}

type CHIDMessageFromRemote_CloseAllDevices struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CHIDMessageFromRemote_CloseAllDevices) Reset() {
	*x = CHIDMessageFromRemote_CloseAllDevices{}
	mi := &file_steammessages_hiddevices_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CHIDMessageFromRemote_CloseAllDevices) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CHIDMessageFromRemote_CloseAllDevices) ProtoMessage() {}

func (x *CHIDMessageFromRemote_CloseAllDevices) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_hiddevices_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CHIDMessageFromRemote_CloseAllDevices.ProtoReflect.Descriptor instead.
func (*CHIDMessageFromRemote_CloseAllDevices) Descriptor() ([]byte, []int) {
	return file_steammessages_hiddevices_proto_rawDescGZIP(), []int{3, 4}
}

type CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Device        *uint32                  `protobuf:"varint,1,opt,name=device" json:"device,omitempty"`
	Reports       []*CHIDDeviceInputReport `protobuf:"bytes,2,rep,name=reports" json:"reports,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport) Reset() {
	*x = CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport{}
	mi := &file_steammessages_hiddevices_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport) ProtoMessage() {}

func (x *CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_hiddevices_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport.ProtoReflect.Descriptor instead.
func (*CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport) Descriptor() ([]byte, []int) {
	return file_steammessages_hiddevices_proto_rawDescGZIP(), []int{3, 2, 0}
}

func (x *CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport) GetDevice() uint32 {
	if x != nil && x.Device != nil {
		return *x.Device
	}
	return 0
}

func (x *CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport) GetReports() []*CHIDDeviceInputReport {
	if x != nil {
		return x.Reports
	}
	return nil
}

var File_steammessages_hiddevices_proto protoreflect.FileDescriptor

const file_steammessages_hiddevices_proto_rawDesc = "" +
	"\n" +
	"\x1esteammessages_hiddevices.proto\"\x85\a\n" +
	"\x0eCHIDDeviceInfo\x12G\n" +
	"\blocation\x18\x01 \x01(\x0e2\x13.EHIDDeviceLocation:\x16k_EDeviceLocationLocalR\blocation\x12\x12\n" +
	"\x04path\x18\x02 \x01(\tR\x04path\x12\x1b\n" +
	"\tvendor_id\x18\x03 \x01(\rR\bvendorId\x12\x1d\n" +
	"\n" +
	"product_id\x18\x04 \x01(\rR\tproductId\x12#\n" +
	"\rserial_number\x18\x05 \x01(\tR\fserialNumber\x12%\n" +
	"\x0erelease_number\x18\x06 \x01(\rR\rreleaseNumber\x12/\n" +
	"\x13manufacturer_string\x18\a \x01(\tR\x12manufacturerString\x12%\n" +
	"\x0eproduct_string\x18\b \x01(\tR\rproductString\x12\x1d\n" +
	"\n" +
	"usage_page\x18\t \x01(\rR\tusagePage\x12\x14\n" +
	"\x05usage\x18\n" +
	" \x01(\rR\x05usage\x12-\n" +
	"\x10interface_number\x18\v \x01(\x05:\x02-1R\x0finterfaceNumber\x12\x1a\n" +
	"\x06ostype\x18\f \x01(\x05:\x02-1R\x06ostype\x12,\n" +
	"\x12is_generic_gamepad\x18\r \x01(\bR\x10isGenericGamepad\x12.\n" +
	"\x13is_generic_joystick\x18\x0e \x01(\bR\x11isGenericJoystick\x12\x1b\n" +
	"\tcaps_bits\x18\x0f \x01(\rR\bcapsBits\x12\x1d\n" +
	"\n" +
	"session_id\x18\x10 \x01(\rR\tsessionId\x12<\n" +
	"\x18eControllerType_OBSOLETE\x18\x11 \x01(\r:\x010R\x17eControllerTypeOBSOLETE\x12@\n" +
	"\x19is_xinput_device_OBSOLETE\x18\x12 \x01(\b:\x05falseR\x16isXinputDeviceOBSOLETE\x12J\n" +
	"\"session_remote_play_together_appid\x18\x13 \x01(\rR\x1esessionRemotePlayTogetherAppid\x121\n" +
	"\x11is_steamvr_device\x18\x14 \x01(\b:\x05falseR\x0fisSteamvrDevice\x12\x1d\n" +
	"\n" +
	"caps_bits2\x18\x15 \x01(\rR\tcapsBits2\"\xb1\x01\n" +
	"\x15CHIDDeviceInputReport\x12\x1f\n" +
	"\vfull_report\x18\x01 \x01(\fR\n" +
	"fullReport\x12!\n" +
	"\fdelta_report\x18\x02 \x01(\fR\vdeltaReport\x12*\n" +
	"\x11delta_report_size\x18\x03 \x01(\rR\x0fdeltaReportSize\x12(\n" +
	"\x10delta_report_crc\x18\x04 \x01(\rR\x0edeltaReportCrc\"\x93\x10\n" +
	"\x13CHIDMessageToRemote\x12\x1d\n" +
	"\n" +
	"request_id\x18\x01 \x01(\rR\trequestId\x12B\n" +
	"\vdevice_open\x18\x02 \x01(\v2\x1f.CHIDMessageToRemote.DeviceOpenH\x00R\n" +
	"deviceOpen\x12E\n" +
	"\fdevice_close\x18\x03 \x01(\v2 .CHIDMessageToRemote.DeviceCloseH\x00R\vdeviceClose\x12E\n" +
	"\fdevice_write\x18\x04 \x01(\v2 .CHIDMessageToRemote.DeviceWriteH\x00R\vdeviceWrite\x12B\n" +
	"\vdevice_read\x18\x05 \x01(\v2\x1f.CHIDMessageToRemote.DeviceReadH\x00R\n" +
	"deviceRead\x12k\n" +
	"\x1adevice_send_feature_report\x18\x06 \x01(\v2,.CHIDMessageToRemote.DeviceSendFeatureReportH\x00R\x17deviceSendFeatureReport\x12h\n" +
	"\x19device_get_feature_report\x18\a \x01(\v2+.CHIDMessageToRemote.DeviceGetFeatureReportH\x00R\x16deviceGetFeatureReport\x12e\n" +
	"\x18device_get_vendor_string\x18\b \x01(\v2*.CHIDMessageToRemote.DeviceGetVendorStringH\x00R\x15deviceGetVendorString\x12h\n" +
	"\x19device_get_product_string\x18\t \x01(\v2+.CHIDMessageToRemote.DeviceGetProductStringH\x00R\x16deviceGetProductString\x12x\n" +
	"\x1fdevice_get_serial_number_string\x18\n" +
	" \x01(\v20.CHIDMessageToRemote.DeviceGetSerialNumberStringH\x00R\x1bdeviceGetSerialNumberString\x12k\n" +
	"\x1adevice_start_input_reports\x18\v \x01(\v2,.CHIDMessageToRemote.DeviceStartInputReportsH\x00R\x17deviceStartInputReports\x12k\n" +
	"\x1adevice_request_full_report\x18\f \x01(\v2,.CHIDMessageToRemote.DeviceRequestFullReportH\x00R\x17deviceRequestFullReport\x12T\n" +
	"\x11device_disconnect\x18\r \x01(\v2%.CHIDMessageToRemote.DeviceDisconnectH\x00R\x10deviceDisconnect\x1a1\n" +
	"\n" +
	"DeviceOpen\x12#\n" +
	"\x04info\x18\x01 \x01(\v2\x0f.CHIDDeviceInfoR\x04info\x1a%\n" +
	"\vDeviceClose\x12\x16\n" +
	"\x06device\x18\x01 \x01(\rR\x06device\x1a9\n" +
	"\vDeviceWrite\x12\x16\n" +
	"\x06device\x18\x01 \x01(\rR\x06device\x12\x12\n" +
	"\x04data\x18\x02 \x01(\fR\x04data\x1a[\n" +
	"\n" +
	"DeviceRead\x12\x16\n" +
	"\x06device\x18\x01 \x01(\rR\x06device\x12\x16\n" +
	"\x06length\x18\x02 \x01(\rR\x06length\x12\x1d\n" +
	"\n" +
	"timeout_ms\x18\x03 \x01(\x05R\ttimeoutMs\x1aE\n" +
	"\x17DeviceSendFeatureReport\x12\x16\n" +
	"\x06device\x18\x01 \x01(\rR\x06device\x12\x12\n" +
	"\x04data\x18\x02 \x01(\fR\x04data\x1am\n" +
	"\x16DeviceGetFeatureReport\x12\x16\n" +
	"\x06device\x18\x01 \x01(\rR\x06device\x12#\n" +
	"\rreport_number\x18\x02 \x01(\fR\freportNumber\x12\x16\n" +
	"\x06length\x18\x03 \x01(\rR\x06length\x1a/\n" +
	"\x15DeviceGetVendorString\x12\x16\n" +
	"\x06device\x18\x01 \x01(\rR\x06device\x1a0\n" +
	"\x16DeviceGetProductString\x12\x16\n" +
	"\x06device\x18\x01 \x01(\rR\x06device\x1a5\n" +
	"\x1bDeviceGetSerialNumberString\x12\x16\n" +
	"\x06device\x18\x01 \x01(\rR\x06device\x1aI\n" +
	"\x17DeviceStartInputReports\x12\x16\n" +
	"\x06device\x18\x01 \x01(\rR\x06device\x12\x16\n" +
	"\x06length\x18\x02 \x01(\rR\x06length\x1a1\n" +
	"\x17DeviceRequestFullReport\x12\x16\n" +
	"\x06device\x18\x01 \x01(\rR\x06device\x1a\xa9\x01\n" +
	"\x10DeviceDisconnect\x12\x16\n" +
	"\x06device\x18\x01 \x01(\rR\x06device\x12i\n" +
	"\x10disconnectMethod\x18\x02 \x01(\x0e2\x1b.EHIDDeviceDisconnectMethod: k_EDeviceDisconnectMethodUnknownR\x10disconnectMethod\x12\x12\n" +
	"\x04data\x18\x03 \x01(\fR\x04dataB\t\n" +
	"\acommand\"\xd8\x06\n" +
	"\x15CHIDMessageFromRemote\x12W\n" +
	"\x12update_device_list\x18\x01 \x01(\v2'.CHIDMessageFromRemote.UpdateDeviceListH\x00R\x10updateDeviceList\x12D\n" +
	"\bresponse\x18\x02 \x01(\v2&.CHIDMessageFromRemote.RequestResponseH\x00R\bresponse\x12E\n" +
	"\areports\x18\x03 \x01(\v2).CHIDMessageFromRemote.DeviceInputReportsH\x00R\areports\x12G\n" +
	"\fclose_device\x18\x04 \x01(\v2\".CHIDMessageFromRemote.CloseDeviceH\x00R\vcloseDevice\x12T\n" +
	"\x11close_all_devices\x18\x05 \x01(\v2&.CHIDMessageFromRemote.CloseAllDevicesH\x00R\x0fcloseAllDevices\x1a=\n" +
	"\x10UpdateDeviceList\x12)\n" +
	"\adevices\x18\x01 \x03(\v2\x0f.CHIDDeviceInfoR\adevices\x1a\\\n" +
	"\x0fRequestResponse\x12\x1d\n" +
	"\n" +
	"request_id\x18\x01 \x01(\rR\trequestId\x12\x16\n" +
	"\x06result\x18\x02 \x01(\x05R\x06result\x12\x12\n" +
	"\x04data\x18\x03 \x01(\fR\x04data\x1a\xd7\x01\n" +
	"\x12DeviceInputReports\x12b\n" +
	"\x0edevice_reports\x18\x01 \x03(\v2;.CHIDMessageFromRemote.DeviceInputReports.DeviceInputReportR\rdeviceReports\x1a]\n" +
	"\x11DeviceInputReport\x12\x16\n" +
	"\x06device\x18\x01 \x01(\rR\x06device\x120\n" +
	"\areports\x18\x02 \x03(\v2\x16.CHIDDeviceInputReportR\areports\x1a%\n" +
	"\vCloseDevice\x12\x16\n" +
	"\x06device\x18\x01 \x01(\rR\x06device\x1a\x11\n" +
	"\x0fCloseAllDevicesB\t\n" +
	"\acommand*g\n" +
	"\x12EHIDDeviceLocation\x12\x1a\n" +
	"\x16k_EDeviceLocationLocal\x10\x00\x12\x1b\n" +
	"\x17k_EDeviceLocationRemote\x10\x02\x12\x18\n" +
	"\x14k_EDeviceLocationAny\x10\x03*\xc1\x01\n" +
	"\x1aEHIDDeviceDisconnectMethod\x12$\n" +
	" k_EDeviceDisconnectMethodUnknown\x10\x00\x12&\n" +
	"\"k_EDeviceDisconnectMethodBluetooth\x10\x01\x12*\n" +
	"&k_EDeviceDisconnectMethodFeatureReport\x10\x02\x12)\n" +
	"%k_EDeviceDisconnectMethodOutputReport\x10\x03B\x05H\x01\x80\x01\x00"

var (
	file_steammessages_hiddevices_proto_rawDescOnce sync.Once
	file_steammessages_hiddevices_proto_rawDescData []byte
)

func file_steammessages_hiddevices_proto_rawDescGZIP() []byte {
	file_steammessages_hiddevices_proto_rawDescOnce.Do(func() {
		file_steammessages_hiddevices_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_steammessages_hiddevices_proto_rawDesc), len(file_steammessages_hiddevices_proto_rawDesc)))
	})
	return file_steammessages_hiddevices_proto_rawDescData
}

var file_steammessages_hiddevices_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_steammessages_hiddevices_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_steammessages_hiddevices_proto_goTypes = []any{
	(EHIDDeviceLocation)(0),                                            // 0: EHIDDeviceLocation
	(EHIDDeviceDisconnectMethod)(0),                                    // 1: EHIDDeviceDisconnectMethod
	(*CHIDDeviceInfo)(nil),                                             // 2: CHIDDeviceInfo
	(*CHIDDeviceInputReport)(nil),                                      // 3: CHIDDeviceInputReport
	(*CHIDMessageToRemote)(nil),                                        // 4: CHIDMessageToRemote
	(*CHIDMessageFromRemote)(nil),                                      // 5: CHIDMessageFromRemote
	(*CHIDMessageToRemote_DeviceOpen)(nil),                             // 6: CHIDMessageToRemote.DeviceOpen
	(*CHIDMessageToRemote_DeviceClose)(nil),                            // 7: CHIDMessageToRemote.DeviceClose
	(*CHIDMessageToRemote_DeviceWrite)(nil),                            // 8: CHIDMessageToRemote.DeviceWrite
	(*CHIDMessageToRemote_DeviceRead)(nil),                             // 9: CHIDMessageToRemote.DeviceRead
	(*CHIDMessageToRemote_DeviceSendFeatureReport)(nil),                // 10: CHIDMessageToRemote.DeviceSendFeatureReport
	(*CHIDMessageToRemote_DeviceGetFeatureReport)(nil),                 // 11: CHIDMessageToRemote.DeviceGetFeatureReport
	(*CHIDMessageToRemote_DeviceGetVendorString)(nil),                  // 12: CHIDMessageToRemote.DeviceGetVendorString
	(*CHIDMessageToRemote_DeviceGetProductString)(nil),                 // 13: CHIDMessageToRemote.DeviceGetProductString
	(*CHIDMessageToRemote_DeviceGetSerialNumberString)(nil),            // 14: CHIDMessageToRemote.DeviceGetSerialNumberString
	(*CHIDMessageToRemote_DeviceStartInputReports)(nil),                // 15: CHIDMessageToRemote.DeviceStartInputReports
	(*CHIDMessageToRemote_DeviceRequestFullReport)(nil),                // 16: CHIDMessageToRemote.DeviceRequestFullReport
	(*CHIDMessageToRemote_DeviceDisconnect)(nil),                       // 17: CHIDMessageToRemote.DeviceDisconnect
	(*CHIDMessageFromRemote_UpdateDeviceList)(nil),                     // 18: CHIDMessageFromRemote.UpdateDeviceList
	(*CHIDMessageFromRemote_RequestResponse)(nil),                      // 19: CHIDMessageFromRemote.RequestResponse
	(*CHIDMessageFromRemote_DeviceInputReports)(nil),                   // 20: CHIDMessageFromRemote.DeviceInputReports
	(*CHIDMessageFromRemote_CloseDevice)(nil),                          // 21: CHIDMessageFromRemote.CloseDevice
	(*CHIDMessageFromRemote_CloseAllDevices)(nil),                      // 22: CHIDMessageFromRemote.CloseAllDevices
	(*CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport)(nil), // 23: CHIDMessageFromRemote.DeviceInputReports.DeviceInputReport
}
var file_steammessages_hiddevices_proto_depIdxs = []int32{
	0,  // 0: CHIDDeviceInfo.location:type_name -> EHIDDeviceLocation
	6,  // 1: CHIDMessageToRemote.device_open:type_name -> CHIDMessageToRemote.DeviceOpen
	7,  // 2: CHIDMessageToRemote.device_close:type_name -> CHIDMessageToRemote.DeviceClose
	8,  // 3: CHIDMessageToRemote.device_write:type_name -> CHIDMessageToRemote.DeviceWrite
	9,  // 4: CHIDMessageToRemote.device_read:type_name -> CHIDMessageToRemote.DeviceRead
	10, // 5: CHIDMessageToRemote.device_send_feature_report:type_name -> CHIDMessageToRemote.DeviceSendFeatureReport
	11, // 6: CHIDMessageToRemote.device_get_feature_report:type_name -> CHIDMessageToRemote.DeviceGetFeatureReport
	12, // 7: CHIDMessageToRemote.device_get_vendor_string:type_name -> CHIDMessageToRemote.DeviceGetVendorString
	13, // 8: CHIDMessageToRemote.device_get_product_string:type_name -> CHIDMessageToRemote.DeviceGetProductString
	14, // 9: CHIDMessageToRemote.device_get_serial_number_string:type_name -> CHIDMessageToRemote.DeviceGetSerialNumberString
	15, // 10: CHIDMessageToRemote.device_start_input_reports:type_name -> CHIDMessageToRemote.DeviceStartInputReports
	16, // 11: CHIDMessageToRemote.device_request_full_report:type_name -> CHIDMessageToRemote.DeviceRequestFullReport
	17, // 12: CHIDMessageToRemote.device_disconnect:type_name -> CHIDMessageToRemote.DeviceDisconnect
	18, // 13: CHIDMessageFromRemote.update_device_list:type_name -> CHIDMessageFromRemote.UpdateDeviceList
	19, // 14: CHIDMessageFromRemote.response:type_name -> CHIDMessageFromRemote.RequestResponse
	20, // 15: CHIDMessageFromRemote.reports:type_name -> CHIDMessageFromRemote.DeviceInputReports
	21, // 16: CHIDMessageFromRemote.close_device:type_name -> CHIDMessageFromRemote.CloseDevice
	22, // 17: CHIDMessageFromRemote.close_all_devices:type_name -> CHIDMessageFromRemote.CloseAllDevices
	2,  // 18: CHIDMessageToRemote.DeviceOpen.info:type_name -> CHIDDeviceInfo
	1,  // 19: CHIDMessageToRemote.DeviceDisconnect.disconnectMethod:type_name -> EHIDDeviceDisconnectMethod
	2,  // 20: CHIDMessageFromRemote.UpdateDeviceList.devices:type_name -> CHIDDeviceInfo
	23, // 21: CHIDMessageFromRemote.DeviceInputReports.device_reports:type_name -> CHIDMessageFromRemote.DeviceInputReports.DeviceInputReport
	3,  // 22: CHIDMessageFromRemote.DeviceInputReports.DeviceInputReport.reports:type_name -> CHIDDeviceInputReport
	23, // [23:23] is the sub-list for method output_type
	23, // [23:23] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_steammessages_hiddevices_proto_init() }
func file_steammessages_hiddevices_proto_init() {
	if File_steammessages_hiddevices_proto != nil {
		return
	}
	file_steammessages_hiddevices_proto_msgTypes[2].OneofWrappers = []any{
		(*CHIDMessageToRemote_DeviceOpen_)(nil),
		(*CHIDMessageToRemote_DeviceClose_)(nil),
		(*CHIDMessageToRemote_DeviceWrite_)(nil),
		(*CHIDMessageToRemote_DeviceRead_)(nil),
		(*CHIDMessageToRemote_DeviceSendFeatureReport_)(nil),
		(*CHIDMessageToRemote_DeviceGetFeatureReport_)(nil),
		(*CHIDMessageToRemote_DeviceGetVendorString_)(nil),
		(*CHIDMessageToRemote_DeviceGetProductString_)(nil),
		(*CHIDMessageToRemote_DeviceGetSerialNumberString_)(nil),
		(*CHIDMessageToRemote_DeviceStartInputReports_)(nil),
		(*CHIDMessageToRemote_DeviceRequestFullReport_)(nil),
		(*CHIDMessageToRemote_DeviceDisconnect_)(nil),
	}
	file_steammessages_hiddevices_proto_msgTypes[3].OneofWrappers = []any{
		(*CHIDMessageFromRemote_UpdateDeviceList_)(nil),
		(*CHIDMessageFromRemote_Response)(nil),
		(*CHIDMessageFromRemote_Reports)(nil),
		(*CHIDMessageFromRemote_CloseDevice_)(nil),
		(*CHIDMessageFromRemote_CloseAllDevices_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_steammessages_hiddevices_proto_rawDesc), len(file_steammessages_hiddevices_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_steammessages_hiddevices_proto_goTypes,
		DependencyIndexes: file_steammessages_hiddevices_proto_depIdxs,
		EnumInfos:         file_steammessages_hiddevices_proto_enumTypes,
		MessageInfos:      file_steammessages_hiddevices_proto_msgTypes,
	}.Build()
	File_steammessages_hiddevices_proto = out.File
	file_steammessages_hiddevices_proto_goTypes = nil
	file_steammessages_hiddevices_proto_depIdxs = nil
}
