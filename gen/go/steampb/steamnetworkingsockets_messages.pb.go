// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v6.32.0
// source: steamnetworkingsockets_messages.proto

package steampb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ESteamNetworkingSocketsCipher int32

const (
	ESteamNetworkingSocketsCipher_k_ESteamNetworkingSocketsCipher_INVALID     ESteamNetworkingSocketsCipher = 0
	ESteamNetworkingSocketsCipher_k_ESteamNetworkingSocketsCipher_NULL        ESteamNetworkingSocketsCipher = 1
	ESteamNetworkingSocketsCipher_k_ESteamNetworkingSocketsCipher_AES_256_GCM ESteamNetworkingSocketsCipher = 2
)

// Enum value maps for ESteamNetworkingSocketsCipher.
var (
	ESteamNetworkingSocketsCipher_name = map[int32]string{
		0: "k_ESteamNetworkingSocketsCipher_INVALID",
		1: "k_ESteamNetworkingSocketsCipher_NULL",
		2: "k_ESteamNetworkingSocketsCipher_AES_256_GCM",
	}
	ESteamNetworkingSocketsCipher_value = map[string]int32{
		"k_ESteamNetworkingSocketsCipher_INVALID":     0,
		"k_ESteamNetworkingSocketsCipher_NULL":        1,
		"k_ESteamNetworkingSocketsCipher_AES_256_GCM": 2,
	}
)

func (x ESteamNetworkingSocketsCipher) Enum() *ESteamNetworkingSocketsCipher {
	p := new(ESteamNetworkingSocketsCipher)
	*p = x
	return p
}

func (x ESteamNetworkingSocketsCipher) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ESteamNetworkingSocketsCipher) Descriptor() protoreflect.EnumDescriptor {
	return file_steamnetworkingsockets_messages_proto_enumTypes[0].Descriptor()
}

func (ESteamNetworkingSocketsCipher) Type() protoreflect.EnumType {
	return &file_steamnetworkingsockets_messages_proto_enumTypes[0]
}

func (x ESteamNetworkingSocketsCipher) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ESteamNetworkingSocketsCipher) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ESteamNetworkingSocketsCipher(num)
	return nil
}

// Deprecated: Use ESteamNetworkingSocketsCipher.Descriptor instead.
func (ESteamNetworkingSocketsCipher) EnumDescriptor() ([]byte, []int) {
	return file_steamnetworkingsockets_messages_proto_rawDescGZIP(), []int{0}
}

type CMsgSteamDatagramSessionCryptInfo_EKeyType int32

const (
	CMsgSteamDatagramSessionCryptInfo_INVALID    CMsgSteamDatagramSessionCryptInfo_EKeyType = 0
	CMsgSteamDatagramSessionCryptInfo_CURVE25519 CMsgSteamDatagramSessionCryptInfo_EKeyType = 1
)

// Enum value maps for CMsgSteamDatagramSessionCryptInfo_EKeyType.
var (
	CMsgSteamDatagramSessionCryptInfo_EKeyType_name = map[int32]string{
		0: "INVALID",
		1: "CURVE25519",
	}
	CMsgSteamDatagramSessionCryptInfo_EKeyType_value = map[string]int32{
		"INVALID":    0,
		"CURVE25519": 1,
	}
)

func (x CMsgSteamDatagramSessionCryptInfo_EKeyType) Enum() *CMsgSteamDatagramSessionCryptInfo_EKeyType {
	p := new(CMsgSteamDatagramSessionCryptInfo_EKeyType)
	*p = x
	return p
}

func (x CMsgSteamDatagramSessionCryptInfo_EKeyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgSteamDatagramSessionCryptInfo_EKeyType) Descriptor() protoreflect.EnumDescriptor {
	return file_steamnetworkingsockets_messages_proto_enumTypes[1].Descriptor()
}

func (CMsgSteamDatagramSessionCryptInfo_EKeyType) Type() protoreflect.EnumType {
	return &file_steamnetworkingsockets_messages_proto_enumTypes[1]
}

func (x CMsgSteamDatagramSessionCryptInfo_EKeyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgSteamDatagramSessionCryptInfo_EKeyType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgSteamDatagramSessionCryptInfo_EKeyType(num)
	return nil
}

// Deprecated: Use CMsgSteamDatagramSessionCryptInfo_EKeyType.Descriptor instead.
func (CMsgSteamDatagramSessionCryptInfo_EKeyType) EnumDescriptor() ([]byte, []int) {
	return file_steamnetworkingsockets_messages_proto_rawDescGZIP(), []int{0, 0}
}

type CMsgSteamDatagramSessionCryptInfo struct {
	state           protoimpl.MessageState                      `protogen:"open.v1"`
	KeyType         *CMsgSteamDatagramSessionCryptInfo_EKeyType `protobuf:"varint,1,opt,name=key_type,json=keyType,enum=CMsgSteamDatagramSessionCryptInfo_EKeyType,def=0" json:"key_type,omitempty"`
	KeyData         []byte                                      `protobuf:"bytes,2,opt,name=key_data,json=keyData" json:"key_data,omitempty"`
	Nonce           *uint64                                     `protobuf:"fixed64,3,opt,name=nonce" json:"nonce,omitempty"`
	ProtocolVersion *uint32                                     `protobuf:"varint,4,opt,name=protocol_version,json=protocolVersion" json:"protocol_version,omitempty"`
	Ciphers         []ESteamNetworkingSocketsCipher             `protobuf:"varint,5,rep,name=ciphers,enum=ESteamNetworkingSocketsCipher" json:"ciphers,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

// Default values for CMsgSteamDatagramSessionCryptInfo fields.
const (
	Default_CMsgSteamDatagramSessionCryptInfo_KeyType = CMsgSteamDatagramSessionCryptInfo_INVALID
)

func (x *CMsgSteamDatagramSessionCryptInfo) Reset() {
	*x = CMsgSteamDatagramSessionCryptInfo{}
	mi := &file_steamnetworkingsockets_messages_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSteamDatagramSessionCryptInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramSessionCryptInfo) ProtoMessage() {}

func (x *CMsgSteamDatagramSessionCryptInfo) ProtoReflect() protoreflect.Message {
	mi := &file_steamnetworkingsockets_messages_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramSessionCryptInfo.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramSessionCryptInfo) Descriptor() ([]byte, []int) {
	return file_steamnetworkingsockets_messages_proto_rawDescGZIP(), []int{0}
}

func (x *CMsgSteamDatagramSessionCryptInfo) GetKeyType() CMsgSteamDatagramSessionCryptInfo_EKeyType {
	if x != nil && x.KeyType != nil {
		return *x.KeyType
	}
	return Default_CMsgSteamDatagramSessionCryptInfo_KeyType
}

func (x *CMsgSteamDatagramSessionCryptInfo) GetKeyData() []byte {
	if x != nil {
		return x.KeyData
	}
	return nil
}

func (x *CMsgSteamDatagramSessionCryptInfo) GetNonce() uint64 {
	if x != nil && x.Nonce != nil {
		return *x.Nonce
	}
	return 0
}

func (x *CMsgSteamDatagramSessionCryptInfo) GetProtocolVersion() uint32 {
	if x != nil && x.ProtocolVersion != nil {
		return *x.ProtocolVersion
	}
	return 0
}

func (x *CMsgSteamDatagramSessionCryptInfo) GetCiphers() []ESteamNetworkingSocketsCipher {
	if x != nil {
		return x.Ciphers
	}
	return nil
}

type CMsgSteamDatagramSessionCryptInfoSigned struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Info          []byte                 `protobuf:"bytes,1,opt,name=info" json:"info,omitempty"`
	Signature     []byte                 `protobuf:"bytes,2,opt,name=signature" json:"signature,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgSteamDatagramSessionCryptInfoSigned) Reset() {
	*x = CMsgSteamDatagramSessionCryptInfoSigned{}
	mi := &file_steamnetworkingsockets_messages_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSteamDatagramSessionCryptInfoSigned) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramSessionCryptInfoSigned) ProtoMessage() {}

func (x *CMsgSteamDatagramSessionCryptInfoSigned) ProtoReflect() protoreflect.Message {
	mi := &file_steamnetworkingsockets_messages_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramSessionCryptInfoSigned.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramSessionCryptInfoSigned) Descriptor() ([]byte, []int) {
	return file_steamnetworkingsockets_messages_proto_rawDescGZIP(), []int{1}
}

func (x *CMsgSteamDatagramSessionCryptInfoSigned) GetInfo() []byte {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *CMsgSteamDatagramSessionCryptInfoSigned) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type CMsgSteamDatagramDiagnostic struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Severity      *uint32                `protobuf:"varint,1,opt,name=severity" json:"severity,omitempty"`
	Text          *string                `protobuf:"bytes,2,opt,name=text" json:"text,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgSteamDatagramDiagnostic) Reset() {
	*x = CMsgSteamDatagramDiagnostic{}
	mi := &file_steamnetworkingsockets_messages_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSteamDatagramDiagnostic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramDiagnostic) ProtoMessage() {}

func (x *CMsgSteamDatagramDiagnostic) ProtoReflect() protoreflect.Message {
	mi := &file_steamnetworkingsockets_messages_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramDiagnostic.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramDiagnostic) Descriptor() ([]byte, []int) {
	return file_steamnetworkingsockets_messages_proto_rawDescGZIP(), []int{2}
}

func (x *CMsgSteamDatagramDiagnostic) GetSeverity() uint32 {
	if x != nil && x.Severity != nil {
		return *x.Severity
	}
	return 0
}

func (x *CMsgSteamDatagramDiagnostic) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

type CMsgSteamDatagramLinkInstantaneousStats struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	OutPacketsPerSecX10     *uint32                `protobuf:"varint,1,opt,name=out_packets_per_sec_x10,json=outPacketsPerSecX10" json:"out_packets_per_sec_x10,omitempty"`
	OutBytesPerSec          *uint32                `protobuf:"varint,2,opt,name=out_bytes_per_sec,json=outBytesPerSec" json:"out_bytes_per_sec,omitempty"`
	InPacketsPerSecX10      *uint32                `protobuf:"varint,3,opt,name=in_packets_per_sec_x10,json=inPacketsPerSecX10" json:"in_packets_per_sec_x10,omitempty"`
	InBytesPerSec           *uint32                `protobuf:"varint,4,opt,name=in_bytes_per_sec,json=inBytesPerSec" json:"in_bytes_per_sec,omitempty"`
	PingMs                  *uint32                `protobuf:"varint,5,opt,name=ping_ms,json=pingMs" json:"ping_ms,omitempty"`
	PacketsDroppedPct       *uint32                `protobuf:"varint,6,opt,name=packets_dropped_pct,json=packetsDroppedPct" json:"packets_dropped_pct,omitempty"`
	PacketsWeirdSequencePct *uint32                `protobuf:"varint,7,opt,name=packets_weird_sequence_pct,json=packetsWeirdSequencePct" json:"packets_weird_sequence_pct,omitempty"`
	PeakJitterUsec          *uint32                `protobuf:"varint,8,opt,name=peak_jitter_usec,json=peakJitterUsec" json:"peak_jitter_usec,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *CMsgSteamDatagramLinkInstantaneousStats) Reset() {
	*x = CMsgSteamDatagramLinkInstantaneousStats{}
	mi := &file_steamnetworkingsockets_messages_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSteamDatagramLinkInstantaneousStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramLinkInstantaneousStats) ProtoMessage() {}

func (x *CMsgSteamDatagramLinkInstantaneousStats) ProtoReflect() protoreflect.Message {
	mi := &file_steamnetworkingsockets_messages_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramLinkInstantaneousStats.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramLinkInstantaneousStats) Descriptor() ([]byte, []int) {
	return file_steamnetworkingsockets_messages_proto_rawDescGZIP(), []int{3}
}

func (x *CMsgSteamDatagramLinkInstantaneousStats) GetOutPacketsPerSecX10() uint32 {
	if x != nil && x.OutPacketsPerSecX10 != nil {
		return *x.OutPacketsPerSecX10
	}
	return 0
}

func (x *CMsgSteamDatagramLinkInstantaneousStats) GetOutBytesPerSec() uint32 {
	if x != nil && x.OutBytesPerSec != nil {
		return *x.OutBytesPerSec
	}
	return 0
}

func (x *CMsgSteamDatagramLinkInstantaneousStats) GetInPacketsPerSecX10() uint32 {
	if x != nil && x.InPacketsPerSecX10 != nil {
		return *x.InPacketsPerSecX10
	}
	return 0
}

func (x *CMsgSteamDatagramLinkInstantaneousStats) GetInBytesPerSec() uint32 {
	if x != nil && x.InBytesPerSec != nil {
		return *x.InBytesPerSec
	}
	return 0
}

func (x *CMsgSteamDatagramLinkInstantaneousStats) GetPingMs() uint32 {
	if x != nil && x.PingMs != nil {
		return *x.PingMs
	}
	return 0
}

func (x *CMsgSteamDatagramLinkInstantaneousStats) GetPacketsDroppedPct() uint32 {
	if x != nil && x.PacketsDroppedPct != nil {
		return *x.PacketsDroppedPct
	}
	return 0
}

func (x *CMsgSteamDatagramLinkInstantaneousStats) GetPacketsWeirdSequencePct() uint32 {
	if x != nil && x.PacketsWeirdSequencePct != nil {
		return *x.PacketsWeirdSequencePct
	}
	return 0
}

func (x *CMsgSteamDatagramLinkInstantaneousStats) GetPeakJitterUsec() uint32 {
	if x != nil && x.PeakJitterUsec != nil {
		return *x.PeakJitterUsec
	}
	return 0
}

type CMsgSteamDatagramLinkLifetimeStats struct {
	state                          protoimpl.MessageState `protogen:"open.v1"`
	ConnectedSeconds               *uint32                `protobuf:"varint,2,opt,name=connected_seconds,json=connectedSeconds" json:"connected_seconds,omitempty"`
	PacketsSent                    *uint64                `protobuf:"varint,3,opt,name=packets_sent,json=packetsSent" json:"packets_sent,omitempty"`
	KbSent                         *uint64                `protobuf:"varint,4,opt,name=kb_sent,json=kbSent" json:"kb_sent,omitempty"`
	PacketsRecv                    *uint64                `protobuf:"varint,5,opt,name=packets_recv,json=packetsRecv" json:"packets_recv,omitempty"`
	KbRecv                         *uint64                `protobuf:"varint,6,opt,name=kb_recv,json=kbRecv" json:"kb_recv,omitempty"`
	PacketsRecvSequenced           *uint64                `protobuf:"varint,7,opt,name=packets_recv_sequenced,json=packetsRecvSequenced" json:"packets_recv_sequenced,omitempty"`
	PacketsRecvDropped             *uint64                `protobuf:"varint,8,opt,name=packets_recv_dropped,json=packetsRecvDropped" json:"packets_recv_dropped,omitempty"`
	PacketsRecvOutOfOrder          *uint64                `protobuf:"varint,9,opt,name=packets_recv_out_of_order,json=packetsRecvOutOfOrder" json:"packets_recv_out_of_order,omitempty"`
	PacketsRecvOutOfOrderCorrected *uint64                `protobuf:"varint,15,opt,name=packets_recv_out_of_order_corrected,json=packetsRecvOutOfOrderCorrected" json:"packets_recv_out_of_order_corrected,omitempty"`
	PacketsRecvDuplicate           *uint64                `protobuf:"varint,10,opt,name=packets_recv_duplicate,json=packetsRecvDuplicate" json:"packets_recv_duplicate,omitempty"`
	PacketsRecvLurch               *uint64                `protobuf:"varint,11,opt,name=packets_recv_lurch,json=packetsRecvLurch" json:"packets_recv_lurch,omitempty"`
	MultipathPacketsRecvSequenced  []uint64               `protobuf:"varint,12,rep,name=multipath_packets_recv_sequenced,json=multipathPacketsRecvSequenced" json:"multipath_packets_recv_sequenced,omitempty"`
	MultipathPacketsRecvLater      []uint64               `protobuf:"varint,13,rep,name=multipath_packets_recv_later,json=multipathPacketsRecvLater" json:"multipath_packets_recv_later,omitempty"`
	MultipathSendEnabled           *uint32                `protobuf:"varint,14,opt,name=multipath_send_enabled,json=multipathSendEnabled" json:"multipath_send_enabled,omitempty"`
	QualityHistogram_100           *uint32                `protobuf:"varint,21,opt,name=quality_histogram_100,json=qualityHistogram100" json:"quality_histogram_100,omitempty"`
	QualityHistogram_99            *uint32                `protobuf:"varint,22,opt,name=quality_histogram_99,json=qualityHistogram99" json:"quality_histogram_99,omitempty"`
	QualityHistogram_97            *uint32                `protobuf:"varint,23,opt,name=quality_histogram_97,json=qualityHistogram97" json:"quality_histogram_97,omitempty"`
	QualityHistogram_95            *uint32                `protobuf:"varint,24,opt,name=quality_histogram_95,json=qualityHistogram95" json:"quality_histogram_95,omitempty"`
	QualityHistogram_90            *uint32                `protobuf:"varint,25,opt,name=quality_histogram_90,json=qualityHistogram90" json:"quality_histogram_90,omitempty"`
	QualityHistogram_75            *uint32                `protobuf:"varint,26,opt,name=quality_histogram_75,json=qualityHistogram75" json:"quality_histogram_75,omitempty"`
	QualityHistogram_50            *uint32                `protobuf:"varint,27,opt,name=quality_histogram_50,json=qualityHistogram50" json:"quality_histogram_50,omitempty"`
	QualityHistogram_1             *uint32                `protobuf:"varint,28,opt,name=quality_histogram_1,json=qualityHistogram1" json:"quality_histogram_1,omitempty"`
	QualityHistogramDead           *uint32                `protobuf:"varint,29,opt,name=quality_histogram_dead,json=qualityHistogramDead" json:"quality_histogram_dead,omitempty"`
	QualityNtile_2Nd               *uint32                `protobuf:"varint,30,opt,name=quality_ntile_2nd,json=qualityNtile2nd" json:"quality_ntile_2nd,omitempty"`
	QualityNtile_5Th               *uint32                `protobuf:"varint,31,opt,name=quality_ntile_5th,json=qualityNtile5th" json:"quality_ntile_5th,omitempty"`
	QualityNtile_25Th              *uint32                `protobuf:"varint,32,opt,name=quality_ntile_25th,json=qualityNtile25th" json:"quality_ntile_25th,omitempty"`
	QualityNtile_50Th              *uint32                `protobuf:"varint,33,opt,name=quality_ntile_50th,json=qualityNtile50th" json:"quality_ntile_50th,omitempty"`
	PingHistogram_25               *uint32                `protobuf:"varint,41,opt,name=ping_histogram_25,json=pingHistogram25" json:"ping_histogram_25,omitempty"`
	PingHistogram_50               *uint32                `protobuf:"varint,42,opt,name=ping_histogram_50,json=pingHistogram50" json:"ping_histogram_50,omitempty"`
	PingHistogram_75               *uint32                `protobuf:"varint,43,opt,name=ping_histogram_75,json=pingHistogram75" json:"ping_histogram_75,omitempty"`
	PingHistogram_100              *uint32                `protobuf:"varint,44,opt,name=ping_histogram_100,json=pingHistogram100" json:"ping_histogram_100,omitempty"`
	PingHistogram_125              *uint32                `protobuf:"varint,45,opt,name=ping_histogram_125,json=pingHistogram125" json:"ping_histogram_125,omitempty"`
	PingHistogram_150              *uint32                `protobuf:"varint,46,opt,name=ping_histogram_150,json=pingHistogram150" json:"ping_histogram_150,omitempty"`
	PingHistogram_200              *uint32                `protobuf:"varint,47,opt,name=ping_histogram_200,json=pingHistogram200" json:"ping_histogram_200,omitempty"`
	PingHistogram_300              *uint32                `protobuf:"varint,48,opt,name=ping_histogram_300,json=pingHistogram300" json:"ping_histogram_300,omitempty"`
	PingHistogramMax               *uint32                `protobuf:"varint,49,opt,name=ping_histogram_max,json=pingHistogramMax" json:"ping_histogram_max,omitempty"`
	PingNtile_5Th                  *uint32                `protobuf:"varint,50,opt,name=ping_ntile_5th,json=pingNtile5th" json:"ping_ntile_5th,omitempty"`
	PingNtile_50Th                 *uint32                `protobuf:"varint,51,opt,name=ping_ntile_50th,json=pingNtile50th" json:"ping_ntile_50th,omitempty"`
	PingNtile_75Th                 *uint32                `protobuf:"varint,52,opt,name=ping_ntile_75th,json=pingNtile75th" json:"ping_ntile_75th,omitempty"`
	PingNtile_95Th                 *uint32                `protobuf:"varint,53,opt,name=ping_ntile_95th,json=pingNtile95th" json:"ping_ntile_95th,omitempty"`
	PingNtile_98Th                 *uint32                `protobuf:"varint,54,opt,name=ping_ntile_98th,json=pingNtile98th" json:"ping_ntile_98th,omitempty"`
	JitterHistogramNegligible      *uint32                `protobuf:"varint,61,opt,name=jitter_histogram_negligible,json=jitterHistogramNegligible" json:"jitter_histogram_negligible,omitempty"`
	JitterHistogram_1              *uint32                `protobuf:"varint,62,opt,name=jitter_histogram_1,json=jitterHistogram1" json:"jitter_histogram_1,omitempty"`
	JitterHistogram_2              *uint32                `protobuf:"varint,63,opt,name=jitter_histogram_2,json=jitterHistogram2" json:"jitter_histogram_2,omitempty"`
	JitterHistogram_5              *uint32                `protobuf:"varint,64,opt,name=jitter_histogram_5,json=jitterHistogram5" json:"jitter_histogram_5,omitempty"`
	JitterHistogram_10             *uint32                `protobuf:"varint,65,opt,name=jitter_histogram_10,json=jitterHistogram10" json:"jitter_histogram_10,omitempty"`
	JitterHistogram_20             *uint32                `protobuf:"varint,66,opt,name=jitter_histogram_20,json=jitterHistogram20" json:"jitter_histogram_20,omitempty"`
	unknownFields                  protoimpl.UnknownFields
	sizeCache                      protoimpl.SizeCache
}

func (x *CMsgSteamDatagramLinkLifetimeStats) Reset() {
	*x = CMsgSteamDatagramLinkLifetimeStats{}
	mi := &file_steamnetworkingsockets_messages_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSteamDatagramLinkLifetimeStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramLinkLifetimeStats) ProtoMessage() {}

func (x *CMsgSteamDatagramLinkLifetimeStats) ProtoReflect() protoreflect.Message {
	mi := &file_steamnetworkingsockets_messages_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramLinkLifetimeStats.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramLinkLifetimeStats) Descriptor() ([]byte, []int) {
	return file_steamnetworkingsockets_messages_proto_rawDescGZIP(), []int{4}
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetConnectedSeconds() uint32 {
	if x != nil && x.ConnectedSeconds != nil {
		return *x.ConnectedSeconds
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetPacketsSent() uint64 {
	if x != nil && x.PacketsSent != nil {
		return *x.PacketsSent
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetKbSent() uint64 {
	if x != nil && x.KbSent != nil {
		return *x.KbSent
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetPacketsRecv() uint64 {
	if x != nil && x.PacketsRecv != nil {
		return *x.PacketsRecv
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetKbRecv() uint64 {
	if x != nil && x.KbRecv != nil {
		return *x.KbRecv
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetPacketsRecvSequenced() uint64 {
	if x != nil && x.PacketsRecvSequenced != nil {
		return *x.PacketsRecvSequenced
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetPacketsRecvDropped() uint64 {
	if x != nil && x.PacketsRecvDropped != nil {
		return *x.PacketsRecvDropped
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetPacketsRecvOutOfOrder() uint64 {
	if x != nil && x.PacketsRecvOutOfOrder != nil {
		return *x.PacketsRecvOutOfOrder
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetPacketsRecvOutOfOrderCorrected() uint64 {
	if x != nil && x.PacketsRecvOutOfOrderCorrected != nil {
		return *x.PacketsRecvOutOfOrderCorrected
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetPacketsRecvDuplicate() uint64 {
	if x != nil && x.PacketsRecvDuplicate != nil {
		return *x.PacketsRecvDuplicate
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetPacketsRecvLurch() uint64 {
	if x != nil && x.PacketsRecvLurch != nil {
		return *x.PacketsRecvLurch
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetMultipathPacketsRecvSequenced() []uint64 {
	if x != nil {
		return x.MultipathPacketsRecvSequenced
	}
	return nil
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetMultipathPacketsRecvLater() []uint64 {
	if x != nil {
		return x.MultipathPacketsRecvLater
	}
	return nil
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetMultipathSendEnabled() uint32 {
	if x != nil && x.MultipathSendEnabled != nil {
		return *x.MultipathSendEnabled
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetQualityHistogram_100() uint32 {
	if x != nil && x.QualityHistogram_100 != nil {
		return *x.QualityHistogram_100
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetQualityHistogram_99() uint32 {
	if x != nil && x.QualityHistogram_99 != nil {
		return *x.QualityHistogram_99
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetQualityHistogram_97() uint32 {
	if x != nil && x.QualityHistogram_97 != nil {
		return *x.QualityHistogram_97
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetQualityHistogram_95() uint32 {
	if x != nil && x.QualityHistogram_95 != nil {
		return *x.QualityHistogram_95
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetQualityHistogram_90() uint32 {
	if x != nil && x.QualityHistogram_90 != nil {
		return *x.QualityHistogram_90
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetQualityHistogram_75() uint32 {
	if x != nil && x.QualityHistogram_75 != nil {
		return *x.QualityHistogram_75
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetQualityHistogram_50() uint32 {
	if x != nil && x.QualityHistogram_50 != nil {
		return *x.QualityHistogram_50
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetQualityHistogram_1() uint32 {
	if x != nil && x.QualityHistogram_1 != nil {
		return *x.QualityHistogram_1
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetQualityHistogramDead() uint32 {
	if x != nil && x.QualityHistogramDead != nil {
		return *x.QualityHistogramDead
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetQualityNtile_2Nd() uint32 {
	if x != nil && x.QualityNtile_2Nd != nil {
		return *x.QualityNtile_2Nd
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetQualityNtile_5Th() uint32 {
	if x != nil && x.QualityNtile_5Th != nil {
		return *x.QualityNtile_5Th
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetQualityNtile_25Th() uint32 {
	if x != nil && x.QualityNtile_25Th != nil {
		return *x.QualityNtile_25Th
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetQualityNtile_50Th() uint32 {
	if x != nil && x.QualityNtile_50Th != nil {
		return *x.QualityNtile_50Th
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetPingHistogram_25() uint32 {
	if x != nil && x.PingHistogram_25 != nil {
		return *x.PingHistogram_25
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetPingHistogram_50() uint32 {
	if x != nil && x.PingHistogram_50 != nil {
		return *x.PingHistogram_50
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetPingHistogram_75() uint32 {
	if x != nil && x.PingHistogram_75 != nil {
		return *x.PingHistogram_75
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetPingHistogram_100() uint32 {
	if x != nil && x.PingHistogram_100 != nil {
		return *x.PingHistogram_100
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetPingHistogram_125() uint32 {
	if x != nil && x.PingHistogram_125 != nil {
		return *x.PingHistogram_125
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetPingHistogram_150() uint32 {
	if x != nil && x.PingHistogram_150 != nil {
		return *x.PingHistogram_150
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetPingHistogram_200() uint32 {
	if x != nil && x.PingHistogram_200 != nil {
		return *x.PingHistogram_200
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetPingHistogram_300() uint32 {
	if x != nil && x.PingHistogram_300 != nil {
		return *x.PingHistogram_300
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetPingHistogramMax() uint32 {
	if x != nil && x.PingHistogramMax != nil {
		return *x.PingHistogramMax
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetPingNtile_5Th() uint32 {
	if x != nil && x.PingNtile_5Th != nil {
		return *x.PingNtile_5Th
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetPingNtile_50Th() uint32 {
	if x != nil && x.PingNtile_50Th != nil {
		return *x.PingNtile_50Th
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetPingNtile_75Th() uint32 {
	if x != nil && x.PingNtile_75Th != nil {
		return *x.PingNtile_75Th
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetPingNtile_95Th() uint32 {
	if x != nil && x.PingNtile_95Th != nil {
		return *x.PingNtile_95Th
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetPingNtile_98Th() uint32 {
	if x != nil && x.PingNtile_98Th != nil {
		return *x.PingNtile_98Th
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetJitterHistogramNegligible() uint32 {
	if x != nil && x.JitterHistogramNegligible != nil {
		return *x.JitterHistogramNegligible
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetJitterHistogram_1() uint32 {
	if x != nil && x.JitterHistogram_1 != nil {
		return *x.JitterHistogram_1
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetJitterHistogram_2() uint32 {
	if x != nil && x.JitterHistogram_2 != nil {
		return *x.JitterHistogram_2
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetJitterHistogram_5() uint32 {
	if x != nil && x.JitterHistogram_5 != nil {
		return *x.JitterHistogram_5
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetJitterHistogram_10() uint32 {
	if x != nil && x.JitterHistogram_10 != nil {
		return *x.JitterHistogram_10
	}
	return 0
}

func (x *CMsgSteamDatagramLinkLifetimeStats) GetJitterHistogram_20() uint32 {
	if x != nil && x.JitterHistogram_20 != nil {
		return *x.JitterHistogram_20
	}
	return 0
}

type CMsgSteamDatagramConnectionQuality struct {
	state         protoimpl.MessageState                   `protogen:"open.v1"`
	Instantaneous *CMsgSteamDatagramLinkInstantaneousStats `protobuf:"bytes,1,opt,name=instantaneous" json:"instantaneous,omitempty"`
	Lifetime      *CMsgSteamDatagramLinkLifetimeStats      `protobuf:"bytes,2,opt,name=lifetime" json:"lifetime,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgSteamDatagramConnectionQuality) Reset() {
	*x = CMsgSteamDatagramConnectionQuality{}
	mi := &file_steamnetworkingsockets_messages_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSteamDatagramConnectionQuality) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramConnectionQuality) ProtoMessage() {}

func (x *CMsgSteamDatagramConnectionQuality) ProtoReflect() protoreflect.Message {
	mi := &file_steamnetworkingsockets_messages_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramConnectionQuality.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramConnectionQuality) Descriptor() ([]byte, []int) {
	return file_steamnetworkingsockets_messages_proto_rawDescGZIP(), []int{5}
}

func (x *CMsgSteamDatagramConnectionQuality) GetInstantaneous() *CMsgSteamDatagramLinkInstantaneousStats {
	if x != nil {
		return x.Instantaneous
	}
	return nil
}

func (x *CMsgSteamDatagramConnectionQuality) GetLifetime() *CMsgSteamDatagramLinkLifetimeStats {
	if x != nil {
		return x.Lifetime
	}
	return nil
}

type CMsgICECandidate struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Candidate     *string                `protobuf:"bytes,3,opt,name=candidate" json:"candidate,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgICECandidate) Reset() {
	*x = CMsgICECandidate{}
	mi := &file_steamnetworkingsockets_messages_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgICECandidate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgICECandidate) ProtoMessage() {}

func (x *CMsgICECandidate) ProtoReflect() protoreflect.Message {
	mi := &file_steamnetworkingsockets_messages_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgICECandidate.ProtoReflect.Descriptor instead.
func (*CMsgICECandidate) Descriptor() ([]byte, []int) {
	return file_steamnetworkingsockets_messages_proto_rawDescGZIP(), []int{6}
}

func (x *CMsgICECandidate) GetCandidate() string {
	if x != nil && x.Candidate != nil {
		return *x.Candidate
	}
	return ""
}

type CMsgICERendezvous struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Auth          *CMsgICERendezvous_Auth `protobuf:"bytes,2,opt,name=auth" json:"auth,omitempty"`
	AddCandidate  *CMsgICECandidate       `protobuf:"bytes,1,opt,name=add_candidate,json=addCandidate" json:"add_candidate,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgICERendezvous) Reset() {
	*x = CMsgICERendezvous{}
	mi := &file_steamnetworkingsockets_messages_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgICERendezvous) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgICERendezvous) ProtoMessage() {}

func (x *CMsgICERendezvous) ProtoReflect() protoreflect.Message {
	mi := &file_steamnetworkingsockets_messages_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgICERendezvous.ProtoReflect.Descriptor instead.
func (*CMsgICERendezvous) Descriptor() ([]byte, []int) {
	return file_steamnetworkingsockets_messages_proto_rawDescGZIP(), []int{7}
}

func (x *CMsgICERendezvous) GetAuth() *CMsgICERendezvous_Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *CMsgICERendezvous) GetAddCandidate() *CMsgICECandidate {
	if x != nil {
		return x.AddCandidate
	}
	return nil
}

type CMsgSteamNetworkingP2PRendezvous struct {
	state                 protoimpl.MessageState                                 `protogen:"open.v1"`
	FromIdentity          *string                                                `protobuf:"bytes,8,opt,name=from_identity,json=fromIdentity" json:"from_identity,omitempty"`
	FromConnectionId      *uint32                                                `protobuf:"fixed32,9,opt,name=from_connection_id,json=fromConnectionId" json:"from_connection_id,omitempty"`
	ToIdentity            *string                                                `protobuf:"bytes,10,opt,name=to_identity,json=toIdentity" json:"to_identity,omitempty"`
	ToConnectionId        *uint32                                                `protobuf:"fixed32,1,opt,name=to_connection_id,json=toConnectionId" json:"to_connection_id,omitempty"`
	SdrRoutes             []byte                                                 `protobuf:"bytes,2,opt,name=sdr_routes,json=sdrRoutes" json:"sdr_routes,omitempty"`
	AckPeerRoutesRevision *uint32                                                `protobuf:"varint,3,opt,name=ack_peer_routes_revision,json=ackPeerRoutesRevision" json:"ack_peer_routes_revision,omitempty"`
	IceEnabled            *bool                                                  `protobuf:"varint,7,opt,name=ice_enabled,json=iceEnabled" json:"ice_enabled,omitempty"`
	HostedServerTicket    []byte                                                 `protobuf:"bytes,14,opt,name=hosted_server_ticket,json=hostedServerTicket" json:"hosted_server_ticket,omitempty"`
	ConnectRequest        *CMsgSteamNetworkingP2PRendezvous_ConnectRequest       `protobuf:"bytes,4,opt,name=connect_request,json=connectRequest" json:"connect_request,omitempty"`
	ConnectOk             *CMsgSteamNetworkingP2PRendezvous_ConnectOK            `protobuf:"bytes,5,opt,name=connect_ok,json=connectOk" json:"connect_ok,omitempty"`
	ConnectionClosed      *CMsgSteamNetworkingP2PRendezvous_ConnectionClosed     `protobuf:"bytes,6,opt,name=connection_closed,json=connectionClosed" json:"connection_closed,omitempty"`
	AckReliableMsg        *uint32                                                `protobuf:"varint,11,opt,name=ack_reliable_msg,json=ackReliableMsg" json:"ack_reliable_msg,omitempty"`
	FirstReliableMsg      *uint32                                                `protobuf:"varint,12,opt,name=first_reliable_msg,json=firstReliableMsg" json:"first_reliable_msg,omitempty"`
	ReliableMessages      []*CMsgSteamNetworkingP2PRendezvous_ReliableMessage    `protobuf:"bytes,13,rep,name=reliable_messages,json=reliableMessages" json:"reliable_messages,omitempty"`
	ApplicationMessages   []*CMsgSteamNetworkingP2PRendezvous_ApplicationMessage `protobuf:"bytes,15,rep,name=application_messages,json=applicationMessages" json:"application_messages,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *CMsgSteamNetworkingP2PRendezvous) Reset() {
	*x = CMsgSteamNetworkingP2PRendezvous{}
	mi := &file_steamnetworkingsockets_messages_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSteamNetworkingP2PRendezvous) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamNetworkingP2PRendezvous) ProtoMessage() {}

func (x *CMsgSteamNetworkingP2PRendezvous) ProtoReflect() protoreflect.Message {
	mi := &file_steamnetworkingsockets_messages_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamNetworkingP2PRendezvous.ProtoReflect.Descriptor instead.
func (*CMsgSteamNetworkingP2PRendezvous) Descriptor() ([]byte, []int) {
	return file_steamnetworkingsockets_messages_proto_rawDescGZIP(), []int{8}
}

func (x *CMsgSteamNetworkingP2PRendezvous) GetFromIdentity() string {
	if x != nil && x.FromIdentity != nil {
		return *x.FromIdentity
	}
	return ""
}

func (x *CMsgSteamNetworkingP2PRendezvous) GetFromConnectionId() uint32 {
	if x != nil && x.FromConnectionId != nil {
		return *x.FromConnectionId
	}
	return 0
}

func (x *CMsgSteamNetworkingP2PRendezvous) GetToIdentity() string {
	if x != nil && x.ToIdentity != nil {
		return *x.ToIdentity
	}
	return ""
}

func (x *CMsgSteamNetworkingP2PRendezvous) GetToConnectionId() uint32 {
	if x != nil && x.ToConnectionId != nil {
		return *x.ToConnectionId
	}
	return 0
}

func (x *CMsgSteamNetworkingP2PRendezvous) GetSdrRoutes() []byte {
	if x != nil {
		return x.SdrRoutes
	}
	return nil
}

func (x *CMsgSteamNetworkingP2PRendezvous) GetAckPeerRoutesRevision() uint32 {
	if x != nil && x.AckPeerRoutesRevision != nil {
		return *x.AckPeerRoutesRevision
	}
	return 0
}

func (x *CMsgSteamNetworkingP2PRendezvous) GetIceEnabled() bool {
	if x != nil && x.IceEnabled != nil {
		return *x.IceEnabled
	}
	return false
}

func (x *CMsgSteamNetworkingP2PRendezvous) GetHostedServerTicket() []byte {
	if x != nil {
		return x.HostedServerTicket
	}
	return nil
}

func (x *CMsgSteamNetworkingP2PRendezvous) GetConnectRequest() *CMsgSteamNetworkingP2PRendezvous_ConnectRequest {
	if x != nil {
		return x.ConnectRequest
	}
	return nil
}

func (x *CMsgSteamNetworkingP2PRendezvous) GetConnectOk() *CMsgSteamNetworkingP2PRendezvous_ConnectOK {
	if x != nil {
		return x.ConnectOk
	}
	return nil
}

func (x *CMsgSteamNetworkingP2PRendezvous) GetConnectionClosed() *CMsgSteamNetworkingP2PRendezvous_ConnectionClosed {
	if x != nil {
		return x.ConnectionClosed
	}
	return nil
}

func (x *CMsgSteamNetworkingP2PRendezvous) GetAckReliableMsg() uint32 {
	if x != nil && x.AckReliableMsg != nil {
		return *x.AckReliableMsg
	}
	return 0
}

func (x *CMsgSteamNetworkingP2PRendezvous) GetFirstReliableMsg() uint32 {
	if x != nil && x.FirstReliableMsg != nil {
		return *x.FirstReliableMsg
	}
	return 0
}

func (x *CMsgSteamNetworkingP2PRendezvous) GetReliableMessages() []*CMsgSteamNetworkingP2PRendezvous_ReliableMessage {
	if x != nil {
		return x.ReliableMessages
	}
	return nil
}

func (x *CMsgSteamNetworkingP2PRendezvous) GetApplicationMessages() []*CMsgSteamNetworkingP2PRendezvous_ApplicationMessage {
	if x != nil {
		return x.ApplicationMessages
	}
	return nil
}

type CMsgSteamNetworkingICESessionSummary struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	FailureReasonCode          *uint32                `protobuf:"varint,7,opt,name=failure_reason_code,json=failureReasonCode" json:"failure_reason_code,omitempty"`
	LocalCandidateTypes        *uint32                `protobuf:"varint,1,opt,name=local_candidate_types,json=localCandidateTypes" json:"local_candidate_types,omitempty"`
	RemoteCandidateTypes       *uint32                `protobuf:"varint,2,opt,name=remote_candidate_types,json=remoteCandidateTypes" json:"remote_candidate_types,omitempty"`
	InitialRouteKind           *uint32                `protobuf:"varint,3,opt,name=initial_route_kind,json=initialRouteKind" json:"initial_route_kind,omitempty"`
	InitialPing                *uint32                `protobuf:"varint,4,opt,name=initial_ping,json=initialPing" json:"initial_ping,omitempty"`
	InitialScore               *uint32                `protobuf:"varint,6,opt,name=initial_score,json=initialScore" json:"initial_score,omitempty"`
	NegotiationMs              *uint32                `protobuf:"varint,5,opt,name=negotiation_ms,json=negotiationMs" json:"negotiation_ms,omitempty"`
	BestRouteKind              *uint32                `protobuf:"varint,16,opt,name=best_route_kind,json=bestRouteKind" json:"best_route_kind,omitempty"`
	BestPing                   *uint32                `protobuf:"varint,17,opt,name=best_ping,json=bestPing" json:"best_ping,omitempty"`
	BestScore                  *uint32                `protobuf:"varint,18,opt,name=best_score,json=bestScore" json:"best_score,omitempty"`
	BestTime                   *uint32                `protobuf:"varint,19,opt,name=best_time,json=bestTime" json:"best_time,omitempty"`
	SelectedSeconds            *uint32                `protobuf:"varint,12,opt,name=selected_seconds,json=selectedSeconds" json:"selected_seconds,omitempty"`
	UserSettings               *uint32                `protobuf:"varint,13,opt,name=user_settings,json=userSettings" json:"user_settings,omitempty"`
	IceEnableVar               *uint32                `protobuf:"varint,14,opt,name=ice_enable_var,json=iceEnableVar" json:"ice_enable_var,omitempty"`
	LocalCandidateTypesAllowed *uint32                `protobuf:"varint,15,opt,name=local_candidate_types_allowed,json=localCandidateTypesAllowed" json:"local_candidate_types_allowed,omitempty"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *CMsgSteamNetworkingICESessionSummary) Reset() {
	*x = CMsgSteamNetworkingICESessionSummary{}
	mi := &file_steamnetworkingsockets_messages_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSteamNetworkingICESessionSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamNetworkingICESessionSummary) ProtoMessage() {}

func (x *CMsgSteamNetworkingICESessionSummary) ProtoReflect() protoreflect.Message {
	mi := &file_steamnetworkingsockets_messages_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamNetworkingICESessionSummary.ProtoReflect.Descriptor instead.
func (*CMsgSteamNetworkingICESessionSummary) Descriptor() ([]byte, []int) {
	return file_steamnetworkingsockets_messages_proto_rawDescGZIP(), []int{9}
}

func (x *CMsgSteamNetworkingICESessionSummary) GetFailureReasonCode() uint32 {
	if x != nil && x.FailureReasonCode != nil {
		return *x.FailureReasonCode
	}
	return 0
}

func (x *CMsgSteamNetworkingICESessionSummary) GetLocalCandidateTypes() uint32 {
	if x != nil && x.LocalCandidateTypes != nil {
		return *x.LocalCandidateTypes
	}
	return 0
}

func (x *CMsgSteamNetworkingICESessionSummary) GetRemoteCandidateTypes() uint32 {
	if x != nil && x.RemoteCandidateTypes != nil {
		return *x.RemoteCandidateTypes
	}
	return 0
}

func (x *CMsgSteamNetworkingICESessionSummary) GetInitialRouteKind() uint32 {
	if x != nil && x.InitialRouteKind != nil {
		return *x.InitialRouteKind
	}
	return 0
}

func (x *CMsgSteamNetworkingICESessionSummary) GetInitialPing() uint32 {
	if x != nil && x.InitialPing != nil {
		return *x.InitialPing
	}
	return 0
}

func (x *CMsgSteamNetworkingICESessionSummary) GetInitialScore() uint32 {
	if x != nil && x.InitialScore != nil {
		return *x.InitialScore
	}
	return 0
}

func (x *CMsgSteamNetworkingICESessionSummary) GetNegotiationMs() uint32 {
	if x != nil && x.NegotiationMs != nil {
		return *x.NegotiationMs
	}
	return 0
}

func (x *CMsgSteamNetworkingICESessionSummary) GetBestRouteKind() uint32 {
	if x != nil && x.BestRouteKind != nil {
		return *x.BestRouteKind
	}
	return 0
}

func (x *CMsgSteamNetworkingICESessionSummary) GetBestPing() uint32 {
	if x != nil && x.BestPing != nil {
		return *x.BestPing
	}
	return 0
}

func (x *CMsgSteamNetworkingICESessionSummary) GetBestScore() uint32 {
	if x != nil && x.BestScore != nil {
		return *x.BestScore
	}
	return 0
}

func (x *CMsgSteamNetworkingICESessionSummary) GetBestTime() uint32 {
	if x != nil && x.BestTime != nil {
		return *x.BestTime
	}
	return 0
}

func (x *CMsgSteamNetworkingICESessionSummary) GetSelectedSeconds() uint32 {
	if x != nil && x.SelectedSeconds != nil {
		return *x.SelectedSeconds
	}
	return 0
}

func (x *CMsgSteamNetworkingICESessionSummary) GetUserSettings() uint32 {
	if x != nil && x.UserSettings != nil {
		return *x.UserSettings
	}
	return 0
}

func (x *CMsgSteamNetworkingICESessionSummary) GetIceEnableVar() uint32 {
	if x != nil && x.IceEnableVar != nil {
		return *x.IceEnableVar
	}
	return 0
}

func (x *CMsgSteamNetworkingICESessionSummary) GetLocalCandidateTypesAllowed() uint32 {
	if x != nil && x.LocalCandidateTypesAllowed != nil {
		return *x.LocalCandidateTypesAllowed
	}
	return 0
}

type CMsgICERendezvous_Auth struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PwdFrag       *string                `protobuf:"bytes,1,opt,name=pwd_frag,json=pwdFrag" json:"pwd_frag,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgICERendezvous_Auth) Reset() {
	*x = CMsgICERendezvous_Auth{}
	mi := &file_steamnetworkingsockets_messages_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgICERendezvous_Auth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgICERendezvous_Auth) ProtoMessage() {}

func (x *CMsgICERendezvous_Auth) ProtoReflect() protoreflect.Message {
	mi := &file_steamnetworkingsockets_messages_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgICERendezvous_Auth.ProtoReflect.Descriptor instead.
func (*CMsgICERendezvous_Auth) Descriptor() ([]byte, []int) {
	return file_steamnetworkingsockets_messages_proto_rawDescGZIP(), []int{7, 0}
}

func (x *CMsgICERendezvous_Auth) GetPwdFrag() string {
	if x != nil && x.PwdFrag != nil {
		return *x.PwdFrag
	}
	return ""
}

type CMsgSteamNetworkingP2PRendezvous_ConnectRequest struct {
	state           protoimpl.MessageState                   `protogen:"open.v1"`
	Crypt           *CMsgSteamDatagramSessionCryptInfoSigned `protobuf:"bytes,6,opt,name=crypt" json:"crypt,omitempty"`
	Cert            *CMsgSteamDatagramCertificateSigned      `protobuf:"bytes,7,opt,name=cert" json:"cert,omitempty"`
	ToVirtualPort   *uint32                                  `protobuf:"varint,9,opt,name=to_virtual_port,json=toVirtualPort" json:"to_virtual_port,omitempty"`
	FromVirtualPort *uint32                                  `protobuf:"varint,10,opt,name=from_virtual_port,json=fromVirtualPort" json:"from_virtual_port,omitempty"`
	FromFakeip      *string                                  `protobuf:"bytes,11,opt,name=from_fakeip,json=fromFakeip" json:"from_fakeip,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CMsgSteamNetworkingP2PRendezvous_ConnectRequest) Reset() {
	*x = CMsgSteamNetworkingP2PRendezvous_ConnectRequest{}
	mi := &file_steamnetworkingsockets_messages_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSteamNetworkingP2PRendezvous_ConnectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamNetworkingP2PRendezvous_ConnectRequest) ProtoMessage() {}

func (x *CMsgSteamNetworkingP2PRendezvous_ConnectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_steamnetworkingsockets_messages_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamNetworkingP2PRendezvous_ConnectRequest.ProtoReflect.Descriptor instead.
func (*CMsgSteamNetworkingP2PRendezvous_ConnectRequest) Descriptor() ([]byte, []int) {
	return file_steamnetworkingsockets_messages_proto_rawDescGZIP(), []int{8, 0}
}

func (x *CMsgSteamNetworkingP2PRendezvous_ConnectRequest) GetCrypt() *CMsgSteamDatagramSessionCryptInfoSigned {
	if x != nil {
		return x.Crypt
	}
	return nil
}

func (x *CMsgSteamNetworkingP2PRendezvous_ConnectRequest) GetCert() *CMsgSteamDatagramCertificateSigned {
	if x != nil {
		return x.Cert
	}
	return nil
}

func (x *CMsgSteamNetworkingP2PRendezvous_ConnectRequest) GetToVirtualPort() uint32 {
	if x != nil && x.ToVirtualPort != nil {
		return *x.ToVirtualPort
	}
	return 0
}

func (x *CMsgSteamNetworkingP2PRendezvous_ConnectRequest) GetFromVirtualPort() uint32 {
	if x != nil && x.FromVirtualPort != nil {
		return *x.FromVirtualPort
	}
	return 0
}

func (x *CMsgSteamNetworkingP2PRendezvous_ConnectRequest) GetFromFakeip() string {
	if x != nil && x.FromFakeip != nil {
		return *x.FromFakeip
	}
	return ""
}

type CMsgSteamNetworkingP2PRendezvous_ConnectOK struct {
	state         protoimpl.MessageState                   `protogen:"open.v1"`
	Crypt         *CMsgSteamDatagramSessionCryptInfoSigned `protobuf:"bytes,5,opt,name=crypt" json:"crypt,omitempty"`
	Cert          *CMsgSteamDatagramCertificateSigned      `protobuf:"bytes,6,opt,name=cert" json:"cert,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgSteamNetworkingP2PRendezvous_ConnectOK) Reset() {
	*x = CMsgSteamNetworkingP2PRendezvous_ConnectOK{}
	mi := &file_steamnetworkingsockets_messages_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSteamNetworkingP2PRendezvous_ConnectOK) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamNetworkingP2PRendezvous_ConnectOK) ProtoMessage() {}

func (x *CMsgSteamNetworkingP2PRendezvous_ConnectOK) ProtoReflect() protoreflect.Message {
	mi := &file_steamnetworkingsockets_messages_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamNetworkingP2PRendezvous_ConnectOK.ProtoReflect.Descriptor instead.
func (*CMsgSteamNetworkingP2PRendezvous_ConnectOK) Descriptor() ([]byte, []int) {
	return file_steamnetworkingsockets_messages_proto_rawDescGZIP(), []int{8, 1}
}

func (x *CMsgSteamNetworkingP2PRendezvous_ConnectOK) GetCrypt() *CMsgSteamDatagramSessionCryptInfoSigned {
	if x != nil {
		return x.Crypt
	}
	return nil
}

func (x *CMsgSteamNetworkingP2PRendezvous_ConnectOK) GetCert() *CMsgSteamDatagramCertificateSigned {
	if x != nil {
		return x.Cert
	}
	return nil
}

type CMsgSteamNetworkingP2PRendezvous_ConnectionClosed struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Debug         *string                `protobuf:"bytes,5,opt,name=debug" json:"debug,omitempty"`
	ReasonCode    *uint32                `protobuf:"varint,6,opt,name=reason_code,json=reasonCode" json:"reason_code,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgSteamNetworkingP2PRendezvous_ConnectionClosed) Reset() {
	*x = CMsgSteamNetworkingP2PRendezvous_ConnectionClosed{}
	mi := &file_steamnetworkingsockets_messages_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSteamNetworkingP2PRendezvous_ConnectionClosed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamNetworkingP2PRendezvous_ConnectionClosed) ProtoMessage() {}

func (x *CMsgSteamNetworkingP2PRendezvous_ConnectionClosed) ProtoReflect() protoreflect.Message {
	mi := &file_steamnetworkingsockets_messages_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamNetworkingP2PRendezvous_ConnectionClosed.ProtoReflect.Descriptor instead.
func (*CMsgSteamNetworkingP2PRendezvous_ConnectionClosed) Descriptor() ([]byte, []int) {
	return file_steamnetworkingsockets_messages_proto_rawDescGZIP(), []int{8, 2}
}

func (x *CMsgSteamNetworkingP2PRendezvous_ConnectionClosed) GetDebug() string {
	if x != nil && x.Debug != nil {
		return *x.Debug
	}
	return ""
}

func (x *CMsgSteamNetworkingP2PRendezvous_ConnectionClosed) GetReasonCode() uint32 {
	if x != nil && x.ReasonCode != nil {
		return *x.ReasonCode
	}
	return 0
}

type CMsgSteamNetworkingP2PRendezvous_ReliableMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ice           *CMsgICERendezvous     `protobuf:"bytes,1,opt,name=ice" json:"ice,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgSteamNetworkingP2PRendezvous_ReliableMessage) Reset() {
	*x = CMsgSteamNetworkingP2PRendezvous_ReliableMessage{}
	mi := &file_steamnetworkingsockets_messages_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSteamNetworkingP2PRendezvous_ReliableMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamNetworkingP2PRendezvous_ReliableMessage) ProtoMessage() {}

func (x *CMsgSteamNetworkingP2PRendezvous_ReliableMessage) ProtoReflect() protoreflect.Message {
	mi := &file_steamnetworkingsockets_messages_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamNetworkingP2PRendezvous_ReliableMessage.ProtoReflect.Descriptor instead.
func (*CMsgSteamNetworkingP2PRendezvous_ReliableMessage) Descriptor() ([]byte, []int) {
	return file_steamnetworkingsockets_messages_proto_rawDescGZIP(), []int{8, 3}
}

func (x *CMsgSteamNetworkingP2PRendezvous_ReliableMessage) GetIce() *CMsgICERendezvous {
	if x != nil {
		return x.Ice
	}
	return nil
}

type CMsgSteamNetworkingP2PRendezvous_ApplicationMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []byte                 `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	MsgNum        *uint64                `protobuf:"varint,2,opt,name=msg_num,json=msgNum" json:"msg_num,omitempty"`
	Flags         *uint32                `protobuf:"varint,3,opt,name=flags" json:"flags,omitempty"`
	LaneIdx       *uint32                `protobuf:"varint,4,opt,name=lane_idx,json=laneIdx" json:"lane_idx,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgSteamNetworkingP2PRendezvous_ApplicationMessage) Reset() {
	*x = CMsgSteamNetworkingP2PRendezvous_ApplicationMessage{}
	mi := &file_steamnetworkingsockets_messages_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSteamNetworkingP2PRendezvous_ApplicationMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamNetworkingP2PRendezvous_ApplicationMessage) ProtoMessage() {}

func (x *CMsgSteamNetworkingP2PRendezvous_ApplicationMessage) ProtoReflect() protoreflect.Message {
	mi := &file_steamnetworkingsockets_messages_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamNetworkingP2PRendezvous_ApplicationMessage.ProtoReflect.Descriptor instead.
func (*CMsgSteamNetworkingP2PRendezvous_ApplicationMessage) Descriptor() ([]byte, []int) {
	return file_steamnetworkingsockets_messages_proto_rawDescGZIP(), []int{8, 4}
}

func (x *CMsgSteamNetworkingP2PRendezvous_ApplicationMessage) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *CMsgSteamNetworkingP2PRendezvous_ApplicationMessage) GetMsgNum() uint64 {
	if x != nil && x.MsgNum != nil {
		return *x.MsgNum
	}
	return 0
}

func (x *CMsgSteamNetworkingP2PRendezvous_ApplicationMessage) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

func (x *CMsgSteamNetworkingP2PRendezvous_ApplicationMessage) GetLaneIdx() uint32 {
	if x != nil && x.LaneIdx != nil {
		return *x.LaneIdx
	}
	return 0
}

var File_steamnetworkingsockets_messages_proto protoreflect.FileDescriptor

const file_steamnetworkingsockets_messages_proto_rawDesc = "" +
	"\n" +
	"%steamnetworkingsockets_messages.proto\x1a+steamnetworkingsockets_messages_certs.proto\"\xb3\x02\n" +
	"!CMsgSteamDatagramSessionCryptInfo\x12O\n" +
	"\bkey_type\x18\x01 \x01(\x0e2+.CMsgSteamDatagramSessionCryptInfo.EKeyType:\aINVALIDR\akeyType\x12\x19\n" +
	"\bkey_data\x18\x02 \x01(\fR\akeyData\x12\x14\n" +
	"\x05nonce\x18\x03 \x01(\x06R\x05nonce\x12)\n" +
	"\x10protocol_version\x18\x04 \x01(\rR\x0fprotocolVersion\x128\n" +
	"\aciphers\x18\x05 \x03(\x0e2\x1e.ESteamNetworkingSocketsCipherR\aciphers\"'\n" +
	"\bEKeyType\x12\v\n" +
	"\aINVALID\x10\x00\x12\x0e\n" +
	"\n" +
	"CURVE25519\x10\x01\"[\n" +
	"'CMsgSteamDatagramSessionCryptInfoSigned\x12\x12\n" +
	"\x04info\x18\x01 \x01(\fR\x04info\x12\x1c\n" +
	"\tsignature\x18\x02 \x01(\fR\tsignature\"M\n" +
	"\x1bCMsgSteamDatagramDiagnostic\x12\x1a\n" +
	"\bseverity\x18\x01 \x01(\rR\bseverity\x12\x12\n" +
	"\x04text\x18\x02 \x01(\tR\x04text\"\x97\x03\n" +
	"'CMsgSteamDatagramLinkInstantaneousStats\x124\n" +
	"\x17out_packets_per_sec_x10\x18\x01 \x01(\rR\x13outPacketsPerSecX10\x12)\n" +
	"\x11out_bytes_per_sec\x18\x02 \x01(\rR\x0eoutBytesPerSec\x122\n" +
	"\x16in_packets_per_sec_x10\x18\x03 \x01(\rR\x12inPacketsPerSecX10\x12'\n" +
	"\x10in_bytes_per_sec\x18\x04 \x01(\rR\rinBytesPerSec\x12\x17\n" +
	"\aping_ms\x18\x05 \x01(\rR\x06pingMs\x12.\n" +
	"\x13packets_dropped_pct\x18\x06 \x01(\rR\x11packetsDroppedPct\x12;\n" +
	"\x1apackets_weird_sequence_pct\x18\a \x01(\rR\x17packetsWeirdSequencePct\x12(\n" +
	"\x10peak_jitter_usec\x18\b \x01(\rR\x0epeakJitterUsec\"\xde\x11\n" +
	"\"CMsgSteamDatagramLinkLifetimeStats\x12+\n" +
	"\x11connected_seconds\x18\x02 \x01(\rR\x10connectedSeconds\x12!\n" +
	"\fpackets_sent\x18\x03 \x01(\x04R\vpacketsSent\x12\x17\n" +
	"\akb_sent\x18\x04 \x01(\x04R\x06kbSent\x12!\n" +
	"\fpackets_recv\x18\x05 \x01(\x04R\vpacketsRecv\x12\x17\n" +
	"\akb_recv\x18\x06 \x01(\x04R\x06kbRecv\x124\n" +
	"\x16packets_recv_sequenced\x18\a \x01(\x04R\x14packetsRecvSequenced\x120\n" +
	"\x14packets_recv_dropped\x18\b \x01(\x04R\x12packetsRecvDropped\x128\n" +
	"\x19packets_recv_out_of_order\x18\t \x01(\x04R\x15packetsRecvOutOfOrder\x12K\n" +
	"#packets_recv_out_of_order_corrected\x18\x0f \x01(\x04R\x1epacketsRecvOutOfOrderCorrected\x124\n" +
	"\x16packets_recv_duplicate\x18\n" +
	" \x01(\x04R\x14packetsRecvDuplicate\x12,\n" +
	"\x12packets_recv_lurch\x18\v \x01(\x04R\x10packetsRecvLurch\x12G\n" +
	" multipath_packets_recv_sequenced\x18\f \x03(\x04R\x1dmultipathPacketsRecvSequenced\x12?\n" +
	"\x1cmultipath_packets_recv_later\x18\r \x03(\x04R\x19multipathPacketsRecvLater\x124\n" +
	"\x16multipath_send_enabled\x18\x0e \x01(\rR\x14multipathSendEnabled\x122\n" +
	"\x15quality_histogram_100\x18\x15 \x01(\rR\x13qualityHistogram100\x120\n" +
	"\x14quality_histogram_99\x18\x16 \x01(\rR\x12qualityHistogram99\x120\n" +
	"\x14quality_histogram_97\x18\x17 \x01(\rR\x12qualityHistogram97\x120\n" +
	"\x14quality_histogram_95\x18\x18 \x01(\rR\x12qualityHistogram95\x120\n" +
	"\x14quality_histogram_90\x18\x19 \x01(\rR\x12qualityHistogram90\x120\n" +
	"\x14quality_histogram_75\x18\x1a \x01(\rR\x12qualityHistogram75\x120\n" +
	"\x14quality_histogram_50\x18\x1b \x01(\rR\x12qualityHistogram50\x12.\n" +
	"\x13quality_histogram_1\x18\x1c \x01(\rR\x11qualityHistogram1\x124\n" +
	"\x16quality_histogram_dead\x18\x1d \x01(\rR\x14qualityHistogramDead\x12*\n" +
	"\x11quality_ntile_2nd\x18\x1e \x01(\rR\x0fqualityNtile2nd\x12*\n" +
	"\x11quality_ntile_5th\x18\x1f \x01(\rR\x0fqualityNtile5th\x12,\n" +
	"\x12quality_ntile_25th\x18  \x01(\rR\x10qualityNtile25th\x12,\n" +
	"\x12quality_ntile_50th\x18! \x01(\rR\x10qualityNtile50th\x12*\n" +
	"\x11ping_histogram_25\x18) \x01(\rR\x0fpingHistogram25\x12*\n" +
	"\x11ping_histogram_50\x18* \x01(\rR\x0fpingHistogram50\x12*\n" +
	"\x11ping_histogram_75\x18+ \x01(\rR\x0fpingHistogram75\x12,\n" +
	"\x12ping_histogram_100\x18, \x01(\rR\x10pingHistogram100\x12,\n" +
	"\x12ping_histogram_125\x18- \x01(\rR\x10pingHistogram125\x12,\n" +
	"\x12ping_histogram_150\x18. \x01(\rR\x10pingHistogram150\x12,\n" +
	"\x12ping_histogram_200\x18/ \x01(\rR\x10pingHistogram200\x12,\n" +
	"\x12ping_histogram_300\x180 \x01(\rR\x10pingHistogram300\x12,\n" +
	"\x12ping_histogram_max\x181 \x01(\rR\x10pingHistogramMax\x12$\n" +
	"\x0eping_ntile_5th\x182 \x01(\rR\fpingNtile5th\x12&\n" +
	"\x0fping_ntile_50th\x183 \x01(\rR\rpingNtile50th\x12&\n" +
	"\x0fping_ntile_75th\x184 \x01(\rR\rpingNtile75th\x12&\n" +
	"\x0fping_ntile_95th\x185 \x01(\rR\rpingNtile95th\x12&\n" +
	"\x0fping_ntile_98th\x186 \x01(\rR\rpingNtile98th\x12>\n" +
	"\x1bjitter_histogram_negligible\x18= \x01(\rR\x19jitterHistogramNegligible\x12,\n" +
	"\x12jitter_histogram_1\x18> \x01(\rR\x10jitterHistogram1\x12,\n" +
	"\x12jitter_histogram_2\x18? \x01(\rR\x10jitterHistogram2\x12,\n" +
	"\x12jitter_histogram_5\x18@ \x01(\rR\x10jitterHistogram5\x12.\n" +
	"\x13jitter_histogram_10\x18A \x01(\rR\x11jitterHistogram10\x12.\n" +
	"\x13jitter_histogram_20\x18B \x01(\rR\x11jitterHistogram20\"\xb5\x01\n" +
	"\"CMsgSteamDatagramConnectionQuality\x12N\n" +
	"\rinstantaneous\x18\x01 \x01(\v2(.CMsgSteamDatagramLinkInstantaneousStatsR\rinstantaneous\x12?\n" +
	"\blifetime\x18\x02 \x01(\v2#.CMsgSteamDatagramLinkLifetimeStatsR\blifetime\"0\n" +
	"\x10CMsgICECandidate\x12\x1c\n" +
	"\tcandidate\x18\x03 \x01(\tR\tcandidate\"\x9b\x01\n" +
	"\x11CMsgICERendezvous\x12+\n" +
	"\x04auth\x18\x02 \x01(\v2\x17.CMsgICERendezvous.AuthR\x04auth\x126\n" +
	"\radd_candidate\x18\x01 \x01(\v2\x11.CMsgICECandidateR\faddCandidate\x1a!\n" +
	"\x04Auth\x12\x19\n" +
	"\bpwd_frag\x18\x01 \x01(\tR\apwdFrag\"\x94\f\n" +
	" CMsgSteamNetworkingP2PRendezvous\x12#\n" +
	"\rfrom_identity\x18\b \x01(\tR\ffromIdentity\x12,\n" +
	"\x12from_connection_id\x18\t \x01(\aR\x10fromConnectionId\x12\x1f\n" +
	"\vto_identity\x18\n" +
	" \x01(\tR\n" +
	"toIdentity\x12(\n" +
	"\x10to_connection_id\x18\x01 \x01(\aR\x0etoConnectionId\x12\x1d\n" +
	"\n" +
	"sdr_routes\x18\x02 \x01(\fR\tsdrRoutes\x127\n" +
	"\x18ack_peer_routes_revision\x18\x03 \x01(\rR\x15ackPeerRoutesRevision\x12\x1f\n" +
	"\vice_enabled\x18\a \x01(\bR\n" +
	"iceEnabled\x120\n" +
	"\x14hosted_server_ticket\x18\x0e \x01(\fR\x12hostedServerTicket\x12Y\n" +
	"\x0fconnect_request\x18\x04 \x01(\v20.CMsgSteamNetworkingP2PRendezvous.ConnectRequestR\x0econnectRequest\x12J\n" +
	"\n" +
	"connect_ok\x18\x05 \x01(\v2+.CMsgSteamNetworkingP2PRendezvous.ConnectOKR\tconnectOk\x12_\n" +
	"\x11connection_closed\x18\x06 \x01(\v22.CMsgSteamNetworkingP2PRendezvous.ConnectionClosedR\x10connectionClosed\x12(\n" +
	"\x10ack_reliable_msg\x18\v \x01(\rR\x0eackReliableMsg\x12,\n" +
	"\x12first_reliable_msg\x18\f \x01(\rR\x10firstReliableMsg\x12^\n" +
	"\x11reliable_messages\x18\r \x03(\v21.CMsgSteamNetworkingP2PRendezvous.ReliableMessageR\x10reliableMessages\x12g\n" +
	"\x14application_messages\x18\x0f \x03(\v24.CMsgSteamNetworkingP2PRendezvous.ApplicationMessageR\x13applicationMessages\x1a\xfe\x01\n" +
	"\x0eConnectRequest\x12>\n" +
	"\x05crypt\x18\x06 \x01(\v2(.CMsgSteamDatagramSessionCryptInfoSignedR\x05crypt\x127\n" +
	"\x04cert\x18\a \x01(\v2#.CMsgSteamDatagramCertificateSignedR\x04cert\x12&\n" +
	"\x0fto_virtual_port\x18\t \x01(\rR\rtoVirtualPort\x12*\n" +
	"\x11from_virtual_port\x18\n" +
	" \x01(\rR\x0ffromVirtualPort\x12\x1f\n" +
	"\vfrom_fakeip\x18\v \x01(\tR\n" +
	"fromFakeip\x1a\x84\x01\n" +
	"\tConnectOK\x12>\n" +
	"\x05crypt\x18\x05 \x01(\v2(.CMsgSteamDatagramSessionCryptInfoSignedR\x05crypt\x127\n" +
	"\x04cert\x18\x06 \x01(\v2#.CMsgSteamDatagramCertificateSignedR\x04cert\x1aI\n" +
	"\x10ConnectionClosed\x12\x14\n" +
	"\x05debug\x18\x05 \x01(\tR\x05debug\x12\x1f\n" +
	"\vreason_code\x18\x06 \x01(\rR\n" +
	"reasonCode\x1a7\n" +
	"\x0fReliableMessage\x12$\n" +
	"\x03ice\x18\x01 \x01(\v2\x12.CMsgICERendezvousR\x03ice\x1ar\n" +
	"\x12ApplicationMessage\x12\x12\n" +
	"\x04data\x18\x01 \x01(\fR\x04data\x12\x17\n" +
	"\amsg_num\x18\x02 \x01(\x04R\x06msgNum\x12\x14\n" +
	"\x05flags\x18\x03 \x01(\rR\x05flags\x12\x19\n" +
	"\blane_idx\x18\x04 \x01(\rR\alaneIdx\"\x97\x05\n" +
	"$CMsgSteamNetworkingICESessionSummary\x12.\n" +
	"\x13failure_reason_code\x18\a \x01(\rR\x11failureReasonCode\x122\n" +
	"\x15local_candidate_types\x18\x01 \x01(\rR\x13localCandidateTypes\x124\n" +
	"\x16remote_candidate_types\x18\x02 \x01(\rR\x14remoteCandidateTypes\x12,\n" +
	"\x12initial_route_kind\x18\x03 \x01(\rR\x10initialRouteKind\x12!\n" +
	"\finitial_ping\x18\x04 \x01(\rR\vinitialPing\x12#\n" +
	"\rinitial_score\x18\x06 \x01(\rR\finitialScore\x12%\n" +
	"\x0enegotiation_ms\x18\x05 \x01(\rR\rnegotiationMs\x12&\n" +
	"\x0fbest_route_kind\x18\x10 \x01(\rR\rbestRouteKind\x12\x1b\n" +
	"\tbest_ping\x18\x11 \x01(\rR\bbestPing\x12\x1d\n" +
	"\n" +
	"best_score\x18\x12 \x01(\rR\tbestScore\x12\x1b\n" +
	"\tbest_time\x18\x13 \x01(\rR\bbestTime\x12)\n" +
	"\x10selected_seconds\x18\f \x01(\rR\x0fselectedSeconds\x12#\n" +
	"\ruser_settings\x18\r \x01(\rR\fuserSettings\x12$\n" +
	"\x0eice_enable_var\x18\x0e \x01(\rR\ficeEnableVar\x12A\n" +
	"\x1dlocal_candidate_types_allowed\x18\x0f \x01(\rR\x1alocalCandidateTypesAllowed*\xa7\x01\n" +
	"\x1dESteamNetworkingSocketsCipher\x12+\n" +
	"'k_ESteamNetworkingSocketsCipher_INVALID\x10\x00\x12(\n" +
	"$k_ESteamNetworkingSocketsCipher_NULL\x10\x01\x12/\n" +
	"+k_ESteamNetworkingSocketsCipher_AES_256_GCM\x10\x02B\x05H\x01\x80\x01\x00"

var (
	file_steamnetworkingsockets_messages_proto_rawDescOnce sync.Once
	file_steamnetworkingsockets_messages_proto_rawDescData []byte
)

func file_steamnetworkingsockets_messages_proto_rawDescGZIP() []byte {
	file_steamnetworkingsockets_messages_proto_rawDescOnce.Do(func() {
		file_steamnetworkingsockets_messages_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_steamnetworkingsockets_messages_proto_rawDesc), len(file_steamnetworkingsockets_messages_proto_rawDesc)))
	})
	return file_steamnetworkingsockets_messages_proto_rawDescData
}

var file_steamnetworkingsockets_messages_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_steamnetworkingsockets_messages_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_steamnetworkingsockets_messages_proto_goTypes = []any{
	(ESteamNetworkingSocketsCipher)(0),                          // 0: ESteamNetworkingSocketsCipher
	(CMsgSteamDatagramSessionCryptInfo_EKeyType)(0),             // 1: CMsgSteamDatagramSessionCryptInfo.EKeyType
	(*CMsgSteamDatagramSessionCryptInfo)(nil),                   // 2: CMsgSteamDatagramSessionCryptInfo
	(*CMsgSteamDatagramSessionCryptInfoSigned)(nil),             // 3: CMsgSteamDatagramSessionCryptInfoSigned
	(*CMsgSteamDatagramDiagnostic)(nil),                         // 4: CMsgSteamDatagramDiagnostic
	(*CMsgSteamDatagramLinkInstantaneousStats)(nil),             // 5: CMsgSteamDatagramLinkInstantaneousStats
	(*CMsgSteamDatagramLinkLifetimeStats)(nil),                  // 6: CMsgSteamDatagramLinkLifetimeStats
	(*CMsgSteamDatagramConnectionQuality)(nil),                  // 7: CMsgSteamDatagramConnectionQuality
	(*CMsgICECandidate)(nil),                                    // 8: CMsgICECandidate
	(*CMsgICERendezvous)(nil),                                   // 9: CMsgICERendezvous
	(*CMsgSteamNetworkingP2PRendezvous)(nil),                    // 10: CMsgSteamNetworkingP2PRendezvous
	(*CMsgSteamNetworkingICESessionSummary)(nil),                // 11: CMsgSteamNetworkingICESessionSummary
	(*CMsgICERendezvous_Auth)(nil),                              // 12: CMsgICERendezvous.Auth
	(*CMsgSteamNetworkingP2PRendezvous_ConnectRequest)(nil),     // 13: CMsgSteamNetworkingP2PRendezvous.ConnectRequest
	(*CMsgSteamNetworkingP2PRendezvous_ConnectOK)(nil),          // 14: CMsgSteamNetworkingP2PRendezvous.ConnectOK
	(*CMsgSteamNetworkingP2PRendezvous_ConnectionClosed)(nil),   // 15: CMsgSteamNetworkingP2PRendezvous.ConnectionClosed
	(*CMsgSteamNetworkingP2PRendezvous_ReliableMessage)(nil),    // 16: CMsgSteamNetworkingP2PRendezvous.ReliableMessage
	(*CMsgSteamNetworkingP2PRendezvous_ApplicationMessage)(nil), // 17: CMsgSteamNetworkingP2PRendezvous.ApplicationMessage
	(*CMsgSteamDatagramCertificateSigned)(nil),                  // 18: CMsgSteamDatagramCertificateSigned
}
var file_steamnetworkingsockets_messages_proto_depIdxs = []int32{
	1,  // 0: CMsgSteamDatagramSessionCryptInfo.key_type:type_name -> CMsgSteamDatagramSessionCryptInfo.EKeyType
	0,  // 1: CMsgSteamDatagramSessionCryptInfo.ciphers:type_name -> ESteamNetworkingSocketsCipher
	5,  // 2: CMsgSteamDatagramConnectionQuality.instantaneous:type_name -> CMsgSteamDatagramLinkInstantaneousStats
	6,  // 3: CMsgSteamDatagramConnectionQuality.lifetime:type_name -> CMsgSteamDatagramLinkLifetimeStats
	12, // 4: CMsgICERendezvous.auth:type_name -> CMsgICERendezvous.Auth
	8,  // 5: CMsgICERendezvous.add_candidate:type_name -> CMsgICECandidate
	13, // 6: CMsgSteamNetworkingP2PRendezvous.connect_request:type_name -> CMsgSteamNetworkingP2PRendezvous.ConnectRequest
	14, // 7: CMsgSteamNetworkingP2PRendezvous.connect_ok:type_name -> CMsgSteamNetworkingP2PRendezvous.ConnectOK
	15, // 8: CMsgSteamNetworkingP2PRendezvous.connection_closed:type_name -> CMsgSteamNetworkingP2PRendezvous.ConnectionClosed
	16, // 9: CMsgSteamNetworkingP2PRendezvous.reliable_messages:type_name -> CMsgSteamNetworkingP2PRendezvous.ReliableMessage
	17, // 10: CMsgSteamNetworkingP2PRendezvous.application_messages:type_name -> CMsgSteamNetworkingP2PRendezvous.ApplicationMessage
	3,  // 11: CMsgSteamNetworkingP2PRendezvous.ConnectRequest.crypt:type_name -> CMsgSteamDatagramSessionCryptInfoSigned
	18, // 12: CMsgSteamNetworkingP2PRendezvous.ConnectRequest.cert:type_name -> CMsgSteamDatagramCertificateSigned
	3,  // 13: CMsgSteamNetworkingP2PRendezvous.ConnectOK.crypt:type_name -> CMsgSteamDatagramSessionCryptInfoSigned
	18, // 14: CMsgSteamNetworkingP2PRendezvous.ConnectOK.cert:type_name -> CMsgSteamDatagramCertificateSigned
	9,  // 15: CMsgSteamNetworkingP2PRendezvous.ReliableMessage.ice:type_name -> CMsgICERendezvous
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_steamnetworkingsockets_messages_proto_init() }
func file_steamnetworkingsockets_messages_proto_init() {
	if File_steamnetworkingsockets_messages_proto != nil {
		return
	}
	file_steamnetworkingsockets_messages_certs_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_steamnetworkingsockets_messages_proto_rawDesc), len(file_steamnetworkingsockets_messages_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_steamnetworkingsockets_messages_proto_goTypes,
		DependencyIndexes: file_steamnetworkingsockets_messages_proto_depIdxs,
		EnumInfos:         file_steamnetworkingsockets_messages_proto_enumTypes,
		MessageInfos:      file_steamnetworkingsockets_messages_proto_msgTypes,
	}.Build()
	File_steamnetworkingsockets_messages_proto = out.File
	file_steamnetworkingsockets_messages_proto_goTypes = nil
	file_steamnetworkingsockets_messages_proto_depIdxs = nil
}
