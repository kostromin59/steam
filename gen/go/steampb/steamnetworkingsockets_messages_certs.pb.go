// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v6.32.0
// source: steamnetworkingsockets_messages_certs.proto

package steampb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CMsgSteamDatagramCertificate_EKeyType int32

const (
	CMsgSteamDatagramCertificate_INVALID CMsgSteamDatagramCertificate_EKeyType = 0
	CMsgSteamDatagramCertificate_ED25519 CMsgSteamDatagramCertificate_EKeyType = 1
)

// Enum value maps for CMsgSteamDatagramCertificate_EKeyType.
var (
	CMsgSteamDatagramCertificate_EKeyType_name = map[int32]string{
		0: "INVALID",
		1: "ED25519",
	}
	CMsgSteamDatagramCertificate_EKeyType_value = map[string]int32{
		"INVALID": 0,
		"ED25519": 1,
	}
)

func (x CMsgSteamDatagramCertificate_EKeyType) Enum() *CMsgSteamDatagramCertificate_EKeyType {
	p := new(CMsgSteamDatagramCertificate_EKeyType)
	*p = x
	return p
}

func (x CMsgSteamDatagramCertificate_EKeyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgSteamDatagramCertificate_EKeyType) Descriptor() protoreflect.EnumDescriptor {
	return file_steamnetworkingsockets_messages_certs_proto_enumTypes[0].Descriptor()
}

func (CMsgSteamDatagramCertificate_EKeyType) Type() protoreflect.EnumType {
	return &file_steamnetworkingsockets_messages_certs_proto_enumTypes[0]
}

func (x CMsgSteamDatagramCertificate_EKeyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgSteamDatagramCertificate_EKeyType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgSteamDatagramCertificate_EKeyType(num)
	return nil
}

// Deprecated: Use CMsgSteamDatagramCertificate_EKeyType.Descriptor instead.
func (CMsgSteamDatagramCertificate_EKeyType) EnumDescriptor() ([]byte, []int) {
	return file_steamnetworkingsockets_messages_certs_proto_rawDescGZIP(), []int{1, 0}
}

type CMsgSteamNetworkingIdentityLegacyBinary struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SteamId       *uint64                `protobuf:"fixed64,16,opt,name=steam_id,json=steamId" json:"steam_id,omitempty"`
	GenericBytes  []byte                 `protobuf:"bytes,2,opt,name=generic_bytes,json=genericBytes" json:"generic_bytes,omitempty"`
	GenericString *string                `protobuf:"bytes,3,opt,name=generic_string,json=genericString" json:"generic_string,omitempty"`
	Ipv6AndPort   []byte                 `protobuf:"bytes,4,opt,name=ipv6_and_port,json=ipv6AndPort" json:"ipv6_and_port,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgSteamNetworkingIdentityLegacyBinary) Reset() {
	*x = CMsgSteamNetworkingIdentityLegacyBinary{}
	mi := &file_steamnetworkingsockets_messages_certs_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSteamNetworkingIdentityLegacyBinary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamNetworkingIdentityLegacyBinary) ProtoMessage() {}

func (x *CMsgSteamNetworkingIdentityLegacyBinary) ProtoReflect() protoreflect.Message {
	mi := &file_steamnetworkingsockets_messages_certs_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamNetworkingIdentityLegacyBinary.ProtoReflect.Descriptor instead.
func (*CMsgSteamNetworkingIdentityLegacyBinary) Descriptor() ([]byte, []int) {
	return file_steamnetworkingsockets_messages_certs_proto_rawDescGZIP(), []int{0}
}

func (x *CMsgSteamNetworkingIdentityLegacyBinary) GetSteamId() uint64 {
	if x != nil && x.SteamId != nil {
		return *x.SteamId
	}
	return 0
}

func (x *CMsgSteamNetworkingIdentityLegacyBinary) GetGenericBytes() []byte {
	if x != nil {
		return x.GenericBytes
	}
	return nil
}

func (x *CMsgSteamNetworkingIdentityLegacyBinary) GetGenericString() string {
	if x != nil && x.GenericString != nil {
		return *x.GenericString
	}
	return ""
}

func (x *CMsgSteamNetworkingIdentityLegacyBinary) GetIpv6AndPort() []byte {
	if x != nil {
		return x.Ipv6AndPort
	}
	return nil
}

type CMsgSteamDatagramCertificate struct {
	state                   protoimpl.MessageState                   `protogen:"open.v1"`
	KeyType                 *CMsgSteamDatagramCertificate_EKeyType   `protobuf:"varint,1,opt,name=key_type,json=keyType,enum=CMsgSteamDatagramCertificate_EKeyType,def=0" json:"key_type,omitempty"`
	KeyData                 []byte                                   `protobuf:"bytes,2,opt,name=key_data,json=keyData" json:"key_data,omitempty"`
	LegacySteamId           *uint64                                  `protobuf:"fixed64,4,opt,name=legacy_steam_id,json=legacySteamId" json:"legacy_steam_id,omitempty"`
	LegacyIdentityBinary    *CMsgSteamNetworkingIdentityLegacyBinary `protobuf:"bytes,11,opt,name=legacy_identity_binary,json=legacyIdentityBinary" json:"legacy_identity_binary,omitempty"`
	IdentityString          *string                                  `protobuf:"bytes,12,opt,name=identity_string,json=identityString" json:"identity_string,omitempty"`
	GameserverDatacenterIds []uint32                                 `protobuf:"fixed32,5,rep,name=gameserver_datacenter_ids,json=gameserverDatacenterIds" json:"gameserver_datacenter_ids,omitempty"`
	TimeCreated             *uint32                                  `protobuf:"fixed32,8,opt,name=time_created,json=timeCreated" json:"time_created,omitempty"`
	TimeExpiry              *uint32                                  `protobuf:"fixed32,9,opt,name=time_expiry,json=timeExpiry" json:"time_expiry,omitempty"`
	AppIds                  []uint32                                 `protobuf:"varint,10,rep,name=app_ids,json=appIds" json:"app_ids,omitempty"`
	IpAddresses             []string                                 `protobuf:"bytes,13,rep,name=ip_addresses,json=ipAddresses" json:"ip_addresses,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

// Default values for CMsgSteamDatagramCertificate fields.
const (
	Default_CMsgSteamDatagramCertificate_KeyType = CMsgSteamDatagramCertificate_INVALID
)

func (x *CMsgSteamDatagramCertificate) Reset() {
	*x = CMsgSteamDatagramCertificate{}
	mi := &file_steamnetworkingsockets_messages_certs_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSteamDatagramCertificate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramCertificate) ProtoMessage() {}

func (x *CMsgSteamDatagramCertificate) ProtoReflect() protoreflect.Message {
	mi := &file_steamnetworkingsockets_messages_certs_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramCertificate.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramCertificate) Descriptor() ([]byte, []int) {
	return file_steamnetworkingsockets_messages_certs_proto_rawDescGZIP(), []int{1}
}

func (x *CMsgSteamDatagramCertificate) GetKeyType() CMsgSteamDatagramCertificate_EKeyType {
	if x != nil && x.KeyType != nil {
		return *x.KeyType
	}
	return Default_CMsgSteamDatagramCertificate_KeyType
}

func (x *CMsgSteamDatagramCertificate) GetKeyData() []byte {
	if x != nil {
		return x.KeyData
	}
	return nil
}

func (x *CMsgSteamDatagramCertificate) GetLegacySteamId() uint64 {
	if x != nil && x.LegacySteamId != nil {
		return *x.LegacySteamId
	}
	return 0
}

func (x *CMsgSteamDatagramCertificate) GetLegacyIdentityBinary() *CMsgSteamNetworkingIdentityLegacyBinary {
	if x != nil {
		return x.LegacyIdentityBinary
	}
	return nil
}

func (x *CMsgSteamDatagramCertificate) GetIdentityString() string {
	if x != nil && x.IdentityString != nil {
		return *x.IdentityString
	}
	return ""
}

func (x *CMsgSteamDatagramCertificate) GetGameserverDatacenterIds() []uint32 {
	if x != nil {
		return x.GameserverDatacenterIds
	}
	return nil
}

func (x *CMsgSteamDatagramCertificate) GetTimeCreated() uint32 {
	if x != nil && x.TimeCreated != nil {
		return *x.TimeCreated
	}
	return 0
}

func (x *CMsgSteamDatagramCertificate) GetTimeExpiry() uint32 {
	if x != nil && x.TimeExpiry != nil {
		return *x.TimeExpiry
	}
	return 0
}

func (x *CMsgSteamDatagramCertificate) GetAppIds() []uint32 {
	if x != nil {
		return x.AppIds
	}
	return nil
}

func (x *CMsgSteamDatagramCertificate) GetIpAddresses() []string {
	if x != nil {
		return x.IpAddresses
	}
	return nil
}

type CMsgSteamDatagramCertificateSigned struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Cert           []byte                 `protobuf:"bytes,4,opt,name=cert" json:"cert,omitempty"`
	CaKeyId        *uint64                `protobuf:"fixed64,5,opt,name=ca_key_id,json=caKeyId" json:"ca_key_id,omitempty"`
	CaSignature    []byte                 `protobuf:"bytes,6,opt,name=ca_signature,json=caSignature" json:"ca_signature,omitempty"`
	PrivateKeyData []byte                 `protobuf:"bytes,1,opt,name=private_key_data,json=privateKeyData" json:"private_key_data,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CMsgSteamDatagramCertificateSigned) Reset() {
	*x = CMsgSteamDatagramCertificateSigned{}
	mi := &file_steamnetworkingsockets_messages_certs_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSteamDatagramCertificateSigned) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramCertificateSigned) ProtoMessage() {}

func (x *CMsgSteamDatagramCertificateSigned) ProtoReflect() protoreflect.Message {
	mi := &file_steamnetworkingsockets_messages_certs_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramCertificateSigned.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramCertificateSigned) Descriptor() ([]byte, []int) {
	return file_steamnetworkingsockets_messages_certs_proto_rawDescGZIP(), []int{2}
}

func (x *CMsgSteamDatagramCertificateSigned) GetCert() []byte {
	if x != nil {
		return x.Cert
	}
	return nil
}

func (x *CMsgSteamDatagramCertificateSigned) GetCaKeyId() uint64 {
	if x != nil && x.CaKeyId != nil {
		return *x.CaKeyId
	}
	return 0
}

func (x *CMsgSteamDatagramCertificateSigned) GetCaSignature() []byte {
	if x != nil {
		return x.CaSignature
	}
	return nil
}

func (x *CMsgSteamDatagramCertificateSigned) GetPrivateKeyData() []byte {
	if x != nil {
		return x.PrivateKeyData
	}
	return nil
}

type CMsgSteamDatagramCertificateRequest struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	Cert          *CMsgSteamDatagramCertificate `protobuf:"bytes,1,opt,name=cert" json:"cert,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgSteamDatagramCertificateRequest) Reset() {
	*x = CMsgSteamDatagramCertificateRequest{}
	mi := &file_steamnetworkingsockets_messages_certs_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSteamDatagramCertificateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramCertificateRequest) ProtoMessage() {}

func (x *CMsgSteamDatagramCertificateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_steamnetworkingsockets_messages_certs_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramCertificateRequest.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramCertificateRequest) Descriptor() ([]byte, []int) {
	return file_steamnetworkingsockets_messages_certs_proto_rawDescGZIP(), []int{3}
}

func (x *CMsgSteamDatagramCertificateRequest) GetCert() *CMsgSteamDatagramCertificate {
	if x != nil {
		return x.Cert
	}
	return nil
}

var File_steamnetworkingsockets_messages_certs_proto protoreflect.FileDescriptor

const file_steamnetworkingsockets_messages_certs_proto_rawDesc = "" +
	"\n" +
	"+steamnetworkingsockets_messages_certs.proto\"\xb4\x01\n" +
	"'CMsgSteamNetworkingIdentityLegacyBinary\x12\x19\n" +
	"\bsteam_id\x18\x10 \x01(\x06R\asteamId\x12#\n" +
	"\rgeneric_bytes\x18\x02 \x01(\fR\fgenericBytes\x12%\n" +
	"\x0egeneric_string\x18\x03 \x01(\tR\rgenericString\x12\"\n" +
	"\ripv6_and_port\x18\x04 \x01(\fR\vipv6AndPort\"\x98\x04\n" +
	"\x1cCMsgSteamDatagramCertificate\x12J\n" +
	"\bkey_type\x18\x01 \x01(\x0e2&.CMsgSteamDatagramCertificate.EKeyType:\aINVALIDR\akeyType\x12\x19\n" +
	"\bkey_data\x18\x02 \x01(\fR\akeyData\x12&\n" +
	"\x0flegacy_steam_id\x18\x04 \x01(\x06R\rlegacySteamId\x12^\n" +
	"\x16legacy_identity_binary\x18\v \x01(\v2(.CMsgSteamNetworkingIdentityLegacyBinaryR\x14legacyIdentityBinary\x12'\n" +
	"\x0fidentity_string\x18\f \x01(\tR\x0eidentityString\x12:\n" +
	"\x19gameserver_datacenter_ids\x18\x05 \x03(\aR\x17gameserverDatacenterIds\x12!\n" +
	"\ftime_created\x18\b \x01(\aR\vtimeCreated\x12\x1f\n" +
	"\vtime_expiry\x18\t \x01(\aR\n" +
	"timeExpiry\x12\x17\n" +
	"\aapp_ids\x18\n" +
	" \x03(\rR\x06appIds\x12!\n" +
	"\fip_addresses\x18\r \x03(\tR\vipAddresses\"$\n" +
	"\bEKeyType\x12\v\n" +
	"\aINVALID\x10\x00\x12\v\n" +
	"\aED25519\x10\x01\"\xa1\x01\n" +
	"\"CMsgSteamDatagramCertificateSigned\x12\x12\n" +
	"\x04cert\x18\x04 \x01(\fR\x04cert\x12\x1a\n" +
	"\tca_key_id\x18\x05 \x01(\x06R\acaKeyId\x12!\n" +
	"\fca_signature\x18\x06 \x01(\fR\vcaSignature\x12(\n" +
	"\x10private_key_data\x18\x01 \x01(\fR\x0eprivateKeyData\"X\n" +
	"#CMsgSteamDatagramCertificateRequest\x121\n" +
	"\x04cert\x18\x01 \x01(\v2\x1d.CMsgSteamDatagramCertificateR\x04certB\x05H\x01\x80\x01\x00"

var (
	file_steamnetworkingsockets_messages_certs_proto_rawDescOnce sync.Once
	file_steamnetworkingsockets_messages_certs_proto_rawDescData []byte
)

func file_steamnetworkingsockets_messages_certs_proto_rawDescGZIP() []byte {
	file_steamnetworkingsockets_messages_certs_proto_rawDescOnce.Do(func() {
		file_steamnetworkingsockets_messages_certs_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_steamnetworkingsockets_messages_certs_proto_rawDesc), len(file_steamnetworkingsockets_messages_certs_proto_rawDesc)))
	})
	return file_steamnetworkingsockets_messages_certs_proto_rawDescData
}

var file_steamnetworkingsockets_messages_certs_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_steamnetworkingsockets_messages_certs_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_steamnetworkingsockets_messages_certs_proto_goTypes = []any{
	(CMsgSteamDatagramCertificate_EKeyType)(0),      // 0: CMsgSteamDatagramCertificate.EKeyType
	(*CMsgSteamNetworkingIdentityLegacyBinary)(nil), // 1: CMsgSteamNetworkingIdentityLegacyBinary
	(*CMsgSteamDatagramCertificate)(nil),            // 2: CMsgSteamDatagramCertificate
	(*CMsgSteamDatagramCertificateSigned)(nil),      // 3: CMsgSteamDatagramCertificateSigned
	(*CMsgSteamDatagramCertificateRequest)(nil),     // 4: CMsgSteamDatagramCertificateRequest
}
var file_steamnetworkingsockets_messages_certs_proto_depIdxs = []int32{
	0, // 0: CMsgSteamDatagramCertificate.key_type:type_name -> CMsgSteamDatagramCertificate.EKeyType
	1, // 1: CMsgSteamDatagramCertificate.legacy_identity_binary:type_name -> CMsgSteamNetworkingIdentityLegacyBinary
	2, // 2: CMsgSteamDatagramCertificateRequest.cert:type_name -> CMsgSteamDatagramCertificate
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_steamnetworkingsockets_messages_certs_proto_init() }
func file_steamnetworkingsockets_messages_certs_proto_init() {
	if File_steamnetworkingsockets_messages_certs_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_steamnetworkingsockets_messages_certs_proto_rawDesc), len(file_steamnetworkingsockets_messages_certs_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_steamnetworkingsockets_messages_certs_proto_goTypes,
		DependencyIndexes: file_steamnetworkingsockets_messages_certs_proto_depIdxs,
		EnumInfos:         file_steamnetworkingsockets_messages_certs_proto_enumTypes,
		MessageInfos:      file_steamnetworkingsockets_messages_certs_proto_msgTypes,
	}.Build()
	File_steamnetworkingsockets_messages_certs_proto = out.File
	file_steamnetworkingsockets_messages_certs_proto_goTypes = nil
	file_steamnetworkingsockets_messages_certs_proto_depIdxs = nil
}
