// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v6.32.0
// source: steamnetworkingsockets_messages_udp.proto

package steampb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ESteamNetworkingUDPMsgID int32

const (
	ESteamNetworkingUDPMsgID_k_ESteamNetworkingUDPMsg_ChallengeRequest ESteamNetworkingUDPMsgID = 32
	ESteamNetworkingUDPMsgID_k_ESteamNetworkingUDPMsg_ChallengeReply   ESteamNetworkingUDPMsgID = 33
	ESteamNetworkingUDPMsgID_k_ESteamNetworkingUDPMsg_ConnectRequest   ESteamNetworkingUDPMsgID = 34
	ESteamNetworkingUDPMsgID_k_ESteamNetworkingUDPMsg_ConnectOK        ESteamNetworkingUDPMsgID = 35
	ESteamNetworkingUDPMsgID_k_ESteamNetworkingUDPMsg_ConnectionClosed ESteamNetworkingUDPMsgID = 36
	ESteamNetworkingUDPMsgID_k_ESteamNetworkingUDPMsg_NoConnection     ESteamNetworkingUDPMsgID = 37
)

// Enum value maps for ESteamNetworkingUDPMsgID.
var (
	ESteamNetworkingUDPMsgID_name = map[int32]string{
		32: "k_ESteamNetworkingUDPMsg_ChallengeRequest",
		33: "k_ESteamNetworkingUDPMsg_ChallengeReply",
		34: "k_ESteamNetworkingUDPMsg_ConnectRequest",
		35: "k_ESteamNetworkingUDPMsg_ConnectOK",
		36: "k_ESteamNetworkingUDPMsg_ConnectionClosed",
		37: "k_ESteamNetworkingUDPMsg_NoConnection",
	}
	ESteamNetworkingUDPMsgID_value = map[string]int32{
		"k_ESteamNetworkingUDPMsg_ChallengeRequest": 32,
		"k_ESteamNetworkingUDPMsg_ChallengeReply":   33,
		"k_ESteamNetworkingUDPMsg_ConnectRequest":   34,
		"k_ESteamNetworkingUDPMsg_ConnectOK":        35,
		"k_ESteamNetworkingUDPMsg_ConnectionClosed": 36,
		"k_ESteamNetworkingUDPMsg_NoConnection":     37,
	}
)

func (x ESteamNetworkingUDPMsgID) Enum() *ESteamNetworkingUDPMsgID {
	p := new(ESteamNetworkingUDPMsgID)
	*p = x
	return p
}

func (x ESteamNetworkingUDPMsgID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ESteamNetworkingUDPMsgID) Descriptor() protoreflect.EnumDescriptor {
	return file_steamnetworkingsockets_messages_udp_proto_enumTypes[0].Descriptor()
}

func (ESteamNetworkingUDPMsgID) Type() protoreflect.EnumType {
	return &file_steamnetworkingsockets_messages_udp_proto_enumTypes[0]
}

func (x ESteamNetworkingUDPMsgID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ESteamNetworkingUDPMsgID) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ESteamNetworkingUDPMsgID(num)
	return nil
}

// Deprecated: Use ESteamNetworkingUDPMsgID.Descriptor instead.
func (ESteamNetworkingUDPMsgID) EnumDescriptor() ([]byte, []int) {
	return file_steamnetworkingsockets_messages_udp_proto_rawDescGZIP(), []int{0}
}

type CMsgSteamSockets_UDP_Stats_Flags int32

const (
	CMsgSteamSockets_UDP_Stats_ACK_REQUEST_E2E           CMsgSteamSockets_UDP_Stats_Flags = 2
	CMsgSteamSockets_UDP_Stats_ACK_REQUEST_IMMEDIATE     CMsgSteamSockets_UDP_Stats_Flags = 4
	CMsgSteamSockets_UDP_Stats_NOT_PRIMARY_TRANSPORT_E2E CMsgSteamSockets_UDP_Stats_Flags = 16
)

// Enum value maps for CMsgSteamSockets_UDP_Stats_Flags.
var (
	CMsgSteamSockets_UDP_Stats_Flags_name = map[int32]string{
		2:  "ACK_REQUEST_E2E",
		4:  "ACK_REQUEST_IMMEDIATE",
		16: "NOT_PRIMARY_TRANSPORT_E2E",
	}
	CMsgSteamSockets_UDP_Stats_Flags_value = map[string]int32{
		"ACK_REQUEST_E2E":           2,
		"ACK_REQUEST_IMMEDIATE":     4,
		"NOT_PRIMARY_TRANSPORT_E2E": 16,
	}
)

func (x CMsgSteamSockets_UDP_Stats_Flags) Enum() *CMsgSteamSockets_UDP_Stats_Flags {
	p := new(CMsgSteamSockets_UDP_Stats_Flags)
	*p = x
	return p
}

func (x CMsgSteamSockets_UDP_Stats_Flags) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgSteamSockets_UDP_Stats_Flags) Descriptor() protoreflect.EnumDescriptor {
	return file_steamnetworkingsockets_messages_udp_proto_enumTypes[1].Descriptor()
}

func (CMsgSteamSockets_UDP_Stats_Flags) Type() protoreflect.EnumType {
	return &file_steamnetworkingsockets_messages_udp_proto_enumTypes[1]
}

func (x CMsgSteamSockets_UDP_Stats_Flags) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgSteamSockets_UDP_Stats_Flags) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgSteamSockets_UDP_Stats_Flags(num)
	return nil
}

// Deprecated: Use CMsgSteamSockets_UDP_Stats_Flags.Descriptor instead.
func (CMsgSteamSockets_UDP_Stats_Flags) EnumDescriptor() ([]byte, []int) {
	return file_steamnetworkingsockets_messages_udp_proto_rawDescGZIP(), []int{6, 0}
}

type CMsgSteamSockets_UDP_ChallengeRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	ConnectionId    *uint32                `protobuf:"fixed32,1,opt,name=connection_id,json=connectionId" json:"connection_id,omitempty"`
	MyTimestamp     *uint64                `protobuf:"fixed64,3,opt,name=my_timestamp,json=myTimestamp" json:"my_timestamp,omitempty"`
	ProtocolVersion *uint32                `protobuf:"varint,4,opt,name=protocol_version,json=protocolVersion" json:"protocol_version,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CMsgSteamSockets_UDP_ChallengeRequest) Reset() {
	*x = CMsgSteamSockets_UDP_ChallengeRequest{}
	mi := &file_steamnetworkingsockets_messages_udp_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSteamSockets_UDP_ChallengeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamSockets_UDP_ChallengeRequest) ProtoMessage() {}

func (x *CMsgSteamSockets_UDP_ChallengeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_steamnetworkingsockets_messages_udp_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamSockets_UDP_ChallengeRequest.ProtoReflect.Descriptor instead.
func (*CMsgSteamSockets_UDP_ChallengeRequest) Descriptor() ([]byte, []int) {
	return file_steamnetworkingsockets_messages_udp_proto_rawDescGZIP(), []int{0}
}

func (x *CMsgSteamSockets_UDP_ChallengeRequest) GetConnectionId() uint32 {
	if x != nil && x.ConnectionId != nil {
		return *x.ConnectionId
	}
	return 0
}

func (x *CMsgSteamSockets_UDP_ChallengeRequest) GetMyTimestamp() uint64 {
	if x != nil && x.MyTimestamp != nil {
		return *x.MyTimestamp
	}
	return 0
}

func (x *CMsgSteamSockets_UDP_ChallengeRequest) GetProtocolVersion() uint32 {
	if x != nil && x.ProtocolVersion != nil {
		return *x.ProtocolVersion
	}
	return 0
}

type CMsgSteamSockets_UDP_ChallengeReply struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	ConnectionId    *uint32                `protobuf:"fixed32,1,opt,name=connection_id,json=connectionId" json:"connection_id,omitempty"`
	Challenge       *uint64                `protobuf:"fixed64,2,opt,name=challenge" json:"challenge,omitempty"`
	YourTimestamp   *uint64                `protobuf:"fixed64,3,opt,name=your_timestamp,json=yourTimestamp" json:"your_timestamp,omitempty"`
	ProtocolVersion *uint32                `protobuf:"varint,4,opt,name=protocol_version,json=protocolVersion" json:"protocol_version,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CMsgSteamSockets_UDP_ChallengeReply) Reset() {
	*x = CMsgSteamSockets_UDP_ChallengeReply{}
	mi := &file_steamnetworkingsockets_messages_udp_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSteamSockets_UDP_ChallengeReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamSockets_UDP_ChallengeReply) ProtoMessage() {}

func (x *CMsgSteamSockets_UDP_ChallengeReply) ProtoReflect() protoreflect.Message {
	mi := &file_steamnetworkingsockets_messages_udp_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamSockets_UDP_ChallengeReply.ProtoReflect.Descriptor instead.
func (*CMsgSteamSockets_UDP_ChallengeReply) Descriptor() ([]byte, []int) {
	return file_steamnetworkingsockets_messages_udp_proto_rawDescGZIP(), []int{1}
}

func (x *CMsgSteamSockets_UDP_ChallengeReply) GetConnectionId() uint32 {
	if x != nil && x.ConnectionId != nil {
		return *x.ConnectionId
	}
	return 0
}

func (x *CMsgSteamSockets_UDP_ChallengeReply) GetChallenge() uint64 {
	if x != nil && x.Challenge != nil {
		return *x.Challenge
	}
	return 0
}

func (x *CMsgSteamSockets_UDP_ChallengeReply) GetYourTimestamp() uint64 {
	if x != nil && x.YourTimestamp != nil {
		return *x.YourTimestamp
	}
	return 0
}

func (x *CMsgSteamSockets_UDP_ChallengeReply) GetProtocolVersion() uint32 {
	if x != nil && x.ProtocolVersion != nil {
		return *x.ProtocolVersion
	}
	return 0
}

type CMsgSteamSockets_UDP_ConnectRequest struct {
	state                 protoimpl.MessageState                   `protogen:"open.v1"`
	ClientConnectionId    *uint32                                  `protobuf:"fixed32,1,opt,name=client_connection_id,json=clientConnectionId" json:"client_connection_id,omitempty"`
	Challenge             *uint64                                  `protobuf:"fixed64,2,opt,name=challenge" json:"challenge,omitempty"`
	MyTimestamp           *uint64                                  `protobuf:"fixed64,5,opt,name=my_timestamp,json=myTimestamp" json:"my_timestamp,omitempty"`
	PingEstMs             *uint32                                  `protobuf:"varint,6,opt,name=ping_est_ms,json=pingEstMs" json:"ping_est_ms,omitempty"`
	Crypt                 *CMsgSteamDatagramSessionCryptInfoSigned `protobuf:"bytes,7,opt,name=crypt" json:"crypt,omitempty"`
	Cert                  *CMsgSteamDatagramCertificateSigned      `protobuf:"bytes,4,opt,name=cert" json:"cert,omitempty"`
	LegacyProtocolVersion *uint32                                  `protobuf:"varint,8,opt,name=legacy_protocol_version,json=legacyProtocolVersion" json:"legacy_protocol_version,omitempty"`
	IdentityString        *string                                  `protobuf:"bytes,10,opt,name=identity_string,json=identityString" json:"identity_string,omitempty"`
	LegacyClientSteamId   *uint64                                  `protobuf:"fixed64,3,opt,name=legacy_client_steam_id,json=legacyClientSteamId" json:"legacy_client_steam_id,omitempty"`
	LegacyIdentityBinary  *CMsgSteamNetworkingIdentityLegacyBinary `protobuf:"bytes,9,opt,name=legacy_identity_binary,json=legacyIdentityBinary" json:"legacy_identity_binary,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *CMsgSteamSockets_UDP_ConnectRequest) Reset() {
	*x = CMsgSteamSockets_UDP_ConnectRequest{}
	mi := &file_steamnetworkingsockets_messages_udp_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSteamSockets_UDP_ConnectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamSockets_UDP_ConnectRequest) ProtoMessage() {}

func (x *CMsgSteamSockets_UDP_ConnectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_steamnetworkingsockets_messages_udp_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamSockets_UDP_ConnectRequest.ProtoReflect.Descriptor instead.
func (*CMsgSteamSockets_UDP_ConnectRequest) Descriptor() ([]byte, []int) {
	return file_steamnetworkingsockets_messages_udp_proto_rawDescGZIP(), []int{2}
}

func (x *CMsgSteamSockets_UDP_ConnectRequest) GetClientConnectionId() uint32 {
	if x != nil && x.ClientConnectionId != nil {
		return *x.ClientConnectionId
	}
	return 0
}

func (x *CMsgSteamSockets_UDP_ConnectRequest) GetChallenge() uint64 {
	if x != nil && x.Challenge != nil {
		return *x.Challenge
	}
	return 0
}

func (x *CMsgSteamSockets_UDP_ConnectRequest) GetMyTimestamp() uint64 {
	if x != nil && x.MyTimestamp != nil {
		return *x.MyTimestamp
	}
	return 0
}

func (x *CMsgSteamSockets_UDP_ConnectRequest) GetPingEstMs() uint32 {
	if x != nil && x.PingEstMs != nil {
		return *x.PingEstMs
	}
	return 0
}

func (x *CMsgSteamSockets_UDP_ConnectRequest) GetCrypt() *CMsgSteamDatagramSessionCryptInfoSigned {
	if x != nil {
		return x.Crypt
	}
	return nil
}

func (x *CMsgSteamSockets_UDP_ConnectRequest) GetCert() *CMsgSteamDatagramCertificateSigned {
	if x != nil {
		return x.Cert
	}
	return nil
}

func (x *CMsgSteamSockets_UDP_ConnectRequest) GetLegacyProtocolVersion() uint32 {
	if x != nil && x.LegacyProtocolVersion != nil {
		return *x.LegacyProtocolVersion
	}
	return 0
}

func (x *CMsgSteamSockets_UDP_ConnectRequest) GetIdentityString() string {
	if x != nil && x.IdentityString != nil {
		return *x.IdentityString
	}
	return ""
}

func (x *CMsgSteamSockets_UDP_ConnectRequest) GetLegacyClientSteamId() uint64 {
	if x != nil && x.LegacyClientSteamId != nil {
		return *x.LegacyClientSteamId
	}
	return 0
}

func (x *CMsgSteamSockets_UDP_ConnectRequest) GetLegacyIdentityBinary() *CMsgSteamNetworkingIdentityLegacyBinary {
	if x != nil {
		return x.LegacyIdentityBinary
	}
	return nil
}

type CMsgSteamSockets_UDP_ConnectOK struct {
	state                protoimpl.MessageState                   `protogen:"open.v1"`
	ClientConnectionId   *uint32                                  `protobuf:"fixed32,1,opt,name=client_connection_id,json=clientConnectionId" json:"client_connection_id,omitempty"`
	ServerConnectionId   *uint32                                  `protobuf:"fixed32,5,opt,name=server_connection_id,json=serverConnectionId" json:"server_connection_id,omitempty"`
	YourTimestamp        *uint64                                  `protobuf:"fixed64,3,opt,name=your_timestamp,json=yourTimestamp" json:"your_timestamp,omitempty"`
	DelayTimeUsec        *uint32                                  `protobuf:"varint,4,opt,name=delay_time_usec,json=delayTimeUsec" json:"delay_time_usec,omitempty"`
	Crypt                *CMsgSteamDatagramSessionCryptInfoSigned `protobuf:"bytes,7,opt,name=crypt" json:"crypt,omitempty"`
	Cert                 *CMsgSteamDatagramCertificateSigned      `protobuf:"bytes,8,opt,name=cert" json:"cert,omitempty"`
	IdentityString       *string                                  `protobuf:"bytes,11,opt,name=identity_string,json=identityString" json:"identity_string,omitempty"`
	LegacyServerSteamId  *uint64                                  `protobuf:"fixed64,2,opt,name=legacy_server_steam_id,json=legacyServerSteamId" json:"legacy_server_steam_id,omitempty"`
	LegacyIdentityBinary *CMsgSteamNetworkingIdentityLegacyBinary `protobuf:"bytes,10,opt,name=legacy_identity_binary,json=legacyIdentityBinary" json:"legacy_identity_binary,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *CMsgSteamSockets_UDP_ConnectOK) Reset() {
	*x = CMsgSteamSockets_UDP_ConnectOK{}
	mi := &file_steamnetworkingsockets_messages_udp_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSteamSockets_UDP_ConnectOK) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamSockets_UDP_ConnectOK) ProtoMessage() {}

func (x *CMsgSteamSockets_UDP_ConnectOK) ProtoReflect() protoreflect.Message {
	mi := &file_steamnetworkingsockets_messages_udp_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamSockets_UDP_ConnectOK.ProtoReflect.Descriptor instead.
func (*CMsgSteamSockets_UDP_ConnectOK) Descriptor() ([]byte, []int) {
	return file_steamnetworkingsockets_messages_udp_proto_rawDescGZIP(), []int{3}
}

func (x *CMsgSteamSockets_UDP_ConnectOK) GetClientConnectionId() uint32 {
	if x != nil && x.ClientConnectionId != nil {
		return *x.ClientConnectionId
	}
	return 0
}

func (x *CMsgSteamSockets_UDP_ConnectOK) GetServerConnectionId() uint32 {
	if x != nil && x.ServerConnectionId != nil {
		return *x.ServerConnectionId
	}
	return 0
}

func (x *CMsgSteamSockets_UDP_ConnectOK) GetYourTimestamp() uint64 {
	if x != nil && x.YourTimestamp != nil {
		return *x.YourTimestamp
	}
	return 0
}

func (x *CMsgSteamSockets_UDP_ConnectOK) GetDelayTimeUsec() uint32 {
	if x != nil && x.DelayTimeUsec != nil {
		return *x.DelayTimeUsec
	}
	return 0
}

func (x *CMsgSteamSockets_UDP_ConnectOK) GetCrypt() *CMsgSteamDatagramSessionCryptInfoSigned {
	if x != nil {
		return x.Crypt
	}
	return nil
}

func (x *CMsgSteamSockets_UDP_ConnectOK) GetCert() *CMsgSteamDatagramCertificateSigned {
	if x != nil {
		return x.Cert
	}
	return nil
}

func (x *CMsgSteamSockets_UDP_ConnectOK) GetIdentityString() string {
	if x != nil && x.IdentityString != nil {
		return *x.IdentityString
	}
	return ""
}

func (x *CMsgSteamSockets_UDP_ConnectOK) GetLegacyServerSteamId() uint64 {
	if x != nil && x.LegacyServerSteamId != nil {
		return *x.LegacyServerSteamId
	}
	return 0
}

func (x *CMsgSteamSockets_UDP_ConnectOK) GetLegacyIdentityBinary() *CMsgSteamNetworkingIdentityLegacyBinary {
	if x != nil {
		return x.LegacyIdentityBinary
	}
	return nil
}

type CMsgSteamSockets_UDP_ConnectionClosed struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	ToConnectionId   *uint32                `protobuf:"fixed32,4,opt,name=to_connection_id,json=toConnectionId" json:"to_connection_id,omitempty"`
	FromConnectionId *uint32                `protobuf:"fixed32,5,opt,name=from_connection_id,json=fromConnectionId" json:"from_connection_id,omitempty"`
	Debug            *string                `protobuf:"bytes,2,opt,name=debug" json:"debug,omitempty"`
	ReasonCode       *uint32                `protobuf:"varint,3,opt,name=reason_code,json=reasonCode" json:"reason_code,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CMsgSteamSockets_UDP_ConnectionClosed) Reset() {
	*x = CMsgSteamSockets_UDP_ConnectionClosed{}
	mi := &file_steamnetworkingsockets_messages_udp_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSteamSockets_UDP_ConnectionClosed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamSockets_UDP_ConnectionClosed) ProtoMessage() {}

func (x *CMsgSteamSockets_UDP_ConnectionClosed) ProtoReflect() protoreflect.Message {
	mi := &file_steamnetworkingsockets_messages_udp_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamSockets_UDP_ConnectionClosed.ProtoReflect.Descriptor instead.
func (*CMsgSteamSockets_UDP_ConnectionClosed) Descriptor() ([]byte, []int) {
	return file_steamnetworkingsockets_messages_udp_proto_rawDescGZIP(), []int{4}
}

func (x *CMsgSteamSockets_UDP_ConnectionClosed) GetToConnectionId() uint32 {
	if x != nil && x.ToConnectionId != nil {
		return *x.ToConnectionId
	}
	return 0
}

func (x *CMsgSteamSockets_UDP_ConnectionClosed) GetFromConnectionId() uint32 {
	if x != nil && x.FromConnectionId != nil {
		return *x.FromConnectionId
	}
	return 0
}

func (x *CMsgSteamSockets_UDP_ConnectionClosed) GetDebug() string {
	if x != nil && x.Debug != nil {
		return *x.Debug
	}
	return ""
}

func (x *CMsgSteamSockets_UDP_ConnectionClosed) GetReasonCode() uint32 {
	if x != nil && x.ReasonCode != nil {
		return *x.ReasonCode
	}
	return 0
}

type CMsgSteamSockets_UDP_NoConnection struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	FromConnectionId *uint32                `protobuf:"fixed32,2,opt,name=from_connection_id,json=fromConnectionId" json:"from_connection_id,omitempty"`
	ToConnectionId   *uint32                `protobuf:"fixed32,3,opt,name=to_connection_id,json=toConnectionId" json:"to_connection_id,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CMsgSteamSockets_UDP_NoConnection) Reset() {
	*x = CMsgSteamSockets_UDP_NoConnection{}
	mi := &file_steamnetworkingsockets_messages_udp_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSteamSockets_UDP_NoConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamSockets_UDP_NoConnection) ProtoMessage() {}

func (x *CMsgSteamSockets_UDP_NoConnection) ProtoReflect() protoreflect.Message {
	mi := &file_steamnetworkingsockets_messages_udp_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamSockets_UDP_NoConnection.ProtoReflect.Descriptor instead.
func (*CMsgSteamSockets_UDP_NoConnection) Descriptor() ([]byte, []int) {
	return file_steamnetworkingsockets_messages_udp_proto_rawDescGZIP(), []int{5}
}

func (x *CMsgSteamSockets_UDP_NoConnection) GetFromConnectionId() uint32 {
	if x != nil && x.FromConnectionId != nil {
		return *x.FromConnectionId
	}
	return 0
}

func (x *CMsgSteamSockets_UDP_NoConnection) GetToConnectionId() uint32 {
	if x != nil && x.ToConnectionId != nil {
		return *x.ToConnectionId
	}
	return 0
}

type CMsgSteamSockets_UDP_Stats struct {
	state         protoimpl.MessageState              `protogen:"open.v1"`
	Stats         *CMsgSteamDatagramConnectionQuality `protobuf:"bytes,1,opt,name=stats" json:"stats,omitempty"`
	Flags         *uint32                             `protobuf:"varint,3,opt,name=flags" json:"flags,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgSteamSockets_UDP_Stats) Reset() {
	*x = CMsgSteamSockets_UDP_Stats{}
	mi := &file_steamnetworkingsockets_messages_udp_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSteamSockets_UDP_Stats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamSockets_UDP_Stats) ProtoMessage() {}

func (x *CMsgSteamSockets_UDP_Stats) ProtoReflect() protoreflect.Message {
	mi := &file_steamnetworkingsockets_messages_udp_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamSockets_UDP_Stats.ProtoReflect.Descriptor instead.
func (*CMsgSteamSockets_UDP_Stats) Descriptor() ([]byte, []int) {
	return file_steamnetworkingsockets_messages_udp_proto_rawDescGZIP(), []int{6}
}

func (x *CMsgSteamSockets_UDP_Stats) GetStats() *CMsgSteamDatagramConnectionQuality {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *CMsgSteamSockets_UDP_Stats) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

var File_steamnetworkingsockets_messages_udp_proto protoreflect.FileDescriptor

const file_steamnetworkingsockets_messages_udp_proto_rawDesc = "" +
	"\n" +
	")steamnetworkingsockets_messages_udp.proto\x1a+steamnetworkingsockets_messages_certs.proto\x1a%steamnetworkingsockets_messages.proto\"\x9a\x01\n" +
	"%CMsgSteamSockets_UDP_ChallengeRequest\x12#\n" +
	"\rconnection_id\x18\x01 \x01(\aR\fconnectionId\x12!\n" +
	"\fmy_timestamp\x18\x03 \x01(\x06R\vmyTimestamp\x12)\n" +
	"\x10protocol_version\x18\x04 \x01(\rR\x0fprotocolVersion\"\xba\x01\n" +
	"#CMsgSteamSockets_UDP_ChallengeReply\x12#\n" +
	"\rconnection_id\x18\x01 \x01(\aR\fconnectionId\x12\x1c\n" +
	"\tchallenge\x18\x02 \x01(\x06R\tchallenge\x12%\n" +
	"\x0eyour_timestamp\x18\x03 \x01(\x06R\ryourTimestamp\x12)\n" +
	"\x10protocol_version\x18\x04 \x01(\rR\x0fprotocolVersion\"\xa7\x04\n" +
	"#CMsgSteamSockets_UDP_ConnectRequest\x120\n" +
	"\x14client_connection_id\x18\x01 \x01(\aR\x12clientConnectionId\x12\x1c\n" +
	"\tchallenge\x18\x02 \x01(\x06R\tchallenge\x12!\n" +
	"\fmy_timestamp\x18\x05 \x01(\x06R\vmyTimestamp\x12\x1e\n" +
	"\vping_est_ms\x18\x06 \x01(\rR\tpingEstMs\x12>\n" +
	"\x05crypt\x18\a \x01(\v2(.CMsgSteamDatagramSessionCryptInfoSignedR\x05crypt\x127\n" +
	"\x04cert\x18\x04 \x01(\v2#.CMsgSteamDatagramCertificateSignedR\x04cert\x126\n" +
	"\x17legacy_protocol_version\x18\b \x01(\rR\x15legacyProtocolVersion\x12'\n" +
	"\x0fidentity_string\x18\n" +
	" \x01(\tR\x0eidentityString\x123\n" +
	"\x16legacy_client_steam_id\x18\x03 \x01(\x06R\x13legacyClientSteamId\x12^\n" +
	"\x16legacy_identity_binary\x18\t \x01(\v2(.CMsgSteamNetworkingIdentityLegacyBinaryR\x14legacyIdentityBinary\"\x8a\x04\n" +
	"\x1eCMsgSteamSockets_UDP_ConnectOK\x120\n" +
	"\x14client_connection_id\x18\x01 \x01(\aR\x12clientConnectionId\x120\n" +
	"\x14server_connection_id\x18\x05 \x01(\aR\x12serverConnectionId\x12%\n" +
	"\x0eyour_timestamp\x18\x03 \x01(\x06R\ryourTimestamp\x12&\n" +
	"\x0fdelay_time_usec\x18\x04 \x01(\rR\rdelayTimeUsec\x12>\n" +
	"\x05crypt\x18\a \x01(\v2(.CMsgSteamDatagramSessionCryptInfoSignedR\x05crypt\x127\n" +
	"\x04cert\x18\b \x01(\v2#.CMsgSteamDatagramCertificateSignedR\x04cert\x12'\n" +
	"\x0fidentity_string\x18\v \x01(\tR\x0eidentityString\x123\n" +
	"\x16legacy_server_steam_id\x18\x02 \x01(\x06R\x13legacyServerSteamId\x12^\n" +
	"\x16legacy_identity_binary\x18\n" +
	" \x01(\v2(.CMsgSteamNetworkingIdentityLegacyBinaryR\x14legacyIdentityBinary\"\xb6\x01\n" +
	"%CMsgSteamSockets_UDP_ConnectionClosed\x12(\n" +
	"\x10to_connection_id\x18\x04 \x01(\aR\x0etoConnectionId\x12,\n" +
	"\x12from_connection_id\x18\x05 \x01(\aR\x10fromConnectionId\x12\x14\n" +
	"\x05debug\x18\x02 \x01(\tR\x05debug\x12\x1f\n" +
	"\vreason_code\x18\x03 \x01(\rR\n" +
	"reasonCode\"{\n" +
	"!CMsgSteamSockets_UDP_NoConnection\x12,\n" +
	"\x12from_connection_id\x18\x02 \x01(\aR\x10fromConnectionId\x12(\n" +
	"\x10to_connection_id\x18\x03 \x01(\aR\x0etoConnectionId\"\xc5\x01\n" +
	"\x1aCMsgSteamSockets_UDP_Stats\x129\n" +
	"\x05stats\x18\x01 \x01(\v2#.CMsgSteamDatagramConnectionQualityR\x05stats\x12\x14\n" +
	"\x05flags\x18\x03 \x01(\rR\x05flags\"V\n" +
	"\x05Flags\x12\x13\n" +
	"\x0fACK_REQUEST_E2E\x10\x02\x12\x19\n" +
	"\x15ACK_REQUEST_IMMEDIATE\x10\x04\x12\x1d\n" +
	"\x19NOT_PRIMARY_TRANSPORT_E2E\x10\x10*\xa5\x02\n" +
	"\x18ESteamNetworkingUDPMsgID\x12-\n" +
	")k_ESteamNetworkingUDPMsg_ChallengeRequest\x10 \x12+\n" +
	"'k_ESteamNetworkingUDPMsg_ChallengeReply\x10!\x12+\n" +
	"'k_ESteamNetworkingUDPMsg_ConnectRequest\x10\"\x12&\n" +
	"\"k_ESteamNetworkingUDPMsg_ConnectOK\x10#\x12-\n" +
	")k_ESteamNetworkingUDPMsg_ConnectionClosed\x10$\x12)\n" +
	"%k_ESteamNetworkingUDPMsg_NoConnection\x10%B\x05H\x01\x80\x01\x00"

var (
	file_steamnetworkingsockets_messages_udp_proto_rawDescOnce sync.Once
	file_steamnetworkingsockets_messages_udp_proto_rawDescData []byte
)

func file_steamnetworkingsockets_messages_udp_proto_rawDescGZIP() []byte {
	file_steamnetworkingsockets_messages_udp_proto_rawDescOnce.Do(func() {
		file_steamnetworkingsockets_messages_udp_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_steamnetworkingsockets_messages_udp_proto_rawDesc), len(file_steamnetworkingsockets_messages_udp_proto_rawDesc)))
	})
	return file_steamnetworkingsockets_messages_udp_proto_rawDescData
}

var file_steamnetworkingsockets_messages_udp_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_steamnetworkingsockets_messages_udp_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_steamnetworkingsockets_messages_udp_proto_goTypes = []any{
	(ESteamNetworkingUDPMsgID)(0),                   // 0: ESteamNetworkingUDPMsgID
	(CMsgSteamSockets_UDP_Stats_Flags)(0),           // 1: CMsgSteamSockets_UDP_Stats.Flags
	(*CMsgSteamSockets_UDP_ChallengeRequest)(nil),   // 2: CMsgSteamSockets_UDP_ChallengeRequest
	(*CMsgSteamSockets_UDP_ChallengeReply)(nil),     // 3: CMsgSteamSockets_UDP_ChallengeReply
	(*CMsgSteamSockets_UDP_ConnectRequest)(nil),     // 4: CMsgSteamSockets_UDP_ConnectRequest
	(*CMsgSteamSockets_UDP_ConnectOK)(nil),          // 5: CMsgSteamSockets_UDP_ConnectOK
	(*CMsgSteamSockets_UDP_ConnectionClosed)(nil),   // 6: CMsgSteamSockets_UDP_ConnectionClosed
	(*CMsgSteamSockets_UDP_NoConnection)(nil),       // 7: CMsgSteamSockets_UDP_NoConnection
	(*CMsgSteamSockets_UDP_Stats)(nil),              // 8: CMsgSteamSockets_UDP_Stats
	(*CMsgSteamDatagramSessionCryptInfoSigned)(nil), // 9: CMsgSteamDatagramSessionCryptInfoSigned
	(*CMsgSteamDatagramCertificateSigned)(nil),      // 10: CMsgSteamDatagramCertificateSigned
	(*CMsgSteamNetworkingIdentityLegacyBinary)(nil), // 11: CMsgSteamNetworkingIdentityLegacyBinary
	(*CMsgSteamDatagramConnectionQuality)(nil),      // 12: CMsgSteamDatagramConnectionQuality
}
var file_steamnetworkingsockets_messages_udp_proto_depIdxs = []int32{
	9,  // 0: CMsgSteamSockets_UDP_ConnectRequest.crypt:type_name -> CMsgSteamDatagramSessionCryptInfoSigned
	10, // 1: CMsgSteamSockets_UDP_ConnectRequest.cert:type_name -> CMsgSteamDatagramCertificateSigned
	11, // 2: CMsgSteamSockets_UDP_ConnectRequest.legacy_identity_binary:type_name -> CMsgSteamNetworkingIdentityLegacyBinary
	9,  // 3: CMsgSteamSockets_UDP_ConnectOK.crypt:type_name -> CMsgSteamDatagramSessionCryptInfoSigned
	10, // 4: CMsgSteamSockets_UDP_ConnectOK.cert:type_name -> CMsgSteamDatagramCertificateSigned
	11, // 5: CMsgSteamSockets_UDP_ConnectOK.legacy_identity_binary:type_name -> CMsgSteamNetworkingIdentityLegacyBinary
	12, // 6: CMsgSteamSockets_UDP_Stats.stats:type_name -> CMsgSteamDatagramConnectionQuality
	7,  // [7:7] is the sub-list for method output_type
	7,  // [7:7] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_steamnetworkingsockets_messages_udp_proto_init() }
func file_steamnetworkingsockets_messages_udp_proto_init() {
	if File_steamnetworkingsockets_messages_udp_proto != nil {
		return
	}
	file_steamnetworkingsockets_messages_certs_proto_init()
	file_steamnetworkingsockets_messages_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_steamnetworkingsockets_messages_udp_proto_rawDesc), len(file_steamnetworkingsockets_messages_udp_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_steamnetworkingsockets_messages_udp_proto_goTypes,
		DependencyIndexes: file_steamnetworkingsockets_messages_udp_proto_depIdxs,
		EnumInfos:         file_steamnetworkingsockets_messages_udp_proto_enumTypes,
		MessageInfos:      file_steamnetworkingsockets_messages_udp_proto_msgTypes,
	}.Build()
	File_steamnetworkingsockets_messages_udp_proto = out.File
	file_steamnetworkingsockets_messages_udp_proto_goTypes = nil
	file_steamnetworkingsockets_messages_udp_proto_depIdxs = nil
}
