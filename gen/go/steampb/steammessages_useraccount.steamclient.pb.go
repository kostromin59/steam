// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v6.32.0
// source: steammessages_useraccount.steamclient.proto

package steampb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CUserAccount_GetAvailableValveDiscountPromotions_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CountryCode   *string                `protobuf:"bytes,1,opt,name=country_code,json=countryCode" json:"country_code,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CUserAccount_GetAvailableValveDiscountPromotions_Request) Reset() {
	*x = CUserAccount_GetAvailableValveDiscountPromotions_Request{}
	mi := &file_steammessages_useraccount_steamclient_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CUserAccount_GetAvailableValveDiscountPromotions_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserAccount_GetAvailableValveDiscountPromotions_Request) ProtoMessage() {}

func (x *CUserAccount_GetAvailableValveDiscountPromotions_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_useraccount_steamclient_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserAccount_GetAvailableValveDiscountPromotions_Request.ProtoReflect.Descriptor instead.
func (*CUserAccount_GetAvailableValveDiscountPromotions_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_useraccount_steamclient_proto_rawDescGZIP(), []int{0}
}

func (x *CUserAccount_GetAvailableValveDiscountPromotions_Request) GetCountryCode() string {
	if x != nil && x.CountryCode != nil {
		return *x.CountryCode
	}
	return ""
}

type CUserAccount_GetAvailableValveDiscountPromotions_Response struct {
	state         protoimpl.MessageState                                                                     `protogen:"open.v1"`
	Promotions    []*CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails `protobuf:"bytes,1,rep,name=promotions" json:"promotions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CUserAccount_GetAvailableValveDiscountPromotions_Response) Reset() {
	*x = CUserAccount_GetAvailableValveDiscountPromotions_Response{}
	mi := &file_steammessages_useraccount_steamclient_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CUserAccount_GetAvailableValveDiscountPromotions_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserAccount_GetAvailableValveDiscountPromotions_Response) ProtoMessage() {}

func (x *CUserAccount_GetAvailableValveDiscountPromotions_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_useraccount_steamclient_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserAccount_GetAvailableValveDiscountPromotions_Response.ProtoReflect.Descriptor instead.
func (*CUserAccount_GetAvailableValveDiscountPromotions_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_useraccount_steamclient_proto_rawDescGZIP(), []int{1}
}

func (x *CUserAccount_GetAvailableValveDiscountPromotions_Response) GetPromotions() []*CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails {
	if x != nil {
		return x.Promotions
	}
	return nil
}

type CUserAccount_GetClientWalletDetails_Request struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	IncludeBalanceInUsd     *bool                  `protobuf:"varint,1,opt,name=include_balance_in_usd,json=includeBalanceInUsd" json:"include_balance_in_usd,omitempty"`
	WalletRegion            *int32                 `protobuf:"varint,2,opt,name=wallet_region,json=walletRegion,def=1" json:"wallet_region,omitempty"`
	IncludeFormattedBalance *bool                  `protobuf:"varint,3,opt,name=include_formatted_balance,json=includeFormattedBalance" json:"include_formatted_balance,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

// Default values for CUserAccount_GetClientWalletDetails_Request fields.
const (
	Default_CUserAccount_GetClientWalletDetails_Request_WalletRegion = int32(1)
)

func (x *CUserAccount_GetClientWalletDetails_Request) Reset() {
	*x = CUserAccount_GetClientWalletDetails_Request{}
	mi := &file_steammessages_useraccount_steamclient_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CUserAccount_GetClientWalletDetails_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserAccount_GetClientWalletDetails_Request) ProtoMessage() {}

func (x *CUserAccount_GetClientWalletDetails_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_useraccount_steamclient_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserAccount_GetClientWalletDetails_Request.ProtoReflect.Descriptor instead.
func (*CUserAccount_GetClientWalletDetails_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_useraccount_steamclient_proto_rawDescGZIP(), []int{2}
}

func (x *CUserAccount_GetClientWalletDetails_Request) GetIncludeBalanceInUsd() bool {
	if x != nil && x.IncludeBalanceInUsd != nil {
		return *x.IncludeBalanceInUsd
	}
	return false
}

func (x *CUserAccount_GetClientWalletDetails_Request) GetWalletRegion() int32 {
	if x != nil && x.WalletRegion != nil {
		return *x.WalletRegion
	}
	return Default_CUserAccount_GetClientWalletDetails_Request_WalletRegion
}

func (x *CUserAccount_GetClientWalletDetails_Request) GetIncludeFormattedBalance() bool {
	if x != nil && x.IncludeFormattedBalance != nil {
		return *x.IncludeFormattedBalance
	}
	return false
}

type CUserAccount_GetWalletDetails_Response struct {
	state                          protoimpl.MessageState `protogen:"open.v1"`
	HasWallet                      *bool                  `protobuf:"varint,1,opt,name=has_wallet,json=hasWallet" json:"has_wallet,omitempty"`
	UserCountryCode                *string                `protobuf:"bytes,2,opt,name=user_country_code,json=userCountryCode" json:"user_country_code,omitempty"`
	WalletCountryCode              *string                `protobuf:"bytes,3,opt,name=wallet_country_code,json=walletCountryCode" json:"wallet_country_code,omitempty"`
	WalletState                    *string                `protobuf:"bytes,4,opt,name=wallet_state,json=walletState" json:"wallet_state,omitempty"`
	Balance                        *int64                 `protobuf:"varint,5,opt,name=balance" json:"balance,omitempty"`
	DelayedBalance                 *int64                 `protobuf:"varint,6,opt,name=delayed_balance,json=delayedBalance" json:"delayed_balance,omitempty"`
	CurrencyCode                   *int32                 `protobuf:"varint,7,opt,name=currency_code,json=currencyCode" json:"currency_code,omitempty"`
	TimeMostRecentTxn              *uint32                `protobuf:"varint,8,opt,name=time_most_recent_txn,json=timeMostRecentTxn" json:"time_most_recent_txn,omitempty"`
	MostRecentTxnid                *uint64                `protobuf:"varint,9,opt,name=most_recent_txnid,json=mostRecentTxnid" json:"most_recent_txnid,omitempty"`
	BalanceInUsd                   *int64                 `protobuf:"varint,10,opt,name=balance_in_usd,json=balanceInUsd" json:"balance_in_usd,omitempty"`
	DelayedBalanceInUsd            *int64                 `protobuf:"varint,11,opt,name=delayed_balance_in_usd,json=delayedBalanceInUsd" json:"delayed_balance_in_usd,omitempty"`
	HasWalletInOtherRegions        *bool                  `protobuf:"varint,12,opt,name=has_wallet_in_other_regions,json=hasWalletInOtherRegions" json:"has_wallet_in_other_regions,omitempty"`
	OtherRegions                   []int32                `protobuf:"varint,13,rep,name=other_regions,json=otherRegions" json:"other_regions,omitempty"`
	FormattedBalance               *string                `protobuf:"bytes,14,opt,name=formatted_balance,json=formattedBalance" json:"formatted_balance,omitempty"`
	FormattedDelayedBalance        *string                `protobuf:"bytes,15,opt,name=formatted_delayed_balance,json=formattedDelayedBalance" json:"formatted_delayed_balance,omitempty"`
	DelayedBalanceAvailableMinTime *int32                 `protobuf:"varint,16,opt,name=delayed_balance_available_min_time,json=delayedBalanceAvailableMinTime" json:"delayed_balance_available_min_time,omitempty"`
	DelayedBalanceAvailableMaxTime *int32                 `protobuf:"varint,17,opt,name=delayed_balance_available_max_time,json=delayedBalanceAvailableMaxTime" json:"delayed_balance_available_max_time,omitempty"`
	DelayedBalanceNewestSource     *int32                 `protobuf:"varint,18,opt,name=delayed_balance_newest_source,json=delayedBalanceNewestSource" json:"delayed_balance_newest_source,omitempty"`
	unknownFields                  protoimpl.UnknownFields
	sizeCache                      protoimpl.SizeCache
}

func (x *CUserAccount_GetWalletDetails_Response) Reset() {
	*x = CUserAccount_GetWalletDetails_Response{}
	mi := &file_steammessages_useraccount_steamclient_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CUserAccount_GetWalletDetails_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserAccount_GetWalletDetails_Response) ProtoMessage() {}

func (x *CUserAccount_GetWalletDetails_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_useraccount_steamclient_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserAccount_GetWalletDetails_Response.ProtoReflect.Descriptor instead.
func (*CUserAccount_GetWalletDetails_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_useraccount_steamclient_proto_rawDescGZIP(), []int{3}
}

func (x *CUserAccount_GetWalletDetails_Response) GetHasWallet() bool {
	if x != nil && x.HasWallet != nil {
		return *x.HasWallet
	}
	return false
}

func (x *CUserAccount_GetWalletDetails_Response) GetUserCountryCode() string {
	if x != nil && x.UserCountryCode != nil {
		return *x.UserCountryCode
	}
	return ""
}

func (x *CUserAccount_GetWalletDetails_Response) GetWalletCountryCode() string {
	if x != nil && x.WalletCountryCode != nil {
		return *x.WalletCountryCode
	}
	return ""
}

func (x *CUserAccount_GetWalletDetails_Response) GetWalletState() string {
	if x != nil && x.WalletState != nil {
		return *x.WalletState
	}
	return ""
}

func (x *CUserAccount_GetWalletDetails_Response) GetBalance() int64 {
	if x != nil && x.Balance != nil {
		return *x.Balance
	}
	return 0
}

func (x *CUserAccount_GetWalletDetails_Response) GetDelayedBalance() int64 {
	if x != nil && x.DelayedBalance != nil {
		return *x.DelayedBalance
	}
	return 0
}

func (x *CUserAccount_GetWalletDetails_Response) GetCurrencyCode() int32 {
	if x != nil && x.CurrencyCode != nil {
		return *x.CurrencyCode
	}
	return 0
}

func (x *CUserAccount_GetWalletDetails_Response) GetTimeMostRecentTxn() uint32 {
	if x != nil && x.TimeMostRecentTxn != nil {
		return *x.TimeMostRecentTxn
	}
	return 0
}

func (x *CUserAccount_GetWalletDetails_Response) GetMostRecentTxnid() uint64 {
	if x != nil && x.MostRecentTxnid != nil {
		return *x.MostRecentTxnid
	}
	return 0
}

func (x *CUserAccount_GetWalletDetails_Response) GetBalanceInUsd() int64 {
	if x != nil && x.BalanceInUsd != nil {
		return *x.BalanceInUsd
	}
	return 0
}

func (x *CUserAccount_GetWalletDetails_Response) GetDelayedBalanceInUsd() int64 {
	if x != nil && x.DelayedBalanceInUsd != nil {
		return *x.DelayedBalanceInUsd
	}
	return 0
}

func (x *CUserAccount_GetWalletDetails_Response) GetHasWalletInOtherRegions() bool {
	if x != nil && x.HasWalletInOtherRegions != nil {
		return *x.HasWalletInOtherRegions
	}
	return false
}

func (x *CUserAccount_GetWalletDetails_Response) GetOtherRegions() []int32 {
	if x != nil {
		return x.OtherRegions
	}
	return nil
}

func (x *CUserAccount_GetWalletDetails_Response) GetFormattedBalance() string {
	if x != nil && x.FormattedBalance != nil {
		return *x.FormattedBalance
	}
	return ""
}

func (x *CUserAccount_GetWalletDetails_Response) GetFormattedDelayedBalance() string {
	if x != nil && x.FormattedDelayedBalance != nil {
		return *x.FormattedDelayedBalance
	}
	return ""
}

func (x *CUserAccount_GetWalletDetails_Response) GetDelayedBalanceAvailableMinTime() int32 {
	if x != nil && x.DelayedBalanceAvailableMinTime != nil {
		return *x.DelayedBalanceAvailableMinTime
	}
	return 0
}

func (x *CUserAccount_GetWalletDetails_Response) GetDelayedBalanceAvailableMaxTime() int32 {
	if x != nil && x.DelayedBalanceAvailableMaxTime != nil {
		return *x.DelayedBalanceAvailableMaxTime
	}
	return 0
}

func (x *CUserAccount_GetWalletDetails_Response) GetDelayedBalanceNewestSource() int32 {
	if x != nil && x.DelayedBalanceNewestSource != nil {
		return *x.DelayedBalanceNewestSource
	}
	return 0
}

type CUserAccount_GetAccountLinkStatus_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CUserAccount_GetAccountLinkStatus_Request) Reset() {
	*x = CUserAccount_GetAccountLinkStatus_Request{}
	mi := &file_steammessages_useraccount_steamclient_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CUserAccount_GetAccountLinkStatus_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserAccount_GetAccountLinkStatus_Request) ProtoMessage() {}

func (x *CUserAccount_GetAccountLinkStatus_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_useraccount_steamclient_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserAccount_GetAccountLinkStatus_Request.ProtoReflect.Descriptor instead.
func (*CUserAccount_GetAccountLinkStatus_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_useraccount_steamclient_proto_rawDescGZIP(), []int{4}
}

type CUserAccount_GetAccountLinkStatus_Response struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	Pwid                     *uint32                `protobuf:"varint,1,opt,name=pwid" json:"pwid,omitempty"`
	IdentityVerification     *uint32                `protobuf:"varint,2,opt,name=identity_verification,json=identityVerification" json:"identity_verification,omitempty"`
	PerformedAgeVerification *bool                  `protobuf:"varint,3,opt,name=performed_age_verification,json=performedAgeVerification" json:"performed_age_verification,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *CUserAccount_GetAccountLinkStatus_Response) Reset() {
	*x = CUserAccount_GetAccountLinkStatus_Response{}
	mi := &file_steammessages_useraccount_steamclient_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CUserAccount_GetAccountLinkStatus_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserAccount_GetAccountLinkStatus_Response) ProtoMessage() {}

func (x *CUserAccount_GetAccountLinkStatus_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_useraccount_steamclient_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserAccount_GetAccountLinkStatus_Response.ProtoReflect.Descriptor instead.
func (*CUserAccount_GetAccountLinkStatus_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_useraccount_steamclient_proto_rawDescGZIP(), []int{5}
}

func (x *CUserAccount_GetAccountLinkStatus_Response) GetPwid() uint32 {
	if x != nil && x.Pwid != nil {
		return *x.Pwid
	}
	return 0
}

func (x *CUserAccount_GetAccountLinkStatus_Response) GetIdentityVerification() uint32 {
	if x != nil && x.IdentityVerification != nil {
		return *x.IdentityVerification
	}
	return 0
}

func (x *CUserAccount_GetAccountLinkStatus_Response) GetPerformedAgeVerification() bool {
	if x != nil && x.PerformedAgeVerification != nil {
		return *x.PerformedAgeVerification
	}
	return false
}

type CUserAccount_CancelLicenseForApp_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Appid         *uint32                `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CUserAccount_CancelLicenseForApp_Request) Reset() {
	*x = CUserAccount_CancelLicenseForApp_Request{}
	mi := &file_steammessages_useraccount_steamclient_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CUserAccount_CancelLicenseForApp_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserAccount_CancelLicenseForApp_Request) ProtoMessage() {}

func (x *CUserAccount_CancelLicenseForApp_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_useraccount_steamclient_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserAccount_CancelLicenseForApp_Request.ProtoReflect.Descriptor instead.
func (*CUserAccount_CancelLicenseForApp_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_useraccount_steamclient_proto_rawDescGZIP(), []int{6}
}

func (x *CUserAccount_CancelLicenseForApp_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

type CUserAccount_CancelLicenseForApp_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CUserAccount_CancelLicenseForApp_Response) Reset() {
	*x = CUserAccount_CancelLicenseForApp_Response{}
	mi := &file_steammessages_useraccount_steamclient_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CUserAccount_CancelLicenseForApp_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserAccount_CancelLicenseForApp_Response) ProtoMessage() {}

func (x *CUserAccount_CancelLicenseForApp_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_useraccount_steamclient_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserAccount_CancelLicenseForApp_Response.ProtoReflect.Descriptor instead.
func (*CUserAccount_CancelLicenseForApp_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_useraccount_steamclient_proto_rawDescGZIP(), []int{7}
}

type CUserAccount_GetUserCountry_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Steamid       *uint64                `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CUserAccount_GetUserCountry_Request) Reset() {
	*x = CUserAccount_GetUserCountry_Request{}
	mi := &file_steammessages_useraccount_steamclient_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CUserAccount_GetUserCountry_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserAccount_GetUserCountry_Request) ProtoMessage() {}

func (x *CUserAccount_GetUserCountry_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_useraccount_steamclient_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserAccount_GetUserCountry_Request.ProtoReflect.Descriptor instead.
func (*CUserAccount_GetUserCountry_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_useraccount_steamclient_proto_rawDescGZIP(), []int{8}
}

func (x *CUserAccount_GetUserCountry_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

type CUserAccount_GetUserCountry_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Country       *string                `protobuf:"bytes,1,opt,name=country" json:"country,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CUserAccount_GetUserCountry_Response) Reset() {
	*x = CUserAccount_GetUserCountry_Response{}
	mi := &file_steammessages_useraccount_steamclient_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CUserAccount_GetUserCountry_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserAccount_GetUserCountry_Response) ProtoMessage() {}

func (x *CUserAccount_GetUserCountry_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_useraccount_steamclient_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserAccount_GetUserCountry_Response.ProtoReflect.Descriptor instead.
func (*CUserAccount_GetUserCountry_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_useraccount_steamclient_proto_rawDescGZIP(), []int{9}
}

func (x *CUserAccount_GetUserCountry_Response) GetCountry() string {
	if x != nil && x.Country != nil {
		return *x.Country
	}
	return ""
}

type CUserAccount_CreateFriendInviteToken_Request struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	InviteLimit    *uint32                `protobuf:"varint,1,opt,name=invite_limit,json=inviteLimit" json:"invite_limit,omitempty"`
	InviteDuration *uint32                `protobuf:"varint,2,opt,name=invite_duration,json=inviteDuration" json:"invite_duration,omitempty"`
	InviteNote     *string                `protobuf:"bytes,3,opt,name=invite_note,json=inviteNote" json:"invite_note,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CUserAccount_CreateFriendInviteToken_Request) Reset() {
	*x = CUserAccount_CreateFriendInviteToken_Request{}
	mi := &file_steammessages_useraccount_steamclient_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CUserAccount_CreateFriendInviteToken_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserAccount_CreateFriendInviteToken_Request) ProtoMessage() {}

func (x *CUserAccount_CreateFriendInviteToken_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_useraccount_steamclient_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserAccount_CreateFriendInviteToken_Request.ProtoReflect.Descriptor instead.
func (*CUserAccount_CreateFriendInviteToken_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_useraccount_steamclient_proto_rawDescGZIP(), []int{10}
}

func (x *CUserAccount_CreateFriendInviteToken_Request) GetInviteLimit() uint32 {
	if x != nil && x.InviteLimit != nil {
		return *x.InviteLimit
	}
	return 0
}

func (x *CUserAccount_CreateFriendInviteToken_Request) GetInviteDuration() uint32 {
	if x != nil && x.InviteDuration != nil {
		return *x.InviteDuration
	}
	return 0
}

func (x *CUserAccount_CreateFriendInviteToken_Request) GetInviteNote() string {
	if x != nil && x.InviteNote != nil {
		return *x.InviteNote
	}
	return ""
}

type CUserAccount_CreateFriendInviteToken_Response struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	InviteToken    *string                `protobuf:"bytes,1,opt,name=invite_token,json=inviteToken" json:"invite_token,omitempty"`
	InviteLimit    *uint64                `protobuf:"varint,2,opt,name=invite_limit,json=inviteLimit" json:"invite_limit,omitempty"`
	InviteDuration *uint64                `protobuf:"varint,3,opt,name=invite_duration,json=inviteDuration" json:"invite_duration,omitempty"`
	TimeCreated    *uint32                `protobuf:"fixed32,4,opt,name=time_created,json=timeCreated" json:"time_created,omitempty"`
	Valid          *bool                  `protobuf:"varint,5,opt,name=valid" json:"valid,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CUserAccount_CreateFriendInviteToken_Response) Reset() {
	*x = CUserAccount_CreateFriendInviteToken_Response{}
	mi := &file_steammessages_useraccount_steamclient_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CUserAccount_CreateFriendInviteToken_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserAccount_CreateFriendInviteToken_Response) ProtoMessage() {}

func (x *CUserAccount_CreateFriendInviteToken_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_useraccount_steamclient_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserAccount_CreateFriendInviteToken_Response.ProtoReflect.Descriptor instead.
func (*CUserAccount_CreateFriendInviteToken_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_useraccount_steamclient_proto_rawDescGZIP(), []int{11}
}

func (x *CUserAccount_CreateFriendInviteToken_Response) GetInviteToken() string {
	if x != nil && x.InviteToken != nil {
		return *x.InviteToken
	}
	return ""
}

func (x *CUserAccount_CreateFriendInviteToken_Response) GetInviteLimit() uint64 {
	if x != nil && x.InviteLimit != nil {
		return *x.InviteLimit
	}
	return 0
}

func (x *CUserAccount_CreateFriendInviteToken_Response) GetInviteDuration() uint64 {
	if x != nil && x.InviteDuration != nil {
		return *x.InviteDuration
	}
	return 0
}

func (x *CUserAccount_CreateFriendInviteToken_Response) GetTimeCreated() uint32 {
	if x != nil && x.TimeCreated != nil {
		return *x.TimeCreated
	}
	return 0
}

func (x *CUserAccount_CreateFriendInviteToken_Response) GetValid() bool {
	if x != nil && x.Valid != nil {
		return *x.Valid
	}
	return false
}

type CUserAccount_GetFriendInviteTokens_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CUserAccount_GetFriendInviteTokens_Request) Reset() {
	*x = CUserAccount_GetFriendInviteTokens_Request{}
	mi := &file_steammessages_useraccount_steamclient_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CUserAccount_GetFriendInviteTokens_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserAccount_GetFriendInviteTokens_Request) ProtoMessage() {}

func (x *CUserAccount_GetFriendInviteTokens_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_useraccount_steamclient_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserAccount_GetFriendInviteTokens_Request.ProtoReflect.Descriptor instead.
func (*CUserAccount_GetFriendInviteTokens_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_useraccount_steamclient_proto_rawDescGZIP(), []int{12}
}

type CUserAccount_GetFriendInviteTokens_Response struct {
	state         protoimpl.MessageState                           `protogen:"open.v1"`
	Tokens        []*CUserAccount_CreateFriendInviteToken_Response `protobuf:"bytes,1,rep,name=tokens" json:"tokens,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CUserAccount_GetFriendInviteTokens_Response) Reset() {
	*x = CUserAccount_GetFriendInviteTokens_Response{}
	mi := &file_steammessages_useraccount_steamclient_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CUserAccount_GetFriendInviteTokens_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserAccount_GetFriendInviteTokens_Response) ProtoMessage() {}

func (x *CUserAccount_GetFriendInviteTokens_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_useraccount_steamclient_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserAccount_GetFriendInviteTokens_Response.ProtoReflect.Descriptor instead.
func (*CUserAccount_GetFriendInviteTokens_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_useraccount_steamclient_proto_rawDescGZIP(), []int{13}
}

func (x *CUserAccount_GetFriendInviteTokens_Response) GetTokens() []*CUserAccount_CreateFriendInviteToken_Response {
	if x != nil {
		return x.Tokens
	}
	return nil
}

type CUserAccount_ViewFriendInviteToken_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Steamid       *uint64                `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	InviteToken   *string                `protobuf:"bytes,2,opt,name=invite_token,json=inviteToken" json:"invite_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CUserAccount_ViewFriendInviteToken_Request) Reset() {
	*x = CUserAccount_ViewFriendInviteToken_Request{}
	mi := &file_steammessages_useraccount_steamclient_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CUserAccount_ViewFriendInviteToken_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserAccount_ViewFriendInviteToken_Request) ProtoMessage() {}

func (x *CUserAccount_ViewFriendInviteToken_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_useraccount_steamclient_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserAccount_ViewFriendInviteToken_Request.ProtoReflect.Descriptor instead.
func (*CUserAccount_ViewFriendInviteToken_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_useraccount_steamclient_proto_rawDescGZIP(), []int{14}
}

func (x *CUserAccount_ViewFriendInviteToken_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CUserAccount_ViewFriendInviteToken_Request) GetInviteToken() string {
	if x != nil && x.InviteToken != nil {
		return *x.InviteToken
	}
	return ""
}

type CUserAccount_ViewFriendInviteToken_Response struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Valid          *bool                  `protobuf:"varint,1,opt,name=valid" json:"valid,omitempty"`
	Steamid        *uint64                `protobuf:"varint,2,opt,name=steamid" json:"steamid,omitempty"`
	InviteDuration *uint64                `protobuf:"varint,3,opt,name=invite_duration,json=inviteDuration" json:"invite_duration,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CUserAccount_ViewFriendInviteToken_Response) Reset() {
	*x = CUserAccount_ViewFriendInviteToken_Response{}
	mi := &file_steammessages_useraccount_steamclient_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CUserAccount_ViewFriendInviteToken_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserAccount_ViewFriendInviteToken_Response) ProtoMessage() {}

func (x *CUserAccount_ViewFriendInviteToken_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_useraccount_steamclient_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserAccount_ViewFriendInviteToken_Response.ProtoReflect.Descriptor instead.
func (*CUserAccount_ViewFriendInviteToken_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_useraccount_steamclient_proto_rawDescGZIP(), []int{15}
}

func (x *CUserAccount_ViewFriendInviteToken_Response) GetValid() bool {
	if x != nil && x.Valid != nil {
		return *x.Valid
	}
	return false
}

func (x *CUserAccount_ViewFriendInviteToken_Response) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CUserAccount_ViewFriendInviteToken_Response) GetInviteDuration() uint64 {
	if x != nil && x.InviteDuration != nil {
		return *x.InviteDuration
	}
	return 0
}

type CUserAccount_RedeemFriendInviteToken_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Steamid       *uint64                `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	InviteToken   *string                `protobuf:"bytes,2,opt,name=invite_token,json=inviteToken" json:"invite_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CUserAccount_RedeemFriendInviteToken_Request) Reset() {
	*x = CUserAccount_RedeemFriendInviteToken_Request{}
	mi := &file_steammessages_useraccount_steamclient_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CUserAccount_RedeemFriendInviteToken_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserAccount_RedeemFriendInviteToken_Request) ProtoMessage() {}

func (x *CUserAccount_RedeemFriendInviteToken_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_useraccount_steamclient_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserAccount_RedeemFriendInviteToken_Request.ProtoReflect.Descriptor instead.
func (*CUserAccount_RedeemFriendInviteToken_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_useraccount_steamclient_proto_rawDescGZIP(), []int{16}
}

func (x *CUserAccount_RedeemFriendInviteToken_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CUserAccount_RedeemFriendInviteToken_Request) GetInviteToken() string {
	if x != nil && x.InviteToken != nil {
		return *x.InviteToken
	}
	return ""
}

type CUserAccount_RedeemFriendInviteToken_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CUserAccount_RedeemFriendInviteToken_Response) Reset() {
	*x = CUserAccount_RedeemFriendInviteToken_Response{}
	mi := &file_steammessages_useraccount_steamclient_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CUserAccount_RedeemFriendInviteToken_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserAccount_RedeemFriendInviteToken_Response) ProtoMessage() {}

func (x *CUserAccount_RedeemFriendInviteToken_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_useraccount_steamclient_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserAccount_RedeemFriendInviteToken_Response.ProtoReflect.Descriptor instead.
func (*CUserAccount_RedeemFriendInviteToken_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_useraccount_steamclient_proto_rawDescGZIP(), []int{17}
}

type CUserAccount_RevokeFriendInviteToken_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	InviteToken   *string                `protobuf:"bytes,1,opt,name=invite_token,json=inviteToken" json:"invite_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CUserAccount_RevokeFriendInviteToken_Request) Reset() {
	*x = CUserAccount_RevokeFriendInviteToken_Request{}
	mi := &file_steammessages_useraccount_steamclient_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CUserAccount_RevokeFriendInviteToken_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserAccount_RevokeFriendInviteToken_Request) ProtoMessage() {}

func (x *CUserAccount_RevokeFriendInviteToken_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_useraccount_steamclient_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserAccount_RevokeFriendInviteToken_Request.ProtoReflect.Descriptor instead.
func (*CUserAccount_RevokeFriendInviteToken_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_useraccount_steamclient_proto_rawDescGZIP(), []int{18}
}

func (x *CUserAccount_RevokeFriendInviteToken_Request) GetInviteToken() string {
	if x != nil && x.InviteToken != nil {
		return *x.InviteToken
	}
	return ""
}

type CUserAccount_RevokeFriendInviteToken_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CUserAccount_RevokeFriendInviteToken_Response) Reset() {
	*x = CUserAccount_RevokeFriendInviteToken_Response{}
	mi := &file_steammessages_useraccount_steamclient_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CUserAccount_RevokeFriendInviteToken_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserAccount_RevokeFriendInviteToken_Response) ProtoMessage() {}

func (x *CUserAccount_RevokeFriendInviteToken_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_useraccount_steamclient_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserAccount_RevokeFriendInviteToken_Response.ProtoReflect.Descriptor instead.
func (*CUserAccount_RevokeFriendInviteToken_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_useraccount_steamclient_proto_rawDescGZIP(), []int{19}
}

type CUserAccount_RegisterCompatTool_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CompatTool    *uint32                `protobuf:"varint,1,opt,name=compat_tool,json=compatTool" json:"compat_tool,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CUserAccount_RegisterCompatTool_Request) Reset() {
	*x = CUserAccount_RegisterCompatTool_Request{}
	mi := &file_steammessages_useraccount_steamclient_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CUserAccount_RegisterCompatTool_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserAccount_RegisterCompatTool_Request) ProtoMessage() {}

func (x *CUserAccount_RegisterCompatTool_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_useraccount_steamclient_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserAccount_RegisterCompatTool_Request.ProtoReflect.Descriptor instead.
func (*CUserAccount_RegisterCompatTool_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_useraccount_steamclient_proto_rawDescGZIP(), []int{20}
}

func (x *CUserAccount_RegisterCompatTool_Request) GetCompatTool() uint32 {
	if x != nil && x.CompatTool != nil {
		return *x.CompatTool
	}
	return 0
}

type CUserAccount_RegisterCompatTool_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CUserAccount_RegisterCompatTool_Response) Reset() {
	*x = CUserAccount_RegisterCompatTool_Response{}
	mi := &file_steammessages_useraccount_steamclient_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CUserAccount_RegisterCompatTool_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserAccount_RegisterCompatTool_Response) ProtoMessage() {}

func (x *CUserAccount_RegisterCompatTool_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_useraccount_steamclient_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserAccount_RegisterCompatTool_Response.ProtoReflect.Descriptor instead.
func (*CUserAccount_RegisterCompatTool_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_useraccount_steamclient_proto_rawDescGZIP(), []int{21}
}

type CEmbeddedClient_AuthorizeCurrentDevice_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Steamid       *uint64                `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	Appid         *uint32                `protobuf:"varint,2,opt,name=appid" json:"appid,omitempty"`
	DeviceInfo    *string                `protobuf:"bytes,3,opt,name=device_info,json=deviceInfo" json:"device_info,omitempty"`
	Deviceid      *uint32                `protobuf:"varint,4,opt,name=deviceid" json:"deviceid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CEmbeddedClient_AuthorizeCurrentDevice_Request) Reset() {
	*x = CEmbeddedClient_AuthorizeCurrentDevice_Request{}
	mi := &file_steammessages_useraccount_steamclient_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CEmbeddedClient_AuthorizeCurrentDevice_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CEmbeddedClient_AuthorizeCurrentDevice_Request) ProtoMessage() {}

func (x *CEmbeddedClient_AuthorizeCurrentDevice_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_useraccount_steamclient_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CEmbeddedClient_AuthorizeCurrentDevice_Request.ProtoReflect.Descriptor instead.
func (*CEmbeddedClient_AuthorizeCurrentDevice_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_useraccount_steamclient_proto_rawDescGZIP(), []int{22}
}

func (x *CEmbeddedClient_AuthorizeCurrentDevice_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CEmbeddedClient_AuthorizeCurrentDevice_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CEmbeddedClient_AuthorizeCurrentDevice_Request) GetDeviceInfo() string {
	if x != nil && x.DeviceInfo != nil {
		return *x.DeviceInfo
	}
	return ""
}

func (x *CEmbeddedClient_AuthorizeCurrentDevice_Request) GetDeviceid() uint32 {
	if x != nil && x.Deviceid != nil {
		return *x.Deviceid
	}
	return 0
}

type CEmbeddedClient_Token struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Steamid       *uint64                `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	ClientToken   []byte                 `protobuf:"bytes,2,opt,name=client_token,json=clientToken" json:"client_token,omitempty"`
	Expiry        *uint32                `protobuf:"varint,3,opt,name=expiry" json:"expiry,omitempty"`
	Deviceid      *uint32                `protobuf:"varint,4,opt,name=deviceid" json:"deviceid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CEmbeddedClient_Token) Reset() {
	*x = CEmbeddedClient_Token{}
	mi := &file_steammessages_useraccount_steamclient_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CEmbeddedClient_Token) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CEmbeddedClient_Token) ProtoMessage() {}

func (x *CEmbeddedClient_Token) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_useraccount_steamclient_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CEmbeddedClient_Token.ProtoReflect.Descriptor instead.
func (*CEmbeddedClient_Token) Descriptor() ([]byte, []int) {
	return file_steammessages_useraccount_steamclient_proto_rawDescGZIP(), []int{23}
}

func (x *CEmbeddedClient_Token) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CEmbeddedClient_Token) GetClientToken() []byte {
	if x != nil {
		return x.ClientToken
	}
	return nil
}

func (x *CEmbeddedClient_Token) GetExpiry() uint32 {
	if x != nil && x.Expiry != nil {
		return *x.Expiry
	}
	return 0
}

func (x *CEmbeddedClient_Token) GetDeviceid() uint32 {
	if x != nil && x.Deviceid != nil {
		return *x.Deviceid
	}
	return 0
}

type CEmbeddedClient_AuthorizeDevice_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Result        *uint32                `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	Token         *CEmbeddedClient_Token `protobuf:"bytes,2,opt,name=token" json:"token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CEmbeddedClient_AuthorizeDevice_Response) Reset() {
	*x = CEmbeddedClient_AuthorizeDevice_Response{}
	mi := &file_steammessages_useraccount_steamclient_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CEmbeddedClient_AuthorizeDevice_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CEmbeddedClient_AuthorizeDevice_Response) ProtoMessage() {}

func (x *CEmbeddedClient_AuthorizeDevice_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_useraccount_steamclient_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CEmbeddedClient_AuthorizeDevice_Response.ProtoReflect.Descriptor instead.
func (*CEmbeddedClient_AuthorizeDevice_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_useraccount_steamclient_proto_rawDescGZIP(), []int{24}
}

func (x *CEmbeddedClient_AuthorizeDevice_Response) GetResult() uint32 {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return 0
}

func (x *CEmbeddedClient_AuthorizeDevice_Response) GetToken() *CEmbeddedClient_Token {
	if x != nil {
		return x.Token
	}
	return nil
}

type CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails struct {
	state                       protoimpl.MessageState `protogen:"open.v1"`
	Promotionid                 *uint32                `protobuf:"varint,1,opt,name=promotionid" json:"promotionid,omitempty"`
	PromotionDescription        *string                `protobuf:"bytes,2,opt,name=promotion_description,json=promotionDescription" json:"promotion_description,omitempty"`
	MinimumCartAmount           *int64                 `protobuf:"varint,3,opt,name=minimum_cart_amount,json=minimumCartAmount" json:"minimum_cart_amount,omitempty"`
	MinimumCartAmountForDisplay *int64                 `protobuf:"varint,4,opt,name=minimum_cart_amount_for_display,json=minimumCartAmountForDisplay" json:"minimum_cart_amount_for_display,omitempty"`
	DiscountAmount              *int64                 `protobuf:"varint,5,opt,name=discount_amount,json=discountAmount" json:"discount_amount,omitempty"`
	CurrencyCode                *int32                 `protobuf:"varint,6,opt,name=currency_code,json=currencyCode" json:"currency_code,omitempty"`
	AvailableUseCount           *int32                 `protobuf:"varint,7,opt,name=available_use_count,json=availableUseCount" json:"available_use_count,omitempty"`
	PromotionalDiscountType     *int32                 `protobuf:"varint,8,opt,name=promotional_discount_type,json=promotionalDiscountType" json:"promotional_discount_type,omitempty"`
	LoyaltyRewardId             *int32                 `protobuf:"varint,9,opt,name=loyalty_reward_id,json=loyaltyRewardId" json:"loyalty_reward_id,omitempty"`
	LocalizedNameToken          *string                `protobuf:"bytes,10,opt,name=localized_name_token,json=localizedNameToken" json:"localized_name_token,omitempty"`
	MaxUseCount                 *int32                 `protobuf:"varint,11,opt,name=max_use_count,json=maxUseCount" json:"max_use_count,omitempty"`
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

func (x *CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails) Reset() {
	*x = CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails{}
	mi := &file_steammessages_useraccount_steamclient_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails) ProtoMessage() {
}

func (x *CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_useraccount_steamclient_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails.ProtoReflect.Descriptor instead.
func (*CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails) Descriptor() ([]byte, []int) {
	return file_steammessages_useraccount_steamclient_proto_rawDescGZIP(), []int{1, 0}
}

func (x *CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails) GetPromotionid() uint32 {
	if x != nil && x.Promotionid != nil {
		return *x.Promotionid
	}
	return 0
}

func (x *CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails) GetPromotionDescription() string {
	if x != nil && x.PromotionDescription != nil {
		return *x.PromotionDescription
	}
	return ""
}

func (x *CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails) GetMinimumCartAmount() int64 {
	if x != nil && x.MinimumCartAmount != nil {
		return *x.MinimumCartAmount
	}
	return 0
}

func (x *CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails) GetMinimumCartAmountForDisplay() int64 {
	if x != nil && x.MinimumCartAmountForDisplay != nil {
		return *x.MinimumCartAmountForDisplay
	}
	return 0
}

func (x *CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails) GetDiscountAmount() int64 {
	if x != nil && x.DiscountAmount != nil {
		return *x.DiscountAmount
	}
	return 0
}

func (x *CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails) GetCurrencyCode() int32 {
	if x != nil && x.CurrencyCode != nil {
		return *x.CurrencyCode
	}
	return 0
}

func (x *CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails) GetAvailableUseCount() int32 {
	if x != nil && x.AvailableUseCount != nil {
		return *x.AvailableUseCount
	}
	return 0
}

func (x *CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails) GetPromotionalDiscountType() int32 {
	if x != nil && x.PromotionalDiscountType != nil {
		return *x.PromotionalDiscountType
	}
	return 0
}

func (x *CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails) GetLoyaltyRewardId() int32 {
	if x != nil && x.LoyaltyRewardId != nil {
		return *x.LoyaltyRewardId
	}
	return 0
}

func (x *CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails) GetLocalizedNameToken() string {
	if x != nil && x.LocalizedNameToken != nil {
		return *x.LocalizedNameToken
	}
	return ""
}

func (x *CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails) GetMaxUseCount() int32 {
	if x != nil && x.MaxUseCount != nil {
		return *x.MaxUseCount
	}
	return 0
}

var File_steammessages_useraccount_steamclient_proto protoreflect.FileDescriptor

const file_steammessages_useraccount_steamclient_proto_rawDesc = "" +
	"\n" +
	"+steammessages_useraccount.steamclient.proto\x1a\x18steammessages_base.proto\x1a,steammessages_unified_base.steamclient.proto\"]\n" +
	"8CUserAccount_GetAvailableValveDiscountPromotions_Request\x12!\n" +
	"\fcountry_code\x18\x01 \x01(\tR\vcountryCode\"\xe0\x05\n" +
	"9CUserAccount_GetAvailableValveDiscountPromotions_Response\x12x\n" +
	"\n" +
	"promotions\x18\x01 \x03(\v2X.CUserAccount_GetAvailableValveDiscountPromotions_Response.ValveDiscountPromotionDetailsR\n" +
	"promotions\x1a\xa8\x04\n" +
	"\x1dValveDiscountPromotionDetails\x12 \n" +
	"\vpromotionid\x18\x01 \x01(\rR\vpromotionid\x123\n" +
	"\x15promotion_description\x18\x02 \x01(\tR\x14promotionDescription\x12.\n" +
	"\x13minimum_cart_amount\x18\x03 \x01(\x03R\x11minimumCartAmount\x12D\n" +
	"\x1fminimum_cart_amount_for_display\x18\x04 \x01(\x03R\x1bminimumCartAmountForDisplay\x12'\n" +
	"\x0fdiscount_amount\x18\x05 \x01(\x03R\x0ediscountAmount\x12#\n" +
	"\rcurrency_code\x18\x06 \x01(\x05R\fcurrencyCode\x12.\n" +
	"\x13available_use_count\x18\a \x01(\x05R\x11availableUseCount\x12:\n" +
	"\x19promotional_discount_type\x18\b \x01(\x05R\x17promotionalDiscountType\x12*\n" +
	"\x11loyalty_reward_id\x18\t \x01(\x05R\x0floyaltyRewardId\x120\n" +
	"\x14localized_name_token\x18\n" +
	" \x01(\tR\x12localizedNameToken\x12\"\n" +
	"\rmax_use_count\x18\v \x01(\x05R\vmaxUseCount\"\xc6\x01\n" +
	"+CUserAccount_GetClientWalletDetails_Request\x123\n" +
	"\x16include_balance_in_usd\x18\x01 \x01(\bR\x13includeBalanceInUsd\x12&\n" +
	"\rwallet_region\x18\x02 \x01(\x05:\x011R\fwalletRegion\x12:\n" +
	"\x19include_formatted_balance\x18\x03 \x01(\bR\x17includeFormattedBalance\"\x8d\a\n" +
	"&CUserAccount_GetWalletDetails_Response\x12\x1d\n" +
	"\n" +
	"has_wallet\x18\x01 \x01(\bR\thasWallet\x12*\n" +
	"\x11user_country_code\x18\x02 \x01(\tR\x0fuserCountryCode\x12.\n" +
	"\x13wallet_country_code\x18\x03 \x01(\tR\x11walletCountryCode\x12!\n" +
	"\fwallet_state\x18\x04 \x01(\tR\vwalletState\x12\x18\n" +
	"\abalance\x18\x05 \x01(\x03R\abalance\x12'\n" +
	"\x0fdelayed_balance\x18\x06 \x01(\x03R\x0edelayedBalance\x12#\n" +
	"\rcurrency_code\x18\a \x01(\x05R\fcurrencyCode\x12/\n" +
	"\x14time_most_recent_txn\x18\b \x01(\rR\x11timeMostRecentTxn\x12*\n" +
	"\x11most_recent_txnid\x18\t \x01(\x04R\x0fmostRecentTxnid\x12$\n" +
	"\x0ebalance_in_usd\x18\n" +
	" \x01(\x03R\fbalanceInUsd\x123\n" +
	"\x16delayed_balance_in_usd\x18\v \x01(\x03R\x13delayedBalanceInUsd\x12<\n" +
	"\x1bhas_wallet_in_other_regions\x18\f \x01(\bR\x17hasWalletInOtherRegions\x12#\n" +
	"\rother_regions\x18\r \x03(\x05R\fotherRegions\x12+\n" +
	"\x11formatted_balance\x18\x0e \x01(\tR\x10formattedBalance\x12:\n" +
	"\x19formatted_delayed_balance\x18\x0f \x01(\tR\x17formattedDelayedBalance\x12J\n" +
	"\"delayed_balance_available_min_time\x18\x10 \x01(\x05R\x1edelayedBalanceAvailableMinTime\x12J\n" +
	"\"delayed_balance_available_max_time\x18\x11 \x01(\x05R\x1edelayedBalanceAvailableMaxTime\x12A\n" +
	"\x1ddelayed_balance_newest_source\x18\x12 \x01(\x05R\x1adelayedBalanceNewestSource\"+\n" +
	")CUserAccount_GetAccountLinkStatus_Request\"\xb3\x01\n" +
	"*CUserAccount_GetAccountLinkStatus_Response\x12\x12\n" +
	"\x04pwid\x18\x01 \x01(\rR\x04pwid\x123\n" +
	"\x15identity_verification\x18\x02 \x01(\rR\x14identityVerification\x12<\n" +
	"\x1aperformed_age_verification\x18\x03 \x01(\bR\x18performedAgeVerification\"@\n" +
	"(CUserAccount_CancelLicenseForApp_Request\x12\x14\n" +
	"\x05appid\x18\x01 \x01(\rR\x05appid\"+\n" +
	")CUserAccount_CancelLicenseForApp_Response\"?\n" +
	"#CUserAccount_GetUserCountry_Request\x12\x18\n" +
	"\asteamid\x18\x01 \x01(\x06R\asteamid\"@\n" +
	"$CUserAccount_GetUserCountry_Response\x12\x18\n" +
	"\acountry\x18\x01 \x01(\tR\acountry\"\x9b\x01\n" +
	",CUserAccount_CreateFriendInviteToken_Request\x12!\n" +
	"\finvite_limit\x18\x01 \x01(\rR\vinviteLimit\x12'\n" +
	"\x0finvite_duration\x18\x02 \x01(\rR\x0einviteDuration\x12\x1f\n" +
	"\vinvite_note\x18\x03 \x01(\tR\n" +
	"inviteNote\"\xd7\x01\n" +
	"-CUserAccount_CreateFriendInviteToken_Response\x12!\n" +
	"\finvite_token\x18\x01 \x01(\tR\vinviteToken\x12!\n" +
	"\finvite_limit\x18\x02 \x01(\x04R\vinviteLimit\x12'\n" +
	"\x0finvite_duration\x18\x03 \x01(\x04R\x0einviteDuration\x12!\n" +
	"\ftime_created\x18\x04 \x01(\aR\vtimeCreated\x12\x14\n" +
	"\x05valid\x18\x05 \x01(\bR\x05valid\",\n" +
	"*CUserAccount_GetFriendInviteTokens_Request\"u\n" +
	"+CUserAccount_GetFriendInviteTokens_Response\x12F\n" +
	"\x06tokens\x18\x01 \x03(\v2..CUserAccount_CreateFriendInviteToken_ResponseR\x06tokens\"i\n" +
	"*CUserAccount_ViewFriendInviteToken_Request\x12\x18\n" +
	"\asteamid\x18\x01 \x01(\x06R\asteamid\x12!\n" +
	"\finvite_token\x18\x02 \x01(\tR\vinviteToken\"\x86\x01\n" +
	"+CUserAccount_ViewFriendInviteToken_Response\x12\x14\n" +
	"\x05valid\x18\x01 \x01(\bR\x05valid\x12\x18\n" +
	"\asteamid\x18\x02 \x01(\x04R\asteamid\x12'\n" +
	"\x0finvite_duration\x18\x03 \x01(\x04R\x0einviteDuration\"k\n" +
	",CUserAccount_RedeemFriendInviteToken_Request\x12\x18\n" +
	"\asteamid\x18\x01 \x01(\x06R\asteamid\x12!\n" +
	"\finvite_token\x18\x02 \x01(\tR\vinviteToken\"/\n" +
	"-CUserAccount_RedeemFriendInviteToken_Response\"Q\n" +
	",CUserAccount_RevokeFriendInviteToken_Request\x12!\n" +
	"\finvite_token\x18\x01 \x01(\tR\vinviteToken\"/\n" +
	"-CUserAccount_RevokeFriendInviteToken_Response\"J\n" +
	"'CUserAccount_RegisterCompatTool_Request\x12\x1f\n" +
	"\vcompat_tool\x18\x01 \x01(\rR\n" +
	"compatTool\"*\n" +
	"(CUserAccount_RegisterCompatTool_Response\"\x9d\x01\n" +
	".CEmbeddedClient_AuthorizeCurrentDevice_Request\x12\x18\n" +
	"\asteamid\x18\x01 \x01(\x06R\asteamid\x12\x14\n" +
	"\x05appid\x18\x02 \x01(\rR\x05appid\x12\x1f\n" +
	"\vdevice_info\x18\x03 \x01(\tR\n" +
	"deviceInfo\x12\x1a\n" +
	"\bdeviceid\x18\x04 \x01(\rR\bdeviceid\"\x88\x01\n" +
	"\x15CEmbeddedClient_Token\x12\x18\n" +
	"\asteamid\x18\x01 \x01(\x06R\asteamid\x12!\n" +
	"\fclient_token\x18\x02 \x01(\fR\vclientToken\x12\x16\n" +
	"\x06expiry\x18\x03 \x01(\rR\x06expiry\x12\x1a\n" +
	"\bdeviceid\x18\x04 \x01(\rR\bdeviceid\"p\n" +
	"(CEmbeddedClient_AuthorizeDevice_Response\x12\x16\n" +
	"\x06result\x18\x01 \x01(\rR\x06result\x12,\n" +
	"\x05token\x18\x02 \x01(\v2\x16.CEmbeddedClient_TokenR\x05token2\x9c\n" +
	"\n" +
	"\vUserAccount\x12\x9c\x01\n" +
	"#GetAvailableValveDiscountPromotions\x129.CUserAccount_GetAvailableValveDiscountPromotions_Request\x1a:.CUserAccount_GetAvailableValveDiscountPromotions_Response\x12o\n" +
	"\x16GetClientWalletDetails\x12,.CUserAccount_GetClientWalletDetails_Request\x1a'.CUserAccount_GetWalletDetails_Response\x12o\n" +
	"\x14GetAccountLinkStatus\x12*.CUserAccount_GetAccountLinkStatus_Request\x1a+.CUserAccount_GetAccountLinkStatus_Response\x12l\n" +
	"\x13CancelLicenseForApp\x12).CUserAccount_CancelLicenseForApp_Request\x1a*.CUserAccount_CancelLicenseForApp_Response\x12]\n" +
	"\x0eGetUserCountry\x12$.CUserAccount_GetUserCountry_Request\x1a%.CUserAccount_GetUserCountry_Response\x12x\n" +
	"\x17CreateFriendInviteToken\x12-.CUserAccount_CreateFriendInviteToken_Request\x1a..CUserAccount_CreateFriendInviteToken_Response\x12r\n" +
	"\x15GetFriendInviteTokens\x12+.CUserAccount_GetFriendInviteTokens_Request\x1a,.CUserAccount_GetFriendInviteTokens_Response\x12r\n" +
	"\x15ViewFriendInviteToken\x12+.CUserAccount_ViewFriendInviteToken_Request\x1a,.CUserAccount_ViewFriendInviteToken_Response\x12x\n" +
	"\x17RedeemFriendInviteToken\x12-.CUserAccount_RedeemFriendInviteToken_Request\x1a..CUserAccount_RedeemFriendInviteToken_Response\x12x\n" +
	"\x17RevokeFriendInviteToken\x12-.CUserAccount_RevokeFriendInviteToken_Request\x1a..CUserAccount_RevokeFriendInviteToken_Response\x12i\n" +
	"\x12RegisterCompatTool\x12(.CUserAccount_RegisterCompatTool_Request\x1a).CUserAccount_RegisterCompatTool_Response2\x86\x01\n" +
	"\x0eEmbeddedClient\x12t\n" +
	"\x16AuthorizeCurrentDevice\x12/.CEmbeddedClient_AuthorizeCurrentDevice_Request\x1a).CEmbeddedClient_AuthorizeDevice_ResponseB\x03\x80\x01\x01"

var (
	file_steammessages_useraccount_steamclient_proto_rawDescOnce sync.Once
	file_steammessages_useraccount_steamclient_proto_rawDescData []byte
)

func file_steammessages_useraccount_steamclient_proto_rawDescGZIP() []byte {
	file_steammessages_useraccount_steamclient_proto_rawDescOnce.Do(func() {
		file_steammessages_useraccount_steamclient_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_steammessages_useraccount_steamclient_proto_rawDesc), len(file_steammessages_useraccount_steamclient_proto_rawDesc)))
	})
	return file_steammessages_useraccount_steamclient_proto_rawDescData
}

var file_steammessages_useraccount_steamclient_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_steammessages_useraccount_steamclient_proto_goTypes = []any{
	(*CUserAccount_GetAvailableValveDiscountPromotions_Request)(nil),                                // 0: CUserAccount_GetAvailableValveDiscountPromotions_Request
	(*CUserAccount_GetAvailableValveDiscountPromotions_Response)(nil),                               // 1: CUserAccount_GetAvailableValveDiscountPromotions_Response
	(*CUserAccount_GetClientWalletDetails_Request)(nil),                                             // 2: CUserAccount_GetClientWalletDetails_Request
	(*CUserAccount_GetWalletDetails_Response)(nil),                                                  // 3: CUserAccount_GetWalletDetails_Response
	(*CUserAccount_GetAccountLinkStatus_Request)(nil),                                               // 4: CUserAccount_GetAccountLinkStatus_Request
	(*CUserAccount_GetAccountLinkStatus_Response)(nil),                                              // 5: CUserAccount_GetAccountLinkStatus_Response
	(*CUserAccount_CancelLicenseForApp_Request)(nil),                                                // 6: CUserAccount_CancelLicenseForApp_Request
	(*CUserAccount_CancelLicenseForApp_Response)(nil),                                               // 7: CUserAccount_CancelLicenseForApp_Response
	(*CUserAccount_GetUserCountry_Request)(nil),                                                     // 8: CUserAccount_GetUserCountry_Request
	(*CUserAccount_GetUserCountry_Response)(nil),                                                    // 9: CUserAccount_GetUserCountry_Response
	(*CUserAccount_CreateFriendInviteToken_Request)(nil),                                            // 10: CUserAccount_CreateFriendInviteToken_Request
	(*CUserAccount_CreateFriendInviteToken_Response)(nil),                                           // 11: CUserAccount_CreateFriendInviteToken_Response
	(*CUserAccount_GetFriendInviteTokens_Request)(nil),                                              // 12: CUserAccount_GetFriendInviteTokens_Request
	(*CUserAccount_GetFriendInviteTokens_Response)(nil),                                             // 13: CUserAccount_GetFriendInviteTokens_Response
	(*CUserAccount_ViewFriendInviteToken_Request)(nil),                                              // 14: CUserAccount_ViewFriendInviteToken_Request
	(*CUserAccount_ViewFriendInviteToken_Response)(nil),                                             // 15: CUserAccount_ViewFriendInviteToken_Response
	(*CUserAccount_RedeemFriendInviteToken_Request)(nil),                                            // 16: CUserAccount_RedeemFriendInviteToken_Request
	(*CUserAccount_RedeemFriendInviteToken_Response)(nil),                                           // 17: CUserAccount_RedeemFriendInviteToken_Response
	(*CUserAccount_RevokeFriendInviteToken_Request)(nil),                                            // 18: CUserAccount_RevokeFriendInviteToken_Request
	(*CUserAccount_RevokeFriendInviteToken_Response)(nil),                                           // 19: CUserAccount_RevokeFriendInviteToken_Response
	(*CUserAccount_RegisterCompatTool_Request)(nil),                                                 // 20: CUserAccount_RegisterCompatTool_Request
	(*CUserAccount_RegisterCompatTool_Response)(nil),                                                // 21: CUserAccount_RegisterCompatTool_Response
	(*CEmbeddedClient_AuthorizeCurrentDevice_Request)(nil),                                          // 22: CEmbeddedClient_AuthorizeCurrentDevice_Request
	(*CEmbeddedClient_Token)(nil),                                                                   // 23: CEmbeddedClient_Token
	(*CEmbeddedClient_AuthorizeDevice_Response)(nil),                                                // 24: CEmbeddedClient_AuthorizeDevice_Response
	(*CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails)(nil), // 25: CUserAccount_GetAvailableValveDiscountPromotions_Response.ValveDiscountPromotionDetails
}
var file_steammessages_useraccount_steamclient_proto_depIdxs = []int32{
	25, // 0: CUserAccount_GetAvailableValveDiscountPromotions_Response.promotions:type_name -> CUserAccount_GetAvailableValveDiscountPromotions_Response.ValveDiscountPromotionDetails
	11, // 1: CUserAccount_GetFriendInviteTokens_Response.tokens:type_name -> CUserAccount_CreateFriendInviteToken_Response
	23, // 2: CEmbeddedClient_AuthorizeDevice_Response.token:type_name -> CEmbeddedClient_Token
	0,  // 3: UserAccount.GetAvailableValveDiscountPromotions:input_type -> CUserAccount_GetAvailableValveDiscountPromotions_Request
	2,  // 4: UserAccount.GetClientWalletDetails:input_type -> CUserAccount_GetClientWalletDetails_Request
	4,  // 5: UserAccount.GetAccountLinkStatus:input_type -> CUserAccount_GetAccountLinkStatus_Request
	6,  // 6: UserAccount.CancelLicenseForApp:input_type -> CUserAccount_CancelLicenseForApp_Request
	8,  // 7: UserAccount.GetUserCountry:input_type -> CUserAccount_GetUserCountry_Request
	10, // 8: UserAccount.CreateFriendInviteToken:input_type -> CUserAccount_CreateFriendInviteToken_Request
	12, // 9: UserAccount.GetFriendInviteTokens:input_type -> CUserAccount_GetFriendInviteTokens_Request
	14, // 10: UserAccount.ViewFriendInviteToken:input_type -> CUserAccount_ViewFriendInviteToken_Request
	16, // 11: UserAccount.RedeemFriendInviteToken:input_type -> CUserAccount_RedeemFriendInviteToken_Request
	18, // 12: UserAccount.RevokeFriendInviteToken:input_type -> CUserAccount_RevokeFriendInviteToken_Request
	20, // 13: UserAccount.RegisterCompatTool:input_type -> CUserAccount_RegisterCompatTool_Request
	22, // 14: EmbeddedClient.AuthorizeCurrentDevice:input_type -> CEmbeddedClient_AuthorizeCurrentDevice_Request
	1,  // 15: UserAccount.GetAvailableValveDiscountPromotions:output_type -> CUserAccount_GetAvailableValveDiscountPromotions_Response
	3,  // 16: UserAccount.GetClientWalletDetails:output_type -> CUserAccount_GetWalletDetails_Response
	5,  // 17: UserAccount.GetAccountLinkStatus:output_type -> CUserAccount_GetAccountLinkStatus_Response
	7,  // 18: UserAccount.CancelLicenseForApp:output_type -> CUserAccount_CancelLicenseForApp_Response
	9,  // 19: UserAccount.GetUserCountry:output_type -> CUserAccount_GetUserCountry_Response
	11, // 20: UserAccount.CreateFriendInviteToken:output_type -> CUserAccount_CreateFriendInviteToken_Response
	13, // 21: UserAccount.GetFriendInviteTokens:output_type -> CUserAccount_GetFriendInviteTokens_Response
	15, // 22: UserAccount.ViewFriendInviteToken:output_type -> CUserAccount_ViewFriendInviteToken_Response
	17, // 23: UserAccount.RedeemFriendInviteToken:output_type -> CUserAccount_RedeemFriendInviteToken_Response
	19, // 24: UserAccount.RevokeFriendInviteToken:output_type -> CUserAccount_RevokeFriendInviteToken_Response
	21, // 25: UserAccount.RegisterCompatTool:output_type -> CUserAccount_RegisterCompatTool_Response
	24, // 26: EmbeddedClient.AuthorizeCurrentDevice:output_type -> CEmbeddedClient_AuthorizeDevice_Response
	15, // [15:27] is the sub-list for method output_type
	3,  // [3:15] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_steammessages_useraccount_steamclient_proto_init() }
func file_steammessages_useraccount_steamclient_proto_init() {
	if File_steammessages_useraccount_steamclient_proto != nil {
		return
	}
	file_steammessages_base_proto_init()
	file_steammessages_unified_base_steamclient_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_steammessages_useraccount_steamclient_proto_rawDesc), len(file_steammessages_useraccount_steamclient_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_steammessages_useraccount_steamclient_proto_goTypes,
		DependencyIndexes: file_steammessages_useraccount_steamclient_proto_depIdxs,
		MessageInfos:      file_steammessages_useraccount_steamclient_proto_msgTypes,
	}.Build()
	File_steammessages_useraccount_steamclient_proto = out.File
	file_steammessages_useraccount_steamclient_proto_goTypes = nil
	file_steammessages_useraccount_steamclient_proto_depIdxs = nil
}
