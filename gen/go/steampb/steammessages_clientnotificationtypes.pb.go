// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v6.32.0
// source: steammessages_clientnotificationtypes.proto

package steampb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EClientNotificationType int32

const (
	EClientNotificationType_k_EClientNotificationType_Invalid                         EClientNotificationType = 0
	EClientNotificationType_k_EClientNotificationType_DownloadCompleted               EClientNotificationType = 1
	EClientNotificationType_k_EClientNotificationType_FriendInvite                    EClientNotificationType = 2
	EClientNotificationType_k_EClientNotificationType_FriendInGame                    EClientNotificationType = 3
	EClientNotificationType_k_EClientNotificationType_FriendOnline                    EClientNotificationType = 4
	EClientNotificationType_k_EClientNotificationType_Achievement                     EClientNotificationType = 5
	EClientNotificationType_k_EClientNotificationType_LowBattery                      EClientNotificationType = 6
	EClientNotificationType_k_EClientNotificationType_SystemUpdate                    EClientNotificationType = 7
	EClientNotificationType_k_EClientNotificationType_FriendMessage                   EClientNotificationType = 8
	EClientNotificationType_k_EClientNotificationType_GroupChatMessage                EClientNotificationType = 9
	EClientNotificationType_k_EClientNotificationType_FriendInviteRollup              EClientNotificationType = 10
	EClientNotificationType_k_EClientNotificationType_FamilySharingStopPlaying        EClientNotificationType = 12
	EClientNotificationType_k_EClientNotificationType_Screenshot                      EClientNotificationType = 14
	EClientNotificationType_k_EClientNotificationType_CloudSyncFailure                EClientNotificationType = 15
	EClientNotificationType_k_EClientNotificationType_CloudSyncConflict               EClientNotificationType = 16
	EClientNotificationType_k_EClientNotificationType_IncomingVoiceChat               EClientNotificationType = 17
	EClientNotificationType_k_EClientNotificationType_ClaimSteamDeckRewards           EClientNotificationType = 18
	EClientNotificationType_k_EClientNotificationType_GiftReceived                    EClientNotificationType = 19
	EClientNotificationType_k_EClientNotificationType_ItemAnnouncement                EClientNotificationType = 20
	EClientNotificationType_k_EClientNotificationType_HardwareSurvey                  EClientNotificationType = 21
	EClientNotificationType_k_EClientNotificationType_LowDiskSpace                    EClientNotificationType = 22
	EClientNotificationType_k_EClientNotificationType_BatteryTemperature              EClientNotificationType = 23
	EClientNotificationType_k_EClientNotificationType_DockUnsupportedFirmware         EClientNotificationType = 24
	EClientNotificationType_k_EClientNotificationType_PeerContentUpload               EClientNotificationType = 25
	EClientNotificationType_k_EClientNotificationType_CannotReadControllerGuideButton EClientNotificationType = 26
	EClientNotificationType_k_EClientNotificationType_Comment                         EClientNotificationType = 27
	EClientNotificationType_k_EClientNotificationType_Wishlist                        EClientNotificationType = 28
	EClientNotificationType_k_EClientNotificationType_TradeOffer                      EClientNotificationType = 29
	EClientNotificationType_k_EClientNotificationType_AsyncGame                       EClientNotificationType = 30
	EClientNotificationType_k_EClientNotificationType_General                         EClientNotificationType = 31
	EClientNotificationType_k_EClientNotificationType_HelpRequest                     EClientNotificationType = 32
	EClientNotificationType_k_EClientNotificationType_OverlaySplashScreen             EClientNotificationType = 33
	EClientNotificationType_k_EClientNotificationType_BroadcastAvailableToWatch       EClientNotificationType = 34
	EClientNotificationType_k_EClientNotificationType_TimedTrialRemaining             EClientNotificationType = 35
	EClientNotificationType_k_EClientNotificationType_LoginRefresh                    EClientNotificationType = 36
	EClientNotificationType_k_EClientNotificationType_MajorSale                       EClientNotificationType = 37
	EClientNotificationType_k_EClientNotificationType_TimerExpired                    EClientNotificationType = 38
	EClientNotificationType_k_EClientNotificationType_ModeratorMsg                    EClientNotificationType = 39
	EClientNotificationType_k_EClientNotificationType_SteamInputActionSetChanged      EClientNotificationType = 40
	EClientNotificationType_k_EClientNotificationType_RemoteClientConnection          EClientNotificationType = 41
	EClientNotificationType_k_EClientNotificationType_RemoteClientStartStream         EClientNotificationType = 42
	EClientNotificationType_k_EClientNotificationType_StreamingClientConnection       EClientNotificationType = 43
	EClientNotificationType_k_EClientNotificationType_FamilyInvite                    EClientNotificationType = 44
	EClientNotificationType_k_EClientNotificationType_PlaytimeWarning                 EClientNotificationType = 45
	EClientNotificationType_k_EClientNotificationType_FamilyPurchaseRequest           EClientNotificationType = 46
	EClientNotificationType_k_EClientNotificationType_FamilyPurchaseRequestResponse   EClientNotificationType = 47
	EClientNotificationType_k_EClientNotificationType_ParentalFeatureRequest          EClientNotificationType = 48
	EClientNotificationType_k_EClientNotificationType_ParentalPlaytimeRequest         EClientNotificationType = 49
	EClientNotificationType_k_EClientNotificationType_GameRecordingError              EClientNotificationType = 50
	EClientNotificationType_k_EClientNotificationType_ParentalFeatureResponse         EClientNotificationType = 51
	EClientNotificationType_k_EClientNotificationType_ParentalPlaytimeResponse        EClientNotificationType = 52
	EClientNotificationType_k_EClientNotificationType_RequestedGameAdded              EClientNotificationType = 53
	EClientNotificationType_k_EClientNotificationType_ClipDownloaded                  EClientNotificationType = 54
	EClientNotificationType_k_EClientNotificationType_GameRecordingStart              EClientNotificationType = 55
	EClientNotificationType_k_EClientNotificationType_GameRecordingStop               EClientNotificationType = 56
	EClientNotificationType_k_EClientNotificationType_GameRecordingUserMarkerAdded    EClientNotificationType = 57
	EClientNotificationType_k_EClientNotificationType_GameRecordingInstantClip        EClientNotificationType = 58
	EClientNotificationType_k_EClientNotificationType_PlaytestInvite                  EClientNotificationType = 59
	EClientNotificationType_k_EClientNotificationType_TradeReversal                   EClientNotificationType = 60
)

// Enum value maps for EClientNotificationType.
var (
	EClientNotificationType_name = map[int32]string{
		0:  "k_EClientNotificationType_Invalid",
		1:  "k_EClientNotificationType_DownloadCompleted",
		2:  "k_EClientNotificationType_FriendInvite",
		3:  "k_EClientNotificationType_FriendInGame",
		4:  "k_EClientNotificationType_FriendOnline",
		5:  "k_EClientNotificationType_Achievement",
		6:  "k_EClientNotificationType_LowBattery",
		7:  "k_EClientNotificationType_SystemUpdate",
		8:  "k_EClientNotificationType_FriendMessage",
		9:  "k_EClientNotificationType_GroupChatMessage",
		10: "k_EClientNotificationType_FriendInviteRollup",
		12: "k_EClientNotificationType_FamilySharingStopPlaying",
		14: "k_EClientNotificationType_Screenshot",
		15: "k_EClientNotificationType_CloudSyncFailure",
		16: "k_EClientNotificationType_CloudSyncConflict",
		17: "k_EClientNotificationType_IncomingVoiceChat",
		18: "k_EClientNotificationType_ClaimSteamDeckRewards",
		19: "k_EClientNotificationType_GiftReceived",
		20: "k_EClientNotificationType_ItemAnnouncement",
		21: "k_EClientNotificationType_HardwareSurvey",
		22: "k_EClientNotificationType_LowDiskSpace",
		23: "k_EClientNotificationType_BatteryTemperature",
		24: "k_EClientNotificationType_DockUnsupportedFirmware",
		25: "k_EClientNotificationType_PeerContentUpload",
		26: "k_EClientNotificationType_CannotReadControllerGuideButton",
		27: "k_EClientNotificationType_Comment",
		28: "k_EClientNotificationType_Wishlist",
		29: "k_EClientNotificationType_TradeOffer",
		30: "k_EClientNotificationType_AsyncGame",
		31: "k_EClientNotificationType_General",
		32: "k_EClientNotificationType_HelpRequest",
		33: "k_EClientNotificationType_OverlaySplashScreen",
		34: "k_EClientNotificationType_BroadcastAvailableToWatch",
		35: "k_EClientNotificationType_TimedTrialRemaining",
		36: "k_EClientNotificationType_LoginRefresh",
		37: "k_EClientNotificationType_MajorSale",
		38: "k_EClientNotificationType_TimerExpired",
		39: "k_EClientNotificationType_ModeratorMsg",
		40: "k_EClientNotificationType_SteamInputActionSetChanged",
		41: "k_EClientNotificationType_RemoteClientConnection",
		42: "k_EClientNotificationType_RemoteClientStartStream",
		43: "k_EClientNotificationType_StreamingClientConnection",
		44: "k_EClientNotificationType_FamilyInvite",
		45: "k_EClientNotificationType_PlaytimeWarning",
		46: "k_EClientNotificationType_FamilyPurchaseRequest",
		47: "k_EClientNotificationType_FamilyPurchaseRequestResponse",
		48: "k_EClientNotificationType_ParentalFeatureRequest",
		49: "k_EClientNotificationType_ParentalPlaytimeRequest",
		50: "k_EClientNotificationType_GameRecordingError",
		51: "k_EClientNotificationType_ParentalFeatureResponse",
		52: "k_EClientNotificationType_ParentalPlaytimeResponse",
		53: "k_EClientNotificationType_RequestedGameAdded",
		54: "k_EClientNotificationType_ClipDownloaded",
		55: "k_EClientNotificationType_GameRecordingStart",
		56: "k_EClientNotificationType_GameRecordingStop",
		57: "k_EClientNotificationType_GameRecordingUserMarkerAdded",
		58: "k_EClientNotificationType_GameRecordingInstantClip",
		59: "k_EClientNotificationType_PlaytestInvite",
		60: "k_EClientNotificationType_TradeReversal",
	}
	EClientNotificationType_value = map[string]int32{
		"k_EClientNotificationType_Invalid":                         0,
		"k_EClientNotificationType_DownloadCompleted":               1,
		"k_EClientNotificationType_FriendInvite":                    2,
		"k_EClientNotificationType_FriendInGame":                    3,
		"k_EClientNotificationType_FriendOnline":                    4,
		"k_EClientNotificationType_Achievement":                     5,
		"k_EClientNotificationType_LowBattery":                      6,
		"k_EClientNotificationType_SystemUpdate":                    7,
		"k_EClientNotificationType_FriendMessage":                   8,
		"k_EClientNotificationType_GroupChatMessage":                9,
		"k_EClientNotificationType_FriendInviteRollup":              10,
		"k_EClientNotificationType_FamilySharingStopPlaying":        12,
		"k_EClientNotificationType_Screenshot":                      14,
		"k_EClientNotificationType_CloudSyncFailure":                15,
		"k_EClientNotificationType_CloudSyncConflict":               16,
		"k_EClientNotificationType_IncomingVoiceChat":               17,
		"k_EClientNotificationType_ClaimSteamDeckRewards":           18,
		"k_EClientNotificationType_GiftReceived":                    19,
		"k_EClientNotificationType_ItemAnnouncement":                20,
		"k_EClientNotificationType_HardwareSurvey":                  21,
		"k_EClientNotificationType_LowDiskSpace":                    22,
		"k_EClientNotificationType_BatteryTemperature":              23,
		"k_EClientNotificationType_DockUnsupportedFirmware":         24,
		"k_EClientNotificationType_PeerContentUpload":               25,
		"k_EClientNotificationType_CannotReadControllerGuideButton": 26,
		"k_EClientNotificationType_Comment":                         27,
		"k_EClientNotificationType_Wishlist":                        28,
		"k_EClientNotificationType_TradeOffer":                      29,
		"k_EClientNotificationType_AsyncGame":                       30,
		"k_EClientNotificationType_General":                         31,
		"k_EClientNotificationType_HelpRequest":                     32,
		"k_EClientNotificationType_OverlaySplashScreen":             33,
		"k_EClientNotificationType_BroadcastAvailableToWatch":       34,
		"k_EClientNotificationType_TimedTrialRemaining":             35,
		"k_EClientNotificationType_LoginRefresh":                    36,
		"k_EClientNotificationType_MajorSale":                       37,
		"k_EClientNotificationType_TimerExpired":                    38,
		"k_EClientNotificationType_ModeratorMsg":                    39,
		"k_EClientNotificationType_SteamInputActionSetChanged":      40,
		"k_EClientNotificationType_RemoteClientConnection":          41,
		"k_EClientNotificationType_RemoteClientStartStream":         42,
		"k_EClientNotificationType_StreamingClientConnection":       43,
		"k_EClientNotificationType_FamilyInvite":                    44,
		"k_EClientNotificationType_PlaytimeWarning":                 45,
		"k_EClientNotificationType_FamilyPurchaseRequest":           46,
		"k_EClientNotificationType_FamilyPurchaseRequestResponse":   47,
		"k_EClientNotificationType_ParentalFeatureRequest":          48,
		"k_EClientNotificationType_ParentalPlaytimeRequest":         49,
		"k_EClientNotificationType_GameRecordingError":              50,
		"k_EClientNotificationType_ParentalFeatureResponse":         51,
		"k_EClientNotificationType_ParentalPlaytimeResponse":        52,
		"k_EClientNotificationType_RequestedGameAdded":              53,
		"k_EClientNotificationType_ClipDownloaded":                  54,
		"k_EClientNotificationType_GameRecordingStart":              55,
		"k_EClientNotificationType_GameRecordingStop":               56,
		"k_EClientNotificationType_GameRecordingUserMarkerAdded":    57,
		"k_EClientNotificationType_GameRecordingInstantClip":        58,
		"k_EClientNotificationType_PlaytestInvite":                  59,
		"k_EClientNotificationType_TradeReversal":                   60,
	}
)

func (x EClientNotificationType) Enum() *EClientNotificationType {
	p := new(EClientNotificationType)
	*p = x
	return p
}

func (x EClientNotificationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EClientNotificationType) Descriptor() protoreflect.EnumDescriptor {
	return file_steammessages_clientnotificationtypes_proto_enumTypes[0].Descriptor()
}

func (EClientNotificationType) Type() protoreflect.EnumType {
	return &file_steammessages_clientnotificationtypes_proto_enumTypes[0]
}

func (x EClientNotificationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EClientNotificationType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EClientNotificationType(num)
	return nil
}

// Deprecated: Use EClientNotificationType.Descriptor instead.
func (EClientNotificationType) EnumDescriptor() ([]byte, []int) {
	return file_steammessages_clientnotificationtypes_proto_rawDescGZIP(), []int{0}
}

type ESystemUpdateNotificationType int32

const (
	ESystemUpdateNotificationType_k_ESystemUpdateNotificationType_Invalid      ESystemUpdateNotificationType = 0
	ESystemUpdateNotificationType_k_ESystemUpdateNotificationType_Available    ESystemUpdateNotificationType = 1
	ESystemUpdateNotificationType_k_ESystemUpdateNotificationType_NeedsRestart ESystemUpdateNotificationType = 2
)

// Enum value maps for ESystemUpdateNotificationType.
var (
	ESystemUpdateNotificationType_name = map[int32]string{
		0: "k_ESystemUpdateNotificationType_Invalid",
		1: "k_ESystemUpdateNotificationType_Available",
		2: "k_ESystemUpdateNotificationType_NeedsRestart",
	}
	ESystemUpdateNotificationType_value = map[string]int32{
		"k_ESystemUpdateNotificationType_Invalid":      0,
		"k_ESystemUpdateNotificationType_Available":    1,
		"k_ESystemUpdateNotificationType_NeedsRestart": 2,
	}
)

func (x ESystemUpdateNotificationType) Enum() *ESystemUpdateNotificationType {
	p := new(ESystemUpdateNotificationType)
	*p = x
	return p
}

func (x ESystemUpdateNotificationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ESystemUpdateNotificationType) Descriptor() protoreflect.EnumDescriptor {
	return file_steammessages_clientnotificationtypes_proto_enumTypes[1].Descriptor()
}

func (ESystemUpdateNotificationType) Type() protoreflect.EnumType {
	return &file_steammessages_clientnotificationtypes_proto_enumTypes[1]
}

func (x ESystemUpdateNotificationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ESystemUpdateNotificationType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ESystemUpdateNotificationType(num)
	return nil
}

// Deprecated: Use ESystemUpdateNotificationType.Descriptor instead.
func (ESystemUpdateNotificationType) EnumDescriptor() ([]byte, []int) {
	return file_steammessages_clientnotificationtypes_proto_rawDescGZIP(), []int{1}
}

type EGameRecordingErrorType int32

const (
	EGameRecordingErrorType_k_EGameRecordingErrorGeneral      EGameRecordingErrorType = 1
	EGameRecordingErrorType_k_EGameRecordingErrorLowDiskSpace EGameRecordingErrorType = 2
)

// Enum value maps for EGameRecordingErrorType.
var (
	EGameRecordingErrorType_name = map[int32]string{
		1: "k_EGameRecordingErrorGeneral",
		2: "k_EGameRecordingErrorLowDiskSpace",
	}
	EGameRecordingErrorType_value = map[string]int32{
		"k_EGameRecordingErrorGeneral":      1,
		"k_EGameRecordingErrorLowDiskSpace": 2,
	}
)

func (x EGameRecordingErrorType) Enum() *EGameRecordingErrorType {
	p := new(EGameRecordingErrorType)
	*p = x
	return p
}

func (x EGameRecordingErrorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EGameRecordingErrorType) Descriptor() protoreflect.EnumDescriptor {
	return file_steammessages_clientnotificationtypes_proto_enumTypes[2].Descriptor()
}

func (EGameRecordingErrorType) Type() protoreflect.EnumType {
	return &file_steammessages_clientnotificationtypes_proto_enumTypes[2]
}

func (x EGameRecordingErrorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EGameRecordingErrorType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EGameRecordingErrorType(num)
	return nil
}

// Deprecated: Use EGameRecordingErrorType.Descriptor instead.
func (EGameRecordingErrorType) EnumDescriptor() ([]byte, []int) {
	return file_steammessages_clientnotificationtypes_proto_rawDescGZIP(), []int{2}
}

type CClientNotificationCloudSyncFailure struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Appid         *uint32                `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CClientNotificationCloudSyncFailure) Reset() {
	*x = CClientNotificationCloudSyncFailure{}
	mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CClientNotificationCloudSyncFailure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientNotificationCloudSyncFailure) ProtoMessage() {}

func (x *CClientNotificationCloudSyncFailure) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientNotificationCloudSyncFailure.ProtoReflect.Descriptor instead.
func (*CClientNotificationCloudSyncFailure) Descriptor() ([]byte, []int) {
	return file_steammessages_clientnotificationtypes_proto_rawDescGZIP(), []int{0}
}

func (x *CClientNotificationCloudSyncFailure) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

type CClientNotificationCloudSyncConflict struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Appid         *uint32                `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CClientNotificationCloudSyncConflict) Reset() {
	*x = CClientNotificationCloudSyncConflict{}
	mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CClientNotificationCloudSyncConflict) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientNotificationCloudSyncConflict) ProtoMessage() {}

func (x *CClientNotificationCloudSyncConflict) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientNotificationCloudSyncConflict.ProtoReflect.Descriptor instead.
func (*CClientNotificationCloudSyncConflict) Descriptor() ([]byte, []int) {
	return file_steammessages_clientnotificationtypes_proto_rawDescGZIP(), []int{1}
}

func (x *CClientNotificationCloudSyncConflict) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

type CClientNotificationScreenshot struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	ScreenshotHandle *string                `protobuf:"bytes,1,opt,name=screenshot_handle,json=screenshotHandle" json:"screenshot_handle,omitempty"`
	Description      *string                `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
	LocalUrl         *string                `protobuf:"bytes,3,opt,name=local_url,json=localUrl" json:"local_url,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CClientNotificationScreenshot) Reset() {
	*x = CClientNotificationScreenshot{}
	mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CClientNotificationScreenshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientNotificationScreenshot) ProtoMessage() {}

func (x *CClientNotificationScreenshot) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientNotificationScreenshot.ProtoReflect.Descriptor instead.
func (*CClientNotificationScreenshot) Descriptor() ([]byte, []int) {
	return file_steammessages_clientnotificationtypes_proto_rawDescGZIP(), []int{2}
}

func (x *CClientNotificationScreenshot) GetScreenshotHandle() string {
	if x != nil && x.ScreenshotHandle != nil {
		return *x.ScreenshotHandle
	}
	return ""
}

func (x *CClientNotificationScreenshot) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *CClientNotificationScreenshot) GetLocalUrl() string {
	if x != nil && x.LocalUrl != nil {
		return *x.LocalUrl
	}
	return ""
}

type CClientNotificationDownloadCompleted struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Appid         *uint32                `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	DlcAppid      *uint32                `protobuf:"varint,2,opt,name=dlc_appid,json=dlcAppid" json:"dlc_appid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CClientNotificationDownloadCompleted) Reset() {
	*x = CClientNotificationDownloadCompleted{}
	mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CClientNotificationDownloadCompleted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientNotificationDownloadCompleted) ProtoMessage() {}

func (x *CClientNotificationDownloadCompleted) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientNotificationDownloadCompleted.ProtoReflect.Descriptor instead.
func (*CClientNotificationDownloadCompleted) Descriptor() ([]byte, []int) {
	return file_steammessages_clientnotificationtypes_proto_rawDescGZIP(), []int{3}
}

func (x *CClientNotificationDownloadCompleted) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CClientNotificationDownloadCompleted) GetDlcAppid() uint32 {
	if x != nil && x.DlcAppid != nil {
		return *x.DlcAppid
	}
	return 0
}

type CClientNotificationFriendInvite struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Steamid       *uint64                `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CClientNotificationFriendInvite) Reset() {
	*x = CClientNotificationFriendInvite{}
	mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CClientNotificationFriendInvite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientNotificationFriendInvite) ProtoMessage() {}

func (x *CClientNotificationFriendInvite) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientNotificationFriendInvite.ProtoReflect.Descriptor instead.
func (*CClientNotificationFriendInvite) Descriptor() ([]byte, []int) {
	return file_steammessages_clientnotificationtypes_proto_rawDescGZIP(), []int{4}
}

func (x *CClientNotificationFriendInvite) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

type CClientNotificationFriendInviteRollup struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	NewInviteCount *uint32                `protobuf:"varint,1,opt,name=new_invite_count,json=newInviteCount" json:"new_invite_count,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CClientNotificationFriendInviteRollup) Reset() {
	*x = CClientNotificationFriendInviteRollup{}
	mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CClientNotificationFriendInviteRollup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientNotificationFriendInviteRollup) ProtoMessage() {}

func (x *CClientNotificationFriendInviteRollup) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientNotificationFriendInviteRollup.ProtoReflect.Descriptor instead.
func (*CClientNotificationFriendInviteRollup) Descriptor() ([]byte, []int) {
	return file_steammessages_clientnotificationtypes_proto_rawDescGZIP(), []int{5}
}

func (x *CClientNotificationFriendInviteRollup) GetNewInviteCount() uint32 {
	if x != nil && x.NewInviteCount != nil {
		return *x.NewInviteCount
	}
	return 0
}

type CClientNotificationFriendInGame struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Steamid       *uint64                `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	GameName      *string                `protobuf:"bytes,2,opt,name=game_name,json=gameName" json:"game_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CClientNotificationFriendInGame) Reset() {
	*x = CClientNotificationFriendInGame{}
	mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CClientNotificationFriendInGame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientNotificationFriendInGame) ProtoMessage() {}

func (x *CClientNotificationFriendInGame) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientNotificationFriendInGame.ProtoReflect.Descriptor instead.
func (*CClientNotificationFriendInGame) Descriptor() ([]byte, []int) {
	return file_steammessages_clientnotificationtypes_proto_rawDescGZIP(), []int{6}
}

func (x *CClientNotificationFriendInGame) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CClientNotificationFriendInGame) GetGameName() string {
	if x != nil && x.GameName != nil {
		return *x.GameName
	}
	return ""
}

type CClientNotificationFriendOnline struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Steamid       *uint64                `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CClientNotificationFriendOnline) Reset() {
	*x = CClientNotificationFriendOnline{}
	mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CClientNotificationFriendOnline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientNotificationFriendOnline) ProtoMessage() {}

func (x *CClientNotificationFriendOnline) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientNotificationFriendOnline.ProtoReflect.Descriptor instead.
func (*CClientNotificationFriendOnline) Descriptor() ([]byte, []int) {
	return file_steammessages_clientnotificationtypes_proto_rawDescGZIP(), []int{7}
}

func (x *CClientNotificationFriendOnline) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

type CClientNotificationAchievement struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	AchievementId     *string                `protobuf:"bytes,1,opt,name=achievement_id,json=achievementId" json:"achievement_id,omitempty"`
	Appid             *uint32                `protobuf:"varint,2,opt,name=appid" json:"appid,omitempty"`
	Name              *string                `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Description       *string                `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
	ImageUrl          *string                `protobuf:"bytes,5,opt,name=image_url,json=imageUrl" json:"image_url,omitempty"`
	Achieved          *bool                  `protobuf:"varint,6,opt,name=achieved" json:"achieved,omitempty"`
	RtimeUnlocked     *uint32                `protobuf:"varint,7,opt,name=rtime_unlocked,json=rtimeUnlocked" json:"rtime_unlocked,omitempty"`
	MinProgress       *float32               `protobuf:"fixed32,8,opt,name=min_progress,json=minProgress" json:"min_progress,omitempty"`
	CurrentProgress   *float32               `protobuf:"fixed32,9,opt,name=current_progress,json=currentProgress" json:"current_progress,omitempty"`
	MaxProgress       *float32               `protobuf:"fixed32,10,opt,name=max_progress,json=maxProgress" json:"max_progress,omitempty"`
	GlobalAchievedPct *float32               `protobuf:"fixed32,11,opt,name=global_achieved_pct,json=globalAchievedPct" json:"global_achieved_pct,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *CClientNotificationAchievement) Reset() {
	*x = CClientNotificationAchievement{}
	mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CClientNotificationAchievement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientNotificationAchievement) ProtoMessage() {}

func (x *CClientNotificationAchievement) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientNotificationAchievement.ProtoReflect.Descriptor instead.
func (*CClientNotificationAchievement) Descriptor() ([]byte, []int) {
	return file_steammessages_clientnotificationtypes_proto_rawDescGZIP(), []int{8}
}

func (x *CClientNotificationAchievement) GetAchievementId() string {
	if x != nil && x.AchievementId != nil {
		return *x.AchievementId
	}
	return ""
}

func (x *CClientNotificationAchievement) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CClientNotificationAchievement) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CClientNotificationAchievement) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *CClientNotificationAchievement) GetImageUrl() string {
	if x != nil && x.ImageUrl != nil {
		return *x.ImageUrl
	}
	return ""
}

func (x *CClientNotificationAchievement) GetAchieved() bool {
	if x != nil && x.Achieved != nil {
		return *x.Achieved
	}
	return false
}

func (x *CClientNotificationAchievement) GetRtimeUnlocked() uint32 {
	if x != nil && x.RtimeUnlocked != nil {
		return *x.RtimeUnlocked
	}
	return 0
}

func (x *CClientNotificationAchievement) GetMinProgress() float32 {
	if x != nil && x.MinProgress != nil {
		return *x.MinProgress
	}
	return 0
}

func (x *CClientNotificationAchievement) GetCurrentProgress() float32 {
	if x != nil && x.CurrentProgress != nil {
		return *x.CurrentProgress
	}
	return 0
}

func (x *CClientNotificationAchievement) GetMaxProgress() float32 {
	if x != nil && x.MaxProgress != nil {
		return *x.MaxProgress
	}
	return 0
}

func (x *CClientNotificationAchievement) GetGlobalAchievedPct() float32 {
	if x != nil && x.GlobalAchievedPct != nil {
		return *x.GlobalAchievedPct
	}
	return 0
}

type CClientNotificationLowBattery struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PctRemaining  *float32               `protobuf:"fixed32,1,opt,name=pct_remaining,json=pctRemaining" json:"pct_remaining,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CClientNotificationLowBattery) Reset() {
	*x = CClientNotificationLowBattery{}
	mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CClientNotificationLowBattery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientNotificationLowBattery) ProtoMessage() {}

func (x *CClientNotificationLowBattery) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientNotificationLowBattery.ProtoReflect.Descriptor instead.
func (*CClientNotificationLowBattery) Descriptor() ([]byte, []int) {
	return file_steammessages_clientnotificationtypes_proto_rawDescGZIP(), []int{9}
}

func (x *CClientNotificationLowBattery) GetPctRemaining() float32 {
	if x != nil && x.PctRemaining != nil {
		return *x.PctRemaining
	}
	return 0
}

type CClientNotificationSystemUpdate struct {
	state         protoimpl.MessageState         `protogen:"open.v1"`
	Type          *ESystemUpdateNotificationType `protobuf:"varint,1,opt,name=type,enum=ESystemUpdateNotificationType,def=0" json:"type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CClientNotificationSystemUpdate fields.
const (
	Default_CClientNotificationSystemUpdate_Type = ESystemUpdateNotificationType_k_ESystemUpdateNotificationType_Invalid
)

func (x *CClientNotificationSystemUpdate) Reset() {
	*x = CClientNotificationSystemUpdate{}
	mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CClientNotificationSystemUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientNotificationSystemUpdate) ProtoMessage() {}

func (x *CClientNotificationSystemUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientNotificationSystemUpdate.ProtoReflect.Descriptor instead.
func (*CClientNotificationSystemUpdate) Descriptor() ([]byte, []int) {
	return file_steammessages_clientnotificationtypes_proto_rawDescGZIP(), []int{10}
}

func (x *CClientNotificationSystemUpdate) GetType() ESystemUpdateNotificationType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_CClientNotificationSystemUpdate_Type
}

type CClientNotificationFriendMessage struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Tag              *string                `protobuf:"bytes,1,opt,name=tag" json:"tag,omitempty"`
	Steamid          *string                `protobuf:"bytes,2,opt,name=steamid" json:"steamid,omitempty"`
	Title            *string                `protobuf:"bytes,3,opt,name=title" json:"title,omitempty"`
	Body             *string                `protobuf:"bytes,4,opt,name=body" json:"body,omitempty"`
	Icon             *string                `protobuf:"bytes,5,opt,name=icon" json:"icon,omitempty"`
	Notificationid   *uint32                `protobuf:"varint,6,opt,name=notificationid" json:"notificationid,omitempty"`
	ResponseSteamurl *string                `protobuf:"bytes,7,opt,name=response_steamurl,json=responseSteamurl" json:"response_steamurl,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CClientNotificationFriendMessage) Reset() {
	*x = CClientNotificationFriendMessage{}
	mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CClientNotificationFriendMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientNotificationFriendMessage) ProtoMessage() {}

func (x *CClientNotificationFriendMessage) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientNotificationFriendMessage.ProtoReflect.Descriptor instead.
func (*CClientNotificationFriendMessage) Descriptor() ([]byte, []int) {
	return file_steammessages_clientnotificationtypes_proto_rawDescGZIP(), []int{11}
}

func (x *CClientNotificationFriendMessage) GetTag() string {
	if x != nil && x.Tag != nil {
		return *x.Tag
	}
	return ""
}

func (x *CClientNotificationFriendMessage) GetSteamid() string {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return ""
}

func (x *CClientNotificationFriendMessage) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *CClientNotificationFriendMessage) GetBody() string {
	if x != nil && x.Body != nil {
		return *x.Body
	}
	return ""
}

func (x *CClientNotificationFriendMessage) GetIcon() string {
	if x != nil && x.Icon != nil {
		return *x.Icon
	}
	return ""
}

func (x *CClientNotificationFriendMessage) GetNotificationid() uint32 {
	if x != nil && x.Notificationid != nil {
		return *x.Notificationid
	}
	return 0
}

func (x *CClientNotificationFriendMessage) GetResponseSteamurl() string {
	if x != nil && x.ResponseSteamurl != nil {
		return *x.ResponseSteamurl
	}
	return ""
}

type CClientNotificationGroupChatMessage struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Tag            *string                `protobuf:"bytes,1,opt,name=tag" json:"tag,omitempty"`
	SteamidSender  *string                `protobuf:"bytes,2,opt,name=steamid_sender,json=steamidSender" json:"steamid_sender,omitempty"`
	ChatGroupId    *string                `protobuf:"bytes,3,opt,name=chat_group_id,json=chatGroupId" json:"chat_group_id,omitempty"`
	ChatId         *string                `protobuf:"bytes,4,opt,name=chat_id,json=chatId" json:"chat_id,omitempty"`
	Title          *string                `protobuf:"bytes,5,opt,name=title" json:"title,omitempty"`
	Body           *string                `protobuf:"bytes,6,opt,name=body" json:"body,omitempty"`
	Rawbody        *string                `protobuf:"bytes,7,opt,name=rawbody" json:"rawbody,omitempty"`
	Icon           *string                `protobuf:"bytes,8,opt,name=icon" json:"icon,omitempty"`
	Notificationid *uint32                `protobuf:"varint,9,opt,name=notificationid" json:"notificationid,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CClientNotificationGroupChatMessage) Reset() {
	*x = CClientNotificationGroupChatMessage{}
	mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CClientNotificationGroupChatMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientNotificationGroupChatMessage) ProtoMessage() {}

func (x *CClientNotificationGroupChatMessage) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientNotificationGroupChatMessage.ProtoReflect.Descriptor instead.
func (*CClientNotificationGroupChatMessage) Descriptor() ([]byte, []int) {
	return file_steammessages_clientnotificationtypes_proto_rawDescGZIP(), []int{12}
}

func (x *CClientNotificationGroupChatMessage) GetTag() string {
	if x != nil && x.Tag != nil {
		return *x.Tag
	}
	return ""
}

func (x *CClientNotificationGroupChatMessage) GetSteamidSender() string {
	if x != nil && x.SteamidSender != nil {
		return *x.SteamidSender
	}
	return ""
}

func (x *CClientNotificationGroupChatMessage) GetChatGroupId() string {
	if x != nil && x.ChatGroupId != nil {
		return *x.ChatGroupId
	}
	return ""
}

func (x *CClientNotificationGroupChatMessage) GetChatId() string {
	if x != nil && x.ChatId != nil {
		return *x.ChatId
	}
	return ""
}

func (x *CClientNotificationGroupChatMessage) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *CClientNotificationGroupChatMessage) GetBody() string {
	if x != nil && x.Body != nil {
		return *x.Body
	}
	return ""
}

func (x *CClientNotificationGroupChatMessage) GetRawbody() string {
	if x != nil && x.Rawbody != nil {
		return *x.Rawbody
	}
	return ""
}

func (x *CClientNotificationGroupChatMessage) GetIcon() string {
	if x != nil && x.Icon != nil {
		return *x.Icon
	}
	return ""
}

func (x *CClientNotificationGroupChatMessage) GetNotificationid() uint32 {
	if x != nil && x.Notificationid != nil {
		return *x.Notificationid
	}
	return 0
}

type CClientNotificationFamilySharingDeviceAuthorizationChanged struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	AccountidOwner *uint32                `protobuf:"varint,1,opt,name=accountid_owner,json=accountidOwner" json:"accountid_owner,omitempty"`
	Authorized     *bool                  `protobuf:"varint,2,opt,name=authorized" json:"authorized,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CClientNotificationFamilySharingDeviceAuthorizationChanged) Reset() {
	*x = CClientNotificationFamilySharingDeviceAuthorizationChanged{}
	mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CClientNotificationFamilySharingDeviceAuthorizationChanged) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientNotificationFamilySharingDeviceAuthorizationChanged) ProtoMessage() {}

func (x *CClientNotificationFamilySharingDeviceAuthorizationChanged) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientNotificationFamilySharingDeviceAuthorizationChanged.ProtoReflect.Descriptor instead.
func (*CClientNotificationFamilySharingDeviceAuthorizationChanged) Descriptor() ([]byte, []int) {
	return file_steammessages_clientnotificationtypes_proto_rawDescGZIP(), []int{13}
}

func (x *CClientNotificationFamilySharingDeviceAuthorizationChanged) GetAccountidOwner() uint32 {
	if x != nil && x.AccountidOwner != nil {
		return *x.AccountidOwner
	}
	return 0
}

func (x *CClientNotificationFamilySharingDeviceAuthorizationChanged) GetAuthorized() bool {
	if x != nil && x.Authorized != nil {
		return *x.Authorized
	}
	return false
}

type CClientNotificationFamilySharingStopPlaying struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	AccountidOwner   *uint32                `protobuf:"varint,1,opt,name=accountid_owner,json=accountidOwner" json:"accountid_owner,omitempty"`
	SecondsRemaining *uint32                `protobuf:"varint,2,opt,name=seconds_remaining,json=secondsRemaining" json:"seconds_remaining,omitempty"`
	Appid            *uint32                `protobuf:"varint,3,opt,name=appid" json:"appid,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CClientNotificationFamilySharingStopPlaying) Reset() {
	*x = CClientNotificationFamilySharingStopPlaying{}
	mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CClientNotificationFamilySharingStopPlaying) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientNotificationFamilySharingStopPlaying) ProtoMessage() {}

func (x *CClientNotificationFamilySharingStopPlaying) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientNotificationFamilySharingStopPlaying.ProtoReflect.Descriptor instead.
func (*CClientNotificationFamilySharingStopPlaying) Descriptor() ([]byte, []int) {
	return file_steammessages_clientnotificationtypes_proto_rawDescGZIP(), []int{14}
}

func (x *CClientNotificationFamilySharingStopPlaying) GetAccountidOwner() uint32 {
	if x != nil && x.AccountidOwner != nil {
		return *x.AccountidOwner
	}
	return 0
}

func (x *CClientNotificationFamilySharingStopPlaying) GetSecondsRemaining() uint32 {
	if x != nil && x.SecondsRemaining != nil {
		return *x.SecondsRemaining
	}
	return 0
}

func (x *CClientNotificationFamilySharingStopPlaying) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

type CClientNotificationFamilySharingLibraryAvailable struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	AccountidOwner *uint32                `protobuf:"varint,1,opt,name=accountid_owner,json=accountidOwner" json:"accountid_owner,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CClientNotificationFamilySharingLibraryAvailable) Reset() {
	*x = CClientNotificationFamilySharingLibraryAvailable{}
	mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CClientNotificationFamilySharingLibraryAvailable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientNotificationFamilySharingLibraryAvailable) ProtoMessage() {}

func (x *CClientNotificationFamilySharingLibraryAvailable) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientNotificationFamilySharingLibraryAvailable.ProtoReflect.Descriptor instead.
func (*CClientNotificationFamilySharingLibraryAvailable) Descriptor() ([]byte, []int) {
	return file_steammessages_clientnotificationtypes_proto_rawDescGZIP(), []int{15}
}

func (x *CClientNotificationFamilySharingLibraryAvailable) GetAccountidOwner() uint32 {
	if x != nil && x.AccountidOwner != nil {
		return *x.AccountidOwner
	}
	return 0
}

type CClientNotificationIncomingVoiceChat struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Steamid       *uint64                `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CClientNotificationIncomingVoiceChat) Reset() {
	*x = CClientNotificationIncomingVoiceChat{}
	mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CClientNotificationIncomingVoiceChat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientNotificationIncomingVoiceChat) ProtoMessage() {}

func (x *CClientNotificationIncomingVoiceChat) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientNotificationIncomingVoiceChat.ProtoReflect.Descriptor instead.
func (*CClientNotificationIncomingVoiceChat) Descriptor() ([]byte, []int) {
	return file_steammessages_clientnotificationtypes_proto_rawDescGZIP(), []int{16}
}

func (x *CClientNotificationIncomingVoiceChat) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

type CClientNotificationClaimSteamDeckRewards struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CClientNotificationClaimSteamDeckRewards) Reset() {
	*x = CClientNotificationClaimSteamDeckRewards{}
	mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CClientNotificationClaimSteamDeckRewards) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientNotificationClaimSteamDeckRewards) ProtoMessage() {}

func (x *CClientNotificationClaimSteamDeckRewards) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientNotificationClaimSteamDeckRewards.ProtoReflect.Descriptor instead.
func (*CClientNotificationClaimSteamDeckRewards) Descriptor() ([]byte, []int) {
	return file_steammessages_clientnotificationtypes_proto_rawDescGZIP(), []int{17}
}

type CClientNotificationGiftReceived struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SenderName    *string                `protobuf:"bytes,1,opt,name=sender_name,json=senderName" json:"sender_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CClientNotificationGiftReceived) Reset() {
	*x = CClientNotificationGiftReceived{}
	mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CClientNotificationGiftReceived) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientNotificationGiftReceived) ProtoMessage() {}

func (x *CClientNotificationGiftReceived) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientNotificationGiftReceived.ProtoReflect.Descriptor instead.
func (*CClientNotificationGiftReceived) Descriptor() ([]byte, []int) {
	return file_steammessages_clientnotificationtypes_proto_rawDescGZIP(), []int{18}
}

func (x *CClientNotificationGiftReceived) GetSenderName() string {
	if x != nil && x.SenderName != nil {
		return *x.SenderName
	}
	return ""
}

type CClientNotificationItemAnnouncement struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	NewItemCount     *uint32                `protobuf:"varint,1,opt,name=new_item_count,json=newItemCount" json:"new_item_count,omitempty"`
	NewBackpackItems *bool                  `protobuf:"varint,2,opt,name=new_backpack_items,json=newBackpackItems" json:"new_backpack_items,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CClientNotificationItemAnnouncement) Reset() {
	*x = CClientNotificationItemAnnouncement{}
	mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CClientNotificationItemAnnouncement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientNotificationItemAnnouncement) ProtoMessage() {}

func (x *CClientNotificationItemAnnouncement) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientNotificationItemAnnouncement.ProtoReflect.Descriptor instead.
func (*CClientNotificationItemAnnouncement) Descriptor() ([]byte, []int) {
	return file_steammessages_clientnotificationtypes_proto_rawDescGZIP(), []int{19}
}

func (x *CClientNotificationItemAnnouncement) GetNewItemCount() uint32 {
	if x != nil && x.NewItemCount != nil {
		return *x.NewItemCount
	}
	return 0
}

func (x *CClientNotificationItemAnnouncement) GetNewBackpackItems() bool {
	if x != nil && x.NewBackpackItems != nil {
		return *x.NewBackpackItems
	}
	return false
}

type CClientNotificationHardwareSurveyPending struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CClientNotificationHardwareSurveyPending) Reset() {
	*x = CClientNotificationHardwareSurveyPending{}
	mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CClientNotificationHardwareSurveyPending) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientNotificationHardwareSurveyPending) ProtoMessage() {}

func (x *CClientNotificationHardwareSurveyPending) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientNotificationHardwareSurveyPending.ProtoReflect.Descriptor instead.
func (*CClientNotificationHardwareSurveyPending) Descriptor() ([]byte, []int) {
	return file_steammessages_clientnotificationtypes_proto_rawDescGZIP(), []int{20}
}

type CClientNotificationLowDiskSpace struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FolderIndex   *uint32                `protobuf:"varint,1,opt,name=folder_index,json=folderIndex" json:"folder_index,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CClientNotificationLowDiskSpace) Reset() {
	*x = CClientNotificationLowDiskSpace{}
	mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CClientNotificationLowDiskSpace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientNotificationLowDiskSpace) ProtoMessage() {}

func (x *CClientNotificationLowDiskSpace) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientNotificationLowDiskSpace.ProtoReflect.Descriptor instead.
func (*CClientNotificationLowDiskSpace) Descriptor() ([]byte, []int) {
	return file_steammessages_clientnotificationtypes_proto_rawDescGZIP(), []int{21}
}

func (x *CClientNotificationLowDiskSpace) GetFolderIndex() uint32 {
	if x != nil && x.FolderIndex != nil {
		return *x.FolderIndex
	}
	return 0
}

type CClientNotificationBatteryTemperature struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Temperature      *uint32                `protobuf:"varint,1,opt,name=temperature" json:"temperature,omitempty"`
	NotificationType *string                `protobuf:"bytes,2,opt,name=notification_type,json=notificationType" json:"notification_type,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CClientNotificationBatteryTemperature) Reset() {
	*x = CClientNotificationBatteryTemperature{}
	mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CClientNotificationBatteryTemperature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientNotificationBatteryTemperature) ProtoMessage() {}

func (x *CClientNotificationBatteryTemperature) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientNotificationBatteryTemperature.ProtoReflect.Descriptor instead.
func (*CClientNotificationBatteryTemperature) Descriptor() ([]byte, []int) {
	return file_steammessages_clientnotificationtypes_proto_rawDescGZIP(), []int{22}
}

func (x *CClientNotificationBatteryTemperature) GetTemperature() uint32 {
	if x != nil && x.Temperature != nil {
		return *x.Temperature
	}
	return 0
}

func (x *CClientNotificationBatteryTemperature) GetNotificationType() string {
	if x != nil && x.NotificationType != nil {
		return *x.NotificationType
	}
	return ""
}

type CClientNotificationDockUnsupportedFirmware struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CClientNotificationDockUnsupportedFirmware) Reset() {
	*x = CClientNotificationDockUnsupportedFirmware{}
	mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CClientNotificationDockUnsupportedFirmware) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientNotificationDockUnsupportedFirmware) ProtoMessage() {}

func (x *CClientNotificationDockUnsupportedFirmware) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientNotificationDockUnsupportedFirmware.ProtoReflect.Descriptor instead.
func (*CClientNotificationDockUnsupportedFirmware) Descriptor() ([]byte, []int) {
	return file_steammessages_clientnotificationtypes_proto_rawDescGZIP(), []int{23}
}

type CClientNotificationPeerContentUpload struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Appid         *uint32                `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	PeerName      *string                `protobuf:"bytes,2,opt,name=peer_name,json=peerName" json:"peer_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CClientNotificationPeerContentUpload) Reset() {
	*x = CClientNotificationPeerContentUpload{}
	mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CClientNotificationPeerContentUpload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientNotificationPeerContentUpload) ProtoMessage() {}

func (x *CClientNotificationPeerContentUpload) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientNotificationPeerContentUpload.ProtoReflect.Descriptor instead.
func (*CClientNotificationPeerContentUpload) Descriptor() ([]byte, []int) {
	return file_steammessages_clientnotificationtypes_proto_rawDescGZIP(), []int{24}
}

func (x *CClientNotificationPeerContentUpload) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CClientNotificationPeerContentUpload) GetPeerName() string {
	if x != nil && x.PeerName != nil {
		return *x.PeerName
	}
	return ""
}

type CClientNotificationCannotReadControllerGuideButton struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	ControllerIndex *int32                 `protobuf:"varint,1,opt,name=controller_index,json=controllerIndex" json:"controller_index,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CClientNotificationCannotReadControllerGuideButton) Reset() {
	*x = CClientNotificationCannotReadControllerGuideButton{}
	mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CClientNotificationCannotReadControllerGuideButton) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientNotificationCannotReadControllerGuideButton) ProtoMessage() {}

func (x *CClientNotificationCannotReadControllerGuideButton) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientNotificationCannotReadControllerGuideButton.ProtoReflect.Descriptor instead.
func (*CClientNotificationCannotReadControllerGuideButton) Descriptor() ([]byte, []int) {
	return file_steammessages_clientnotificationtypes_proto_rawDescGZIP(), []int{25}
}

func (x *CClientNotificationCannotReadControllerGuideButton) GetControllerIndex() int32 {
	if x != nil && x.ControllerIndex != nil {
		return *x.ControllerIndex
	}
	return 0
}

type CClientNotificationOverlaySplashScreen struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CClientNotificationOverlaySplashScreen) Reset() {
	*x = CClientNotificationOverlaySplashScreen{}
	mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CClientNotificationOverlaySplashScreen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientNotificationOverlaySplashScreen) ProtoMessage() {}

func (x *CClientNotificationOverlaySplashScreen) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientNotificationOverlaySplashScreen.ProtoReflect.Descriptor instead.
func (*CClientNotificationOverlaySplashScreen) Descriptor() ([]byte, []int) {
	return file_steammessages_clientnotificationtypes_proto_rawDescGZIP(), []int{26}
}

type CClientNotificationBroadcastAvailableToWatch struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	BroadcastPermission *int32                 `protobuf:"varint,1,opt,name=broadcast_permission,json=broadcastPermission" json:"broadcast_permission,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *CClientNotificationBroadcastAvailableToWatch) Reset() {
	*x = CClientNotificationBroadcastAvailableToWatch{}
	mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CClientNotificationBroadcastAvailableToWatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientNotificationBroadcastAvailableToWatch) ProtoMessage() {}

func (x *CClientNotificationBroadcastAvailableToWatch) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientNotificationBroadcastAvailableToWatch.ProtoReflect.Descriptor instead.
func (*CClientNotificationBroadcastAvailableToWatch) Descriptor() ([]byte, []int) {
	return file_steammessages_clientnotificationtypes_proto_rawDescGZIP(), []int{27}
}

func (x *CClientNotificationBroadcastAvailableToWatch) GetBroadcastPermission() int32 {
	if x != nil && x.BroadcastPermission != nil {
		return *x.BroadcastPermission
	}
	return 0
}

type CClientNotificationTimedTrialRemaining struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Appid          *uint32                `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	Icon           *string                `protobuf:"bytes,2,opt,name=icon" json:"icon,omitempty"`
	Offline        *bool                  `protobuf:"varint,3,opt,name=offline" json:"offline,omitempty"`
	AllowedSeconds *uint32                `protobuf:"varint,4,opt,name=allowed_seconds,json=allowedSeconds" json:"allowed_seconds,omitempty"`
	PlayedSeconds  *uint32                `protobuf:"varint,5,opt,name=played_seconds,json=playedSeconds" json:"played_seconds,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CClientNotificationTimedTrialRemaining) Reset() {
	*x = CClientNotificationTimedTrialRemaining{}
	mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CClientNotificationTimedTrialRemaining) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientNotificationTimedTrialRemaining) ProtoMessage() {}

func (x *CClientNotificationTimedTrialRemaining) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientNotificationTimedTrialRemaining.ProtoReflect.Descriptor instead.
func (*CClientNotificationTimedTrialRemaining) Descriptor() ([]byte, []int) {
	return file_steammessages_clientnotificationtypes_proto_rawDescGZIP(), []int{28}
}

func (x *CClientNotificationTimedTrialRemaining) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CClientNotificationTimedTrialRemaining) GetIcon() string {
	if x != nil && x.Icon != nil {
		return *x.Icon
	}
	return ""
}

func (x *CClientNotificationTimedTrialRemaining) GetOffline() bool {
	if x != nil && x.Offline != nil {
		return *x.Offline
	}
	return false
}

func (x *CClientNotificationTimedTrialRemaining) GetAllowedSeconds() uint32 {
	if x != nil && x.AllowedSeconds != nil {
		return *x.AllowedSeconds
	}
	return 0
}

func (x *CClientNotificationTimedTrialRemaining) GetPlayedSeconds() uint32 {
	if x != nil && x.PlayedSeconds != nil {
		return *x.PlayedSeconds
	}
	return 0
}

type CClientNotificationLoginRefresh struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CClientNotificationLoginRefresh) Reset() {
	*x = CClientNotificationLoginRefresh{}
	mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CClientNotificationLoginRefresh) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientNotificationLoginRefresh) ProtoMessage() {}

func (x *CClientNotificationLoginRefresh) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientNotificationLoginRefresh.ProtoReflect.Descriptor instead.
func (*CClientNotificationLoginRefresh) Descriptor() ([]byte, []int) {
	return file_steammessages_clientnotificationtypes_proto_rawDescGZIP(), []int{29}
}

type CClientNotificationTimerExpired struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CClientNotificationTimerExpired) Reset() {
	*x = CClientNotificationTimerExpired{}
	mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CClientNotificationTimerExpired) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientNotificationTimerExpired) ProtoMessage() {}

func (x *CClientNotificationTimerExpired) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientNotificationTimerExpired.ProtoReflect.Descriptor instead.
func (*CClientNotificationTimerExpired) Descriptor() ([]byte, []int) {
	return file_steammessages_clientnotificationtypes_proto_rawDescGZIP(), []int{30}
}

type CClientNotificationSteamInputActionSetChanged struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	ControllerIndex *int32                 `protobuf:"varint,1,opt,name=controller_index,json=controllerIndex" json:"controller_index,omitempty"`
	ActionSetName   *string                `protobuf:"bytes,2,opt,name=action_set_name,json=actionSetName" json:"action_set_name,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CClientNotificationSteamInputActionSetChanged) Reset() {
	*x = CClientNotificationSteamInputActionSetChanged{}
	mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CClientNotificationSteamInputActionSetChanged) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientNotificationSteamInputActionSetChanged) ProtoMessage() {}

func (x *CClientNotificationSteamInputActionSetChanged) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientNotificationSteamInputActionSetChanged.ProtoReflect.Descriptor instead.
func (*CClientNotificationSteamInputActionSetChanged) Descriptor() ([]byte, []int) {
	return file_steammessages_clientnotificationtypes_proto_rawDescGZIP(), []int{31}
}

func (x *CClientNotificationSteamInputActionSetChanged) GetControllerIndex() int32 {
	if x != nil && x.ControllerIndex != nil {
		return *x.ControllerIndex
	}
	return 0
}

func (x *CClientNotificationSteamInputActionSetChanged) GetActionSetName() string {
	if x != nil && x.ActionSetName != nil {
		return *x.ActionSetName
	}
	return ""
}

type CClientNotificationRemoteClientConnection struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Machine       *string                `protobuf:"bytes,1,opt,name=machine" json:"machine,omitempty"`
	Connected     *bool                  `protobuf:"varint,2,opt,name=connected" json:"connected,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CClientNotificationRemoteClientConnection) Reset() {
	*x = CClientNotificationRemoteClientConnection{}
	mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CClientNotificationRemoteClientConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientNotificationRemoteClientConnection) ProtoMessage() {}

func (x *CClientNotificationRemoteClientConnection) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientNotificationRemoteClientConnection.ProtoReflect.Descriptor instead.
func (*CClientNotificationRemoteClientConnection) Descriptor() ([]byte, []int) {
	return file_steammessages_clientnotificationtypes_proto_rawDescGZIP(), []int{32}
}

func (x *CClientNotificationRemoteClientConnection) GetMachine() string {
	if x != nil && x.Machine != nil {
		return *x.Machine
	}
	return ""
}

func (x *CClientNotificationRemoteClientConnection) GetConnected() bool {
	if x != nil && x.Connected != nil {
		return *x.Connected
	}
	return false
}

type CClientNotificationRemoteClientStartStream struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Machine       *string                `protobuf:"bytes,1,opt,name=machine" json:"machine,omitempty"`
	GameName      *string                `protobuf:"bytes,2,opt,name=game_name,json=gameName" json:"game_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CClientNotificationRemoteClientStartStream) Reset() {
	*x = CClientNotificationRemoteClientStartStream{}
	mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CClientNotificationRemoteClientStartStream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientNotificationRemoteClientStartStream) ProtoMessage() {}

func (x *CClientNotificationRemoteClientStartStream) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientNotificationRemoteClientStartStream.ProtoReflect.Descriptor instead.
func (*CClientNotificationRemoteClientStartStream) Descriptor() ([]byte, []int) {
	return file_steammessages_clientnotificationtypes_proto_rawDescGZIP(), []int{33}
}

func (x *CClientNotificationRemoteClientStartStream) GetMachine() string {
	if x != nil && x.Machine != nil {
		return *x.Machine
	}
	return ""
}

func (x *CClientNotificationRemoteClientStartStream) GetGameName() string {
	if x != nil && x.GameName != nil {
		return *x.GameName
	}
	return ""
}

type CClientNotificationStreamingClientConnection struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Hostname      *string                `protobuf:"bytes,1,opt,name=hostname" json:"hostname,omitempty"`
	Machine       *string                `protobuf:"bytes,2,opt,name=machine" json:"machine,omitempty"`
	Connected     *bool                  `protobuf:"varint,3,opt,name=connected" json:"connected,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CClientNotificationStreamingClientConnection) Reset() {
	*x = CClientNotificationStreamingClientConnection{}
	mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CClientNotificationStreamingClientConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientNotificationStreamingClientConnection) ProtoMessage() {}

func (x *CClientNotificationStreamingClientConnection) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientNotificationStreamingClientConnection.ProtoReflect.Descriptor instead.
func (*CClientNotificationStreamingClientConnection) Descriptor() ([]byte, []int) {
	return file_steammessages_clientnotificationtypes_proto_rawDescGZIP(), []int{34}
}

func (x *CClientNotificationStreamingClientConnection) GetHostname() string {
	if x != nil && x.Hostname != nil {
		return *x.Hostname
	}
	return ""
}

func (x *CClientNotificationStreamingClientConnection) GetMachine() string {
	if x != nil && x.Machine != nil {
		return *x.Machine
	}
	return ""
}

func (x *CClientNotificationStreamingClientConnection) GetConnected() bool {
	if x != nil && x.Connected != nil {
		return *x.Connected
	}
	return false
}

type CClientNotificationPlaytimeWarning struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Type              *string                `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	PlaytimeRemaining *uint32                `protobuf:"varint,2,opt,name=playtime_remaining,json=playtimeRemaining" json:"playtime_remaining,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *CClientNotificationPlaytimeWarning) Reset() {
	*x = CClientNotificationPlaytimeWarning{}
	mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CClientNotificationPlaytimeWarning) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientNotificationPlaytimeWarning) ProtoMessage() {}

func (x *CClientNotificationPlaytimeWarning) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientNotificationPlaytimeWarning.ProtoReflect.Descriptor instead.
func (*CClientNotificationPlaytimeWarning) Descriptor() ([]byte, []int) {
	return file_steammessages_clientnotificationtypes_proto_rawDescGZIP(), []int{35}
}

func (x *CClientNotificationPlaytimeWarning) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *CClientNotificationPlaytimeWarning) GetPlaytimeRemaining() uint32 {
	if x != nil && x.PlaytimeRemaining != nil {
		return *x.PlaytimeRemaining
	}
	return 0
}

type CClientNotificationGameRecordingError struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	GameId        *uint64                  `protobuf:"fixed64,1,opt,name=game_id,json=gameId" json:"game_id,omitempty"`
	ErrorType     *EGameRecordingErrorType `protobuf:"varint,2,opt,name=error_type,json=errorType,enum=EGameRecordingErrorType,def=1" json:"error_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CClientNotificationGameRecordingError fields.
const (
	Default_CClientNotificationGameRecordingError_ErrorType = EGameRecordingErrorType_k_EGameRecordingErrorGeneral
)

func (x *CClientNotificationGameRecordingError) Reset() {
	*x = CClientNotificationGameRecordingError{}
	mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CClientNotificationGameRecordingError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientNotificationGameRecordingError) ProtoMessage() {}

func (x *CClientNotificationGameRecordingError) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientNotificationGameRecordingError.ProtoReflect.Descriptor instead.
func (*CClientNotificationGameRecordingError) Descriptor() ([]byte, []int) {
	return file_steammessages_clientnotificationtypes_proto_rawDescGZIP(), []int{36}
}

func (x *CClientNotificationGameRecordingError) GetGameId() uint64 {
	if x != nil && x.GameId != nil {
		return *x.GameId
	}
	return 0
}

func (x *CClientNotificationGameRecordingError) GetErrorType() EGameRecordingErrorType {
	if x != nil && x.ErrorType != nil {
		return *x.ErrorType
	}
	return Default_CClientNotificationGameRecordingError_ErrorType
}

type CClientNotificationGameRecordingStart struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GameId        *uint64                `protobuf:"fixed64,1,opt,name=game_id,json=gameId" json:"game_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CClientNotificationGameRecordingStart) Reset() {
	*x = CClientNotificationGameRecordingStart{}
	mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CClientNotificationGameRecordingStart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientNotificationGameRecordingStart) ProtoMessage() {}

func (x *CClientNotificationGameRecordingStart) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientNotificationGameRecordingStart.ProtoReflect.Descriptor instead.
func (*CClientNotificationGameRecordingStart) Descriptor() ([]byte, []int) {
	return file_steammessages_clientnotificationtypes_proto_rawDescGZIP(), []int{37}
}

func (x *CClientNotificationGameRecordingStart) GetGameId() uint64 {
	if x != nil && x.GameId != nil {
		return *x.GameId
	}
	return 0
}

type CClientNotificationGameRecordingStop struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GameId        *uint64                `protobuf:"fixed64,1,opt,name=game_id,json=gameId" json:"game_id,omitempty"`
	ClipId        *string                `protobuf:"bytes,2,opt,name=clip_id,json=clipId" json:"clip_id,omitempty"`
	DurationSecs  *float32               `protobuf:"fixed32,3,opt,name=duration_secs,json=durationSecs" json:"duration_secs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CClientNotificationGameRecordingStop) Reset() {
	*x = CClientNotificationGameRecordingStop{}
	mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CClientNotificationGameRecordingStop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientNotificationGameRecordingStop) ProtoMessage() {}

func (x *CClientNotificationGameRecordingStop) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientNotificationGameRecordingStop.ProtoReflect.Descriptor instead.
func (*CClientNotificationGameRecordingStop) Descriptor() ([]byte, []int) {
	return file_steammessages_clientnotificationtypes_proto_rawDescGZIP(), []int{38}
}

func (x *CClientNotificationGameRecordingStop) GetGameId() uint64 {
	if x != nil && x.GameId != nil {
		return *x.GameId
	}
	return 0
}

func (x *CClientNotificationGameRecordingStop) GetClipId() string {
	if x != nil && x.ClipId != nil {
		return *x.ClipId
	}
	return ""
}

func (x *CClientNotificationGameRecordingStop) GetDurationSecs() float32 {
	if x != nil && x.DurationSecs != nil {
		return *x.DurationSecs
	}
	return 0
}

type CClientNotificationGameRecordingUserMarkerAdded struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GameId        *uint64                `protobuf:"fixed64,1,opt,name=game_id,json=gameId" json:"game_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CClientNotificationGameRecordingUserMarkerAdded) Reset() {
	*x = CClientNotificationGameRecordingUserMarkerAdded{}
	mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CClientNotificationGameRecordingUserMarkerAdded) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientNotificationGameRecordingUserMarkerAdded) ProtoMessage() {}

func (x *CClientNotificationGameRecordingUserMarkerAdded) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientNotificationGameRecordingUserMarkerAdded.ProtoReflect.Descriptor instead.
func (*CClientNotificationGameRecordingUserMarkerAdded) Descriptor() ([]byte, []int) {
	return file_steammessages_clientnotificationtypes_proto_rawDescGZIP(), []int{39}
}

func (x *CClientNotificationGameRecordingUserMarkerAdded) GetGameId() uint64 {
	if x != nil && x.GameId != nil {
		return *x.GameId
	}
	return 0
}

type CClientNotificationGameRecordingInstantClip struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GameId        *uint64                `protobuf:"fixed64,1,opt,name=game_id,json=gameId" json:"game_id,omitempty"`
	ClipId        *string                `protobuf:"bytes,2,opt,name=clip_id,json=clipId" json:"clip_id,omitempty"`
	DurationSecs  *float32               `protobuf:"fixed32,3,opt,name=duration_secs,json=durationSecs" json:"duration_secs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CClientNotificationGameRecordingInstantClip) Reset() {
	*x = CClientNotificationGameRecordingInstantClip{}
	mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CClientNotificationGameRecordingInstantClip) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientNotificationGameRecordingInstantClip) ProtoMessage() {}

func (x *CClientNotificationGameRecordingInstantClip) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientNotificationGameRecordingInstantClip.ProtoReflect.Descriptor instead.
func (*CClientNotificationGameRecordingInstantClip) Descriptor() ([]byte, []int) {
	return file_steammessages_clientnotificationtypes_proto_rawDescGZIP(), []int{40}
}

func (x *CClientNotificationGameRecordingInstantClip) GetGameId() uint64 {
	if x != nil && x.GameId != nil {
		return *x.GameId
	}
	return 0
}

func (x *CClientNotificationGameRecordingInstantClip) GetClipId() string {
	if x != nil && x.ClipId != nil {
		return *x.ClipId
	}
	return ""
}

func (x *CClientNotificationGameRecordingInstantClip) GetDurationSecs() float32 {
	if x != nil && x.DurationSecs != nil {
		return *x.DurationSecs
	}
	return 0
}

var File_steammessages_clientnotificationtypes_proto protoreflect.FileDescriptor

const file_steammessages_clientnotificationtypes_proto_rawDesc = "" +
	"\n" +
	"+steammessages_clientnotificationtypes.proto\";\n" +
	"#CClientNotificationCloudSyncFailure\x12\x14\n" +
	"\x05appid\x18\x01 \x01(\rR\x05appid\"<\n" +
	"$CClientNotificationCloudSyncConflict\x12\x14\n" +
	"\x05appid\x18\x01 \x01(\rR\x05appid\"\x8b\x01\n" +
	"\x1dCClientNotificationScreenshot\x12+\n" +
	"\x11screenshot_handle\x18\x01 \x01(\tR\x10screenshotHandle\x12 \n" +
	"\vdescription\x18\x02 \x01(\tR\vdescription\x12\x1b\n" +
	"\tlocal_url\x18\x03 \x01(\tR\blocalUrl\"Y\n" +
	"$CClientNotificationDownloadCompleted\x12\x14\n" +
	"\x05appid\x18\x01 \x01(\rR\x05appid\x12\x1b\n" +
	"\tdlc_appid\x18\x02 \x01(\rR\bdlcAppid\";\n" +
	"\x1fCClientNotificationFriendInvite\x12\x18\n" +
	"\asteamid\x18\x01 \x01(\x06R\asteamid\"Q\n" +
	"%CClientNotificationFriendInviteRollup\x12(\n" +
	"\x10new_invite_count\x18\x01 \x01(\rR\x0enewInviteCount\"X\n" +
	"\x1fCClientNotificationFriendInGame\x12\x18\n" +
	"\asteamid\x18\x01 \x01(\x06R\asteamid\x12\x1b\n" +
	"\tgame_name\x18\x02 \x01(\tR\bgameName\";\n" +
	"\x1fCClientNotificationFriendOnline\x12\x18\n" +
	"\asteamid\x18\x01 \x01(\x06R\asteamid\"\x94\x03\n" +
	"\x1eCClientNotificationAchievement\x12%\n" +
	"\x0eachievement_id\x18\x01 \x01(\tR\rachievementId\x12\x14\n" +
	"\x05appid\x18\x02 \x01(\rR\x05appid\x12\x12\n" +
	"\x04name\x18\x03 \x01(\tR\x04name\x12 \n" +
	"\vdescription\x18\x04 \x01(\tR\vdescription\x12\x1b\n" +
	"\timage_url\x18\x05 \x01(\tR\bimageUrl\x12\x1a\n" +
	"\bachieved\x18\x06 \x01(\bR\bachieved\x12%\n" +
	"\x0ertime_unlocked\x18\a \x01(\rR\rrtimeUnlocked\x12!\n" +
	"\fmin_progress\x18\b \x01(\x02R\vminProgress\x12)\n" +
	"\x10current_progress\x18\t \x01(\x02R\x0fcurrentProgress\x12!\n" +
	"\fmax_progress\x18\n" +
	" \x01(\x02R\vmaxProgress\x12.\n" +
	"\x13global_achieved_pct\x18\v \x01(\x02R\x11globalAchievedPct\"D\n" +
	"\x1dCClientNotificationLowBattery\x12#\n" +
	"\rpct_remaining\x18\x01 \x01(\x02R\fpctRemaining\"~\n" +
	"\x1fCClientNotificationSystemUpdate\x12[\n" +
	"\x04type\x18\x01 \x01(\x0e2\x1e.ESystemUpdateNotificationType:'k_ESystemUpdateNotificationType_InvalidR\x04type\"\xe1\x01\n" +
	" CClientNotificationFriendMessage\x12\x10\n" +
	"\x03tag\x18\x01 \x01(\tR\x03tag\x12\x18\n" +
	"\asteamid\x18\x02 \x01(\tR\asteamid\x12\x14\n" +
	"\x05title\x18\x03 \x01(\tR\x05title\x12\x12\n" +
	"\x04body\x18\x04 \x01(\tR\x04body\x12\x12\n" +
	"\x04icon\x18\x05 \x01(\tR\x04icon\x12&\n" +
	"\x0enotificationid\x18\x06 \x01(\rR\x0enotificationid\x12+\n" +
	"\x11response_steamurl\x18\a \x01(\tR\x10responseSteamurl\"\x9b\x02\n" +
	"#CClientNotificationGroupChatMessage\x12\x10\n" +
	"\x03tag\x18\x01 \x01(\tR\x03tag\x12%\n" +
	"\x0esteamid_sender\x18\x02 \x01(\tR\rsteamidSender\x12\"\n" +
	"\rchat_group_id\x18\x03 \x01(\tR\vchatGroupId\x12\x17\n" +
	"\achat_id\x18\x04 \x01(\tR\x06chatId\x12\x14\n" +
	"\x05title\x18\x05 \x01(\tR\x05title\x12\x12\n" +
	"\x04body\x18\x06 \x01(\tR\x04body\x12\x18\n" +
	"\arawbody\x18\a \x01(\tR\arawbody\x12\x12\n" +
	"\x04icon\x18\b \x01(\tR\x04icon\x12&\n" +
	"\x0enotificationid\x18\t \x01(\rR\x0enotificationid\"\x85\x01\n" +
	":CClientNotificationFamilySharingDeviceAuthorizationChanged\x12'\n" +
	"\x0faccountid_owner\x18\x01 \x01(\rR\x0eaccountidOwner\x12\x1e\n" +
	"\n" +
	"authorized\x18\x02 \x01(\bR\n" +
	"authorized\"\x99\x01\n" +
	"+CClientNotificationFamilySharingStopPlaying\x12'\n" +
	"\x0faccountid_owner\x18\x01 \x01(\rR\x0eaccountidOwner\x12+\n" +
	"\x11seconds_remaining\x18\x02 \x01(\rR\x10secondsRemaining\x12\x14\n" +
	"\x05appid\x18\x03 \x01(\rR\x05appid\"[\n" +
	"0CClientNotificationFamilySharingLibraryAvailable\x12'\n" +
	"\x0faccountid_owner\x18\x01 \x01(\rR\x0eaccountidOwner\"@\n" +
	"$CClientNotificationIncomingVoiceChat\x12\x18\n" +
	"\asteamid\x18\x01 \x01(\x06R\asteamid\"*\n" +
	"(CClientNotificationClaimSteamDeckRewards\"B\n" +
	"\x1fCClientNotificationGiftReceived\x12\x1f\n" +
	"\vsender_name\x18\x01 \x01(\tR\n" +
	"senderName\"y\n" +
	"#CClientNotificationItemAnnouncement\x12$\n" +
	"\x0enew_item_count\x18\x01 \x01(\rR\fnewItemCount\x12,\n" +
	"\x12new_backpack_items\x18\x02 \x01(\bR\x10newBackpackItems\"*\n" +
	"(CClientNotificationHardwareSurveyPending\"D\n" +
	"\x1fCClientNotificationLowDiskSpace\x12!\n" +
	"\ffolder_index\x18\x01 \x01(\rR\vfolderIndex\"v\n" +
	"%CClientNotificationBatteryTemperature\x12 \n" +
	"\vtemperature\x18\x01 \x01(\rR\vtemperature\x12+\n" +
	"\x11notification_type\x18\x02 \x01(\tR\x10notificationType\",\n" +
	"*CClientNotificationDockUnsupportedFirmware\"Y\n" +
	"$CClientNotificationPeerContentUpload\x12\x14\n" +
	"\x05appid\x18\x01 \x01(\rR\x05appid\x12\x1b\n" +
	"\tpeer_name\x18\x02 \x01(\tR\bpeerName\"_\n" +
	"2CClientNotificationCannotReadControllerGuideButton\x12)\n" +
	"\x10controller_index\x18\x01 \x01(\x05R\x0fcontrollerIndex\"(\n" +
	"&CClientNotificationOverlaySplashScreen\"a\n" +
	",CClientNotificationBroadcastAvailableToWatch\x121\n" +
	"\x14broadcast_permission\x18\x01 \x01(\x05R\x13broadcastPermission\"\xbc\x01\n" +
	"&CClientNotificationTimedTrialRemaining\x12\x14\n" +
	"\x05appid\x18\x01 \x01(\rR\x05appid\x12\x12\n" +
	"\x04icon\x18\x02 \x01(\tR\x04icon\x12\x18\n" +
	"\aoffline\x18\x03 \x01(\bR\aoffline\x12'\n" +
	"\x0fallowed_seconds\x18\x04 \x01(\rR\x0eallowedSeconds\x12%\n" +
	"\x0eplayed_seconds\x18\x05 \x01(\rR\rplayedSeconds\"!\n" +
	"\x1fCClientNotificationLoginRefresh\"!\n" +
	"\x1fCClientNotificationTimerExpired\"\x82\x01\n" +
	"-CClientNotificationSteamInputActionSetChanged\x12)\n" +
	"\x10controller_index\x18\x01 \x01(\x05R\x0fcontrollerIndex\x12&\n" +
	"\x0faction_set_name\x18\x02 \x01(\tR\ractionSetName\"c\n" +
	")CClientNotificationRemoteClientConnection\x12\x18\n" +
	"\amachine\x18\x01 \x01(\tR\amachine\x12\x1c\n" +
	"\tconnected\x18\x02 \x01(\bR\tconnected\"c\n" +
	"*CClientNotificationRemoteClientStartStream\x12\x18\n" +
	"\amachine\x18\x01 \x01(\tR\amachine\x12\x1b\n" +
	"\tgame_name\x18\x02 \x01(\tR\bgameName\"\x82\x01\n" +
	",CClientNotificationStreamingClientConnection\x12\x1a\n" +
	"\bhostname\x18\x01 \x01(\tR\bhostname\x12\x18\n" +
	"\amachine\x18\x02 \x01(\tR\amachine\x12\x1c\n" +
	"\tconnected\x18\x03 \x01(\bR\tconnected\"g\n" +
	"\"CClientNotificationPlaytimeWarning\x12\x12\n" +
	"\x04type\x18\x01 \x01(\tR\x04type\x12-\n" +
	"\x12playtime_remaining\x18\x02 \x01(\rR\x11playtimeRemaining\"\x97\x01\n" +
	"%CClientNotificationGameRecordingError\x12\x17\n" +
	"\agame_id\x18\x01 \x01(\x06R\x06gameId\x12U\n" +
	"\n" +
	"error_type\x18\x02 \x01(\x0e2\x18.EGameRecordingErrorType:\x1ck_EGameRecordingErrorGeneralR\terrorType\"@\n" +
	"%CClientNotificationGameRecordingStart\x12\x17\n" +
	"\agame_id\x18\x01 \x01(\x06R\x06gameId\"}\n" +
	"$CClientNotificationGameRecordingStop\x12\x17\n" +
	"\agame_id\x18\x01 \x01(\x06R\x06gameId\x12\x17\n" +
	"\aclip_id\x18\x02 \x01(\tR\x06clipId\x12#\n" +
	"\rduration_secs\x18\x03 \x01(\x02R\fdurationSecs\"J\n" +
	"/CClientNotificationGameRecordingUserMarkerAdded\x12\x17\n" +
	"\agame_id\x18\x01 \x01(\x06R\x06gameId\"\x84\x01\n" +
	"+CClientNotificationGameRecordingInstantClip\x12\x17\n" +
	"\agame_id\x18\x01 \x01(\x06R\x06gameId\x12\x17\n" +
	"\aclip_id\x18\x02 \x01(\tR\x06clipId\x12#\n" +
	"\rduration_secs\x18\x03 \x01(\x02R\fdurationSecs*\xca\x16\n" +
	"\x17EClientNotificationType\x12%\n" +
	"!k_EClientNotificationType_Invalid\x10\x00\x12/\n" +
	"+k_EClientNotificationType_DownloadCompleted\x10\x01\x12*\n" +
	"&k_EClientNotificationType_FriendInvite\x10\x02\x12*\n" +
	"&k_EClientNotificationType_FriendInGame\x10\x03\x12*\n" +
	"&k_EClientNotificationType_FriendOnline\x10\x04\x12)\n" +
	"%k_EClientNotificationType_Achievement\x10\x05\x12(\n" +
	"$k_EClientNotificationType_LowBattery\x10\x06\x12*\n" +
	"&k_EClientNotificationType_SystemUpdate\x10\a\x12+\n" +
	"'k_EClientNotificationType_FriendMessage\x10\b\x12.\n" +
	"*k_EClientNotificationType_GroupChatMessage\x10\t\x120\n" +
	",k_EClientNotificationType_FriendInviteRollup\x10\n" +
	"\x126\n" +
	"2k_EClientNotificationType_FamilySharingStopPlaying\x10\f\x12(\n" +
	"$k_EClientNotificationType_Screenshot\x10\x0e\x12.\n" +
	"*k_EClientNotificationType_CloudSyncFailure\x10\x0f\x12/\n" +
	"+k_EClientNotificationType_CloudSyncConflict\x10\x10\x12/\n" +
	"+k_EClientNotificationType_IncomingVoiceChat\x10\x11\x123\n" +
	"/k_EClientNotificationType_ClaimSteamDeckRewards\x10\x12\x12*\n" +
	"&k_EClientNotificationType_GiftReceived\x10\x13\x12.\n" +
	"*k_EClientNotificationType_ItemAnnouncement\x10\x14\x12,\n" +
	"(k_EClientNotificationType_HardwareSurvey\x10\x15\x12*\n" +
	"&k_EClientNotificationType_LowDiskSpace\x10\x16\x120\n" +
	",k_EClientNotificationType_BatteryTemperature\x10\x17\x125\n" +
	"1k_EClientNotificationType_DockUnsupportedFirmware\x10\x18\x12/\n" +
	"+k_EClientNotificationType_PeerContentUpload\x10\x19\x12=\n" +
	"9k_EClientNotificationType_CannotReadControllerGuideButton\x10\x1a\x12%\n" +
	"!k_EClientNotificationType_Comment\x10\x1b\x12&\n" +
	"\"k_EClientNotificationType_Wishlist\x10\x1c\x12(\n" +
	"$k_EClientNotificationType_TradeOffer\x10\x1d\x12'\n" +
	"#k_EClientNotificationType_AsyncGame\x10\x1e\x12%\n" +
	"!k_EClientNotificationType_General\x10\x1f\x12)\n" +
	"%k_EClientNotificationType_HelpRequest\x10 \x121\n" +
	"-k_EClientNotificationType_OverlaySplashScreen\x10!\x127\n" +
	"3k_EClientNotificationType_BroadcastAvailableToWatch\x10\"\x121\n" +
	"-k_EClientNotificationType_TimedTrialRemaining\x10#\x12*\n" +
	"&k_EClientNotificationType_LoginRefresh\x10$\x12'\n" +
	"#k_EClientNotificationType_MajorSale\x10%\x12*\n" +
	"&k_EClientNotificationType_TimerExpired\x10&\x12*\n" +
	"&k_EClientNotificationType_ModeratorMsg\x10'\x128\n" +
	"4k_EClientNotificationType_SteamInputActionSetChanged\x10(\x124\n" +
	"0k_EClientNotificationType_RemoteClientConnection\x10)\x125\n" +
	"1k_EClientNotificationType_RemoteClientStartStream\x10*\x127\n" +
	"3k_EClientNotificationType_StreamingClientConnection\x10+\x12*\n" +
	"&k_EClientNotificationType_FamilyInvite\x10,\x12-\n" +
	")k_EClientNotificationType_PlaytimeWarning\x10-\x123\n" +
	"/k_EClientNotificationType_FamilyPurchaseRequest\x10.\x12;\n" +
	"7k_EClientNotificationType_FamilyPurchaseRequestResponse\x10/\x124\n" +
	"0k_EClientNotificationType_ParentalFeatureRequest\x100\x125\n" +
	"1k_EClientNotificationType_ParentalPlaytimeRequest\x101\x120\n" +
	",k_EClientNotificationType_GameRecordingError\x102\x125\n" +
	"1k_EClientNotificationType_ParentalFeatureResponse\x103\x126\n" +
	"2k_EClientNotificationType_ParentalPlaytimeResponse\x104\x120\n" +
	",k_EClientNotificationType_RequestedGameAdded\x105\x12,\n" +
	"(k_EClientNotificationType_ClipDownloaded\x106\x120\n" +
	",k_EClientNotificationType_GameRecordingStart\x107\x12/\n" +
	"+k_EClientNotificationType_GameRecordingStop\x108\x12:\n" +
	"6k_EClientNotificationType_GameRecordingUserMarkerAdded\x109\x126\n" +
	"2k_EClientNotificationType_GameRecordingInstantClip\x10:\x12,\n" +
	"(k_EClientNotificationType_PlaytestInvite\x10;\x12+\n" +
	"'k_EClientNotificationType_TradeReversal\x10<*\xad\x01\n" +
	"\x1dESystemUpdateNotificationType\x12+\n" +
	"'k_ESystemUpdateNotificationType_Invalid\x10\x00\x12-\n" +
	")k_ESystemUpdateNotificationType_Available\x10\x01\x120\n" +
	",k_ESystemUpdateNotificationType_NeedsRestart\x10\x02*b\n" +
	"\x17EGameRecordingErrorType\x12 \n" +
	"\x1ck_EGameRecordingErrorGeneral\x10\x01\x12%\n" +
	"!k_EGameRecordingErrorLowDiskSpace\x10\x02B\x05H\x01\x80\x01\x01"

var (
	file_steammessages_clientnotificationtypes_proto_rawDescOnce sync.Once
	file_steammessages_clientnotificationtypes_proto_rawDescData []byte
)

func file_steammessages_clientnotificationtypes_proto_rawDescGZIP() []byte {
	file_steammessages_clientnotificationtypes_proto_rawDescOnce.Do(func() {
		file_steammessages_clientnotificationtypes_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_steammessages_clientnotificationtypes_proto_rawDesc), len(file_steammessages_clientnotificationtypes_proto_rawDesc)))
	})
	return file_steammessages_clientnotificationtypes_proto_rawDescData
}

var file_steammessages_clientnotificationtypes_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_steammessages_clientnotificationtypes_proto_msgTypes = make([]protoimpl.MessageInfo, 41)
var file_steammessages_clientnotificationtypes_proto_goTypes = []any{
	(EClientNotificationType)(0),                                       // 0: EClientNotificationType
	(ESystemUpdateNotificationType)(0),                                 // 1: ESystemUpdateNotificationType
	(EGameRecordingErrorType)(0),                                       // 2: EGameRecordingErrorType
	(*CClientNotificationCloudSyncFailure)(nil),                        // 3: CClientNotificationCloudSyncFailure
	(*CClientNotificationCloudSyncConflict)(nil),                       // 4: CClientNotificationCloudSyncConflict
	(*CClientNotificationScreenshot)(nil),                              // 5: CClientNotificationScreenshot
	(*CClientNotificationDownloadCompleted)(nil),                       // 6: CClientNotificationDownloadCompleted
	(*CClientNotificationFriendInvite)(nil),                            // 7: CClientNotificationFriendInvite
	(*CClientNotificationFriendInviteRollup)(nil),                      // 8: CClientNotificationFriendInviteRollup
	(*CClientNotificationFriendInGame)(nil),                            // 9: CClientNotificationFriendInGame
	(*CClientNotificationFriendOnline)(nil),                            // 10: CClientNotificationFriendOnline
	(*CClientNotificationAchievement)(nil),                             // 11: CClientNotificationAchievement
	(*CClientNotificationLowBattery)(nil),                              // 12: CClientNotificationLowBattery
	(*CClientNotificationSystemUpdate)(nil),                            // 13: CClientNotificationSystemUpdate
	(*CClientNotificationFriendMessage)(nil),                           // 14: CClientNotificationFriendMessage
	(*CClientNotificationGroupChatMessage)(nil),                        // 15: CClientNotificationGroupChatMessage
	(*CClientNotificationFamilySharingDeviceAuthorizationChanged)(nil), // 16: CClientNotificationFamilySharingDeviceAuthorizationChanged
	(*CClientNotificationFamilySharingStopPlaying)(nil),                // 17: CClientNotificationFamilySharingStopPlaying
	(*CClientNotificationFamilySharingLibraryAvailable)(nil),           // 18: CClientNotificationFamilySharingLibraryAvailable
	(*CClientNotificationIncomingVoiceChat)(nil),                       // 19: CClientNotificationIncomingVoiceChat
	(*CClientNotificationClaimSteamDeckRewards)(nil),                   // 20: CClientNotificationClaimSteamDeckRewards
	(*CClientNotificationGiftReceived)(nil),                            // 21: CClientNotificationGiftReceived
	(*CClientNotificationItemAnnouncement)(nil),                        // 22: CClientNotificationItemAnnouncement
	(*CClientNotificationHardwareSurveyPending)(nil),                   // 23: CClientNotificationHardwareSurveyPending
	(*CClientNotificationLowDiskSpace)(nil),                            // 24: CClientNotificationLowDiskSpace
	(*CClientNotificationBatteryTemperature)(nil),                      // 25: CClientNotificationBatteryTemperature
	(*CClientNotificationDockUnsupportedFirmware)(nil),                 // 26: CClientNotificationDockUnsupportedFirmware
	(*CClientNotificationPeerContentUpload)(nil),                       // 27: CClientNotificationPeerContentUpload
	(*CClientNotificationCannotReadControllerGuideButton)(nil),         // 28: CClientNotificationCannotReadControllerGuideButton
	(*CClientNotificationOverlaySplashScreen)(nil),                     // 29: CClientNotificationOverlaySplashScreen
	(*CClientNotificationBroadcastAvailableToWatch)(nil),               // 30: CClientNotificationBroadcastAvailableToWatch
	(*CClientNotificationTimedTrialRemaining)(nil),                     // 31: CClientNotificationTimedTrialRemaining
	(*CClientNotificationLoginRefresh)(nil),                            // 32: CClientNotificationLoginRefresh
	(*CClientNotificationTimerExpired)(nil),                            // 33: CClientNotificationTimerExpired
	(*CClientNotificationSteamInputActionSetChanged)(nil),              // 34: CClientNotificationSteamInputActionSetChanged
	(*CClientNotificationRemoteClientConnection)(nil),                  // 35: CClientNotificationRemoteClientConnection
	(*CClientNotificationRemoteClientStartStream)(nil),                 // 36: CClientNotificationRemoteClientStartStream
	(*CClientNotificationStreamingClientConnection)(nil),               // 37: CClientNotificationStreamingClientConnection
	(*CClientNotificationPlaytimeWarning)(nil),                         // 38: CClientNotificationPlaytimeWarning
	(*CClientNotificationGameRecordingError)(nil),                      // 39: CClientNotificationGameRecordingError
	(*CClientNotificationGameRecordingStart)(nil),                      // 40: CClientNotificationGameRecordingStart
	(*CClientNotificationGameRecordingStop)(nil),                       // 41: CClientNotificationGameRecordingStop
	(*CClientNotificationGameRecordingUserMarkerAdded)(nil),            // 42: CClientNotificationGameRecordingUserMarkerAdded
	(*CClientNotificationGameRecordingInstantClip)(nil),                // 43: CClientNotificationGameRecordingInstantClip
}
var file_steammessages_clientnotificationtypes_proto_depIdxs = []int32{
	1, // 0: CClientNotificationSystemUpdate.type:type_name -> ESystemUpdateNotificationType
	2, // 1: CClientNotificationGameRecordingError.error_type:type_name -> EGameRecordingErrorType
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_steammessages_clientnotificationtypes_proto_init() }
func file_steammessages_clientnotificationtypes_proto_init() {
	if File_steammessages_clientnotificationtypes_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_steammessages_clientnotificationtypes_proto_rawDesc), len(file_steammessages_clientnotificationtypes_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   41,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_steammessages_clientnotificationtypes_proto_goTypes,
		DependencyIndexes: file_steammessages_clientnotificationtypes_proto_depIdxs,
		EnumInfos:         file_steammessages_clientnotificationtypes_proto_enumTypes,
		MessageInfos:      file_steammessages_clientnotificationtypes_proto_msgTypes,
	}.Build()
	File_steammessages_clientnotificationtypes_proto = out.File
	file_steammessages_clientnotificationtypes_proto_goTypes = nil
	file_steammessages_clientnotificationtypes_proto_depIdxs = nil
}
