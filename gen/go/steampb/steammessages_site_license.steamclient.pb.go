// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v6.32.0
// source: steammessages_site_license.steamclient.proto

package steampb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CSiteManagerClient_IncomingClient_Request struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	SiteInstanceid *uint64                `protobuf:"fixed64,1,opt,name=site_instanceid,json=siteInstanceid" json:"site_instanceid,omitempty"`
	ClientSteamid  *uint64                `protobuf:"fixed64,2,opt,name=client_steamid,json=clientSteamid" json:"client_steamid,omitempty"`
	ClientLocalIp  *uint32                `protobuf:"fixed32,3,opt,name=client_local_ip,json=clientLocalIp" json:"client_local_ip,omitempty"`
	ConnectionKey  []byte                 `protobuf:"bytes,4,opt,name=connection_key,json=connectionKey" json:"connection_key,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CSiteManagerClient_IncomingClient_Request) Reset() {
	*x = CSiteManagerClient_IncomingClient_Request{}
	mi := &file_steammessages_site_license_steamclient_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSiteManagerClient_IncomingClient_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSiteManagerClient_IncomingClient_Request) ProtoMessage() {}

func (x *CSiteManagerClient_IncomingClient_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_site_license_steamclient_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSiteManagerClient_IncomingClient_Request.ProtoReflect.Descriptor instead.
func (*CSiteManagerClient_IncomingClient_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_site_license_steamclient_proto_rawDescGZIP(), []int{0}
}

func (x *CSiteManagerClient_IncomingClient_Request) GetSiteInstanceid() uint64 {
	if x != nil && x.SiteInstanceid != nil {
		return *x.SiteInstanceid
	}
	return 0
}

func (x *CSiteManagerClient_IncomingClient_Request) GetClientSteamid() uint64 {
	if x != nil && x.ClientSteamid != nil {
		return *x.ClientSteamid
	}
	return 0
}

func (x *CSiteManagerClient_IncomingClient_Request) GetClientLocalIp() uint32 {
	if x != nil && x.ClientLocalIp != nil {
		return *x.ClientLocalIp
	}
	return 0
}

func (x *CSiteManagerClient_IncomingClient_Request) GetConnectionKey() []byte {
	if x != nil {
		return x.ConnectionKey
	}
	return nil
}

type CSiteManagerClient_IncomingClient_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CSiteManagerClient_IncomingClient_Response) Reset() {
	*x = CSiteManagerClient_IncomingClient_Response{}
	mi := &file_steammessages_site_license_steamclient_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSiteManagerClient_IncomingClient_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSiteManagerClient_IncomingClient_Response) ProtoMessage() {}

func (x *CSiteManagerClient_IncomingClient_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_site_license_steamclient_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSiteManagerClient_IncomingClient_Response.ProtoReflect.Descriptor instead.
func (*CSiteManagerClient_IncomingClient_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_site_license_steamclient_proto_rawDescGZIP(), []int{1}
}

type CSiteLicense_ClientSeatCheckout_Notification struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Appid         *uint32                `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	Eresult       *uint32                `protobuf:"varint,2,opt,name=eresult" json:"eresult,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CSiteLicense_ClientSeatCheckout_Notification) Reset() {
	*x = CSiteLicense_ClientSeatCheckout_Notification{}
	mi := &file_steammessages_site_license_steamclient_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSiteLicense_ClientSeatCheckout_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSiteLicense_ClientSeatCheckout_Notification) ProtoMessage() {}

func (x *CSiteLicense_ClientSeatCheckout_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_site_license_steamclient_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSiteLicense_ClientSeatCheckout_Notification.ProtoReflect.Descriptor instead.
func (*CSiteLicense_ClientSeatCheckout_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_site_license_steamclient_proto_rawDescGZIP(), []int{2}
}

func (x *CSiteLicense_ClientSeatCheckout_Notification) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CSiteLicense_ClientSeatCheckout_Notification) GetEresult() uint32 {
	if x != nil && x.Eresult != nil {
		return *x.Eresult
	}
	return 0
}

type CSiteManagerClient_TrackedPayments_Notification struct {
	state         protoimpl.MessageState                                     `protogen:"open.v1"`
	SiteId        *uint64                                                    `protobuf:"fixed64,1,opt,name=site_id,json=siteId" json:"site_id,omitempty"`
	Payments      []*CSiteManagerClient_TrackedPayments_Notification_Payment `protobuf:"bytes,2,rep,name=payments" json:"payments,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CSiteManagerClient_TrackedPayments_Notification) Reset() {
	*x = CSiteManagerClient_TrackedPayments_Notification{}
	mi := &file_steammessages_site_license_steamclient_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSiteManagerClient_TrackedPayments_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSiteManagerClient_TrackedPayments_Notification) ProtoMessage() {}

func (x *CSiteManagerClient_TrackedPayments_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_site_license_steamclient_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSiteManagerClient_TrackedPayments_Notification.ProtoReflect.Descriptor instead.
func (*CSiteManagerClient_TrackedPayments_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_site_license_steamclient_proto_rawDescGZIP(), []int{3}
}

func (x *CSiteManagerClient_TrackedPayments_Notification) GetSiteId() uint64 {
	if x != nil && x.SiteId != nil {
		return *x.SiteId
	}
	return 0
}

func (x *CSiteManagerClient_TrackedPayments_Notification) GetPayments() []*CSiteManagerClient_TrackedPayments_Notification_Payment {
	if x != nil {
		return x.Payments
	}
	return nil
}

type CSiteLicense_InitiateAssociation_Request struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	SiteSteamid    *uint64                `protobuf:"fixed64,1,opt,name=site_steamid,json=siteSteamid" json:"site_steamid,omitempty"`
	SiteInstanceid *uint64                `protobuf:"fixed64,2,opt,name=site_instanceid,json=siteInstanceid" json:"site_instanceid,omitempty"`
	ClientLocalIp  *uint32                `protobuf:"fixed32,3,opt,name=client_local_ip,json=clientLocalIp" json:"client_local_ip,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CSiteLicense_InitiateAssociation_Request) Reset() {
	*x = CSiteLicense_InitiateAssociation_Request{}
	mi := &file_steammessages_site_license_steamclient_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSiteLicense_InitiateAssociation_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSiteLicense_InitiateAssociation_Request) ProtoMessage() {}

func (x *CSiteLicense_InitiateAssociation_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_site_license_steamclient_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSiteLicense_InitiateAssociation_Request.ProtoReflect.Descriptor instead.
func (*CSiteLicense_InitiateAssociation_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_site_license_steamclient_proto_rawDescGZIP(), []int{4}
}

func (x *CSiteLicense_InitiateAssociation_Request) GetSiteSteamid() uint64 {
	if x != nil && x.SiteSteamid != nil {
		return *x.SiteSteamid
	}
	return 0
}

func (x *CSiteLicense_InitiateAssociation_Request) GetSiteInstanceid() uint64 {
	if x != nil && x.SiteInstanceid != nil {
		return *x.SiteInstanceid
	}
	return 0
}

func (x *CSiteLicense_InitiateAssociation_Request) GetClientLocalIp() uint32 {
	if x != nil && x.ClientLocalIp != nil {
		return *x.ClientLocalIp
	}
	return 0
}

type CSiteLicense_InitiateAssociation_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ConnectionKey []byte                 `protobuf:"bytes,1,opt,name=connection_key,json=connectionKey" json:"connection_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CSiteLicense_InitiateAssociation_Response) Reset() {
	*x = CSiteLicense_InitiateAssociation_Response{}
	mi := &file_steammessages_site_license_steamclient_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSiteLicense_InitiateAssociation_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSiteLicense_InitiateAssociation_Response) ProtoMessage() {}

func (x *CSiteLicense_InitiateAssociation_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_site_license_steamclient_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSiteLicense_InitiateAssociation_Response.ProtoReflect.Descriptor instead.
func (*CSiteLicense_InitiateAssociation_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_site_license_steamclient_proto_rawDescGZIP(), []int{5}
}

func (x *CSiteLicense_InitiateAssociation_Response) GetConnectionKey() []byte {
	if x != nil {
		return x.ConnectionKey
	}
	return nil
}

type CSiteLicense_LCSAuthenticate_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Instanceid    *uint64                `protobuf:"fixed64,1,opt,name=instanceid" json:"instanceid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CSiteLicense_LCSAuthenticate_Request) Reset() {
	*x = CSiteLicense_LCSAuthenticate_Request{}
	mi := &file_steammessages_site_license_steamclient_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSiteLicense_LCSAuthenticate_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSiteLicense_LCSAuthenticate_Request) ProtoMessage() {}

func (x *CSiteLicense_LCSAuthenticate_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_site_license_steamclient_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSiteLicense_LCSAuthenticate_Request.ProtoReflect.Descriptor instead.
func (*CSiteLicense_LCSAuthenticate_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_site_license_steamclient_proto_rawDescGZIP(), []int{6}
}

func (x *CSiteLicense_LCSAuthenticate_Request) GetInstanceid() uint64 {
	if x != nil && x.Instanceid != nil {
		return *x.Instanceid
	}
	return 0
}

type CSiteLicense_LCSAuthenticate_Response struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	SiteId         *uint64                `protobuf:"varint,1,opt,name=site_id,json=siteId" json:"site_id,omitempty"`
	SiteName       *string                `protobuf:"bytes,2,opt,name=site_name,json=siteName" json:"site_name,omitempty"`
	NewSession     *bool                  `protobuf:"varint,3,opt,name=new_session,json=newSession" json:"new_session,omitempty"`
	NoSiteLicenses *bool                  `protobuf:"varint,4,opt,name=no_site_licenses,json=noSiteLicenses" json:"no_site_licenses,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CSiteLicense_LCSAuthenticate_Response) Reset() {
	*x = CSiteLicense_LCSAuthenticate_Response{}
	mi := &file_steammessages_site_license_steamclient_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSiteLicense_LCSAuthenticate_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSiteLicense_LCSAuthenticate_Response) ProtoMessage() {}

func (x *CSiteLicense_LCSAuthenticate_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_site_license_steamclient_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSiteLicense_LCSAuthenticate_Response.ProtoReflect.Descriptor instead.
func (*CSiteLicense_LCSAuthenticate_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_site_license_steamclient_proto_rawDescGZIP(), []int{7}
}

func (x *CSiteLicense_LCSAuthenticate_Response) GetSiteId() uint64 {
	if x != nil && x.SiteId != nil {
		return *x.SiteId
	}
	return 0
}

func (x *CSiteLicense_LCSAuthenticate_Response) GetSiteName() string {
	if x != nil && x.SiteName != nil {
		return *x.SiteName
	}
	return ""
}

func (x *CSiteLicense_LCSAuthenticate_Response) GetNewSession() bool {
	if x != nil && x.NewSession != nil {
		return *x.NewSession
	}
	return false
}

func (x *CSiteLicense_LCSAuthenticate_Response) GetNoSiteLicenses() bool {
	if x != nil && x.NoSiteLicenses != nil {
		return *x.NoSiteLicenses
	}
	return false
}

type CSiteLicense_LCSAssociateUser_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Steamid       *uint64                `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	LocalIp       *uint32                `protobuf:"fixed32,2,opt,name=local_ip,json=localIp" json:"local_ip,omitempty"`
	Instanceid    *uint64                `protobuf:"fixed64,3,opt,name=instanceid" json:"instanceid,omitempty"`
	MachineName   *string                `protobuf:"bytes,4,opt,name=machine_name,json=machineName" json:"machine_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CSiteLicense_LCSAssociateUser_Request) Reset() {
	*x = CSiteLicense_LCSAssociateUser_Request{}
	mi := &file_steammessages_site_license_steamclient_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSiteLicense_LCSAssociateUser_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSiteLicense_LCSAssociateUser_Request) ProtoMessage() {}

func (x *CSiteLicense_LCSAssociateUser_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_site_license_steamclient_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSiteLicense_LCSAssociateUser_Request.ProtoReflect.Descriptor instead.
func (*CSiteLicense_LCSAssociateUser_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_site_license_steamclient_proto_rawDescGZIP(), []int{8}
}

func (x *CSiteLicense_LCSAssociateUser_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CSiteLicense_LCSAssociateUser_Request) GetLocalIp() uint32 {
	if x != nil && x.LocalIp != nil {
		return *x.LocalIp
	}
	return 0
}

func (x *CSiteLicense_LCSAssociateUser_Request) GetInstanceid() uint64 {
	if x != nil && x.Instanceid != nil {
		return *x.Instanceid
	}
	return 0
}

func (x *CSiteLicense_LCSAssociateUser_Request) GetMachineName() string {
	if x != nil && x.MachineName != nil {
		return *x.MachineName
	}
	return ""
}

type CSiteLicense_LCSAssociateUser_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CSiteLicense_LCSAssociateUser_Response) Reset() {
	*x = CSiteLicense_LCSAssociateUser_Response{}
	mi := &file_steammessages_site_license_steamclient_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSiteLicense_LCSAssociateUser_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSiteLicense_LCSAssociateUser_Response) ProtoMessage() {}

func (x *CSiteLicense_LCSAssociateUser_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_site_license_steamclient_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSiteLicense_LCSAssociateUser_Response.ProtoReflect.Descriptor instead.
func (*CSiteLicense_LCSAssociateUser_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_site_license_steamclient_proto_rawDescGZIP(), []int{9}
}

type CSiteLicense_ClientSeatCheckout_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Steamid       *uint64                `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	Instanceid    *uint64                `protobuf:"fixed64,2,opt,name=instanceid" json:"instanceid,omitempty"`
	Appid         *uint32                `protobuf:"varint,3,opt,name=appid" json:"appid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CSiteLicense_ClientSeatCheckout_Request) Reset() {
	*x = CSiteLicense_ClientSeatCheckout_Request{}
	mi := &file_steammessages_site_license_steamclient_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSiteLicense_ClientSeatCheckout_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSiteLicense_ClientSeatCheckout_Request) ProtoMessage() {}

func (x *CSiteLicense_ClientSeatCheckout_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_site_license_steamclient_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSiteLicense_ClientSeatCheckout_Request.ProtoReflect.Descriptor instead.
func (*CSiteLicense_ClientSeatCheckout_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_site_license_steamclient_proto_rawDescGZIP(), []int{10}
}

func (x *CSiteLicense_ClientSeatCheckout_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CSiteLicense_ClientSeatCheckout_Request) GetInstanceid() uint64 {
	if x != nil && x.Instanceid != nil {
		return *x.Instanceid
	}
	return 0
}

func (x *CSiteLicense_ClientSeatCheckout_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

type CSiteLicense_ClientSeatCheckout_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CSiteLicense_ClientSeatCheckout_Response) Reset() {
	*x = CSiteLicense_ClientSeatCheckout_Response{}
	mi := &file_steammessages_site_license_steamclient_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSiteLicense_ClientSeatCheckout_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSiteLicense_ClientSeatCheckout_Response) ProtoMessage() {}

func (x *CSiteLicense_ClientSeatCheckout_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_site_license_steamclient_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSiteLicense_ClientSeatCheckout_Response.ProtoReflect.Descriptor instead.
func (*CSiteLicense_ClientSeatCheckout_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_site_license_steamclient_proto_rawDescGZIP(), []int{11}
}

type CSiteLicense_ClientGetAvailableSeats_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Steamid       *uint64                `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	Instanceid    *uint64                `protobuf:"fixed64,2,opt,name=instanceid" json:"instanceid,omitempty"`
	Appid         *uint32                `protobuf:"varint,3,opt,name=appid" json:"appid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CSiteLicense_ClientGetAvailableSeats_Request) Reset() {
	*x = CSiteLicense_ClientGetAvailableSeats_Request{}
	mi := &file_steammessages_site_license_steamclient_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSiteLicense_ClientGetAvailableSeats_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSiteLicense_ClientGetAvailableSeats_Request) ProtoMessage() {}

func (x *CSiteLicense_ClientGetAvailableSeats_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_site_license_steamclient_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSiteLicense_ClientGetAvailableSeats_Request.ProtoReflect.Descriptor instead.
func (*CSiteLicense_ClientGetAvailableSeats_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_site_license_steamclient_proto_rawDescGZIP(), []int{12}
}

func (x *CSiteLicense_ClientGetAvailableSeats_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CSiteLicense_ClientGetAvailableSeats_Request) GetInstanceid() uint64 {
	if x != nil && x.Instanceid != nil {
		return *x.Instanceid
	}
	return 0
}

func (x *CSiteLicense_ClientGetAvailableSeats_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

type CSiteLicense_ClientGetAvailableSeats_Response struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	AvailableSeats *uint32                `protobuf:"varint,1,opt,name=available_seats,json=availableSeats" json:"available_seats,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CSiteLicense_ClientGetAvailableSeats_Response) Reset() {
	*x = CSiteLicense_ClientGetAvailableSeats_Response{}
	mi := &file_steammessages_site_license_steamclient_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSiteLicense_ClientGetAvailableSeats_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSiteLicense_ClientGetAvailableSeats_Response) ProtoMessage() {}

func (x *CSiteLicense_ClientGetAvailableSeats_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_site_license_steamclient_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSiteLicense_ClientGetAvailableSeats_Response.ProtoReflect.Descriptor instead.
func (*CSiteLicense_ClientGetAvailableSeats_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_site_license_steamclient_proto_rawDescGZIP(), []int{13}
}

func (x *CSiteLicense_ClientGetAvailableSeats_Response) GetAvailableSeats() uint32 {
	if x != nil && x.AvailableSeats != nil {
		return *x.AvailableSeats
	}
	return 0
}

type CSiteManagerClient_TrackedPayments_Notification_Payment struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Transid        *uint64                `protobuf:"varint,1,opt,name=transid" json:"transid,omitempty"`
	Steamid        *uint64                `protobuf:"varint,2,opt,name=steamid" json:"steamid,omitempty"`
	Amount         *int64                 `protobuf:"varint,3,opt,name=amount" json:"amount,omitempty"`
	Ecurrency      *uint32                `protobuf:"varint,4,opt,name=ecurrency" json:"ecurrency,omitempty"`
	TimeCreated    *int32                 `protobuf:"varint,5,opt,name=time_created,json=timeCreated" json:"time_created,omitempty"`
	PurchaseStatus *int32                 `protobuf:"varint,6,opt,name=purchase_status,json=purchaseStatus" json:"purchase_status,omitempty"`
	MachineName    *string                `protobuf:"bytes,7,opt,name=machine_name,json=machineName" json:"machine_name,omitempty"`
	PersonaName    *string                `protobuf:"bytes,8,opt,name=persona_name,json=personaName" json:"persona_name,omitempty"`
	ProfileUrl     *string                `protobuf:"bytes,9,opt,name=profile_url,json=profileUrl" json:"profile_url,omitempty"`
	AvatarUrl      *string                `protobuf:"bytes,10,opt,name=avatar_url,json=avatarUrl" json:"avatar_url,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CSiteManagerClient_TrackedPayments_Notification_Payment) Reset() {
	*x = CSiteManagerClient_TrackedPayments_Notification_Payment{}
	mi := &file_steammessages_site_license_steamclient_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CSiteManagerClient_TrackedPayments_Notification_Payment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSiteManagerClient_TrackedPayments_Notification_Payment) ProtoMessage() {}

func (x *CSiteManagerClient_TrackedPayments_Notification_Payment) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_site_license_steamclient_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSiteManagerClient_TrackedPayments_Notification_Payment.ProtoReflect.Descriptor instead.
func (*CSiteManagerClient_TrackedPayments_Notification_Payment) Descriptor() ([]byte, []int) {
	return file_steammessages_site_license_steamclient_proto_rawDescGZIP(), []int{3, 0}
}

func (x *CSiteManagerClient_TrackedPayments_Notification_Payment) GetTransid() uint64 {
	if x != nil && x.Transid != nil {
		return *x.Transid
	}
	return 0
}

func (x *CSiteManagerClient_TrackedPayments_Notification_Payment) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CSiteManagerClient_TrackedPayments_Notification_Payment) GetAmount() int64 {
	if x != nil && x.Amount != nil {
		return *x.Amount
	}
	return 0
}

func (x *CSiteManagerClient_TrackedPayments_Notification_Payment) GetEcurrency() uint32 {
	if x != nil && x.Ecurrency != nil {
		return *x.Ecurrency
	}
	return 0
}

func (x *CSiteManagerClient_TrackedPayments_Notification_Payment) GetTimeCreated() int32 {
	if x != nil && x.TimeCreated != nil {
		return *x.TimeCreated
	}
	return 0
}

func (x *CSiteManagerClient_TrackedPayments_Notification_Payment) GetPurchaseStatus() int32 {
	if x != nil && x.PurchaseStatus != nil {
		return *x.PurchaseStatus
	}
	return 0
}

func (x *CSiteManagerClient_TrackedPayments_Notification_Payment) GetMachineName() string {
	if x != nil && x.MachineName != nil {
		return *x.MachineName
	}
	return ""
}

func (x *CSiteManagerClient_TrackedPayments_Notification_Payment) GetPersonaName() string {
	if x != nil && x.PersonaName != nil {
		return *x.PersonaName
	}
	return ""
}

func (x *CSiteManagerClient_TrackedPayments_Notification_Payment) GetProfileUrl() string {
	if x != nil && x.ProfileUrl != nil {
		return *x.ProfileUrl
	}
	return ""
}

func (x *CSiteManagerClient_TrackedPayments_Notification_Payment) GetAvatarUrl() string {
	if x != nil && x.AvatarUrl != nil {
		return *x.AvatarUrl
	}
	return ""
}

var File_steammessages_site_license_steamclient_proto protoreflect.FileDescriptor

const file_steammessages_site_license_steamclient_proto_rawDesc = "" +
	"\n" +
	",steammessages_site_license.steamclient.proto\x1a\x18steammessages_base.proto\x1a,steammessages_unified_base.steamclient.proto\"\xca\x01\n" +
	")CSiteManagerClient_IncomingClient_Request\x12'\n" +
	"\x0fsite_instanceid\x18\x01 \x01(\x06R\x0esiteInstanceid\x12%\n" +
	"\x0eclient_steamid\x18\x02 \x01(\x06R\rclientSteamid\x12&\n" +
	"\x0fclient_local_ip\x18\x03 \x01(\aR\rclientLocalIp\x12%\n" +
	"\x0econnection_key\x18\x04 \x01(\fR\rconnectionKey\",\n" +
	"*CSiteManagerClient_IncomingClient_Response\"^\n" +
	",CSiteLicense_ClientSeatCheckout_Notification\x12\x14\n" +
	"\x05appid\x18\x01 \x01(\rR\x05appid\x12\x18\n" +
	"\aeresult\x18\x02 \x01(\rR\aeresult\"\xe8\x03\n" +
	"/CSiteManagerClient_TrackedPayments_Notification\x12\x17\n" +
	"\asite_id\x18\x01 \x01(\x06R\x06siteId\x12T\n" +
	"\bpayments\x18\x02 \x03(\v28.CSiteManagerClient_TrackedPayments_Notification.PaymentR\bpayments\x1a\xc5\x02\n" +
	"\aPayment\x12\x18\n" +
	"\atransid\x18\x01 \x01(\x04R\atransid\x12\x18\n" +
	"\asteamid\x18\x02 \x01(\x04R\asteamid\x12\x16\n" +
	"\x06amount\x18\x03 \x01(\x03R\x06amount\x12\x1c\n" +
	"\tecurrency\x18\x04 \x01(\rR\tecurrency\x12!\n" +
	"\ftime_created\x18\x05 \x01(\x05R\vtimeCreated\x12'\n" +
	"\x0fpurchase_status\x18\x06 \x01(\x05R\x0epurchaseStatus\x12!\n" +
	"\fmachine_name\x18\a \x01(\tR\vmachineName\x12!\n" +
	"\fpersona_name\x18\b \x01(\tR\vpersonaName\x12\x1f\n" +
	"\vprofile_url\x18\t \x01(\tR\n" +
	"profileUrl\x12\x1d\n" +
	"\n" +
	"avatar_url\x18\n" +
	" \x01(\tR\tavatarUrl\"\x9e\x01\n" +
	"(CSiteLicense_InitiateAssociation_Request\x12!\n" +
	"\fsite_steamid\x18\x01 \x01(\x06R\vsiteSteamid\x12'\n" +
	"\x0fsite_instanceid\x18\x02 \x01(\x06R\x0esiteInstanceid\x12&\n" +
	"\x0fclient_local_ip\x18\x03 \x01(\aR\rclientLocalIp\"R\n" +
	")CSiteLicense_InitiateAssociation_Response\x12%\n" +
	"\x0econnection_key\x18\x01 \x01(\fR\rconnectionKey\"F\n" +
	"$CSiteLicense_LCSAuthenticate_Request\x12\x1e\n" +
	"\n" +
	"instanceid\x18\x01 \x01(\x06R\n" +
	"instanceid\"\xa8\x01\n" +
	"%CSiteLicense_LCSAuthenticate_Response\x12\x17\n" +
	"\asite_id\x18\x01 \x01(\x04R\x06siteId\x12\x1b\n" +
	"\tsite_name\x18\x02 \x01(\tR\bsiteName\x12\x1f\n" +
	"\vnew_session\x18\x03 \x01(\bR\n" +
	"newSession\x12(\n" +
	"\x10no_site_licenses\x18\x04 \x01(\bR\x0enoSiteLicenses\"\x9f\x01\n" +
	"%CSiteLicense_LCSAssociateUser_Request\x12\x18\n" +
	"\asteamid\x18\x01 \x01(\x06R\asteamid\x12\x19\n" +
	"\blocal_ip\x18\x02 \x01(\aR\alocalIp\x12\x1e\n" +
	"\n" +
	"instanceid\x18\x03 \x01(\x06R\n" +
	"instanceid\x12!\n" +
	"\fmachine_name\x18\x04 \x01(\tR\vmachineName\"(\n" +
	"&CSiteLicense_LCSAssociateUser_Response\"y\n" +
	"'CSiteLicense_ClientSeatCheckout_Request\x12\x18\n" +
	"\asteamid\x18\x01 \x01(\x06R\asteamid\x12\x1e\n" +
	"\n" +
	"instanceid\x18\x02 \x01(\x06R\n" +
	"instanceid\x12\x14\n" +
	"\x05appid\x18\x03 \x01(\rR\x05appid\"*\n" +
	"(CSiteLicense_ClientSeatCheckout_Response\"~\n" +
	",CSiteLicense_ClientGetAvailableSeats_Request\x12\x18\n" +
	"\asteamid\x18\x01 \x01(\x06R\asteamid\x12\x1e\n" +
	"\n" +
	"instanceid\x18\x02 \x01(\x06R\n" +
	"instanceid\x12\x14\n" +
	"\x05appid\x18\x03 \x01(\rR\x05appid\"X\n" +
	"-CSiteLicense_ClientGetAvailableSeats_Response\x12'\n" +
	"\x0favailable_seats\x18\x01 \x01(\rR\x0eavailableSeats2\xc0\x02\n" +
	"\x11SiteManagerClient\x12i\n" +
	"\x0eIncomingClient\x12*.CSiteManagerClient_IncomingClient_Request\x1a+.CSiteManagerClient_IncomingClient_Response\x12\\\n" +
	"\x1eClientSeatCheckoutNotification\x12-.CSiteLicense_ClientSeatCheckout_Notification\x1a\v.NoResponse\x12\\\n" +
	"\x1bTrackedPaymentsNotification\x120.CSiteManagerClient_TrackedPayments_Notification\x1a\v.NoResponse\x1a\x04\xc0\xb5\x18\x022\xa7\x04\n" +
	"\vSiteLicense\x12l\n" +
	"\x13InitiateAssociation\x12).CSiteLicense_InitiateAssociation_Request\x1a*.CSiteLicense_InitiateAssociation_Response\x12`\n" +
	"\x0fLCSAuthenticate\x12%.CSiteLicense_LCSAuthenticate_Request\x1a&.CSiteLicense_LCSAuthenticate_Response\x12c\n" +
	"\x10LCSAssociateUser\x12&.CSiteLicense_LCSAssociateUser_Request\x1a'.CSiteLicense_LCSAssociateUser_Response\x12i\n" +
	"\x12ClientSeatCheckout\x12(.CSiteLicense_ClientSeatCheckout_Request\x1a).CSiteLicense_ClientSeatCheckout_Response\x12x\n" +
	"\x17ClientGetAvailableSeats\x12-.CSiteLicense_ClientGetAvailableSeats_Request\x1a..CSiteLicense_ClientGetAvailableSeats_ResponseB\x03\x80\x01\x01"

var (
	file_steammessages_site_license_steamclient_proto_rawDescOnce sync.Once
	file_steammessages_site_license_steamclient_proto_rawDescData []byte
)

func file_steammessages_site_license_steamclient_proto_rawDescGZIP() []byte {
	file_steammessages_site_license_steamclient_proto_rawDescOnce.Do(func() {
		file_steammessages_site_license_steamclient_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_steammessages_site_license_steamclient_proto_rawDesc), len(file_steammessages_site_license_steamclient_proto_rawDesc)))
	})
	return file_steammessages_site_license_steamclient_proto_rawDescData
}

var file_steammessages_site_license_steamclient_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_steammessages_site_license_steamclient_proto_goTypes = []any{
	(*CSiteManagerClient_IncomingClient_Request)(nil),               // 0: CSiteManagerClient_IncomingClient_Request
	(*CSiteManagerClient_IncomingClient_Response)(nil),              // 1: CSiteManagerClient_IncomingClient_Response
	(*CSiteLicense_ClientSeatCheckout_Notification)(nil),            // 2: CSiteLicense_ClientSeatCheckout_Notification
	(*CSiteManagerClient_TrackedPayments_Notification)(nil),         // 3: CSiteManagerClient_TrackedPayments_Notification
	(*CSiteLicense_InitiateAssociation_Request)(nil),                // 4: CSiteLicense_InitiateAssociation_Request
	(*CSiteLicense_InitiateAssociation_Response)(nil),               // 5: CSiteLicense_InitiateAssociation_Response
	(*CSiteLicense_LCSAuthenticate_Request)(nil),                    // 6: CSiteLicense_LCSAuthenticate_Request
	(*CSiteLicense_LCSAuthenticate_Response)(nil),                   // 7: CSiteLicense_LCSAuthenticate_Response
	(*CSiteLicense_LCSAssociateUser_Request)(nil),                   // 8: CSiteLicense_LCSAssociateUser_Request
	(*CSiteLicense_LCSAssociateUser_Response)(nil),                  // 9: CSiteLicense_LCSAssociateUser_Response
	(*CSiteLicense_ClientSeatCheckout_Request)(nil),                 // 10: CSiteLicense_ClientSeatCheckout_Request
	(*CSiteLicense_ClientSeatCheckout_Response)(nil),                // 11: CSiteLicense_ClientSeatCheckout_Response
	(*CSiteLicense_ClientGetAvailableSeats_Request)(nil),            // 12: CSiteLicense_ClientGetAvailableSeats_Request
	(*CSiteLicense_ClientGetAvailableSeats_Response)(nil),           // 13: CSiteLicense_ClientGetAvailableSeats_Response
	(*CSiteManagerClient_TrackedPayments_Notification_Payment)(nil), // 14: CSiteManagerClient_TrackedPayments_Notification.Payment
	(*NoResponse)(nil), // 15: NoResponse
}
var file_steammessages_site_license_steamclient_proto_depIdxs = []int32{
	14, // 0: CSiteManagerClient_TrackedPayments_Notification.payments:type_name -> CSiteManagerClient_TrackedPayments_Notification.Payment
	0,  // 1: SiteManagerClient.IncomingClient:input_type -> CSiteManagerClient_IncomingClient_Request
	2,  // 2: SiteManagerClient.ClientSeatCheckoutNotification:input_type -> CSiteLicense_ClientSeatCheckout_Notification
	3,  // 3: SiteManagerClient.TrackedPaymentsNotification:input_type -> CSiteManagerClient_TrackedPayments_Notification
	4,  // 4: SiteLicense.InitiateAssociation:input_type -> CSiteLicense_InitiateAssociation_Request
	6,  // 5: SiteLicense.LCSAuthenticate:input_type -> CSiteLicense_LCSAuthenticate_Request
	8,  // 6: SiteLicense.LCSAssociateUser:input_type -> CSiteLicense_LCSAssociateUser_Request
	10, // 7: SiteLicense.ClientSeatCheckout:input_type -> CSiteLicense_ClientSeatCheckout_Request
	12, // 8: SiteLicense.ClientGetAvailableSeats:input_type -> CSiteLicense_ClientGetAvailableSeats_Request
	1,  // 9: SiteManagerClient.IncomingClient:output_type -> CSiteManagerClient_IncomingClient_Response
	15, // 10: SiteManagerClient.ClientSeatCheckoutNotification:output_type -> NoResponse
	15, // 11: SiteManagerClient.TrackedPaymentsNotification:output_type -> NoResponse
	5,  // 12: SiteLicense.InitiateAssociation:output_type -> CSiteLicense_InitiateAssociation_Response
	7,  // 13: SiteLicense.LCSAuthenticate:output_type -> CSiteLicense_LCSAuthenticate_Response
	9,  // 14: SiteLicense.LCSAssociateUser:output_type -> CSiteLicense_LCSAssociateUser_Response
	11, // 15: SiteLicense.ClientSeatCheckout:output_type -> CSiteLicense_ClientSeatCheckout_Response
	13, // 16: SiteLicense.ClientGetAvailableSeats:output_type -> CSiteLicense_ClientGetAvailableSeats_Response
	9,  // [9:17] is the sub-list for method output_type
	1,  // [1:9] is the sub-list for method input_type
	1,  // [1:1] is the sub-list for extension type_name
	1,  // [1:1] is the sub-list for extension extendee
	0,  // [0:1] is the sub-list for field type_name
}

func init() { file_steammessages_site_license_steamclient_proto_init() }
func file_steammessages_site_license_steamclient_proto_init() {
	if File_steammessages_site_license_steamclient_proto != nil {
		return
	}
	file_steammessages_base_proto_init()
	file_steammessages_unified_base_steamclient_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_steammessages_site_license_steamclient_proto_rawDesc), len(file_steammessages_site_license_steamclient_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_steammessages_site_license_steamclient_proto_goTypes,
		DependencyIndexes: file_steammessages_site_license_steamclient_proto_depIdxs,
		MessageInfos:      file_steammessages_site_license_steamclient_proto_msgTypes,
	}.Build()
	File_steammessages_site_license_steamclient_proto = out.File
	file_steammessages_site_license_steamclient_proto_goTypes = nil
	file_steammessages_site_license_steamclient_proto_depIdxs = nil
}
