// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v6.32.0
// source: steammessages_gameservers.steamclient.proto

package steampb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CGameServers_QueryByFakeIP_Request_EQueryType int32

const (
	CGameServers_QueryByFakeIP_Request_Query_Invalid CGameServers_QueryByFakeIP_Request_EQueryType = 0
	CGameServers_QueryByFakeIP_Request_Query_Ping    CGameServers_QueryByFakeIP_Request_EQueryType = 1
	CGameServers_QueryByFakeIP_Request_Query_Players CGameServers_QueryByFakeIP_Request_EQueryType = 2
	CGameServers_QueryByFakeIP_Request_Query_Rules   CGameServers_QueryByFakeIP_Request_EQueryType = 3
)

// Enum value maps for CGameServers_QueryByFakeIP_Request_EQueryType.
var (
	CGameServers_QueryByFakeIP_Request_EQueryType_name = map[int32]string{
		0: "Query_Invalid",
		1: "Query_Ping",
		2: "Query_Players",
		3: "Query_Rules",
	}
	CGameServers_QueryByFakeIP_Request_EQueryType_value = map[string]int32{
		"Query_Invalid": 0,
		"Query_Ping":    1,
		"Query_Players": 2,
		"Query_Rules":   3,
	}
)

func (x CGameServers_QueryByFakeIP_Request_EQueryType) Enum() *CGameServers_QueryByFakeIP_Request_EQueryType {
	p := new(CGameServers_QueryByFakeIP_Request_EQueryType)
	*p = x
	return p
}

func (x CGameServers_QueryByFakeIP_Request_EQueryType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CGameServers_QueryByFakeIP_Request_EQueryType) Descriptor() protoreflect.EnumDescriptor {
	return file_steammessages_gameservers_steamclient_proto_enumTypes[0].Descriptor()
}

func (CGameServers_QueryByFakeIP_Request_EQueryType) Type() protoreflect.EnumType {
	return &file_steammessages_gameservers_steamclient_proto_enumTypes[0]
}

func (x CGameServers_QueryByFakeIP_Request_EQueryType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CGameServers_QueryByFakeIP_Request_EQueryType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CGameServers_QueryByFakeIP_Request_EQueryType(num)
	return nil
}

// Deprecated: Use CGameServers_QueryByFakeIP_Request_EQueryType.Descriptor instead.
func (CGameServers_QueryByFakeIP_Request_EQueryType) EnumDescriptor() ([]byte, []int) {
	return file_steammessages_gameservers_steamclient_proto_rawDescGZIP(), []int{3, 0}
}

type CGameServers_GetServerSteamIDsByIP_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ServerIps     []string               `protobuf:"bytes,1,rep,name=server_ips,json=serverIps" json:"server_ips,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CGameServers_GetServerSteamIDsByIP_Request) Reset() {
	*x = CGameServers_GetServerSteamIDsByIP_Request{}
	mi := &file_steammessages_gameservers_steamclient_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameServers_GetServerSteamIDsByIP_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameServers_GetServerSteamIDsByIP_Request) ProtoMessage() {}

func (x *CGameServers_GetServerSteamIDsByIP_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_gameservers_steamclient_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameServers_GetServerSteamIDsByIP_Request.ProtoReflect.Descriptor instead.
func (*CGameServers_GetServerSteamIDsByIP_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_gameservers_steamclient_proto_rawDescGZIP(), []int{0}
}

func (x *CGameServers_GetServerSteamIDsByIP_Request) GetServerIps() []string {
	if x != nil {
		return x.ServerIps
	}
	return nil
}

type CGameServers_IPsWithSteamIDs_Response struct {
	state         protoimpl.MessageState                          `protogen:"open.v1"`
	Servers       []*CGameServers_IPsWithSteamIDs_Response_Server `protobuf:"bytes,1,rep,name=servers" json:"servers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CGameServers_IPsWithSteamIDs_Response) Reset() {
	*x = CGameServers_IPsWithSteamIDs_Response{}
	mi := &file_steammessages_gameservers_steamclient_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameServers_IPsWithSteamIDs_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameServers_IPsWithSteamIDs_Response) ProtoMessage() {}

func (x *CGameServers_IPsWithSteamIDs_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_gameservers_steamclient_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameServers_IPsWithSteamIDs_Response.ProtoReflect.Descriptor instead.
func (*CGameServers_IPsWithSteamIDs_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_gameservers_steamclient_proto_rawDescGZIP(), []int{1}
}

func (x *CGameServers_IPsWithSteamIDs_Response) GetServers() []*CGameServers_IPsWithSteamIDs_Response_Server {
	if x != nil {
		return x.Servers
	}
	return nil
}

type CGameServers_GetServerIPsBySteamID_Request struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	ServerSteamids []uint64               `protobuf:"fixed64,1,rep,name=server_steamids,json=serverSteamids" json:"server_steamids,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CGameServers_GetServerIPsBySteamID_Request) Reset() {
	*x = CGameServers_GetServerIPsBySteamID_Request{}
	mi := &file_steammessages_gameservers_steamclient_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameServers_GetServerIPsBySteamID_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameServers_GetServerIPsBySteamID_Request) ProtoMessage() {}

func (x *CGameServers_GetServerIPsBySteamID_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_gameservers_steamclient_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameServers_GetServerIPsBySteamID_Request.ProtoReflect.Descriptor instead.
func (*CGameServers_GetServerIPsBySteamID_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_gameservers_steamclient_proto_rawDescGZIP(), []int{2}
}

func (x *CGameServers_GetServerIPsBySteamID_Request) GetServerSteamids() []uint64 {
	if x != nil {
		return x.ServerSteamids
	}
	return nil
}

type CGameServers_QueryByFakeIP_Request struct {
	state         protoimpl.MessageState                         `protogen:"open.v1"`
	FakeIp        *uint32                                        `protobuf:"varint,1,opt,name=fake_ip,json=fakeIp" json:"fake_ip,omitempty"`
	FakePort      *uint32                                        `protobuf:"varint,2,opt,name=fake_port,json=fakePort" json:"fake_port,omitempty"`
	AppId         *uint32                                        `protobuf:"varint,3,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	QueryType     *CGameServers_QueryByFakeIP_Request_EQueryType `protobuf:"varint,4,opt,name=query_type,json=queryType,enum=CGameServers_QueryByFakeIP_Request_EQueryType,def=0" json:"query_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CGameServers_QueryByFakeIP_Request fields.
const (
	Default_CGameServers_QueryByFakeIP_Request_QueryType = CGameServers_QueryByFakeIP_Request_Query_Invalid
)

func (x *CGameServers_QueryByFakeIP_Request) Reset() {
	*x = CGameServers_QueryByFakeIP_Request{}
	mi := &file_steammessages_gameservers_steamclient_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameServers_QueryByFakeIP_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameServers_QueryByFakeIP_Request) ProtoMessage() {}

func (x *CGameServers_QueryByFakeIP_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_gameservers_steamclient_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameServers_QueryByFakeIP_Request.ProtoReflect.Descriptor instead.
func (*CGameServers_QueryByFakeIP_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_gameservers_steamclient_proto_rawDescGZIP(), []int{3}
}

func (x *CGameServers_QueryByFakeIP_Request) GetFakeIp() uint32 {
	if x != nil && x.FakeIp != nil {
		return *x.FakeIp
	}
	return 0
}

func (x *CGameServers_QueryByFakeIP_Request) GetFakePort() uint32 {
	if x != nil && x.FakePort != nil {
		return *x.FakePort
	}
	return 0
}

func (x *CGameServers_QueryByFakeIP_Request) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CGameServers_QueryByFakeIP_Request) GetQueryType() CGameServers_QueryByFakeIP_Request_EQueryType {
	if x != nil && x.QueryType != nil {
		return *x.QueryType
	}
	return Default_CGameServers_QueryByFakeIP_Request_QueryType
}

type CMsgGameServerPingQueryData struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	ServerIp            *CMsgIPAddress         `protobuf:"bytes,1,opt,name=server_ip,json=serverIp" json:"server_ip,omitempty"`
	QueryPort           *uint32                `protobuf:"varint,2,opt,name=query_port,json=queryPort" json:"query_port,omitempty"`
	GamePort            *uint32                `protobuf:"varint,3,opt,name=game_port,json=gamePort" json:"game_port,omitempty"`
	SpectatorPort       *uint32                `protobuf:"varint,4,opt,name=spectator_port,json=spectatorPort" json:"spectator_port,omitempty"`
	SpectatorServerName *string                `protobuf:"bytes,5,opt,name=spectator_server_name,json=spectatorServerName" json:"spectator_server_name,omitempty"`
	ServerName          *string                `protobuf:"bytes,6,opt,name=server_name,json=serverName" json:"server_name,omitempty"`
	Steamid             *uint64                `protobuf:"fixed64,7,opt,name=steamid" json:"steamid,omitempty"`
	AppId               *uint32                `protobuf:"varint,8,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	Gamedir             *string                `protobuf:"bytes,9,opt,name=gamedir" json:"gamedir,omitempty"`
	Map                 *string                `protobuf:"bytes,10,opt,name=map" json:"map,omitempty"`
	GameDescription     *string                `protobuf:"bytes,11,opt,name=game_description,json=gameDescription" json:"game_description,omitempty"`
	Gametype            *string                `protobuf:"bytes,12,opt,name=gametype" json:"gametype,omitempty"`
	NumPlayers          *uint32                `protobuf:"varint,13,opt,name=num_players,json=numPlayers" json:"num_players,omitempty"`
	MaxPlayers          *uint32                `protobuf:"varint,14,opt,name=max_players,json=maxPlayers" json:"max_players,omitempty"`
	NumBots             *uint32                `protobuf:"varint,15,opt,name=num_bots,json=numBots" json:"num_bots,omitempty"`
	Password            *bool                  `protobuf:"varint,16,opt,name=password" json:"password,omitempty"`
	Secure              *bool                  `protobuf:"varint,17,opt,name=secure" json:"secure,omitempty"`
	Dedicated           *bool                  `protobuf:"varint,18,opt,name=dedicated" json:"dedicated,omitempty"`
	Version             *string                `protobuf:"bytes,19,opt,name=version" json:"version,omitempty"`
	SdrPopid            *uint32                `protobuf:"fixed32,20,opt,name=sdr_popid,json=sdrPopid" json:"sdr_popid,omitempty"`
	SdrLocationString   *string                `protobuf:"bytes,21,opt,name=sdr_location_string,json=sdrLocationString" json:"sdr_location_string,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *CMsgGameServerPingQueryData) Reset() {
	*x = CMsgGameServerPingQueryData{}
	mi := &file_steammessages_gameservers_steamclient_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGameServerPingQueryData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGameServerPingQueryData) ProtoMessage() {}

func (x *CMsgGameServerPingQueryData) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_gameservers_steamclient_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGameServerPingQueryData.ProtoReflect.Descriptor instead.
func (*CMsgGameServerPingQueryData) Descriptor() ([]byte, []int) {
	return file_steammessages_gameservers_steamclient_proto_rawDescGZIP(), []int{4}
}

func (x *CMsgGameServerPingQueryData) GetServerIp() *CMsgIPAddress {
	if x != nil {
		return x.ServerIp
	}
	return nil
}

func (x *CMsgGameServerPingQueryData) GetQueryPort() uint32 {
	if x != nil && x.QueryPort != nil {
		return *x.QueryPort
	}
	return 0
}

func (x *CMsgGameServerPingQueryData) GetGamePort() uint32 {
	if x != nil && x.GamePort != nil {
		return *x.GamePort
	}
	return 0
}

func (x *CMsgGameServerPingQueryData) GetSpectatorPort() uint32 {
	if x != nil && x.SpectatorPort != nil {
		return *x.SpectatorPort
	}
	return 0
}

func (x *CMsgGameServerPingQueryData) GetSpectatorServerName() string {
	if x != nil && x.SpectatorServerName != nil {
		return *x.SpectatorServerName
	}
	return ""
}

func (x *CMsgGameServerPingQueryData) GetServerName() string {
	if x != nil && x.ServerName != nil {
		return *x.ServerName
	}
	return ""
}

func (x *CMsgGameServerPingQueryData) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CMsgGameServerPingQueryData) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CMsgGameServerPingQueryData) GetGamedir() string {
	if x != nil && x.Gamedir != nil {
		return *x.Gamedir
	}
	return ""
}

func (x *CMsgGameServerPingQueryData) GetMap() string {
	if x != nil && x.Map != nil {
		return *x.Map
	}
	return ""
}

func (x *CMsgGameServerPingQueryData) GetGameDescription() string {
	if x != nil && x.GameDescription != nil {
		return *x.GameDescription
	}
	return ""
}

func (x *CMsgGameServerPingQueryData) GetGametype() string {
	if x != nil && x.Gametype != nil {
		return *x.Gametype
	}
	return ""
}

func (x *CMsgGameServerPingQueryData) GetNumPlayers() uint32 {
	if x != nil && x.NumPlayers != nil {
		return *x.NumPlayers
	}
	return 0
}

func (x *CMsgGameServerPingQueryData) GetMaxPlayers() uint32 {
	if x != nil && x.MaxPlayers != nil {
		return *x.MaxPlayers
	}
	return 0
}

func (x *CMsgGameServerPingQueryData) GetNumBots() uint32 {
	if x != nil && x.NumBots != nil {
		return *x.NumBots
	}
	return 0
}

func (x *CMsgGameServerPingQueryData) GetPassword() bool {
	if x != nil && x.Password != nil {
		return *x.Password
	}
	return false
}

func (x *CMsgGameServerPingQueryData) GetSecure() bool {
	if x != nil && x.Secure != nil {
		return *x.Secure
	}
	return false
}

func (x *CMsgGameServerPingQueryData) GetDedicated() bool {
	if x != nil && x.Dedicated != nil {
		return *x.Dedicated
	}
	return false
}

func (x *CMsgGameServerPingQueryData) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

func (x *CMsgGameServerPingQueryData) GetSdrPopid() uint32 {
	if x != nil && x.SdrPopid != nil {
		return *x.SdrPopid
	}
	return 0
}

func (x *CMsgGameServerPingQueryData) GetSdrLocationString() string {
	if x != nil && x.SdrLocationString != nil {
		return *x.SdrLocationString
	}
	return ""
}

type CMsgGameServerPlayersQueryData struct {
	state         protoimpl.MessageState                   `protogen:"open.v1"`
	Players       []*CMsgGameServerPlayersQueryData_Player `protobuf:"bytes,1,rep,name=players" json:"players,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGameServerPlayersQueryData) Reset() {
	*x = CMsgGameServerPlayersQueryData{}
	mi := &file_steammessages_gameservers_steamclient_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGameServerPlayersQueryData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGameServerPlayersQueryData) ProtoMessage() {}

func (x *CMsgGameServerPlayersQueryData) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_gameservers_steamclient_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGameServerPlayersQueryData.ProtoReflect.Descriptor instead.
func (*CMsgGameServerPlayersQueryData) Descriptor() ([]byte, []int) {
	return file_steammessages_gameservers_steamclient_proto_rawDescGZIP(), []int{5}
}

func (x *CMsgGameServerPlayersQueryData) GetPlayers() []*CMsgGameServerPlayersQueryData_Player {
	if x != nil {
		return x.Players
	}
	return nil
}

type CMsgGameServerRulesQueryData struct {
	state         protoimpl.MessageState               `protogen:"open.v1"`
	Rules         []*CMsgGameServerRulesQueryData_Rule `protobuf:"bytes,1,rep,name=rules" json:"rules,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGameServerRulesQueryData) Reset() {
	*x = CMsgGameServerRulesQueryData{}
	mi := &file_steammessages_gameservers_steamclient_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGameServerRulesQueryData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGameServerRulesQueryData) ProtoMessage() {}

func (x *CMsgGameServerRulesQueryData) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_gameservers_steamclient_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGameServerRulesQueryData.ProtoReflect.Descriptor instead.
func (*CMsgGameServerRulesQueryData) Descriptor() ([]byte, []int) {
	return file_steammessages_gameservers_steamclient_proto_rawDescGZIP(), []int{6}
}

func (x *CMsgGameServerRulesQueryData) GetRules() []*CMsgGameServerRulesQueryData_Rule {
	if x != nil {
		return x.Rules
	}
	return nil
}

type CGameServers_GameServerQuery_Response struct {
	state         protoimpl.MessageState          `protogen:"open.v1"`
	PingData      *CMsgGameServerPingQueryData    `protobuf:"bytes,1,opt,name=ping_data,json=pingData" json:"ping_data,omitempty"`
	PlayersData   *CMsgGameServerPlayersQueryData `protobuf:"bytes,2,opt,name=players_data,json=playersData" json:"players_data,omitempty"`
	RulesData     *CMsgGameServerRulesQueryData   `protobuf:"bytes,3,opt,name=rules_data,json=rulesData" json:"rules_data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CGameServers_GameServerQuery_Response) Reset() {
	*x = CGameServers_GameServerQuery_Response{}
	mi := &file_steammessages_gameservers_steamclient_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameServers_GameServerQuery_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameServers_GameServerQuery_Response) ProtoMessage() {}

func (x *CGameServers_GameServerQuery_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_gameservers_steamclient_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameServers_GameServerQuery_Response.ProtoReflect.Descriptor instead.
func (*CGameServers_GameServerQuery_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_gameservers_steamclient_proto_rawDescGZIP(), []int{7}
}

func (x *CGameServers_GameServerQuery_Response) GetPingData() *CMsgGameServerPingQueryData {
	if x != nil {
		return x.PingData
	}
	return nil
}

func (x *CGameServers_GameServerQuery_Response) GetPlayersData() *CMsgGameServerPlayersQueryData {
	if x != nil {
		return x.PlayersData
	}
	return nil
}

func (x *CGameServers_GameServerQuery_Response) GetRulesData() *CMsgGameServerRulesQueryData {
	if x != nil {
		return x.RulesData
	}
	return nil
}

type CGameServers_ReportServerPingReply_Notification struct {
	state                   protoimpl.MessageState       `protogen:"open.v1"`
	ServerData              *CMsgGameServerPingQueryData `protobuf:"bytes,1,opt,name=server_data,json=serverData" json:"server_data,omitempty"`
	PingMs                  *uint32                      `protobuf:"varint,2,opt,name=ping_ms,json=pingMs" json:"ping_ms,omitempty"`
	ClientSdrLocationString *string                      `protobuf:"bytes,3,opt,name=client_sdr_location_string,json=clientSdrLocationString" json:"client_sdr_location_string,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *CGameServers_ReportServerPingReply_Notification) Reset() {
	*x = CGameServers_ReportServerPingReply_Notification{}
	mi := &file_steammessages_gameservers_steamclient_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameServers_ReportServerPingReply_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameServers_ReportServerPingReply_Notification) ProtoMessage() {}

func (x *CGameServers_ReportServerPingReply_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_gameservers_steamclient_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameServers_ReportServerPingReply_Notification.ProtoReflect.Descriptor instead.
func (*CGameServers_ReportServerPingReply_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_gameservers_steamclient_proto_rawDescGZIP(), []int{8}
}

func (x *CGameServers_ReportServerPingReply_Notification) GetServerData() *CMsgGameServerPingQueryData {
	if x != nil {
		return x.ServerData
	}
	return nil
}

func (x *CGameServers_ReportServerPingReply_Notification) GetPingMs() uint32 {
	if x != nil && x.PingMs != nil {
		return *x.PingMs
	}
	return 0
}

func (x *CGameServers_ReportServerPingReply_Notification) GetClientSdrLocationString() string {
	if x != nil && x.ClientSdrLocationString != nil {
		return *x.ClientSdrLocationString
	}
	return ""
}

type GameServerClient_QueryServerData_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GameServerClient_QueryServerData_Request) Reset() {
	*x = GameServerClient_QueryServerData_Request{}
	mi := &file_steammessages_gameservers_steamclient_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GameServerClient_QueryServerData_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameServerClient_QueryServerData_Request) ProtoMessage() {}

func (x *GameServerClient_QueryServerData_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_gameservers_steamclient_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameServerClient_QueryServerData_Request.ProtoReflect.Descriptor instead.
func (*GameServerClient_QueryServerData_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_gameservers_steamclient_proto_rawDescGZIP(), []int{9}
}

type GameServerClient_QueryServerData_Response struct {
	state         protoimpl.MessageState          `protogen:"open.v1"`
	PingData      *CMsgGameServerPingQueryData    `protobuf:"bytes,1,opt,name=ping_data,json=pingData" json:"ping_data,omitempty"`
	PlayersData   *CMsgGameServerPlayersQueryData `protobuf:"bytes,2,opt,name=players_data,json=playersData" json:"players_data,omitempty"`
	RulesData     *CMsgGameServerRulesQueryData   `protobuf:"bytes,3,opt,name=rules_data,json=rulesData" json:"rules_data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GameServerClient_QueryServerData_Response) Reset() {
	*x = GameServerClient_QueryServerData_Response{}
	mi := &file_steammessages_gameservers_steamclient_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GameServerClient_QueryServerData_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameServerClient_QueryServerData_Response) ProtoMessage() {}

func (x *GameServerClient_QueryServerData_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_gameservers_steamclient_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameServerClient_QueryServerData_Response.ProtoReflect.Descriptor instead.
func (*GameServerClient_QueryServerData_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_gameservers_steamclient_proto_rawDescGZIP(), []int{10}
}

func (x *GameServerClient_QueryServerData_Response) GetPingData() *CMsgGameServerPingQueryData {
	if x != nil {
		return x.PingData
	}
	return nil
}

func (x *GameServerClient_QueryServerData_Response) GetPlayersData() *CMsgGameServerPlayersQueryData {
	if x != nil {
		return x.PlayersData
	}
	return nil
}

func (x *GameServerClient_QueryServerData_Response) GetRulesData() *CMsgGameServerRulesQueryData {
	if x != nil {
		return x.RulesData
	}
	return nil
}

type CGameServers_IPsWithSteamIDs_Response_Server struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Addr          *string                `protobuf:"bytes,1,opt,name=addr" json:"addr,omitempty"`
	Steamid       *uint64                `protobuf:"fixed64,2,opt,name=steamid" json:"steamid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CGameServers_IPsWithSteamIDs_Response_Server) Reset() {
	*x = CGameServers_IPsWithSteamIDs_Response_Server{}
	mi := &file_steammessages_gameservers_steamclient_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameServers_IPsWithSteamIDs_Response_Server) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameServers_IPsWithSteamIDs_Response_Server) ProtoMessage() {}

func (x *CGameServers_IPsWithSteamIDs_Response_Server) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_gameservers_steamclient_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameServers_IPsWithSteamIDs_Response_Server.ProtoReflect.Descriptor instead.
func (*CGameServers_IPsWithSteamIDs_Response_Server) Descriptor() ([]byte, []int) {
	return file_steammessages_gameservers_steamclient_proto_rawDescGZIP(), []int{1, 0}
}

func (x *CGameServers_IPsWithSteamIDs_Response_Server) GetAddr() string {
	if x != nil && x.Addr != nil {
		return *x.Addr
	}
	return ""
}

func (x *CGameServers_IPsWithSteamIDs_Response_Server) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

type CMsgGameServerPlayersQueryData_Player struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          *string                `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Score         *uint32                `protobuf:"varint,2,opt,name=score" json:"score,omitempty"`
	TimePlayed    *uint32                `protobuf:"varint,3,opt,name=time_played,json=timePlayed" json:"time_played,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGameServerPlayersQueryData_Player) Reset() {
	*x = CMsgGameServerPlayersQueryData_Player{}
	mi := &file_steammessages_gameservers_steamclient_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGameServerPlayersQueryData_Player) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGameServerPlayersQueryData_Player) ProtoMessage() {}

func (x *CMsgGameServerPlayersQueryData_Player) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_gameservers_steamclient_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGameServerPlayersQueryData_Player.ProtoReflect.Descriptor instead.
func (*CMsgGameServerPlayersQueryData_Player) Descriptor() ([]byte, []int) {
	return file_steammessages_gameservers_steamclient_proto_rawDescGZIP(), []int{5, 0}
}

func (x *CMsgGameServerPlayersQueryData_Player) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CMsgGameServerPlayersQueryData_Player) GetScore() uint32 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

func (x *CMsgGameServerPlayersQueryData_Player) GetTimePlayed() uint32 {
	if x != nil && x.TimePlayed != nil {
		return *x.TimePlayed
	}
	return 0
}

type CMsgGameServerRulesQueryData_Rule struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Rule          *string                `protobuf:"bytes,1,opt,name=rule" json:"rule,omitempty"`
	Value         *string                `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGameServerRulesQueryData_Rule) Reset() {
	*x = CMsgGameServerRulesQueryData_Rule{}
	mi := &file_steammessages_gameservers_steamclient_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGameServerRulesQueryData_Rule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGameServerRulesQueryData_Rule) ProtoMessage() {}

func (x *CMsgGameServerRulesQueryData_Rule) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_gameservers_steamclient_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGameServerRulesQueryData_Rule.ProtoReflect.Descriptor instead.
func (*CMsgGameServerRulesQueryData_Rule) Descriptor() ([]byte, []int) {
	return file_steammessages_gameservers_steamclient_proto_rawDescGZIP(), []int{6, 0}
}

func (x *CMsgGameServerRulesQueryData_Rule) GetRule() string {
	if x != nil && x.Rule != nil {
		return *x.Rule
	}
	return ""
}

func (x *CMsgGameServerRulesQueryData_Rule) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

var File_steammessages_gameservers_steamclient_proto protoreflect.FileDescriptor

const file_steammessages_gameservers_steamclient_proto_rawDesc = "" +
	"\n" +
	"+steammessages_gameservers.steamclient.proto\x1a\x18steammessages_base.proto\x1a,steammessages_unified_base.steamclient.proto\"K\n" +
	"*CGameServers_GetServerSteamIDsByIP_Request\x12\x1d\n" +
	"\n" +
	"server_ips\x18\x01 \x03(\tR\tserverIps\"\xa8\x01\n" +
	"%CGameServers_IPsWithSteamIDs_Response\x12G\n" +
	"\aservers\x18\x01 \x03(\v2-.CGameServers_IPsWithSteamIDs_Response.ServerR\aservers\x1a6\n" +
	"\x06Server\x12\x12\n" +
	"\x04addr\x18\x01 \x01(\tR\x04addr\x12\x18\n" +
	"\asteamid\x18\x02 \x01(\x06R\asteamid\"U\n" +
	"*CGameServers_GetServerIPsBySteamID_Request\x12'\n" +
	"\x0fserver_steamids\x18\x01 \x03(\x06R\x0eserverSteamids\"\xa4\x02\n" +
	"\"CGameServers_QueryByFakeIP_Request\x12\x17\n" +
	"\afake_ip\x18\x01 \x01(\rR\x06fakeIp\x12\x1b\n" +
	"\tfake_port\x18\x02 \x01(\rR\bfakePort\x12\x15\n" +
	"\x06app_id\x18\x03 \x01(\rR\x05appId\x12\\\n" +
	"\n" +
	"query_type\x18\x04 \x01(\x0e2..CGameServers_QueryByFakeIP_Request.EQueryType:\rQuery_InvalidR\tqueryType\"S\n" +
	"\n" +
	"EQueryType\x12\x11\n" +
	"\rQuery_Invalid\x10\x00\x12\x0e\n" +
	"\n" +
	"Query_Ping\x10\x01\x12\x11\n" +
	"\rQuery_Players\x10\x02\x12\x0f\n" +
	"\vQuery_Rules\x10\x03\"\xbc\x05\n" +
	"\x1bCMsgGameServerPingQueryData\x12+\n" +
	"\tserver_ip\x18\x01 \x01(\v2\x0e.CMsgIPAddressR\bserverIp\x12\x1d\n" +
	"\n" +
	"query_port\x18\x02 \x01(\rR\tqueryPort\x12\x1b\n" +
	"\tgame_port\x18\x03 \x01(\rR\bgamePort\x12%\n" +
	"\x0espectator_port\x18\x04 \x01(\rR\rspectatorPort\x122\n" +
	"\x15spectator_server_name\x18\x05 \x01(\tR\x13spectatorServerName\x12\x1f\n" +
	"\vserver_name\x18\x06 \x01(\tR\n" +
	"serverName\x12\x18\n" +
	"\asteamid\x18\a \x01(\x06R\asteamid\x12\x15\n" +
	"\x06app_id\x18\b \x01(\rR\x05appId\x12\x18\n" +
	"\agamedir\x18\t \x01(\tR\agamedir\x12\x10\n" +
	"\x03map\x18\n" +
	" \x01(\tR\x03map\x12)\n" +
	"\x10game_description\x18\v \x01(\tR\x0fgameDescription\x12\x1a\n" +
	"\bgametype\x18\f \x01(\tR\bgametype\x12\x1f\n" +
	"\vnum_players\x18\r \x01(\rR\n" +
	"numPlayers\x12\x1f\n" +
	"\vmax_players\x18\x0e \x01(\rR\n" +
	"maxPlayers\x12\x19\n" +
	"\bnum_bots\x18\x0f \x01(\rR\anumBots\x12\x1a\n" +
	"\bpassword\x18\x10 \x01(\bR\bpassword\x12\x16\n" +
	"\x06secure\x18\x11 \x01(\bR\x06secure\x12\x1c\n" +
	"\tdedicated\x18\x12 \x01(\bR\tdedicated\x12\x18\n" +
	"\aversion\x18\x13 \x01(\tR\aversion\x12\x1b\n" +
	"\tsdr_popid\x18\x14 \x01(\aR\bsdrPopid\x12.\n" +
	"\x13sdr_location_string\x18\x15 \x01(\tR\x11sdrLocationString\"\xb7\x01\n" +
	"\x1eCMsgGameServerPlayersQueryData\x12@\n" +
	"\aplayers\x18\x01 \x03(\v2&.CMsgGameServerPlayersQueryData.PlayerR\aplayers\x1aS\n" +
	"\x06Player\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x14\n" +
	"\x05score\x18\x02 \x01(\rR\x05score\x12\x1f\n" +
	"\vtime_played\x18\x03 \x01(\rR\n" +
	"timePlayed\"\x8a\x01\n" +
	"\x1cCMsgGameServerRulesQueryData\x128\n" +
	"\x05rules\x18\x01 \x03(\v2\".CMsgGameServerRulesQueryData.RuleR\x05rules\x1a0\n" +
	"\x04Rule\x12\x12\n" +
	"\x04rule\x18\x01 \x01(\tR\x04rule\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value\"\xe4\x01\n" +
	"%CGameServers_GameServerQuery_Response\x129\n" +
	"\tping_data\x18\x01 \x01(\v2\x1c.CMsgGameServerPingQueryDataR\bpingData\x12B\n" +
	"\fplayers_data\x18\x02 \x01(\v2\x1f.CMsgGameServerPlayersQueryDataR\vplayersData\x12<\n" +
	"\n" +
	"rules_data\x18\x03 \x01(\v2\x1d.CMsgGameServerRulesQueryDataR\trulesData\"\xc6\x01\n" +
	"/CGameServers_ReportServerPingReply_Notification\x12=\n" +
	"\vserver_data\x18\x01 \x01(\v2\x1c.CMsgGameServerPingQueryDataR\n" +
	"serverData\x12\x17\n" +
	"\aping_ms\x18\x02 \x01(\rR\x06pingMs\x12;\n" +
	"\x1aclient_sdr_location_string\x18\x03 \x01(\tR\x17clientSdrLocationString\"*\n" +
	"(GameServerClient_QueryServerData_Request\"\xe8\x01\n" +
	")GameServerClient_QueryServerData_Response\x129\n" +
	"\tping_data\x18\x01 \x01(\v2\x1c.CMsgGameServerPingQueryDataR\bpingData\x12B\n" +
	"\fplayers_data\x18\x02 \x01(\v2\x1f.CMsgGameServerPlayersQueryDataR\vplayersData\x12<\n" +
	"\n" +
	"rules_data\x18\x03 \x01(\v2\x1d.CMsgGameServerRulesQueryDataR\trulesData2\x9f\x03\n" +
	"\vGameServers\x12l\n" +
	"\x15GetServerSteamIDsByIP\x12+.CGameServers_GetServerSteamIDsByIP_Request\x1a&.CGameServers_IPsWithSteamIDs_Response\x12l\n" +
	"\x15GetServerIPsBySteamID\x12+.CGameServers_GetServerIPsBySteamID_Request\x1a&.CGameServers_IPsWithSteamIDs_Response\x12\\\n" +
	"\rQueryByFakeIP\x12#.CGameServers_QueryByFakeIP_Request\x1a&.CGameServers_GameServerQuery_Response\x12V\n" +
	"\x15ReportServerPingReply\x120.CGameServers_ReportServerPingReply_Notification\x1a\v.NoResponse2\x82\x01\n" +
	"\x10GameServerClient\x12h\n" +
	"\x0fQueryServerData\x12).GameServerClient_QueryServerData_Request\x1a*.GameServerClient_QueryServerData_Response\x1a\x04\xc0\xb5\x18\x02B\x03\x80\x01\x01"

var (
	file_steammessages_gameservers_steamclient_proto_rawDescOnce sync.Once
	file_steammessages_gameservers_steamclient_proto_rawDescData []byte
)

func file_steammessages_gameservers_steamclient_proto_rawDescGZIP() []byte {
	file_steammessages_gameservers_steamclient_proto_rawDescOnce.Do(func() {
		file_steammessages_gameservers_steamclient_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_steammessages_gameservers_steamclient_proto_rawDesc), len(file_steammessages_gameservers_steamclient_proto_rawDesc)))
	})
	return file_steammessages_gameservers_steamclient_proto_rawDescData
}

var file_steammessages_gameservers_steamclient_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_steammessages_gameservers_steamclient_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_steammessages_gameservers_steamclient_proto_goTypes = []any{
	(CGameServers_QueryByFakeIP_Request_EQueryType)(0),      // 0: CGameServers_QueryByFakeIP_Request.EQueryType
	(*CGameServers_GetServerSteamIDsByIP_Request)(nil),      // 1: CGameServers_GetServerSteamIDsByIP_Request
	(*CGameServers_IPsWithSteamIDs_Response)(nil),           // 2: CGameServers_IPsWithSteamIDs_Response
	(*CGameServers_GetServerIPsBySteamID_Request)(nil),      // 3: CGameServers_GetServerIPsBySteamID_Request
	(*CGameServers_QueryByFakeIP_Request)(nil),              // 4: CGameServers_QueryByFakeIP_Request
	(*CMsgGameServerPingQueryData)(nil),                     // 5: CMsgGameServerPingQueryData
	(*CMsgGameServerPlayersQueryData)(nil),                  // 6: CMsgGameServerPlayersQueryData
	(*CMsgGameServerRulesQueryData)(nil),                    // 7: CMsgGameServerRulesQueryData
	(*CGameServers_GameServerQuery_Response)(nil),           // 8: CGameServers_GameServerQuery_Response
	(*CGameServers_ReportServerPingReply_Notification)(nil), // 9: CGameServers_ReportServerPingReply_Notification
	(*GameServerClient_QueryServerData_Request)(nil),        // 10: GameServerClient_QueryServerData_Request
	(*GameServerClient_QueryServerData_Response)(nil),       // 11: GameServerClient_QueryServerData_Response
	(*CGameServers_IPsWithSteamIDs_Response_Server)(nil),    // 12: CGameServers_IPsWithSteamIDs_Response.Server
	(*CMsgGameServerPlayersQueryData_Player)(nil),           // 13: CMsgGameServerPlayersQueryData.Player
	(*CMsgGameServerRulesQueryData_Rule)(nil),               // 14: CMsgGameServerRulesQueryData.Rule
	(*CMsgIPAddress)(nil),                                   // 15: CMsgIPAddress
	(*NoResponse)(nil),                                      // 16: NoResponse
}
var file_steammessages_gameservers_steamclient_proto_depIdxs = []int32{
	12, // 0: CGameServers_IPsWithSteamIDs_Response.servers:type_name -> CGameServers_IPsWithSteamIDs_Response.Server
	0,  // 1: CGameServers_QueryByFakeIP_Request.query_type:type_name -> CGameServers_QueryByFakeIP_Request.EQueryType
	15, // 2: CMsgGameServerPingQueryData.server_ip:type_name -> CMsgIPAddress
	13, // 3: CMsgGameServerPlayersQueryData.players:type_name -> CMsgGameServerPlayersQueryData.Player
	14, // 4: CMsgGameServerRulesQueryData.rules:type_name -> CMsgGameServerRulesQueryData.Rule
	5,  // 5: CGameServers_GameServerQuery_Response.ping_data:type_name -> CMsgGameServerPingQueryData
	6,  // 6: CGameServers_GameServerQuery_Response.players_data:type_name -> CMsgGameServerPlayersQueryData
	7,  // 7: CGameServers_GameServerQuery_Response.rules_data:type_name -> CMsgGameServerRulesQueryData
	5,  // 8: CGameServers_ReportServerPingReply_Notification.server_data:type_name -> CMsgGameServerPingQueryData
	5,  // 9: GameServerClient_QueryServerData_Response.ping_data:type_name -> CMsgGameServerPingQueryData
	6,  // 10: GameServerClient_QueryServerData_Response.players_data:type_name -> CMsgGameServerPlayersQueryData
	7,  // 11: GameServerClient_QueryServerData_Response.rules_data:type_name -> CMsgGameServerRulesQueryData
	1,  // 12: GameServers.GetServerSteamIDsByIP:input_type -> CGameServers_GetServerSteamIDsByIP_Request
	3,  // 13: GameServers.GetServerIPsBySteamID:input_type -> CGameServers_GetServerIPsBySteamID_Request
	4,  // 14: GameServers.QueryByFakeIP:input_type -> CGameServers_QueryByFakeIP_Request
	9,  // 15: GameServers.ReportServerPingReply:input_type -> CGameServers_ReportServerPingReply_Notification
	10, // 16: GameServerClient.QueryServerData:input_type -> GameServerClient_QueryServerData_Request
	2,  // 17: GameServers.GetServerSteamIDsByIP:output_type -> CGameServers_IPsWithSteamIDs_Response
	2,  // 18: GameServers.GetServerIPsBySteamID:output_type -> CGameServers_IPsWithSteamIDs_Response
	8,  // 19: GameServers.QueryByFakeIP:output_type -> CGameServers_GameServerQuery_Response
	16, // 20: GameServers.ReportServerPingReply:output_type -> NoResponse
	11, // 21: GameServerClient.QueryServerData:output_type -> GameServerClient_QueryServerData_Response
	17, // [17:22] is the sub-list for method output_type
	12, // [12:17] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_steammessages_gameservers_steamclient_proto_init() }
func file_steammessages_gameservers_steamclient_proto_init() {
	if File_steammessages_gameservers_steamclient_proto != nil {
		return
	}
	file_steammessages_base_proto_init()
	file_steammessages_unified_base_steamclient_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_steammessages_gameservers_steamclient_proto_rawDesc), len(file_steammessages_gameservers_steamclient_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_steammessages_gameservers_steamclient_proto_goTypes,
		DependencyIndexes: file_steammessages_gameservers_steamclient_proto_depIdxs,
		EnumInfos:         file_steammessages_gameservers_steamclient_proto_enumTypes,
		MessageInfos:      file_steammessages_gameservers_steamclient_proto_msgTypes,
	}.Build()
	File_steammessages_gameservers_steamclient_proto = out.File
	file_steammessages_gameservers_steamclient_proto_goTypes = nil
	file_steammessages_gameservers_steamclient_proto_depIdxs = nil
}
