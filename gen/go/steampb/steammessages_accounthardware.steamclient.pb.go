// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v6.32.0
// source: steammessages_accounthardware.steamclient.proto

package steampb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EValveIndexComponent int32

const (
	EValveIndexComponent_k_EValveIndexComponentUnknown      EValveIndexComponent = 0
	EValveIndexComponent_k_EValveIndexComponentHMD          EValveIndexComponent = 1
	EValveIndexComponent_k_EValveIndexComponentLeftKnuckle  EValveIndexComponent = 2
	EValveIndexComponent_k_EValveIndexComponentRightKnuckle EValveIndexComponent = 3
	EValveIndexComponent_k_ETempDTst1                       EValveIndexComponent = 4
	EValveIndexComponent_k_ETempDTst2                       EValveIndexComponent = 5
	EValveIndexComponent_k_ETempDTst3                       EValveIndexComponent = 6
)

// Enum value maps for EValveIndexComponent.
var (
	EValveIndexComponent_name = map[int32]string{
		0: "k_EValveIndexComponentUnknown",
		1: "k_EValveIndexComponentHMD",
		2: "k_EValveIndexComponentLeftKnuckle",
		3: "k_EValveIndexComponentRightKnuckle",
		4: "k_ETempDTst1",
		5: "k_ETempDTst2",
		6: "k_ETempDTst3",
	}
	EValveIndexComponent_value = map[string]int32{
		"k_EValveIndexComponentUnknown":      0,
		"k_EValveIndexComponentHMD":          1,
		"k_EValveIndexComponentLeftKnuckle":  2,
		"k_EValveIndexComponentRightKnuckle": 3,
		"k_ETempDTst1":                       4,
		"k_ETempDTst2":                       5,
		"k_ETempDTst3":                       6,
	}
)

func (x EValveIndexComponent) Enum() *EValveIndexComponent {
	p := new(EValveIndexComponent)
	*p = x
	return p
}

func (x EValveIndexComponent) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EValveIndexComponent) Descriptor() protoreflect.EnumDescriptor {
	return file_steammessages_accounthardware_steamclient_proto_enumTypes[0].Descriptor()
}

func (EValveIndexComponent) Type() protoreflect.EnumType {
	return &file_steammessages_accounthardware_steamclient_proto_enumTypes[0]
}

func (x EValveIndexComponent) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EValveIndexComponent) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EValveIndexComponent(num)
	return nil
}

// Deprecated: Use EValveIndexComponent.Descriptor instead.
func (EValveIndexComponent) EnumDescriptor() ([]byte, []int) {
	return file_steammessages_accounthardware_steamclient_proto_rawDescGZIP(), []int{0}
}

type CAccountHardware_RegisterSteamController_Request struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	SerialNumber   *string                `protobuf:"bytes,1,opt,name=serial_number,json=serialNumber" json:"serial_number,omitempty"`
	ControllerCode *string                `protobuf:"bytes,2,opt,name=controller_code,json=controllerCode" json:"controller_code,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CAccountHardware_RegisterSteamController_Request) Reset() {
	*x = CAccountHardware_RegisterSteamController_Request{}
	mi := &file_steammessages_accounthardware_steamclient_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CAccountHardware_RegisterSteamController_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAccountHardware_RegisterSteamController_Request) ProtoMessage() {}

func (x *CAccountHardware_RegisterSteamController_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_accounthardware_steamclient_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAccountHardware_RegisterSteamController_Request.ProtoReflect.Descriptor instead.
func (*CAccountHardware_RegisterSteamController_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_accounthardware_steamclient_proto_rawDescGZIP(), []int{0}
}

func (x *CAccountHardware_RegisterSteamController_Request) GetSerialNumber() string {
	if x != nil && x.SerialNumber != nil {
		return *x.SerialNumber
	}
	return ""
}

func (x *CAccountHardware_RegisterSteamController_Request) GetControllerCode() string {
	if x != nil && x.ControllerCode != nil {
		return *x.ControllerCode
	}
	return ""
}

type CAccountHardware_RegisterSteamController_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CAccountHardware_RegisterSteamController_Response) Reset() {
	*x = CAccountHardware_RegisterSteamController_Response{}
	mi := &file_steammessages_accounthardware_steamclient_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CAccountHardware_RegisterSteamController_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAccountHardware_RegisterSteamController_Response) ProtoMessage() {}

func (x *CAccountHardware_RegisterSteamController_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_accounthardware_steamclient_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAccountHardware_RegisterSteamController_Response.ProtoReflect.Descriptor instead.
func (*CAccountHardware_RegisterSteamController_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_accounthardware_steamclient_proto_rawDescGZIP(), []int{1}
}

type CAccountHardware_CompleteSteamControllerRegistration_Request struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	SerialNumber   *string                `protobuf:"bytes,1,opt,name=serial_number,json=serialNumber" json:"serial_number,omitempty"`
	ControllerCode *string                `protobuf:"bytes,2,opt,name=controller_code,json=controllerCode" json:"controller_code,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CAccountHardware_CompleteSteamControllerRegistration_Request) Reset() {
	*x = CAccountHardware_CompleteSteamControllerRegistration_Request{}
	mi := &file_steammessages_accounthardware_steamclient_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CAccountHardware_CompleteSteamControllerRegistration_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAccountHardware_CompleteSteamControllerRegistration_Request) ProtoMessage() {}

func (x *CAccountHardware_CompleteSteamControllerRegistration_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_accounthardware_steamclient_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAccountHardware_CompleteSteamControllerRegistration_Request.ProtoReflect.Descriptor instead.
func (*CAccountHardware_CompleteSteamControllerRegistration_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_accounthardware_steamclient_proto_rawDescGZIP(), []int{2}
}

func (x *CAccountHardware_CompleteSteamControllerRegistration_Request) GetSerialNumber() string {
	if x != nil && x.SerialNumber != nil {
		return *x.SerialNumber
	}
	return ""
}

func (x *CAccountHardware_CompleteSteamControllerRegistration_Request) GetControllerCode() string {
	if x != nil && x.ControllerCode != nil {
		return *x.ControllerCode
	}
	return ""
}

type CAccountHardware_CompleteSteamControllerRegistration_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CAccountHardware_CompleteSteamControllerRegistration_Response) Reset() {
	*x = CAccountHardware_CompleteSteamControllerRegistration_Response{}
	mi := &file_steammessages_accounthardware_steamclient_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CAccountHardware_CompleteSteamControllerRegistration_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAccountHardware_CompleteSteamControllerRegistration_Response) ProtoMessage() {}

func (x *CAccountHardware_CompleteSteamControllerRegistration_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_accounthardware_steamclient_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAccountHardware_CompleteSteamControllerRegistration_Response.ProtoReflect.Descriptor instead.
func (*CAccountHardware_CompleteSteamControllerRegistration_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_accounthardware_steamclient_proto_rawDescGZIP(), []int{3}
}

type CAccountHardware_QueryAccountsRegisteredToSerial_Request struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	SerialNumber   *string                `protobuf:"bytes,1,opt,name=serial_number,json=serialNumber" json:"serial_number,omitempty"`
	ControllerCode *string                `protobuf:"bytes,2,opt,name=controller_code,json=controllerCode" json:"controller_code,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CAccountHardware_QueryAccountsRegisteredToSerial_Request) Reset() {
	*x = CAccountHardware_QueryAccountsRegisteredToSerial_Request{}
	mi := &file_steammessages_accounthardware_steamclient_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CAccountHardware_QueryAccountsRegisteredToSerial_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAccountHardware_QueryAccountsRegisteredToSerial_Request) ProtoMessage() {}

func (x *CAccountHardware_QueryAccountsRegisteredToSerial_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_accounthardware_steamclient_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAccountHardware_QueryAccountsRegisteredToSerial_Request.ProtoReflect.Descriptor instead.
func (*CAccountHardware_QueryAccountsRegisteredToSerial_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_accounthardware_steamclient_proto_rawDescGZIP(), []int{4}
}

func (x *CAccountHardware_QueryAccountsRegisteredToSerial_Request) GetSerialNumber() string {
	if x != nil && x.SerialNumber != nil {
		return *x.SerialNumber
	}
	return ""
}

func (x *CAccountHardware_QueryAccountsRegisteredToSerial_Request) GetControllerCode() string {
	if x != nil && x.ControllerCode != nil {
		return *x.ControllerCode
	}
	return ""
}

type CAccountHardware_QueryAccountsRegisteredToSerial_Accounts struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Accountid            *uint32                `protobuf:"varint,1,opt,name=accountid" json:"accountid,omitempty"`
	RegistrationComplete *bool                  `protobuf:"varint,2,opt,name=registration_complete,json=registrationComplete" json:"registration_complete,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *CAccountHardware_QueryAccountsRegisteredToSerial_Accounts) Reset() {
	*x = CAccountHardware_QueryAccountsRegisteredToSerial_Accounts{}
	mi := &file_steammessages_accounthardware_steamclient_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CAccountHardware_QueryAccountsRegisteredToSerial_Accounts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAccountHardware_QueryAccountsRegisteredToSerial_Accounts) ProtoMessage() {}

func (x *CAccountHardware_QueryAccountsRegisteredToSerial_Accounts) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_accounthardware_steamclient_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAccountHardware_QueryAccountsRegisteredToSerial_Accounts.ProtoReflect.Descriptor instead.
func (*CAccountHardware_QueryAccountsRegisteredToSerial_Accounts) Descriptor() ([]byte, []int) {
	return file_steammessages_accounthardware_steamclient_proto_rawDescGZIP(), []int{5}
}

func (x *CAccountHardware_QueryAccountsRegisteredToSerial_Accounts) GetAccountid() uint32 {
	if x != nil && x.Accountid != nil {
		return *x.Accountid
	}
	return 0
}

func (x *CAccountHardware_QueryAccountsRegisteredToSerial_Accounts) GetRegistrationComplete() bool {
	if x != nil && x.RegistrationComplete != nil {
		return *x.RegistrationComplete
	}
	return false
}

type CAccountHardware_QueryAccountsRegisteredToSerial_Response struct {
	state         protoimpl.MessageState                                       `protogen:"open.v1"`
	Accounts      []*CAccountHardware_QueryAccountsRegisteredToSerial_Accounts `protobuf:"bytes,1,rep,name=accounts" json:"accounts,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CAccountHardware_QueryAccountsRegisteredToSerial_Response) Reset() {
	*x = CAccountHardware_QueryAccountsRegisteredToSerial_Response{}
	mi := &file_steammessages_accounthardware_steamclient_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CAccountHardware_QueryAccountsRegisteredToSerial_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAccountHardware_QueryAccountsRegisteredToSerial_Response) ProtoMessage() {}

func (x *CAccountHardware_QueryAccountsRegisteredToSerial_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_accounthardware_steamclient_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAccountHardware_QueryAccountsRegisteredToSerial_Response.ProtoReflect.Descriptor instead.
func (*CAccountHardware_QueryAccountsRegisteredToSerial_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_accounthardware_steamclient_proto_rawDescGZIP(), []int{6}
}

func (x *CAccountHardware_QueryAccountsRegisteredToSerial_Response) GetAccounts() []*CAccountHardware_QueryAccountsRegisteredToSerial_Accounts {
	if x != nil {
		return x.Accounts
	}
	return nil
}

type CAccountHardware_UpdateControllerUsageReport_Request struct {
	state         protoimpl.MessageState                                             `protogen:"open.v1"`
	Controllers   []*CAccountHardware_UpdateControllerUsageReport_Request_Controller `protobuf:"bytes,1,rep,name=controllers" json:"controllers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CAccountHardware_UpdateControllerUsageReport_Request) Reset() {
	*x = CAccountHardware_UpdateControllerUsageReport_Request{}
	mi := &file_steammessages_accounthardware_steamclient_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CAccountHardware_UpdateControllerUsageReport_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAccountHardware_UpdateControllerUsageReport_Request) ProtoMessage() {}

func (x *CAccountHardware_UpdateControllerUsageReport_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_accounthardware_steamclient_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAccountHardware_UpdateControllerUsageReport_Request.ProtoReflect.Descriptor instead.
func (*CAccountHardware_UpdateControllerUsageReport_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_accounthardware_steamclient_proto_rawDescGZIP(), []int{7}
}

func (x *CAccountHardware_UpdateControllerUsageReport_Request) GetControllers() []*CAccountHardware_UpdateControllerUsageReport_Request_Controller {
	if x != nil {
		return x.Controllers
	}
	return nil
}

type CAccountHardware_UpdateControllerUsageReport_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CAccountHardware_UpdateControllerUsageReport_Response) Reset() {
	*x = CAccountHardware_UpdateControllerUsageReport_Response{}
	mi := &file_steammessages_accounthardware_steamclient_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CAccountHardware_UpdateControllerUsageReport_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAccountHardware_UpdateControllerUsageReport_Response) ProtoMessage() {}

func (x *CAccountHardware_UpdateControllerUsageReport_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_accounthardware_steamclient_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAccountHardware_UpdateControllerUsageReport_Response.ProtoReflect.Descriptor instead.
func (*CAccountHardware_UpdateControllerUsageReport_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_accounthardware_steamclient_proto_rawDescGZIP(), []int{8}
}

type CAccountHardware_SteamControllerSetConfig_ControllerConfig struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Appidorname     *string                `protobuf:"bytes,1,opt,name=appidorname" json:"appidorname,omitempty"`
	Publishedfileid *uint64                `protobuf:"varint,2,opt,name=publishedfileid" json:"publishedfileid,omitempty"`
	Templatename    *string                `protobuf:"bytes,3,opt,name=templatename" json:"templatename,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CAccountHardware_SteamControllerSetConfig_ControllerConfig) Reset() {
	*x = CAccountHardware_SteamControllerSetConfig_ControllerConfig{}
	mi := &file_steammessages_accounthardware_steamclient_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CAccountHardware_SteamControllerSetConfig_ControllerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAccountHardware_SteamControllerSetConfig_ControllerConfig) ProtoMessage() {}

func (x *CAccountHardware_SteamControllerSetConfig_ControllerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_accounthardware_steamclient_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAccountHardware_SteamControllerSetConfig_ControllerConfig.ProtoReflect.Descriptor instead.
func (*CAccountHardware_SteamControllerSetConfig_ControllerConfig) Descriptor() ([]byte, []int) {
	return file_steammessages_accounthardware_steamclient_proto_rawDescGZIP(), []int{9}
}

func (x *CAccountHardware_SteamControllerSetConfig_ControllerConfig) GetAppidorname() string {
	if x != nil && x.Appidorname != nil {
		return *x.Appidorname
	}
	return ""
}

func (x *CAccountHardware_SteamControllerSetConfig_ControllerConfig) GetPublishedfileid() uint64 {
	if x != nil && x.Publishedfileid != nil {
		return *x.Publishedfileid
	}
	return 0
}

func (x *CAccountHardware_SteamControllerSetConfig_ControllerConfig) GetTemplatename() string {
	if x != nil && x.Templatename != nil {
		return *x.Templatename
	}
	return ""
}

type CAccountHardware_SteamControllerSetConfig_Request struct {
	state             protoimpl.MessageState                                        `protogen:"open.v1"`
	SerialNumber      *string                                                       `protobuf:"bytes,1,opt,name=serial_number,json=serialNumber" json:"serial_number,omitempty"`
	ControllerCode    *string                                                       `protobuf:"bytes,2,opt,name=controller_code,json=controllerCode" json:"controller_code,omitempty"`
	Accountid         *uint32                                                       `protobuf:"varint,3,opt,name=accountid" json:"accountid,omitempty"`
	Configurations    []*CAccountHardware_SteamControllerSetConfig_ControllerConfig `protobuf:"bytes,4,rep,name=configurations" json:"configurations,omitempty"`
	ControllerType    *int32                                                        `protobuf:"varint,5,opt,name=controller_type,json=controllerType,def=2" json:"controller_type,omitempty"`
	OnlyForThisSerial *bool                                                         `protobuf:"varint,6,opt,name=only_for_this_serial,json=onlyForThisSerial,def=0" json:"only_for_this_serial,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

// Default values for CAccountHardware_SteamControllerSetConfig_Request fields.
const (
	Default_CAccountHardware_SteamControllerSetConfig_Request_ControllerType    = int32(2)
	Default_CAccountHardware_SteamControllerSetConfig_Request_OnlyForThisSerial = bool(false)
)

func (x *CAccountHardware_SteamControllerSetConfig_Request) Reset() {
	*x = CAccountHardware_SteamControllerSetConfig_Request{}
	mi := &file_steammessages_accounthardware_steamclient_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CAccountHardware_SteamControllerSetConfig_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAccountHardware_SteamControllerSetConfig_Request) ProtoMessage() {}

func (x *CAccountHardware_SteamControllerSetConfig_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_accounthardware_steamclient_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAccountHardware_SteamControllerSetConfig_Request.ProtoReflect.Descriptor instead.
func (*CAccountHardware_SteamControllerSetConfig_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_accounthardware_steamclient_proto_rawDescGZIP(), []int{10}
}

func (x *CAccountHardware_SteamControllerSetConfig_Request) GetSerialNumber() string {
	if x != nil && x.SerialNumber != nil {
		return *x.SerialNumber
	}
	return ""
}

func (x *CAccountHardware_SteamControllerSetConfig_Request) GetControllerCode() string {
	if x != nil && x.ControllerCode != nil {
		return *x.ControllerCode
	}
	return ""
}

func (x *CAccountHardware_SteamControllerSetConfig_Request) GetAccountid() uint32 {
	if x != nil && x.Accountid != nil {
		return *x.Accountid
	}
	return 0
}

func (x *CAccountHardware_SteamControllerSetConfig_Request) GetConfigurations() []*CAccountHardware_SteamControllerSetConfig_ControllerConfig {
	if x != nil {
		return x.Configurations
	}
	return nil
}

func (x *CAccountHardware_SteamControllerSetConfig_Request) GetControllerType() int32 {
	if x != nil && x.ControllerType != nil {
		return *x.ControllerType
	}
	return Default_CAccountHardware_SteamControllerSetConfig_Request_ControllerType
}

func (x *CAccountHardware_SteamControllerSetConfig_Request) GetOnlyForThisSerial() bool {
	if x != nil && x.OnlyForThisSerial != nil {
		return *x.OnlyForThisSerial
	}
	return Default_CAccountHardware_SteamControllerSetConfig_Request_OnlyForThisSerial
}

type CAccountHardware_SteamControllerSetConfig_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CAccountHardware_SteamControllerSetConfig_Response) Reset() {
	*x = CAccountHardware_SteamControllerSetConfig_Response{}
	mi := &file_steammessages_accounthardware_steamclient_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CAccountHardware_SteamControllerSetConfig_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAccountHardware_SteamControllerSetConfig_Response) ProtoMessage() {}

func (x *CAccountHardware_SteamControllerSetConfig_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_accounthardware_steamclient_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAccountHardware_SteamControllerSetConfig_Response.ProtoReflect.Descriptor instead.
func (*CAccountHardware_SteamControllerSetConfig_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_accounthardware_steamclient_proto_rawDescGZIP(), []int{11}
}

type CAccountHardware_SteamControllerGetConfig_Request struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	SerialNumber      *string                `protobuf:"bytes,1,opt,name=serial_number,json=serialNumber" json:"serial_number,omitempty"`
	ControllerCode    *string                `protobuf:"bytes,2,opt,name=controller_code,json=controllerCode" json:"controller_code,omitempty"`
	Accountid         *uint32                `protobuf:"varint,3,opt,name=accountid" json:"accountid,omitempty"`
	Appidorname       *string                `protobuf:"bytes,4,opt,name=appidorname" json:"appidorname,omitempty"`
	ControllerType    *int32                 `protobuf:"varint,5,opt,name=controller_type,json=controllerType,def=2" json:"controller_type,omitempty"`
	OnlyForThisSerial *bool                  `protobuf:"varint,6,opt,name=only_for_this_serial,json=onlyForThisSerial,def=0" json:"only_for_this_serial,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

// Default values for CAccountHardware_SteamControllerGetConfig_Request fields.
const (
	Default_CAccountHardware_SteamControllerGetConfig_Request_ControllerType    = int32(2)
	Default_CAccountHardware_SteamControllerGetConfig_Request_OnlyForThisSerial = bool(false)
)

func (x *CAccountHardware_SteamControllerGetConfig_Request) Reset() {
	*x = CAccountHardware_SteamControllerGetConfig_Request{}
	mi := &file_steammessages_accounthardware_steamclient_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CAccountHardware_SteamControllerGetConfig_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAccountHardware_SteamControllerGetConfig_Request) ProtoMessage() {}

func (x *CAccountHardware_SteamControllerGetConfig_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_accounthardware_steamclient_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAccountHardware_SteamControllerGetConfig_Request.ProtoReflect.Descriptor instead.
func (*CAccountHardware_SteamControllerGetConfig_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_accounthardware_steamclient_proto_rawDescGZIP(), []int{12}
}

func (x *CAccountHardware_SteamControllerGetConfig_Request) GetSerialNumber() string {
	if x != nil && x.SerialNumber != nil {
		return *x.SerialNumber
	}
	return ""
}

func (x *CAccountHardware_SteamControllerGetConfig_Request) GetControllerCode() string {
	if x != nil && x.ControllerCode != nil {
		return *x.ControllerCode
	}
	return ""
}

func (x *CAccountHardware_SteamControllerGetConfig_Request) GetAccountid() uint32 {
	if x != nil && x.Accountid != nil {
		return *x.Accountid
	}
	return 0
}

func (x *CAccountHardware_SteamControllerGetConfig_Request) GetAppidorname() string {
	if x != nil && x.Appidorname != nil {
		return *x.Appidorname
	}
	return ""
}

func (x *CAccountHardware_SteamControllerGetConfig_Request) GetControllerType() int32 {
	if x != nil && x.ControllerType != nil {
		return *x.ControllerType
	}
	return Default_CAccountHardware_SteamControllerGetConfig_Request_ControllerType
}

func (x *CAccountHardware_SteamControllerGetConfig_Request) GetOnlyForThisSerial() bool {
	if x != nil && x.OnlyForThisSerial != nil {
		return *x.OnlyForThisSerial
	}
	return Default_CAccountHardware_SteamControllerGetConfig_Request_OnlyForThisSerial
}

type CAccountHardware_SteamControllerGetConfig_ControllerConfig struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Appidorname     *string                `protobuf:"bytes,1,opt,name=appidorname" json:"appidorname,omitempty"`
	Publishedfileid *uint64                `protobuf:"varint,2,opt,name=publishedfileid" json:"publishedfileid,omitempty"`
	Templatename    *string                `protobuf:"bytes,3,opt,name=templatename" json:"templatename,omitempty"`
	SerialNumber    *string                `protobuf:"bytes,4,opt,name=serial_number,json=serialNumber" json:"serial_number,omitempty"`
	Autosave        *bool                  `protobuf:"varint,5,opt,name=autosave,def=0" json:"autosave,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

// Default values for CAccountHardware_SteamControllerGetConfig_ControllerConfig fields.
const (
	Default_CAccountHardware_SteamControllerGetConfig_ControllerConfig_Autosave = bool(false)
)

func (x *CAccountHardware_SteamControllerGetConfig_ControllerConfig) Reset() {
	*x = CAccountHardware_SteamControllerGetConfig_ControllerConfig{}
	mi := &file_steammessages_accounthardware_steamclient_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CAccountHardware_SteamControllerGetConfig_ControllerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAccountHardware_SteamControllerGetConfig_ControllerConfig) ProtoMessage() {}

func (x *CAccountHardware_SteamControllerGetConfig_ControllerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_accounthardware_steamclient_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAccountHardware_SteamControllerGetConfig_ControllerConfig.ProtoReflect.Descriptor instead.
func (*CAccountHardware_SteamControllerGetConfig_ControllerConfig) Descriptor() ([]byte, []int) {
	return file_steammessages_accounthardware_steamclient_proto_rawDescGZIP(), []int{13}
}

func (x *CAccountHardware_SteamControllerGetConfig_ControllerConfig) GetAppidorname() string {
	if x != nil && x.Appidorname != nil {
		return *x.Appidorname
	}
	return ""
}

func (x *CAccountHardware_SteamControllerGetConfig_ControllerConfig) GetPublishedfileid() uint64 {
	if x != nil && x.Publishedfileid != nil {
		return *x.Publishedfileid
	}
	return 0
}

func (x *CAccountHardware_SteamControllerGetConfig_ControllerConfig) GetTemplatename() string {
	if x != nil && x.Templatename != nil {
		return *x.Templatename
	}
	return ""
}

func (x *CAccountHardware_SteamControllerGetConfig_ControllerConfig) GetSerialNumber() string {
	if x != nil && x.SerialNumber != nil {
		return *x.SerialNumber
	}
	return ""
}

func (x *CAccountHardware_SteamControllerGetConfig_ControllerConfig) GetAutosave() bool {
	if x != nil && x.Autosave != nil {
		return *x.Autosave
	}
	return Default_CAccountHardware_SteamControllerGetConfig_ControllerConfig_Autosave
}

type CAccountHardware_SteamControllerGetConfig_Response struct {
	state          protoimpl.MessageState                                        `protogen:"open.v1"`
	Configurations []*CAccountHardware_SteamControllerGetConfig_ControllerConfig `protobuf:"bytes,1,rep,name=configurations" json:"configurations,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CAccountHardware_SteamControllerGetConfig_Response) Reset() {
	*x = CAccountHardware_SteamControllerGetConfig_Response{}
	mi := &file_steammessages_accounthardware_steamclient_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CAccountHardware_SteamControllerGetConfig_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAccountHardware_SteamControllerGetConfig_Response) ProtoMessage() {}

func (x *CAccountHardware_SteamControllerGetConfig_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_accounthardware_steamclient_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAccountHardware_SteamControllerGetConfig_Response.ProtoReflect.Descriptor instead.
func (*CAccountHardware_SteamControllerGetConfig_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_accounthardware_steamclient_proto_rawDescGZIP(), []int{14}
}

func (x *CAccountHardware_SteamControllerGetConfig_Response) GetConfigurations() []*CAccountHardware_SteamControllerGetConfig_ControllerConfig {
	if x != nil {
		return x.Configurations
	}
	return nil
}

type CAccountHardware_DeRegisterSteamController_Request struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	SerialNumber   *string                `protobuf:"bytes,1,opt,name=serial_number,json=serialNumber" json:"serial_number,omitempty"`
	ControllerCode *string                `protobuf:"bytes,2,opt,name=controller_code,json=controllerCode" json:"controller_code,omitempty"`
	Accountid      *uint32                `protobuf:"varint,3,opt,name=accountid" json:"accountid,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CAccountHardware_DeRegisterSteamController_Request) Reset() {
	*x = CAccountHardware_DeRegisterSteamController_Request{}
	mi := &file_steammessages_accounthardware_steamclient_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CAccountHardware_DeRegisterSteamController_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAccountHardware_DeRegisterSteamController_Request) ProtoMessage() {}

func (x *CAccountHardware_DeRegisterSteamController_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_accounthardware_steamclient_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAccountHardware_DeRegisterSteamController_Request.ProtoReflect.Descriptor instead.
func (*CAccountHardware_DeRegisterSteamController_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_accounthardware_steamclient_proto_rawDescGZIP(), []int{15}
}

func (x *CAccountHardware_DeRegisterSteamController_Request) GetSerialNumber() string {
	if x != nil && x.SerialNumber != nil {
		return *x.SerialNumber
	}
	return ""
}

func (x *CAccountHardware_DeRegisterSteamController_Request) GetControllerCode() string {
	if x != nil && x.ControllerCode != nil {
		return *x.ControllerCode
	}
	return ""
}

func (x *CAccountHardware_DeRegisterSteamController_Request) GetAccountid() uint32 {
	if x != nil && x.Accountid != nil {
		return *x.Accountid
	}
	return 0
}

type CAccountHardware_DeRegisterSteamController_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CAccountHardware_DeRegisterSteamController_Response) Reset() {
	*x = CAccountHardware_DeRegisterSteamController_Response{}
	mi := &file_steammessages_accounthardware_steamclient_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CAccountHardware_DeRegisterSteamController_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAccountHardware_DeRegisterSteamController_Response) ProtoMessage() {}

func (x *CAccountHardware_DeRegisterSteamController_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_accounthardware_steamclient_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAccountHardware_DeRegisterSteamController_Response.ProtoReflect.Descriptor instead.
func (*CAccountHardware_DeRegisterSteamController_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_accounthardware_steamclient_proto_rawDescGZIP(), []int{16}
}

type CAccountHardware_SetPersonalizationFile_Request struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	SerialNumber    *string                `protobuf:"bytes,1,opt,name=serial_number,json=serialNumber" json:"serial_number,omitempty"`
	Publishedfileid *uint64                `protobuf:"varint,2,opt,name=publishedfileid" json:"publishedfileid,omitempty"`
	Accountid       *uint32                `protobuf:"varint,3,opt,name=accountid" json:"accountid,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CAccountHardware_SetPersonalizationFile_Request) Reset() {
	*x = CAccountHardware_SetPersonalizationFile_Request{}
	mi := &file_steammessages_accounthardware_steamclient_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CAccountHardware_SetPersonalizationFile_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAccountHardware_SetPersonalizationFile_Request) ProtoMessage() {}

func (x *CAccountHardware_SetPersonalizationFile_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_accounthardware_steamclient_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAccountHardware_SetPersonalizationFile_Request.ProtoReflect.Descriptor instead.
func (*CAccountHardware_SetPersonalizationFile_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_accounthardware_steamclient_proto_rawDescGZIP(), []int{17}
}

func (x *CAccountHardware_SetPersonalizationFile_Request) GetSerialNumber() string {
	if x != nil && x.SerialNumber != nil {
		return *x.SerialNumber
	}
	return ""
}

func (x *CAccountHardware_SetPersonalizationFile_Request) GetPublishedfileid() uint64 {
	if x != nil && x.Publishedfileid != nil {
		return *x.Publishedfileid
	}
	return 0
}

func (x *CAccountHardware_SetPersonalizationFile_Request) GetAccountid() uint32 {
	if x != nil && x.Accountid != nil {
		return *x.Accountid
	}
	return 0
}

type CAccountHardware_SetPersonalizationFile_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CAccountHardware_SetPersonalizationFile_Response) Reset() {
	*x = CAccountHardware_SetPersonalizationFile_Response{}
	mi := &file_steammessages_accounthardware_steamclient_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CAccountHardware_SetPersonalizationFile_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAccountHardware_SetPersonalizationFile_Response) ProtoMessage() {}

func (x *CAccountHardware_SetPersonalizationFile_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_accounthardware_steamclient_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAccountHardware_SetPersonalizationFile_Response.ProtoReflect.Descriptor instead.
func (*CAccountHardware_SetPersonalizationFile_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_accounthardware_steamclient_proto_rawDescGZIP(), []int{18}
}

type CAccountHardware_GetPersonalizationFile_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SerialNumber  *string                `protobuf:"bytes,1,opt,name=serial_number,json=serialNumber" json:"serial_number,omitempty"`
	Accountid     *uint32                `protobuf:"varint,2,opt,name=accountid" json:"accountid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CAccountHardware_GetPersonalizationFile_Request) Reset() {
	*x = CAccountHardware_GetPersonalizationFile_Request{}
	mi := &file_steammessages_accounthardware_steamclient_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CAccountHardware_GetPersonalizationFile_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAccountHardware_GetPersonalizationFile_Request) ProtoMessage() {}

func (x *CAccountHardware_GetPersonalizationFile_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_accounthardware_steamclient_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAccountHardware_GetPersonalizationFile_Request.ProtoReflect.Descriptor instead.
func (*CAccountHardware_GetPersonalizationFile_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_accounthardware_steamclient_proto_rawDescGZIP(), []int{19}
}

func (x *CAccountHardware_GetPersonalizationFile_Request) GetSerialNumber() string {
	if x != nil && x.SerialNumber != nil {
		return *x.SerialNumber
	}
	return ""
}

func (x *CAccountHardware_GetPersonalizationFile_Request) GetAccountid() uint32 {
	if x != nil && x.Accountid != nil {
		return *x.Accountid
	}
	return 0
}

type CAccountHardware_GetPersonalizationFile_Response struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Publishedfileid *uint64                `protobuf:"varint,1,opt,name=publishedfileid" json:"publishedfileid,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CAccountHardware_GetPersonalizationFile_Response) Reset() {
	*x = CAccountHardware_GetPersonalizationFile_Response{}
	mi := &file_steammessages_accounthardware_steamclient_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CAccountHardware_GetPersonalizationFile_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAccountHardware_GetPersonalizationFile_Response) ProtoMessage() {}

func (x *CAccountHardware_GetPersonalizationFile_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_accounthardware_steamclient_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAccountHardware_GetPersonalizationFile_Response.ProtoReflect.Descriptor instead.
func (*CAccountHardware_GetPersonalizationFile_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_accounthardware_steamclient_proto_rawDescGZIP(), []int{20}
}

func (x *CAccountHardware_GetPersonalizationFile_Response) GetPublishedfileid() uint64 {
	if x != nil && x.Publishedfileid != nil {
		return *x.Publishedfileid
	}
	return 0
}

type CAccountHardware_VRCompatibilityCheck_Request struct {
	state         protoimpl.MessageState                                `protogen:"open.v1"`
	ProductName   *string                                               `protobuf:"bytes,1,opt,name=product_name,json=productName" json:"product_name,omitempty"`
	Values        []*CAccountHardware_VRCompatibilityCheck_Request_Pair `protobuf:"bytes,2,rep,name=values" json:"values,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CAccountHardware_VRCompatibilityCheck_Request) Reset() {
	*x = CAccountHardware_VRCompatibilityCheck_Request{}
	mi := &file_steammessages_accounthardware_steamclient_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CAccountHardware_VRCompatibilityCheck_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAccountHardware_VRCompatibilityCheck_Request) ProtoMessage() {}

func (x *CAccountHardware_VRCompatibilityCheck_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_accounthardware_steamclient_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAccountHardware_VRCompatibilityCheck_Request.ProtoReflect.Descriptor instead.
func (*CAccountHardware_VRCompatibilityCheck_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_accounthardware_steamclient_proto_rawDescGZIP(), []int{21}
}

func (x *CAccountHardware_VRCompatibilityCheck_Request) GetProductName() string {
	if x != nil && x.ProductName != nil {
		return *x.ProductName
	}
	return ""
}

func (x *CAccountHardware_VRCompatibilityCheck_Request) GetValues() []*CAccountHardware_VRCompatibilityCheck_Request_Pair {
	if x != nil {
		return x.Values
	}
	return nil
}

type CAccountHardware_VRCompatibilityCheck_Response struct {
	state         protoimpl.MessageState                                             `protogen:"open.v1"`
	Values        []*CAccountHardware_VRCompatibilityCheck_Response_Pair             `protobuf:"bytes,1,rep,name=values" json:"values,omitempty"`
	Components    []*CAccountHardware_VRCompatibilityCheck_Response_ComponentDisplay `protobuf:"bytes,2,rep,name=components" json:"components,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CAccountHardware_VRCompatibilityCheck_Response) Reset() {
	*x = CAccountHardware_VRCompatibilityCheck_Response{}
	mi := &file_steammessages_accounthardware_steamclient_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CAccountHardware_VRCompatibilityCheck_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAccountHardware_VRCompatibilityCheck_Response) ProtoMessage() {}

func (x *CAccountHardware_VRCompatibilityCheck_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_accounthardware_steamclient_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAccountHardware_VRCompatibilityCheck_Response.ProtoReflect.Descriptor instead.
func (*CAccountHardware_VRCompatibilityCheck_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_accounthardware_steamclient_proto_rawDescGZIP(), []int{22}
}

func (x *CAccountHardware_VRCompatibilityCheck_Response) GetValues() []*CAccountHardware_VRCompatibilityCheck_Response_Pair {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *CAccountHardware_VRCompatibilityCheck_Response) GetComponents() []*CAccountHardware_VRCompatibilityCheck_Response_ComponentDisplay {
	if x != nil {
		return x.Components
	}
	return nil
}

type CAccountHardware_RegisterValveIndexComponent_Request struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	SerialNumber             *string                `protobuf:"bytes,1,opt,name=serial_number,json=serialNumber" json:"serial_number,omitempty"`
	ManufacturerSerialNumber *string                `protobuf:"bytes,2,opt,name=manufacturer_serial_number,json=manufacturerSerialNumber" json:"manufacturer_serial_number,omitempty"`
	ComponentCode            *string                `protobuf:"bytes,3,opt,name=component_code,json=componentCode" json:"component_code,omitempty"`
	ComponentType            *EValveIndexComponent  `protobuf:"varint,4,opt,name=component_type,json=componentType,enum=EValveIndexComponent,def=0" json:"component_type,omitempty"`
	EstimatedTimeRegistered  *int32                 `protobuf:"varint,5,opt,name=estimated_time_registered,json=estimatedTimeRegistered" json:"estimated_time_registered,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

// Default values for CAccountHardware_RegisterValveIndexComponent_Request fields.
const (
	Default_CAccountHardware_RegisterValveIndexComponent_Request_ComponentType = EValveIndexComponent_k_EValveIndexComponentUnknown
)

func (x *CAccountHardware_RegisterValveIndexComponent_Request) Reset() {
	*x = CAccountHardware_RegisterValveIndexComponent_Request{}
	mi := &file_steammessages_accounthardware_steamclient_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CAccountHardware_RegisterValveIndexComponent_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAccountHardware_RegisterValveIndexComponent_Request) ProtoMessage() {}

func (x *CAccountHardware_RegisterValveIndexComponent_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_accounthardware_steamclient_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAccountHardware_RegisterValveIndexComponent_Request.ProtoReflect.Descriptor instead.
func (*CAccountHardware_RegisterValveIndexComponent_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_accounthardware_steamclient_proto_rawDescGZIP(), []int{23}
}

func (x *CAccountHardware_RegisterValveIndexComponent_Request) GetSerialNumber() string {
	if x != nil && x.SerialNumber != nil {
		return *x.SerialNumber
	}
	return ""
}

func (x *CAccountHardware_RegisterValveIndexComponent_Request) GetManufacturerSerialNumber() string {
	if x != nil && x.ManufacturerSerialNumber != nil {
		return *x.ManufacturerSerialNumber
	}
	return ""
}

func (x *CAccountHardware_RegisterValveIndexComponent_Request) GetComponentCode() string {
	if x != nil && x.ComponentCode != nil {
		return *x.ComponentCode
	}
	return ""
}

func (x *CAccountHardware_RegisterValveIndexComponent_Request) GetComponentType() EValveIndexComponent {
	if x != nil && x.ComponentType != nil {
		return *x.ComponentType
	}
	return Default_CAccountHardware_RegisterValveIndexComponent_Request_ComponentType
}

func (x *CAccountHardware_RegisterValveIndexComponent_Request) GetEstimatedTimeRegistered() int32 {
	if x != nil && x.EstimatedTimeRegistered != nil {
		return *x.EstimatedTimeRegistered
	}
	return 0
}

type CAccountHardware_RegisterValveIndexComponent_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CAccountHardware_RegisterValveIndexComponent_Response) Reset() {
	*x = CAccountHardware_RegisterValveIndexComponent_Response{}
	mi := &file_steammessages_accounthardware_steamclient_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CAccountHardware_RegisterValveIndexComponent_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAccountHardware_RegisterValveIndexComponent_Response) ProtoMessage() {}

func (x *CAccountHardware_RegisterValveIndexComponent_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_accounthardware_steamclient_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAccountHardware_RegisterValveIndexComponent_Response.ProtoReflect.Descriptor instead.
func (*CAccountHardware_RegisterValveIndexComponent_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_accounthardware_steamclient_proto_rawDescGZIP(), []int{24}
}

type CAccountHardware_GetSteamDeckComponents_Request struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	SerialNumber   *string                `protobuf:"bytes,1,opt,name=serial_number,json=serialNumber" json:"serial_number,omitempty"`
	ControllerCode *string                `protobuf:"bytes,2,opt,name=controller_code,json=controllerCode" json:"controller_code,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CAccountHardware_GetSteamDeckComponents_Request) Reset() {
	*x = CAccountHardware_GetSteamDeckComponents_Request{}
	mi := &file_steammessages_accounthardware_steamclient_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CAccountHardware_GetSteamDeckComponents_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAccountHardware_GetSteamDeckComponents_Request) ProtoMessage() {}

func (x *CAccountHardware_GetSteamDeckComponents_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_accounthardware_steamclient_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAccountHardware_GetSteamDeckComponents_Request.ProtoReflect.Descriptor instead.
func (*CAccountHardware_GetSteamDeckComponents_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_accounthardware_steamclient_proto_rawDescGZIP(), []int{25}
}

func (x *CAccountHardware_GetSteamDeckComponents_Request) GetSerialNumber() string {
	if x != nil && x.SerialNumber != nil {
		return *x.SerialNumber
	}
	return ""
}

func (x *CAccountHardware_GetSteamDeckComponents_Request) GetControllerCode() string {
	if x != nil && x.ControllerCode != nil {
		return *x.ControllerCode
	}
	return ""
}

type CAccountHardware_GetSteamDeckComponents_Response struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	JsonComponents *string                `protobuf:"bytes,1,opt,name=json_components,json=jsonComponents" json:"json_components,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CAccountHardware_GetSteamDeckComponents_Response) Reset() {
	*x = CAccountHardware_GetSteamDeckComponents_Response{}
	mi := &file_steammessages_accounthardware_steamclient_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CAccountHardware_GetSteamDeckComponents_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAccountHardware_GetSteamDeckComponents_Response) ProtoMessage() {}

func (x *CAccountHardware_GetSteamDeckComponents_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_accounthardware_steamclient_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAccountHardware_GetSteamDeckComponents_Response.ProtoReflect.Descriptor instead.
func (*CAccountHardware_GetSteamDeckComponents_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_accounthardware_steamclient_proto_rawDescGZIP(), []int{26}
}

func (x *CAccountHardware_GetSteamDeckComponents_Response) GetJsonComponents() string {
	if x != nil && x.JsonComponents != nil {
		return *x.JsonComponents
	}
	return ""
}

type CAccountHardware_UpdateControllerUsageReport_Request_Controller struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	SerialNumber   *string                `protobuf:"bytes,1,opt,name=serial_number,json=serialNumber" json:"serial_number,omitempty"`
	ControllerCode *string                `protobuf:"bytes,2,opt,name=controller_code,json=controllerCode" json:"controller_code,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CAccountHardware_UpdateControllerUsageReport_Request_Controller) Reset() {
	*x = CAccountHardware_UpdateControllerUsageReport_Request_Controller{}
	mi := &file_steammessages_accounthardware_steamclient_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CAccountHardware_UpdateControllerUsageReport_Request_Controller) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAccountHardware_UpdateControllerUsageReport_Request_Controller) ProtoMessage() {}

func (x *CAccountHardware_UpdateControllerUsageReport_Request_Controller) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_accounthardware_steamclient_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAccountHardware_UpdateControllerUsageReport_Request_Controller.ProtoReflect.Descriptor instead.
func (*CAccountHardware_UpdateControllerUsageReport_Request_Controller) Descriptor() ([]byte, []int) {
	return file_steammessages_accounthardware_steamclient_proto_rawDescGZIP(), []int{7, 0}
}

func (x *CAccountHardware_UpdateControllerUsageReport_Request_Controller) GetSerialNumber() string {
	if x != nil && x.SerialNumber != nil {
		return *x.SerialNumber
	}
	return ""
}

func (x *CAccountHardware_UpdateControllerUsageReport_Request_Controller) GetControllerCode() string {
	if x != nil && x.ControllerCode != nil {
		return *x.ControllerCode
	}
	return ""
}

type CAccountHardware_VRCompatibilityCheck_Request_Pair struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           *string                `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value         *string                `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CAccountHardware_VRCompatibilityCheck_Request_Pair) Reset() {
	*x = CAccountHardware_VRCompatibilityCheck_Request_Pair{}
	mi := &file_steammessages_accounthardware_steamclient_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CAccountHardware_VRCompatibilityCheck_Request_Pair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAccountHardware_VRCompatibilityCheck_Request_Pair) ProtoMessage() {}

func (x *CAccountHardware_VRCompatibilityCheck_Request_Pair) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_accounthardware_steamclient_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAccountHardware_VRCompatibilityCheck_Request_Pair.ProtoReflect.Descriptor instead.
func (*CAccountHardware_VRCompatibilityCheck_Request_Pair) Descriptor() ([]byte, []int) {
	return file_steammessages_accounthardware_steamclient_proto_rawDescGZIP(), []int{21, 0}
}

func (x *CAccountHardware_VRCompatibilityCheck_Request_Pair) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *CAccountHardware_VRCompatibilityCheck_Request_Pair) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type CAccountHardware_VRCompatibilityCheck_Response_Pair struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           *string                `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value         *string                `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CAccountHardware_VRCompatibilityCheck_Response_Pair) Reset() {
	*x = CAccountHardware_VRCompatibilityCheck_Response_Pair{}
	mi := &file_steammessages_accounthardware_steamclient_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CAccountHardware_VRCompatibilityCheck_Response_Pair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAccountHardware_VRCompatibilityCheck_Response_Pair) ProtoMessage() {}

func (x *CAccountHardware_VRCompatibilityCheck_Response_Pair) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_accounthardware_steamclient_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAccountHardware_VRCompatibilityCheck_Response_Pair.ProtoReflect.Descriptor instead.
func (*CAccountHardware_VRCompatibilityCheck_Response_Pair) Descriptor() ([]byte, []int) {
	return file_steammessages_accounthardware_steamclient_proto_rawDescGZIP(), []int{22, 0}
}

func (x *CAccountHardware_VRCompatibilityCheck_Response_Pair) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *CAccountHardware_VRCompatibilityCheck_Response_Pair) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type CAccountHardware_VRCompatibilityCheck_Response_ComponentDisplay struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          *string                `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Image         *string                `protobuf:"bytes,2,opt,name=image" json:"image,omitempty"`
	Value         *string                `protobuf:"bytes,3,opt,name=value" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CAccountHardware_VRCompatibilityCheck_Response_ComponentDisplay) Reset() {
	*x = CAccountHardware_VRCompatibilityCheck_Response_ComponentDisplay{}
	mi := &file_steammessages_accounthardware_steamclient_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CAccountHardware_VRCompatibilityCheck_Response_ComponentDisplay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAccountHardware_VRCompatibilityCheck_Response_ComponentDisplay) ProtoMessage() {}

func (x *CAccountHardware_VRCompatibilityCheck_Response_ComponentDisplay) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_accounthardware_steamclient_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAccountHardware_VRCompatibilityCheck_Response_ComponentDisplay.ProtoReflect.Descriptor instead.
func (*CAccountHardware_VRCompatibilityCheck_Response_ComponentDisplay) Descriptor() ([]byte, []int) {
	return file_steammessages_accounthardware_steamclient_proto_rawDescGZIP(), []int{22, 1}
}

func (x *CAccountHardware_VRCompatibilityCheck_Response_ComponentDisplay) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CAccountHardware_VRCompatibilityCheck_Response_ComponentDisplay) GetImage() string {
	if x != nil && x.Image != nil {
		return *x.Image
	}
	return ""
}

func (x *CAccountHardware_VRCompatibilityCheck_Response_ComponentDisplay) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

var File_steammessages_accounthardware_steamclient_proto protoreflect.FileDescriptor

const file_steammessages_accounthardware_steamclient_proto_rawDesc = "" +
	"\n" +
	"/steammessages_accounthardware.steamclient.proto\x1a\x18steammessages_base.proto\x1a,steammessages_unified_base.steamclient.proto\"\x80\x01\n" +
	"0CAccountHardware_RegisterSteamController_Request\x12#\n" +
	"\rserial_number\x18\x01 \x01(\tR\fserialNumber\x12'\n" +
	"\x0fcontroller_code\x18\x02 \x01(\tR\x0econtrollerCode\"3\n" +
	"1CAccountHardware_RegisterSteamController_Response\"\x8c\x01\n" +
	"<CAccountHardware_CompleteSteamControllerRegistration_Request\x12#\n" +
	"\rserial_number\x18\x01 \x01(\tR\fserialNumber\x12'\n" +
	"\x0fcontroller_code\x18\x02 \x01(\tR\x0econtrollerCode\"?\n" +
	"=CAccountHardware_CompleteSteamControllerRegistration_Response\"\x88\x01\n" +
	"8CAccountHardware_QueryAccountsRegisteredToSerial_Request\x12#\n" +
	"\rserial_number\x18\x01 \x01(\tR\fserialNumber\x12'\n" +
	"\x0fcontroller_code\x18\x02 \x01(\tR\x0econtrollerCode\"\x8e\x01\n" +
	"9CAccountHardware_QueryAccountsRegisteredToSerial_Accounts\x12\x1c\n" +
	"\taccountid\x18\x01 \x01(\rR\taccountid\x123\n" +
	"\x15registration_complete\x18\x02 \x01(\bR\x14registrationComplete\"\x93\x01\n" +
	"9CAccountHardware_QueryAccountsRegisteredToSerial_Response\x12V\n" +
	"\baccounts\x18\x01 \x03(\v2:.CAccountHardware_QueryAccountsRegisteredToSerial_AccountsR\baccounts\"\xf6\x01\n" +
	"4CAccountHardware_UpdateControllerUsageReport_Request\x12b\n" +
	"\vcontrollers\x18\x01 \x03(\v2@.CAccountHardware_UpdateControllerUsageReport_Request.ControllerR\vcontrollers\x1aZ\n" +
	"\n" +
	"Controller\x12#\n" +
	"\rserial_number\x18\x01 \x01(\tR\fserialNumber\x12'\n" +
	"\x0fcontroller_code\x18\x02 \x01(\tR\x0econtrollerCode\"7\n" +
	"5CAccountHardware_UpdateControllerUsageReport_Response\"\xac\x01\n" +
	":CAccountHardware_SteamControllerSetConfig_ControllerConfig\x12 \n" +
	"\vappidorname\x18\x01 \x01(\tR\vappidorname\x12(\n" +
	"\x0fpublishedfileid\x18\x02 \x01(\x04R\x0fpublishedfileid\x12\"\n" +
	"\ftemplatename\x18\x03 \x01(\tR\ftemplatename\"\xe8\x02\n" +
	"1CAccountHardware_SteamControllerSetConfig_Request\x12#\n" +
	"\rserial_number\x18\x01 \x01(\tR\fserialNumber\x12'\n" +
	"\x0fcontroller_code\x18\x02 \x01(\tR\x0econtrollerCode\x12\x1c\n" +
	"\taccountid\x18\x03 \x01(\rR\taccountid\x12c\n" +
	"\x0econfigurations\x18\x04 \x03(\v2;.CAccountHardware_SteamControllerSetConfig_ControllerConfigR\x0econfigurations\x12*\n" +
	"\x0fcontroller_type\x18\x05 \x01(\x05:\x012R\x0econtrollerType\x126\n" +
	"\x14only_for_this_serial\x18\x06 \x01(\b:\x05falseR\x11onlyForThisSerial\"4\n" +
	"2CAccountHardware_SteamControllerSetConfig_Response\"\xa5\x02\n" +
	"1CAccountHardware_SteamControllerGetConfig_Request\x12#\n" +
	"\rserial_number\x18\x01 \x01(\tR\fserialNumber\x12'\n" +
	"\x0fcontroller_code\x18\x02 \x01(\tR\x0econtrollerCode\x12\x1c\n" +
	"\taccountid\x18\x03 \x01(\rR\taccountid\x12 \n" +
	"\vappidorname\x18\x04 \x01(\tR\vappidorname\x12*\n" +
	"\x0fcontroller_type\x18\x05 \x01(\x05:\x012R\x0econtrollerType\x126\n" +
	"\x14only_for_this_serial\x18\x06 \x01(\b:\x05falseR\x11onlyForThisSerial\"\xf4\x01\n" +
	":CAccountHardware_SteamControllerGetConfig_ControllerConfig\x12 \n" +
	"\vappidorname\x18\x01 \x01(\tR\vappidorname\x12(\n" +
	"\x0fpublishedfileid\x18\x02 \x01(\x04R\x0fpublishedfileid\x12\"\n" +
	"\ftemplatename\x18\x03 \x01(\tR\ftemplatename\x12#\n" +
	"\rserial_number\x18\x04 \x01(\tR\fserialNumber\x12!\n" +
	"\bautosave\x18\x05 \x01(\b:\x05falseR\bautosave\"\x99\x01\n" +
	"2CAccountHardware_SteamControllerGetConfig_Response\x12c\n" +
	"\x0econfigurations\x18\x01 \x03(\v2;.CAccountHardware_SteamControllerGetConfig_ControllerConfigR\x0econfigurations\"\xa0\x01\n" +
	"2CAccountHardware_DeRegisterSteamController_Request\x12#\n" +
	"\rserial_number\x18\x01 \x01(\tR\fserialNumber\x12'\n" +
	"\x0fcontroller_code\x18\x02 \x01(\tR\x0econtrollerCode\x12\x1c\n" +
	"\taccountid\x18\x03 \x01(\rR\taccountid\"5\n" +
	"3CAccountHardware_DeRegisterSteamController_Response\"\x9e\x01\n" +
	"/CAccountHardware_SetPersonalizationFile_Request\x12#\n" +
	"\rserial_number\x18\x01 \x01(\tR\fserialNumber\x12(\n" +
	"\x0fpublishedfileid\x18\x02 \x01(\x04R\x0fpublishedfileid\x12\x1c\n" +
	"\taccountid\x18\x03 \x01(\rR\taccountid\"2\n" +
	"0CAccountHardware_SetPersonalizationFile_Response\"t\n" +
	"/CAccountHardware_GetPersonalizationFile_Request\x12#\n" +
	"\rserial_number\x18\x01 \x01(\tR\fserialNumber\x12\x1c\n" +
	"\taccountid\x18\x02 \x01(\rR\taccountid\"\\\n" +
	"0CAccountHardware_GetPersonalizationFile_Response\x12(\n" +
	"\x0fpublishedfileid\x18\x01 \x01(\x04R\x0fpublishedfileid\"\xcf\x01\n" +
	"-CAccountHardware_VRCompatibilityCheck_Request\x12!\n" +
	"\fproduct_name\x18\x01 \x01(\tR\vproductName\x12K\n" +
	"\x06values\x18\x02 \x03(\v23.CAccountHardware_VRCompatibilityCheck_Request.PairR\x06values\x1a.\n" +
	"\x04Pair\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value\"\xe4\x02\n" +
	".CAccountHardware_VRCompatibilityCheck_Response\x12L\n" +
	"\x06values\x18\x01 \x03(\v24.CAccountHardware_VRCompatibilityCheck_Response.PairR\x06values\x12`\n" +
	"\n" +
	"components\x18\x02 \x03(\v2@.CAccountHardware_VRCompatibilityCheck_Response.ComponentDisplayR\n" +
	"components\x1a.\n" +
	"\x04Pair\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value\x1aR\n" +
	"\x10ComponentDisplay\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x14\n" +
	"\x05image\x18\x02 \x01(\tR\x05image\x12\x14\n" +
	"\x05value\x18\x03 \x01(\tR\x05value\"\xd9\x02\n" +
	"4CAccountHardware_RegisterValveIndexComponent_Request\x12#\n" +
	"\rserial_number\x18\x01 \x01(\tR\fserialNumber\x12<\n" +
	"\x1amanufacturer_serial_number\x18\x02 \x01(\tR\x18manufacturerSerialNumber\x12%\n" +
	"\x0ecomponent_code\x18\x03 \x01(\tR\rcomponentCode\x12[\n" +
	"\x0ecomponent_type\x18\x04 \x01(\x0e2\x15.EValveIndexComponent:\x1dk_EValveIndexComponentUnknownR\rcomponentType\x12:\n" +
	"\x19estimated_time_registered\x18\x05 \x01(\x05R\x17estimatedTimeRegistered\"7\n" +
	"5CAccountHardware_RegisterValveIndexComponent_Response\"\x7f\n" +
	"/CAccountHardware_GetSteamDeckComponents_Request\x12#\n" +
	"\rserial_number\x18\x01 \x01(\tR\fserialNumber\x12'\n" +
	"\x0fcontroller_code\x18\x02 \x01(\tR\x0econtrollerCode\"[\n" +
	"0CAccountHardware_GetSteamDeckComponents_Response\x12'\n" +
	"\x0fjson_components\x18\x01 \x01(\tR\x0ejsonComponents*\xdd\x01\n" +
	"\x14EValveIndexComponent\x12!\n" +
	"\x1dk_EValveIndexComponentUnknown\x10\x00\x12\x1d\n" +
	"\x19k_EValveIndexComponentHMD\x10\x01\x12%\n" +
	"!k_EValveIndexComponentLeftKnuckle\x10\x02\x12&\n" +
	"\"k_EValveIndexComponentRightKnuckle\x10\x03\x12\x10\n" +
	"\fk_ETempDTst1\x10\x04\x12\x10\n" +
	"\fk_ETempDTst2\x10\x05\x12\x10\n" +
	"\fk_ETempDTst3\x10\x062\xa9\r\n" +
	"\x0fAccountHardware\x12\x80\x01\n" +
	"\x17RegisterSteamController\x121.CAccountHardware_RegisterSteamController_Request\x1a2.CAccountHardware_RegisterSteamController_Response\x12\xa4\x01\n" +
	"#CompleteSteamControllerRegistration\x12=.CAccountHardware_CompleteSteamControllerRegistration_Request\x1a>.CAccountHardware_CompleteSteamControllerRegistration_Response\x12\x9c\x01\n" +
	"#QueryAccountsRegisteredToController\x129.CAccountHardware_QueryAccountsRegisteredToSerial_Request\x1a:.CAccountHardware_QueryAccountsRegisteredToSerial_Response\x12\x8c\x01\n" +
	"\x1bUpdateControllerUsageReport\x125.CAccountHardware_UpdateControllerUsageReport_Request\x1a6.CAccountHardware_UpdateControllerUsageReport_Response\x12\x8b\x01\n" +
	" SetDesiredControllerConfigForApp\x122.CAccountHardware_SteamControllerSetConfig_Request\x1a3.CAccountHardware_SteamControllerSetConfig_Response\x12\x8b\x01\n" +
	" GetDesiredControllerConfigForApp\x122.CAccountHardware_SteamControllerGetConfig_Request\x1a3.CAccountHardware_SteamControllerGetConfig_Response\x12\x86\x01\n" +
	"\x19DeRegisterSteamController\x123.CAccountHardware_DeRegisterSteamController_Request\x1a4.CAccountHardware_DeRegisterSteamController_Response\x12\x87\x01\n" +
	" SetControllerPersonalizationFile\x120.CAccountHardware_SetPersonalizationFile_Request\x1a1.CAccountHardware_SetPersonalizationFile_Response\x12\x87\x01\n" +
	" GetControllerPersonalizationFile\x120.CAccountHardware_GetPersonalizationFile_Request\x1a1.CAccountHardware_GetPersonalizationFile_Response\x12w\n" +
	"\x14VRCompatibilityCheck\x12..CAccountHardware_VRCompatibilityCheck_Request\x1a/.CAccountHardware_VRCompatibilityCheck_Response\x12\x8c\x01\n" +
	"\x1bRegisterValveIndexComponent\x125.CAccountHardware_RegisterValveIndexComponent_Request\x1a6.CAccountHardware_RegisterValveIndexComponent_Response\x12}\n" +
	"\x16GetSteamDeckComponents\x120.CAccountHardware_GetSteamDeckComponents_Request\x1a1.CAccountHardware_GetSteamDeckComponents_ResponseB\x03\x80\x01\x01"

var (
	file_steammessages_accounthardware_steamclient_proto_rawDescOnce sync.Once
	file_steammessages_accounthardware_steamclient_proto_rawDescData []byte
)

func file_steammessages_accounthardware_steamclient_proto_rawDescGZIP() []byte {
	file_steammessages_accounthardware_steamclient_proto_rawDescOnce.Do(func() {
		file_steammessages_accounthardware_steamclient_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_steammessages_accounthardware_steamclient_proto_rawDesc), len(file_steammessages_accounthardware_steamclient_proto_rawDesc)))
	})
	return file_steammessages_accounthardware_steamclient_proto_rawDescData
}

var file_steammessages_accounthardware_steamclient_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_steammessages_accounthardware_steamclient_proto_msgTypes = make([]protoimpl.MessageInfo, 31)
var file_steammessages_accounthardware_steamclient_proto_goTypes = []any{
	(EValveIndexComponent)(0),                                               // 0: EValveIndexComponent
	(*CAccountHardware_RegisterSteamController_Request)(nil),                // 1: CAccountHardware_RegisterSteamController_Request
	(*CAccountHardware_RegisterSteamController_Response)(nil),               // 2: CAccountHardware_RegisterSteamController_Response
	(*CAccountHardware_CompleteSteamControllerRegistration_Request)(nil),    // 3: CAccountHardware_CompleteSteamControllerRegistration_Request
	(*CAccountHardware_CompleteSteamControllerRegistration_Response)(nil),   // 4: CAccountHardware_CompleteSteamControllerRegistration_Response
	(*CAccountHardware_QueryAccountsRegisteredToSerial_Request)(nil),        // 5: CAccountHardware_QueryAccountsRegisteredToSerial_Request
	(*CAccountHardware_QueryAccountsRegisteredToSerial_Accounts)(nil),       // 6: CAccountHardware_QueryAccountsRegisteredToSerial_Accounts
	(*CAccountHardware_QueryAccountsRegisteredToSerial_Response)(nil),       // 7: CAccountHardware_QueryAccountsRegisteredToSerial_Response
	(*CAccountHardware_UpdateControllerUsageReport_Request)(nil),            // 8: CAccountHardware_UpdateControllerUsageReport_Request
	(*CAccountHardware_UpdateControllerUsageReport_Response)(nil),           // 9: CAccountHardware_UpdateControllerUsageReport_Response
	(*CAccountHardware_SteamControllerSetConfig_ControllerConfig)(nil),      // 10: CAccountHardware_SteamControllerSetConfig_ControllerConfig
	(*CAccountHardware_SteamControllerSetConfig_Request)(nil),               // 11: CAccountHardware_SteamControllerSetConfig_Request
	(*CAccountHardware_SteamControllerSetConfig_Response)(nil),              // 12: CAccountHardware_SteamControllerSetConfig_Response
	(*CAccountHardware_SteamControllerGetConfig_Request)(nil),               // 13: CAccountHardware_SteamControllerGetConfig_Request
	(*CAccountHardware_SteamControllerGetConfig_ControllerConfig)(nil),      // 14: CAccountHardware_SteamControllerGetConfig_ControllerConfig
	(*CAccountHardware_SteamControllerGetConfig_Response)(nil),              // 15: CAccountHardware_SteamControllerGetConfig_Response
	(*CAccountHardware_DeRegisterSteamController_Request)(nil),              // 16: CAccountHardware_DeRegisterSteamController_Request
	(*CAccountHardware_DeRegisterSteamController_Response)(nil),             // 17: CAccountHardware_DeRegisterSteamController_Response
	(*CAccountHardware_SetPersonalizationFile_Request)(nil),                 // 18: CAccountHardware_SetPersonalizationFile_Request
	(*CAccountHardware_SetPersonalizationFile_Response)(nil),                // 19: CAccountHardware_SetPersonalizationFile_Response
	(*CAccountHardware_GetPersonalizationFile_Request)(nil),                 // 20: CAccountHardware_GetPersonalizationFile_Request
	(*CAccountHardware_GetPersonalizationFile_Response)(nil),                // 21: CAccountHardware_GetPersonalizationFile_Response
	(*CAccountHardware_VRCompatibilityCheck_Request)(nil),                   // 22: CAccountHardware_VRCompatibilityCheck_Request
	(*CAccountHardware_VRCompatibilityCheck_Response)(nil),                  // 23: CAccountHardware_VRCompatibilityCheck_Response
	(*CAccountHardware_RegisterValveIndexComponent_Request)(nil),            // 24: CAccountHardware_RegisterValveIndexComponent_Request
	(*CAccountHardware_RegisterValveIndexComponent_Response)(nil),           // 25: CAccountHardware_RegisterValveIndexComponent_Response
	(*CAccountHardware_GetSteamDeckComponents_Request)(nil),                 // 26: CAccountHardware_GetSteamDeckComponents_Request
	(*CAccountHardware_GetSteamDeckComponents_Response)(nil),                // 27: CAccountHardware_GetSteamDeckComponents_Response
	(*CAccountHardware_UpdateControllerUsageReport_Request_Controller)(nil), // 28: CAccountHardware_UpdateControllerUsageReport_Request.Controller
	(*CAccountHardware_VRCompatibilityCheck_Request_Pair)(nil),              // 29: CAccountHardware_VRCompatibilityCheck_Request.Pair
	(*CAccountHardware_VRCompatibilityCheck_Response_Pair)(nil),             // 30: CAccountHardware_VRCompatibilityCheck_Response.Pair
	(*CAccountHardware_VRCompatibilityCheck_Response_ComponentDisplay)(nil), // 31: CAccountHardware_VRCompatibilityCheck_Response.ComponentDisplay
}
var file_steammessages_accounthardware_steamclient_proto_depIdxs = []int32{
	6,  // 0: CAccountHardware_QueryAccountsRegisteredToSerial_Response.accounts:type_name -> CAccountHardware_QueryAccountsRegisteredToSerial_Accounts
	28, // 1: CAccountHardware_UpdateControllerUsageReport_Request.controllers:type_name -> CAccountHardware_UpdateControllerUsageReport_Request.Controller
	10, // 2: CAccountHardware_SteamControllerSetConfig_Request.configurations:type_name -> CAccountHardware_SteamControllerSetConfig_ControllerConfig
	14, // 3: CAccountHardware_SteamControllerGetConfig_Response.configurations:type_name -> CAccountHardware_SteamControllerGetConfig_ControllerConfig
	29, // 4: CAccountHardware_VRCompatibilityCheck_Request.values:type_name -> CAccountHardware_VRCompatibilityCheck_Request.Pair
	30, // 5: CAccountHardware_VRCompatibilityCheck_Response.values:type_name -> CAccountHardware_VRCompatibilityCheck_Response.Pair
	31, // 6: CAccountHardware_VRCompatibilityCheck_Response.components:type_name -> CAccountHardware_VRCompatibilityCheck_Response.ComponentDisplay
	0,  // 7: CAccountHardware_RegisterValveIndexComponent_Request.component_type:type_name -> EValveIndexComponent
	1,  // 8: AccountHardware.RegisterSteamController:input_type -> CAccountHardware_RegisterSteamController_Request
	3,  // 9: AccountHardware.CompleteSteamControllerRegistration:input_type -> CAccountHardware_CompleteSteamControllerRegistration_Request
	5,  // 10: AccountHardware.QueryAccountsRegisteredToController:input_type -> CAccountHardware_QueryAccountsRegisteredToSerial_Request
	8,  // 11: AccountHardware.UpdateControllerUsageReport:input_type -> CAccountHardware_UpdateControllerUsageReport_Request
	11, // 12: AccountHardware.SetDesiredControllerConfigForApp:input_type -> CAccountHardware_SteamControllerSetConfig_Request
	13, // 13: AccountHardware.GetDesiredControllerConfigForApp:input_type -> CAccountHardware_SteamControllerGetConfig_Request
	16, // 14: AccountHardware.DeRegisterSteamController:input_type -> CAccountHardware_DeRegisterSteamController_Request
	18, // 15: AccountHardware.SetControllerPersonalizationFile:input_type -> CAccountHardware_SetPersonalizationFile_Request
	20, // 16: AccountHardware.GetControllerPersonalizationFile:input_type -> CAccountHardware_GetPersonalizationFile_Request
	22, // 17: AccountHardware.VRCompatibilityCheck:input_type -> CAccountHardware_VRCompatibilityCheck_Request
	24, // 18: AccountHardware.RegisterValveIndexComponent:input_type -> CAccountHardware_RegisterValveIndexComponent_Request
	26, // 19: AccountHardware.GetSteamDeckComponents:input_type -> CAccountHardware_GetSteamDeckComponents_Request
	2,  // 20: AccountHardware.RegisterSteamController:output_type -> CAccountHardware_RegisterSteamController_Response
	4,  // 21: AccountHardware.CompleteSteamControllerRegistration:output_type -> CAccountHardware_CompleteSteamControllerRegistration_Response
	7,  // 22: AccountHardware.QueryAccountsRegisteredToController:output_type -> CAccountHardware_QueryAccountsRegisteredToSerial_Response
	9,  // 23: AccountHardware.UpdateControllerUsageReport:output_type -> CAccountHardware_UpdateControllerUsageReport_Response
	12, // 24: AccountHardware.SetDesiredControllerConfigForApp:output_type -> CAccountHardware_SteamControllerSetConfig_Response
	15, // 25: AccountHardware.GetDesiredControllerConfigForApp:output_type -> CAccountHardware_SteamControllerGetConfig_Response
	17, // 26: AccountHardware.DeRegisterSteamController:output_type -> CAccountHardware_DeRegisterSteamController_Response
	19, // 27: AccountHardware.SetControllerPersonalizationFile:output_type -> CAccountHardware_SetPersonalizationFile_Response
	21, // 28: AccountHardware.GetControllerPersonalizationFile:output_type -> CAccountHardware_GetPersonalizationFile_Response
	23, // 29: AccountHardware.VRCompatibilityCheck:output_type -> CAccountHardware_VRCompatibilityCheck_Response
	25, // 30: AccountHardware.RegisterValveIndexComponent:output_type -> CAccountHardware_RegisterValveIndexComponent_Response
	27, // 31: AccountHardware.GetSteamDeckComponents:output_type -> CAccountHardware_GetSteamDeckComponents_Response
	20, // [20:32] is the sub-list for method output_type
	8,  // [8:20] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_steammessages_accounthardware_steamclient_proto_init() }
func file_steammessages_accounthardware_steamclient_proto_init() {
	if File_steammessages_accounthardware_steamclient_proto != nil {
		return
	}
	file_steammessages_base_proto_init()
	file_steammessages_unified_base_steamclient_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_steammessages_accounthardware_steamclient_proto_rawDesc), len(file_steammessages_accounthardware_steamclient_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   31,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_steammessages_accounthardware_steamclient_proto_goTypes,
		DependencyIndexes: file_steammessages_accounthardware_steamclient_proto_depIdxs,
		EnumInfos:         file_steammessages_accounthardware_steamclient_proto_enumTypes,
		MessageInfos:      file_steammessages_accounthardware_steamclient_proto_msgTypes,
	}.Build()
	File_steammessages_accounthardware_steamclient_proto = out.File
	file_steammessages_accounthardware_steamclient_proto_goTypes = nil
	file_steammessages_accounthardware_steamclient_proto_depIdxs = nil
}
