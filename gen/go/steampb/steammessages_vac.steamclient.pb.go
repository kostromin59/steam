// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v6.32.0
// source: steammessages_vac.steamclient.proto

package steampb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CFileVerification_SignatureCheck_Request struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Steamid              *uint64                `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	Appid                *uint32                `protobuf:"varint,2,opt,name=appid" json:"appid,omitempty"`
	FileSize             *uint64                `protobuf:"varint,3,opt,name=file_size,json=fileSize" json:"file_size,omitempty"`
	FileTimestamp        *uint32                `protobuf:"varint,4,opt,name=file_timestamp,json=fileTimestamp" json:"file_timestamp,omitempty"`
	FileTimestamp2       *uint32                `protobuf:"varint,5,opt,name=file_timestamp2,json=fileTimestamp2" json:"file_timestamp2,omitempty"`
	SignatureResult      *uint32                `protobuf:"varint,6,opt,name=signature_result,json=signatureResult" json:"signature_result,omitempty"`
	Filename             *string                `protobuf:"bytes,7,opt,name=filename" json:"filename,omitempty"`
	ClientPackageVersion *uint32                `protobuf:"varint,8,opt,name=client_package_version,json=clientPackageVersion" json:"client_package_version,omitempty"`
	Sha1Hash             []byte                 `protobuf:"bytes,9,opt,name=sha1hash" json:"sha1hash,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *CFileVerification_SignatureCheck_Request) Reset() {
	*x = CFileVerification_SignatureCheck_Request{}
	mi := &file_steammessages_vac_steamclient_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CFileVerification_SignatureCheck_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFileVerification_SignatureCheck_Request) ProtoMessage() {}

func (x *CFileVerification_SignatureCheck_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_vac_steamclient_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFileVerification_SignatureCheck_Request.ProtoReflect.Descriptor instead.
func (*CFileVerification_SignatureCheck_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_vac_steamclient_proto_rawDescGZIP(), []int{0}
}

func (x *CFileVerification_SignatureCheck_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CFileVerification_SignatureCheck_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CFileVerification_SignatureCheck_Request) GetFileSize() uint64 {
	if x != nil && x.FileSize != nil {
		return *x.FileSize
	}
	return 0
}

func (x *CFileVerification_SignatureCheck_Request) GetFileTimestamp() uint32 {
	if x != nil && x.FileTimestamp != nil {
		return *x.FileTimestamp
	}
	return 0
}

func (x *CFileVerification_SignatureCheck_Request) GetFileTimestamp2() uint32 {
	if x != nil && x.FileTimestamp2 != nil {
		return *x.FileTimestamp2
	}
	return 0
}

func (x *CFileVerification_SignatureCheck_Request) GetSignatureResult() uint32 {
	if x != nil && x.SignatureResult != nil {
		return *x.SignatureResult
	}
	return 0
}

func (x *CFileVerification_SignatureCheck_Request) GetFilename() string {
	if x != nil && x.Filename != nil {
		return *x.Filename
	}
	return ""
}

func (x *CFileVerification_SignatureCheck_Request) GetClientPackageVersion() uint32 {
	if x != nil && x.ClientPackageVersion != nil {
		return *x.ClientPackageVersion
	}
	return 0
}

func (x *CFileVerification_SignatureCheck_Request) GetSha1Hash() []byte {
	if x != nil {
		return x.Sha1Hash
	}
	return nil
}

type CFileVerification_SignatureCheck_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DenyOperation *bool                  `protobuf:"varint,1,opt,name=deny_operation,json=denyOperation" json:"deny_operation,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CFileVerification_SignatureCheck_Response) Reset() {
	*x = CFileVerification_SignatureCheck_Response{}
	mi := &file_steammessages_vac_steamclient_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CFileVerification_SignatureCheck_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFileVerification_SignatureCheck_Response) ProtoMessage() {}

func (x *CFileVerification_SignatureCheck_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_vac_steamclient_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFileVerification_SignatureCheck_Response.ProtoReflect.Descriptor instead.
func (*CFileVerification_SignatureCheck_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_vac_steamclient_proto_rawDescGZIP(), []int{1}
}

func (x *CFileVerification_SignatureCheck_Response) GetDenyOperation() bool {
	if x != nil && x.DenyOperation != nil {
		return *x.DenyOperation
	}
	return false
}

type CFileVerification_SteamServiceCheck_Request struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	ServiceStatus        *uint32                `protobuf:"varint,2,opt,name=service_status,json=serviceStatus" json:"service_status,omitempty"`
	ClientPackageVersion *uint32                `protobuf:"varint,3,opt,name=client_package_version,json=clientPackageVersion" json:"client_package_version,omitempty"`
	LauncherType         *uint32                `protobuf:"varint,4,opt,name=launcher_type,json=launcherType" json:"launcher_type,omitempty"`
	OsType               *uint32                `protobuf:"varint,5,opt,name=os_type,json=osType" json:"os_type,omitempty"`
	ServiceRepair        *uint32                `protobuf:"varint,6,opt,name=service_repair,json=serviceRepair" json:"service_repair,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *CFileVerification_SteamServiceCheck_Request) Reset() {
	*x = CFileVerification_SteamServiceCheck_Request{}
	mi := &file_steammessages_vac_steamclient_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CFileVerification_SteamServiceCheck_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFileVerification_SteamServiceCheck_Request) ProtoMessage() {}

func (x *CFileVerification_SteamServiceCheck_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_vac_steamclient_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFileVerification_SteamServiceCheck_Request.ProtoReflect.Descriptor instead.
func (*CFileVerification_SteamServiceCheck_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_vac_steamclient_proto_rawDescGZIP(), []int{2}
}

func (x *CFileVerification_SteamServiceCheck_Request) GetServiceStatus() uint32 {
	if x != nil && x.ServiceStatus != nil {
		return *x.ServiceStatus
	}
	return 0
}

func (x *CFileVerification_SteamServiceCheck_Request) GetClientPackageVersion() uint32 {
	if x != nil && x.ClientPackageVersion != nil {
		return *x.ClientPackageVersion
	}
	return 0
}

func (x *CFileVerification_SteamServiceCheck_Request) GetLauncherType() uint32 {
	if x != nil && x.LauncherType != nil {
		return *x.LauncherType
	}
	return 0
}

func (x *CFileVerification_SteamServiceCheck_Request) GetOsType() uint32 {
	if x != nil && x.OsType != nil {
		return *x.OsType
	}
	return 0
}

func (x *CFileVerification_SteamServiceCheck_Request) GetServiceRepair() uint32 {
	if x != nil && x.ServiceRepair != nil {
		return *x.ServiceRepair
	}
	return 0
}

type CFileVerification_SteamServiceCheck_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AttemptRepair *bool                  `protobuf:"varint,1,opt,name=attempt_repair,json=attemptRepair" json:"attempt_repair,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CFileVerification_SteamServiceCheck_Response) Reset() {
	*x = CFileVerification_SteamServiceCheck_Response{}
	mi := &file_steammessages_vac_steamclient_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CFileVerification_SteamServiceCheck_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFileVerification_SteamServiceCheck_Response) ProtoMessage() {}

func (x *CFileVerification_SteamServiceCheck_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_vac_steamclient_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFileVerification_SteamServiceCheck_Response.ProtoReflect.Descriptor instead.
func (*CFileVerification_SteamServiceCheck_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_vac_steamclient_proto_rawDescGZIP(), []int{3}
}

func (x *CFileVerification_SteamServiceCheck_Response) GetAttemptRepair() bool {
	if x != nil && x.AttemptRepair != nil {
		return *x.AttemptRepair
	}
	return false
}

var File_steammessages_vac_steamclient_proto protoreflect.FileDescriptor

const file_steammessages_vac_steamclient_proto_rawDesc = "" +
	"\n" +
	"#steammessages_vac.steamclient.proto\x1a\x18steammessages_base.proto\x1a,steammessages_unified_base.steamclient.proto\"\xe0\x02\n" +
	"(CFileVerification_SignatureCheck_Request\x12\x18\n" +
	"\asteamid\x18\x01 \x01(\x06R\asteamid\x12\x14\n" +
	"\x05appid\x18\x02 \x01(\rR\x05appid\x12\x1b\n" +
	"\tfile_size\x18\x03 \x01(\x04R\bfileSize\x12%\n" +
	"\x0efile_timestamp\x18\x04 \x01(\rR\rfileTimestamp\x12'\n" +
	"\x0ffile_timestamp2\x18\x05 \x01(\rR\x0efileTimestamp2\x12)\n" +
	"\x10signature_result\x18\x06 \x01(\rR\x0fsignatureResult\x12\x1a\n" +
	"\bfilename\x18\a \x01(\tR\bfilename\x124\n" +
	"\x16client_package_version\x18\b \x01(\rR\x14clientPackageVersion\x12\x1a\n" +
	"\bsha1hash\x18\t \x01(\fR\bsha1hash\"R\n" +
	")CFileVerification_SignatureCheck_Response\x12%\n" +
	"\x0edeny_operation\x18\x01 \x01(\bR\rdenyOperation\"\xef\x01\n" +
	"+CFileVerification_SteamServiceCheck_Request\x12%\n" +
	"\x0eservice_status\x18\x02 \x01(\rR\rserviceStatus\x124\n" +
	"\x16client_package_version\x18\x03 \x01(\rR\x14clientPackageVersion\x12#\n" +
	"\rlauncher_type\x18\x04 \x01(\rR\flauncherType\x12\x17\n" +
	"\aos_type\x18\x05 \x01(\rR\x06osType\x12%\n" +
	"\x0eservice_repair\x18\x06 \x01(\rR\rserviceRepair\"U\n" +
	",CFileVerification_SteamServiceCheck_Response\x12%\n" +
	"\x0eattempt_repair\x18\x01 \x01(\bR\rattemptRepair2\xed\x01\n" +
	"\x10FileVerification\x12g\n" +
	"\x0eSignatureCheck\x12).CFileVerification_SignatureCheck_Request\x1a*.CFileVerification_SignatureCheck_Response\x12p\n" +
	"\x11SteamServiceCheck\x12,.CFileVerification_SteamServiceCheck_Request\x1a-.CFileVerification_SteamServiceCheck_ResponseB\x03\x80\x01\x01"

var (
	file_steammessages_vac_steamclient_proto_rawDescOnce sync.Once
	file_steammessages_vac_steamclient_proto_rawDescData []byte
)

func file_steammessages_vac_steamclient_proto_rawDescGZIP() []byte {
	file_steammessages_vac_steamclient_proto_rawDescOnce.Do(func() {
		file_steammessages_vac_steamclient_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_steammessages_vac_steamclient_proto_rawDesc), len(file_steammessages_vac_steamclient_proto_rawDesc)))
	})
	return file_steammessages_vac_steamclient_proto_rawDescData
}

var file_steammessages_vac_steamclient_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_steammessages_vac_steamclient_proto_goTypes = []any{
	(*CFileVerification_SignatureCheck_Request)(nil),     // 0: CFileVerification_SignatureCheck_Request
	(*CFileVerification_SignatureCheck_Response)(nil),    // 1: CFileVerification_SignatureCheck_Response
	(*CFileVerification_SteamServiceCheck_Request)(nil),  // 2: CFileVerification_SteamServiceCheck_Request
	(*CFileVerification_SteamServiceCheck_Response)(nil), // 3: CFileVerification_SteamServiceCheck_Response
}
var file_steammessages_vac_steamclient_proto_depIdxs = []int32{
	0, // 0: FileVerification.SignatureCheck:input_type -> CFileVerification_SignatureCheck_Request
	2, // 1: FileVerification.SteamServiceCheck:input_type -> CFileVerification_SteamServiceCheck_Request
	1, // 2: FileVerification.SignatureCheck:output_type -> CFileVerification_SignatureCheck_Response
	3, // 3: FileVerification.SteamServiceCheck:output_type -> CFileVerification_SteamServiceCheck_Response
	2, // [2:4] is the sub-list for method output_type
	0, // [0:2] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_steammessages_vac_steamclient_proto_init() }
func file_steammessages_vac_steamclient_proto_init() {
	if File_steammessages_vac_steamclient_proto != nil {
		return
	}
	file_steammessages_base_proto_init()
	file_steammessages_unified_base_steamclient_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_steammessages_vac_steamclient_proto_rawDesc), len(file_steammessages_vac_steamclient_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_steammessages_vac_steamclient_proto_goTypes,
		DependencyIndexes: file_steammessages_vac_steamclient_proto_depIdxs,
		MessageInfos:      file_steammessages_vac_steamclient_proto_msgTypes,
	}.Build()
	File_steammessages_vac_steamclient_proto = out.File
	file_steammessages_vac_steamclient_proto_goTypes = nil
	file_steammessages_vac_steamclient_proto_depIdxs = nil
}
