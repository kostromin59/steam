// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v6.32.0
// source: steammessages_community.steamclient.proto

package steampb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EClanImageGroup int32

const (
	EClanImageGroup_k_EClanImageGroup_None         EClanImageGroup = 0
	EClanImageGroup_k_EClanImageGroup_Announcement EClanImageGroup = 1
	EClanImageGroup_k_EClanImageGroup_Curator      EClanImageGroup = 2
)

// Enum value maps for EClanImageGroup.
var (
	EClanImageGroup_name = map[int32]string{
		0: "k_EClanImageGroup_None",
		1: "k_EClanImageGroup_Announcement",
		2: "k_EClanImageGroup_Curator",
	}
	EClanImageGroup_value = map[string]int32{
		"k_EClanImageGroup_None":         0,
		"k_EClanImageGroup_Announcement": 1,
		"k_EClanImageGroup_Curator":      2,
	}
)

func (x EClanImageGroup) Enum() *EClanImageGroup {
	p := new(EClanImageGroup)
	*p = x
	return p
}

func (x EClanImageGroup) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EClanImageGroup) Descriptor() protoreflect.EnumDescriptor {
	return file_steammessages_community_steamclient_proto_enumTypes[0].Descriptor()
}

func (EClanImageGroup) Type() protoreflect.EnumType {
	return &file_steammessages_community_steamclient_proto_enumTypes[0]
}

func (x EClanImageGroup) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EClanImageGroup) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EClanImageGroup(num)
	return nil
}

// Deprecated: Use EClanImageGroup.Descriptor instead.
func (EClanImageGroup) EnumDescriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{0}
}

type EClanImageFileType int32

const (
	EClanImageFileType_k_EClanImageFileType_Unknown EClanImageFileType = 0
	EClanImageFileType_k_EClanImageFileType_JPEG    EClanImageFileType = 1
	EClanImageFileType_k_EClanImageFileType_GIF     EClanImageFileType = 2
	EClanImageFileType_k_EClanImageFileType_PNG     EClanImageFileType = 3
	EClanImageFileType_k_EClanImageFileType_MP4     EClanImageFileType = 4
	EClanImageFileType_k_EClanImageFileType_WEBM    EClanImageFileType = 5
	EClanImageFileType_k_EClanImageFileType_VTT     EClanImageFileType = 6
	EClanImageFileType_k_EClanImageFileType_SRT     EClanImageFileType = 7
	EClanImageFileType_k_EClanImageFileType_SVG     EClanImageFileType = 8
	EClanImageFileType_k_EClanImageFileType_XML     EClanImageFileType = 9
	EClanImageFileType_k_EClanImageFileType_WEBP    EClanImageFileType = 10
)

// Enum value maps for EClanImageFileType.
var (
	EClanImageFileType_name = map[int32]string{
		0:  "k_EClanImageFileType_Unknown",
		1:  "k_EClanImageFileType_JPEG",
		2:  "k_EClanImageFileType_GIF",
		3:  "k_EClanImageFileType_PNG",
		4:  "k_EClanImageFileType_MP4",
		5:  "k_EClanImageFileType_WEBM",
		6:  "k_EClanImageFileType_VTT",
		7:  "k_EClanImageFileType_SRT",
		8:  "k_EClanImageFileType_SVG",
		9:  "k_EClanImageFileType_XML",
		10: "k_EClanImageFileType_WEBP",
	}
	EClanImageFileType_value = map[string]int32{
		"k_EClanImageFileType_Unknown": 0,
		"k_EClanImageFileType_JPEG":    1,
		"k_EClanImageFileType_GIF":     2,
		"k_EClanImageFileType_PNG":     3,
		"k_EClanImageFileType_MP4":     4,
		"k_EClanImageFileType_WEBM":    5,
		"k_EClanImageFileType_VTT":     6,
		"k_EClanImageFileType_SRT":     7,
		"k_EClanImageFileType_SVG":     8,
		"k_EClanImageFileType_XML":     9,
		"k_EClanImageFileType_WEBP":    10,
	}
)

func (x EClanImageFileType) Enum() *EClanImageFileType {
	p := new(EClanImageFileType)
	*p = x
	return p
}

func (x EClanImageFileType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EClanImageFileType) Descriptor() protoreflect.EnumDescriptor {
	return file_steammessages_community_steamclient_proto_enumTypes[1].Descriptor()
}

func (EClanImageFileType) Type() protoreflect.EnumType {
	return &file_steammessages_community_steamclient_proto_enumTypes[1]
}

func (x EClanImageFileType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EClanImageFileType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EClanImageFileType(num)
	return nil
}

// Deprecated: Use EClanImageFileType.Descriptor instead.
func (EClanImageFileType) EnumDescriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{1}
}

type EPartnerEventDisplayLocation int32

const (
	EPartnerEventDisplayLocation_k_EPartnerEventDisplayLocation_Invalid             EPartnerEventDisplayLocation = 0
	EPartnerEventDisplayLocation_k_EPartnerEventDisplayLocation_AppDetailsSpotlight EPartnerEventDisplayLocation = 1
	EPartnerEventDisplayLocation_k_EPartnerEventDisplayLocation_LibraryOverview     EPartnerEventDisplayLocation = 2
	EPartnerEventDisplayLocation_k_EPartnerEventDisplayLocation_StoreAppPage        EPartnerEventDisplayLocation = 3
	EPartnerEventDisplayLocation_k_EPartnerEventDisplayLocation_EventScroller       EPartnerEventDisplayLocation = 4
	EPartnerEventDisplayLocation_k_EPartnerEventDisplayLocation_AppDetailsActivity  EPartnerEventDisplayLocation = 5
	EPartnerEventDisplayLocation_k_EPartnerEventDisplayLocation_CommunityHub        EPartnerEventDisplayLocation = 6
	EPartnerEventDisplayLocation_k_EPartnerEventDisplayLocation_StoreFrontPage      EPartnerEventDisplayLocation = 7
	EPartnerEventDisplayLocation_k_EPartnerEventDisplayLocation_NewsHub             EPartnerEventDisplayLocation = 8
	EPartnerEventDisplayLocation_k_EPartnerEventDisplayLocation_GamepadHome         EPartnerEventDisplayLocation = 9
	EPartnerEventDisplayLocation_k_EPartnerEventDisplayLocation_StoreHub            EPartnerEventDisplayLocation = 10
)

// Enum value maps for EPartnerEventDisplayLocation.
var (
	EPartnerEventDisplayLocation_name = map[int32]string{
		0:  "k_EPartnerEventDisplayLocation_Invalid",
		1:  "k_EPartnerEventDisplayLocation_AppDetailsSpotlight",
		2:  "k_EPartnerEventDisplayLocation_LibraryOverview",
		3:  "k_EPartnerEventDisplayLocation_StoreAppPage",
		4:  "k_EPartnerEventDisplayLocation_EventScroller",
		5:  "k_EPartnerEventDisplayLocation_AppDetailsActivity",
		6:  "k_EPartnerEventDisplayLocation_CommunityHub",
		7:  "k_EPartnerEventDisplayLocation_StoreFrontPage",
		8:  "k_EPartnerEventDisplayLocation_NewsHub",
		9:  "k_EPartnerEventDisplayLocation_GamepadHome",
		10: "k_EPartnerEventDisplayLocation_StoreHub",
	}
	EPartnerEventDisplayLocation_value = map[string]int32{
		"k_EPartnerEventDisplayLocation_Invalid":             0,
		"k_EPartnerEventDisplayLocation_AppDetailsSpotlight": 1,
		"k_EPartnerEventDisplayLocation_LibraryOverview":     2,
		"k_EPartnerEventDisplayLocation_StoreAppPage":        3,
		"k_EPartnerEventDisplayLocation_EventScroller":       4,
		"k_EPartnerEventDisplayLocation_AppDetailsActivity":  5,
		"k_EPartnerEventDisplayLocation_CommunityHub":        6,
		"k_EPartnerEventDisplayLocation_StoreFrontPage":      7,
		"k_EPartnerEventDisplayLocation_NewsHub":             8,
		"k_EPartnerEventDisplayLocation_GamepadHome":         9,
		"k_EPartnerEventDisplayLocation_StoreHub":            10,
	}
)

func (x EPartnerEventDisplayLocation) Enum() *EPartnerEventDisplayLocation {
	p := new(EPartnerEventDisplayLocation)
	*p = x
	return p
}

func (x EPartnerEventDisplayLocation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EPartnerEventDisplayLocation) Descriptor() protoreflect.EnumDescriptor {
	return file_steammessages_community_steamclient_proto_enumTypes[2].Descriptor()
}

func (EPartnerEventDisplayLocation) Type() protoreflect.EnumType {
	return &file_steammessages_community_steamclient_proto_enumTypes[2]
}

func (x EPartnerEventDisplayLocation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EPartnerEventDisplayLocation) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EPartnerEventDisplayLocation(num)
	return nil
}

// Deprecated: Use EPartnerEventDisplayLocation.Descriptor instead.
func (EPartnerEventDisplayLocation) EnumDescriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{2}
}

type CCommunity_GetApps_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Appids        []int32                `protobuf:"varint,1,rep,name=appids" json:"appids,omitempty"`
	Language      *uint32                `protobuf:"varint,2,opt,name=language" json:"language,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CCommunity_GetApps_Request) Reset() {
	*x = CCommunity_GetApps_Request{}
	mi := &file_steammessages_community_steamclient_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CCommunity_GetApps_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_GetApps_Request) ProtoMessage() {}

func (x *CCommunity_GetApps_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_community_steamclient_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_GetApps_Request.ProtoReflect.Descriptor instead.
func (*CCommunity_GetApps_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{0}
}

func (x *CCommunity_GetApps_Request) GetAppids() []int32 {
	if x != nil {
		return x.Appids
	}
	return nil
}

func (x *CCommunity_GetApps_Request) GetLanguage() uint32 {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return 0
}

type CCommunity_GetApps_Response struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Apps          []*CCDDBAppDetailCommon `protobuf:"bytes,1,rep,name=apps" json:"apps,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CCommunity_GetApps_Response) Reset() {
	*x = CCommunity_GetApps_Response{}
	mi := &file_steammessages_community_steamclient_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CCommunity_GetApps_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_GetApps_Response) ProtoMessage() {}

func (x *CCommunity_GetApps_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_community_steamclient_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_GetApps_Response.ProtoReflect.Descriptor instead.
func (*CCommunity_GetApps_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{1}
}

func (x *CCommunity_GetApps_Response) GetApps() []*CCDDBAppDetailCommon {
	if x != nil {
		return x.Apps
	}
	return nil
}

type CCommunity_GetAppRichPresenceLocalization_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Appid         *int32                 `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	Language      *string                `protobuf:"bytes,2,opt,name=language" json:"language,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CCommunity_GetAppRichPresenceLocalization_Request) Reset() {
	*x = CCommunity_GetAppRichPresenceLocalization_Request{}
	mi := &file_steammessages_community_steamclient_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CCommunity_GetAppRichPresenceLocalization_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_GetAppRichPresenceLocalization_Request) ProtoMessage() {}

func (x *CCommunity_GetAppRichPresenceLocalization_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_community_steamclient_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_GetAppRichPresenceLocalization_Request.ProtoReflect.Descriptor instead.
func (*CCommunity_GetAppRichPresenceLocalization_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{2}
}

func (x *CCommunity_GetAppRichPresenceLocalization_Request) GetAppid() int32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CCommunity_GetAppRichPresenceLocalization_Request) GetLanguage() string {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return ""
}

type CCommunity_GetAppRichPresenceLocalization_Response struct {
	state         protoimpl.MessageState                                          `protogen:"open.v1"`
	Appid         *int32                                                          `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	TokenLists    []*CCommunity_GetAppRichPresenceLocalization_Response_TokenList `protobuf:"bytes,2,rep,name=token_lists,json=tokenLists" json:"token_lists,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CCommunity_GetAppRichPresenceLocalization_Response) Reset() {
	*x = CCommunity_GetAppRichPresenceLocalization_Response{}
	mi := &file_steammessages_community_steamclient_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CCommunity_GetAppRichPresenceLocalization_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_GetAppRichPresenceLocalization_Response) ProtoMessage() {}

func (x *CCommunity_GetAppRichPresenceLocalization_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_community_steamclient_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_GetAppRichPresenceLocalization_Response.ProtoReflect.Descriptor instead.
func (*CCommunity_GetAppRichPresenceLocalization_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{3}
}

func (x *CCommunity_GetAppRichPresenceLocalization_Response) GetAppid() int32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CCommunity_GetAppRichPresenceLocalization_Response) GetTokenLists() []*CCommunity_GetAppRichPresenceLocalization_Response_TokenList {
	if x != nil {
		return x.TokenLists
	}
	return nil
}

type CCommunity_GetCommentThread_Request struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Steamid           *uint64                `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	CommentThreadType *ECommentThreadType    `protobuf:"varint,2,opt,name=comment_thread_type,json=commentThreadType,enum=ECommentThreadType,def=0" json:"comment_thread_type,omitempty"`
	Gidfeature        *uint64                `protobuf:"fixed64,3,opt,name=gidfeature" json:"gidfeature,omitempty"`
	Gidfeature2       *uint64                `protobuf:"fixed64,4,opt,name=gidfeature2" json:"gidfeature2,omitempty"`
	Commentthreadid   *uint64                `protobuf:"fixed64,5,opt,name=commentthreadid" json:"commentthreadid,omitempty"`
	Start             *int32                 `protobuf:"varint,6,opt,name=start" json:"start,omitempty"`
	Count             *int32                 `protobuf:"varint,7,opt,name=count" json:"count,omitempty"`
	Upvoters          *int32                 `protobuf:"varint,8,opt,name=upvoters" json:"upvoters,omitempty"`
	IncludeDeleted    *bool                  `protobuf:"varint,9,opt,name=include_deleted,json=includeDeleted" json:"include_deleted,omitempty"`
	Gidcomment        *uint64                `protobuf:"fixed64,10,opt,name=gidcomment" json:"gidcomment,omitempty"`
	TimeOldest        *uint32                `protobuf:"varint,11,opt,name=time_oldest,json=timeOldest" json:"time_oldest,omitempty"`
	OldestFirst       *bool                  `protobuf:"varint,12,opt,name=oldest_first,json=oldestFirst" json:"oldest_first,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

// Default values for CCommunity_GetCommentThread_Request fields.
const (
	Default_CCommunity_GetCommentThread_Request_CommentThreadType = ECommentThreadType_k_ECommentThreadTypeInvalid
)

func (x *CCommunity_GetCommentThread_Request) Reset() {
	*x = CCommunity_GetCommentThread_Request{}
	mi := &file_steammessages_community_steamclient_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CCommunity_GetCommentThread_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_GetCommentThread_Request) ProtoMessage() {}

func (x *CCommunity_GetCommentThread_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_community_steamclient_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_GetCommentThread_Request.ProtoReflect.Descriptor instead.
func (*CCommunity_GetCommentThread_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{4}
}

func (x *CCommunity_GetCommentThread_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CCommunity_GetCommentThread_Request) GetCommentThreadType() ECommentThreadType {
	if x != nil && x.CommentThreadType != nil {
		return *x.CommentThreadType
	}
	return Default_CCommunity_GetCommentThread_Request_CommentThreadType
}

func (x *CCommunity_GetCommentThread_Request) GetGidfeature() uint64 {
	if x != nil && x.Gidfeature != nil {
		return *x.Gidfeature
	}
	return 0
}

func (x *CCommunity_GetCommentThread_Request) GetGidfeature2() uint64 {
	if x != nil && x.Gidfeature2 != nil {
		return *x.Gidfeature2
	}
	return 0
}

func (x *CCommunity_GetCommentThread_Request) GetCommentthreadid() uint64 {
	if x != nil && x.Commentthreadid != nil {
		return *x.Commentthreadid
	}
	return 0
}

func (x *CCommunity_GetCommentThread_Request) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *CCommunity_GetCommentThread_Request) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *CCommunity_GetCommentThread_Request) GetUpvoters() int32 {
	if x != nil && x.Upvoters != nil {
		return *x.Upvoters
	}
	return 0
}

func (x *CCommunity_GetCommentThread_Request) GetIncludeDeleted() bool {
	if x != nil && x.IncludeDeleted != nil {
		return *x.IncludeDeleted
	}
	return false
}

func (x *CCommunity_GetCommentThread_Request) GetGidcomment() uint64 {
	if x != nil && x.Gidcomment != nil {
		return *x.Gidcomment
	}
	return 0
}

func (x *CCommunity_GetCommentThread_Request) GetTimeOldest() uint32 {
	if x != nil && x.TimeOldest != nil {
		return *x.TimeOldest
	}
	return 0
}

func (x *CCommunity_GetCommentThread_Request) GetOldestFirst() bool {
	if x != nil && x.OldestFirst != nil {
		return *x.OldestFirst
	}
	return false
}

type CCommunity_Comment struct {
	state            protoimpl.MessageState         `protogen:"open.v1"`
	Gidcomment       *uint64                        `protobuf:"fixed64,1,opt,name=gidcomment" json:"gidcomment,omitempty"`
	Steamid          *uint64                        `protobuf:"fixed64,2,opt,name=steamid" json:"steamid,omitempty"`
	Timestamp        *uint32                        `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
	Text             *string                        `protobuf:"bytes,4,opt,name=text" json:"text,omitempty"`
	Upvotes          *int32                         `protobuf:"varint,5,opt,name=upvotes" json:"upvotes,omitempty"`
	Hidden           *bool                          `protobuf:"varint,6,opt,name=hidden" json:"hidden,omitempty"`
	HiddenByUser     *bool                          `protobuf:"varint,7,opt,name=hidden_by_user,json=hiddenByUser" json:"hidden_by_user,omitempty"`
	Deleted          *bool                          `protobuf:"varint,8,opt,name=deleted" json:"deleted,omitempty"`
	Ipaddress        *CMsgIPAddress                 `protobuf:"bytes,9,opt,name=ipaddress" json:"ipaddress,omitempty"`
	TotalHidden      *int32                         `protobuf:"varint,10,opt,name=total_hidden,json=totalHidden" json:"total_hidden,omitempty"`
	UpvotedByUser    *bool                          `protobuf:"varint,11,opt,name=upvoted_by_user,json=upvotedByUser" json:"upvoted_by_user,omitempty"`
	Reactions        []*CCommunity_Comment_Reaction `protobuf:"bytes,12,rep,name=reactions" json:"reactions,omitempty"`
	Gidparentcomment *uint64                        `protobuf:"fixed64,13,opt,name=gidparentcomment" json:"gidparentcomment,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CCommunity_Comment) Reset() {
	*x = CCommunity_Comment{}
	mi := &file_steammessages_community_steamclient_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CCommunity_Comment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_Comment) ProtoMessage() {}

func (x *CCommunity_Comment) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_community_steamclient_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_Comment.ProtoReflect.Descriptor instead.
func (*CCommunity_Comment) Descriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{5}
}

func (x *CCommunity_Comment) GetGidcomment() uint64 {
	if x != nil && x.Gidcomment != nil {
		return *x.Gidcomment
	}
	return 0
}

func (x *CCommunity_Comment) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CCommunity_Comment) GetTimestamp() uint32 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *CCommunity_Comment) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

func (x *CCommunity_Comment) GetUpvotes() int32 {
	if x != nil && x.Upvotes != nil {
		return *x.Upvotes
	}
	return 0
}

func (x *CCommunity_Comment) GetHidden() bool {
	if x != nil && x.Hidden != nil {
		return *x.Hidden
	}
	return false
}

func (x *CCommunity_Comment) GetHiddenByUser() bool {
	if x != nil && x.HiddenByUser != nil {
		return *x.HiddenByUser
	}
	return false
}

func (x *CCommunity_Comment) GetDeleted() bool {
	if x != nil && x.Deleted != nil {
		return *x.Deleted
	}
	return false
}

func (x *CCommunity_Comment) GetIpaddress() *CMsgIPAddress {
	if x != nil {
		return x.Ipaddress
	}
	return nil
}

func (x *CCommunity_Comment) GetTotalHidden() int32 {
	if x != nil && x.TotalHidden != nil {
		return *x.TotalHidden
	}
	return 0
}

func (x *CCommunity_Comment) GetUpvotedByUser() bool {
	if x != nil && x.UpvotedByUser != nil {
		return *x.UpvotedByUser
	}
	return false
}

func (x *CCommunity_Comment) GetReactions() []*CCommunity_Comment_Reaction {
	if x != nil {
		return x.Reactions
	}
	return nil
}

func (x *CCommunity_Comment) GetGidparentcomment() uint64 {
	if x != nil && x.Gidparentcomment != nil {
		return *x.Gidparentcomment
	}
	return 0
}

type CCommunity_GetCommentThread_Response struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Comments          []*CCommunity_Comment  `protobuf:"bytes,1,rep,name=comments" json:"comments,omitempty"`
	DeletedComments   []*CCommunity_Comment  `protobuf:"bytes,2,rep,name=deleted_comments,json=deletedComments" json:"deleted_comments,omitempty"`
	Steamid           *uint64                `protobuf:"fixed64,3,opt,name=steamid" json:"steamid,omitempty"`
	Commentthreadid   *uint64                `protobuf:"fixed64,4,opt,name=commentthreadid" json:"commentthreadid,omitempty"`
	Start             *int32                 `protobuf:"varint,5,opt,name=start" json:"start,omitempty"`
	Count             *int32                 `protobuf:"varint,6,opt,name=count" json:"count,omitempty"`
	TotalCount        *int32                 `protobuf:"varint,7,opt,name=total_count,json=totalCount" json:"total_count,omitempty"`
	Upvotes           *int32                 `protobuf:"varint,8,opt,name=upvotes" json:"upvotes,omitempty"`
	Upvoters          []uint32               `protobuf:"varint,9,rep,name=upvoters" json:"upvoters,omitempty"`
	UserSubscribed    *bool                  `protobuf:"varint,10,opt,name=user_subscribed,json=userSubscribed" json:"user_subscribed,omitempty"`
	UserUpvoted       *bool                  `protobuf:"varint,11,opt,name=user_upvoted,json=userUpvoted" json:"user_upvoted,omitempty"`
	AnswerCommentid   *uint64                `protobuf:"fixed64,12,opt,name=answer_commentid,json=answerCommentid" json:"answer_commentid,omitempty"`
	AnswerActor       *uint32                `protobuf:"varint,13,opt,name=answer_actor,json=answerActor" json:"answer_actor,omitempty"`
	AnswerActorRank   *int32                 `protobuf:"varint,14,opt,name=answer_actor_rank,json=answerActorRank" json:"answer_actor_rank,omitempty"`
	CanPost           *bool                  `protobuf:"varint,15,opt,name=can_post,json=canPost" json:"can_post,omitempty"`
	CommentThreadType *uint32                `protobuf:"varint,16,opt,name=comment_thread_type,json=commentThreadType" json:"comment_thread_type,omitempty"`
	Gidfeature        *uint64                `protobuf:"fixed64,17,opt,name=gidfeature" json:"gidfeature,omitempty"`
	Gidfeature2       *uint64                `protobuf:"fixed64,18,opt,name=gidfeature2" json:"gidfeature2,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *CCommunity_GetCommentThread_Response) Reset() {
	*x = CCommunity_GetCommentThread_Response{}
	mi := &file_steammessages_community_steamclient_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CCommunity_GetCommentThread_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_GetCommentThread_Response) ProtoMessage() {}

func (x *CCommunity_GetCommentThread_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_community_steamclient_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_GetCommentThread_Response.ProtoReflect.Descriptor instead.
func (*CCommunity_GetCommentThread_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{6}
}

func (x *CCommunity_GetCommentThread_Response) GetComments() []*CCommunity_Comment {
	if x != nil {
		return x.Comments
	}
	return nil
}

func (x *CCommunity_GetCommentThread_Response) GetDeletedComments() []*CCommunity_Comment {
	if x != nil {
		return x.DeletedComments
	}
	return nil
}

func (x *CCommunity_GetCommentThread_Response) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CCommunity_GetCommentThread_Response) GetCommentthreadid() uint64 {
	if x != nil && x.Commentthreadid != nil {
		return *x.Commentthreadid
	}
	return 0
}

func (x *CCommunity_GetCommentThread_Response) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *CCommunity_GetCommentThread_Response) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *CCommunity_GetCommentThread_Response) GetTotalCount() int32 {
	if x != nil && x.TotalCount != nil {
		return *x.TotalCount
	}
	return 0
}

func (x *CCommunity_GetCommentThread_Response) GetUpvotes() int32 {
	if x != nil && x.Upvotes != nil {
		return *x.Upvotes
	}
	return 0
}

func (x *CCommunity_GetCommentThread_Response) GetUpvoters() []uint32 {
	if x != nil {
		return x.Upvoters
	}
	return nil
}

func (x *CCommunity_GetCommentThread_Response) GetUserSubscribed() bool {
	if x != nil && x.UserSubscribed != nil {
		return *x.UserSubscribed
	}
	return false
}

func (x *CCommunity_GetCommentThread_Response) GetUserUpvoted() bool {
	if x != nil && x.UserUpvoted != nil {
		return *x.UserUpvoted
	}
	return false
}

func (x *CCommunity_GetCommentThread_Response) GetAnswerCommentid() uint64 {
	if x != nil && x.AnswerCommentid != nil {
		return *x.AnswerCommentid
	}
	return 0
}

func (x *CCommunity_GetCommentThread_Response) GetAnswerActor() uint32 {
	if x != nil && x.AnswerActor != nil {
		return *x.AnswerActor
	}
	return 0
}

func (x *CCommunity_GetCommentThread_Response) GetAnswerActorRank() int32 {
	if x != nil && x.AnswerActorRank != nil {
		return *x.AnswerActorRank
	}
	return 0
}

func (x *CCommunity_GetCommentThread_Response) GetCanPost() bool {
	if x != nil && x.CanPost != nil {
		return *x.CanPost
	}
	return false
}

func (x *CCommunity_GetCommentThread_Response) GetCommentThreadType() uint32 {
	if x != nil && x.CommentThreadType != nil {
		return *x.CommentThreadType
	}
	return 0
}

func (x *CCommunity_GetCommentThread_Response) GetGidfeature() uint64 {
	if x != nil && x.Gidfeature != nil {
		return *x.Gidfeature
	}
	return 0
}

func (x *CCommunity_GetCommentThread_Response) GetGidfeature2() uint64 {
	if x != nil && x.Gidfeature2 != nil {
		return *x.Gidfeature2
	}
	return 0
}

type CCommunity_PostCommentToThread_Request struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	Steamid               *uint64                `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	CommentThreadType     *ECommentThreadType    `protobuf:"varint,2,opt,name=comment_thread_type,json=commentThreadType,enum=ECommentThreadType,def=0" json:"comment_thread_type,omitempty"`
	Gidfeature            *uint64                `protobuf:"fixed64,3,opt,name=gidfeature" json:"gidfeature,omitempty"`
	Gidfeature2           *uint64                `protobuf:"fixed64,4,opt,name=gidfeature2" json:"gidfeature2,omitempty"`
	Text                  *string                `protobuf:"bytes,6,opt,name=text" json:"text,omitempty"`
	Gidparentcomment      *uint64                `protobuf:"fixed64,7,opt,name=gidparentcomment" json:"gidparentcomment,omitempty"`
	SuppressNotifications *bool                  `protobuf:"varint,8,opt,name=suppress_notifications,json=suppressNotifications" json:"suppress_notifications,omitempty"`
	IsReport              *bool                  `protobuf:"varint,9,opt,name=is_report,json=isReport" json:"is_report,omitempty"`
	StartHidden           *bool                  `protobuf:"varint,10,opt,name=start_hidden,json=startHidden" json:"start_hidden,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

// Default values for CCommunity_PostCommentToThread_Request fields.
const (
	Default_CCommunity_PostCommentToThread_Request_CommentThreadType = ECommentThreadType_k_ECommentThreadTypeInvalid
)

func (x *CCommunity_PostCommentToThread_Request) Reset() {
	*x = CCommunity_PostCommentToThread_Request{}
	mi := &file_steammessages_community_steamclient_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CCommunity_PostCommentToThread_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_PostCommentToThread_Request) ProtoMessage() {}

func (x *CCommunity_PostCommentToThread_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_community_steamclient_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_PostCommentToThread_Request.ProtoReflect.Descriptor instead.
func (*CCommunity_PostCommentToThread_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{7}
}

func (x *CCommunity_PostCommentToThread_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CCommunity_PostCommentToThread_Request) GetCommentThreadType() ECommentThreadType {
	if x != nil && x.CommentThreadType != nil {
		return *x.CommentThreadType
	}
	return Default_CCommunity_PostCommentToThread_Request_CommentThreadType
}

func (x *CCommunity_PostCommentToThread_Request) GetGidfeature() uint64 {
	if x != nil && x.Gidfeature != nil {
		return *x.Gidfeature
	}
	return 0
}

func (x *CCommunity_PostCommentToThread_Request) GetGidfeature2() uint64 {
	if x != nil && x.Gidfeature2 != nil {
		return *x.Gidfeature2
	}
	return 0
}

func (x *CCommunity_PostCommentToThread_Request) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

func (x *CCommunity_PostCommentToThread_Request) GetGidparentcomment() uint64 {
	if x != nil && x.Gidparentcomment != nil {
		return *x.Gidparentcomment
	}
	return 0
}

func (x *CCommunity_PostCommentToThread_Request) GetSuppressNotifications() bool {
	if x != nil && x.SuppressNotifications != nil {
		return *x.SuppressNotifications
	}
	return false
}

func (x *CCommunity_PostCommentToThread_Request) GetIsReport() bool {
	if x != nil && x.IsReport != nil {
		return *x.IsReport
	}
	return false
}

func (x *CCommunity_PostCommentToThread_Request) GetStartHidden() bool {
	if x != nil && x.StartHidden != nil {
		return *x.StartHidden
	}
	return false
}

type CCommunity_PostCommentToThread_Response struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Gidcomment      *uint64                `protobuf:"fixed64,1,opt,name=gidcomment" json:"gidcomment,omitempty"`
	Commentthreadid *uint64                `protobuf:"fixed64,2,opt,name=commentthreadid" json:"commentthreadid,omitempty"`
	Count           *int32                 `protobuf:"varint,3,opt,name=count" json:"count,omitempty"`
	Upvotes         *int32                 `protobuf:"varint,4,opt,name=upvotes" json:"upvotes,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CCommunity_PostCommentToThread_Response) Reset() {
	*x = CCommunity_PostCommentToThread_Response{}
	mi := &file_steammessages_community_steamclient_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CCommunity_PostCommentToThread_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_PostCommentToThread_Response) ProtoMessage() {}

func (x *CCommunity_PostCommentToThread_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_community_steamclient_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_PostCommentToThread_Response.ProtoReflect.Descriptor instead.
func (*CCommunity_PostCommentToThread_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{8}
}

func (x *CCommunity_PostCommentToThread_Response) GetGidcomment() uint64 {
	if x != nil && x.Gidcomment != nil {
		return *x.Gidcomment
	}
	return 0
}

func (x *CCommunity_PostCommentToThread_Response) GetCommentthreadid() uint64 {
	if x != nil && x.Commentthreadid != nil {
		return *x.Commentthreadid
	}
	return 0
}

func (x *CCommunity_PostCommentToThread_Response) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *CCommunity_PostCommentToThread_Response) GetUpvotes() int32 {
	if x != nil && x.Upvotes != nil {
		return *x.Upvotes
	}
	return 0
}

type CCommunity_DeleteCommentFromThread_Request struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Steamid           *uint64                `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	CommentThreadType *ECommentThreadType    `protobuf:"varint,2,opt,name=comment_thread_type,json=commentThreadType,enum=ECommentThreadType,def=0" json:"comment_thread_type,omitempty"`
	Gidfeature        *uint64                `protobuf:"fixed64,3,opt,name=gidfeature" json:"gidfeature,omitempty"`
	Gidfeature2       *uint64                `protobuf:"fixed64,4,opt,name=gidfeature2" json:"gidfeature2,omitempty"`
	Gidcomment        *uint64                `protobuf:"fixed64,5,opt,name=gidcomment" json:"gidcomment,omitempty"`
	Undelete          *bool                  `protobuf:"varint,6,opt,name=undelete" json:"undelete,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

// Default values for CCommunity_DeleteCommentFromThread_Request fields.
const (
	Default_CCommunity_DeleteCommentFromThread_Request_CommentThreadType = ECommentThreadType_k_ECommentThreadTypeInvalid
)

func (x *CCommunity_DeleteCommentFromThread_Request) Reset() {
	*x = CCommunity_DeleteCommentFromThread_Request{}
	mi := &file_steammessages_community_steamclient_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CCommunity_DeleteCommentFromThread_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_DeleteCommentFromThread_Request) ProtoMessage() {}

func (x *CCommunity_DeleteCommentFromThread_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_community_steamclient_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_DeleteCommentFromThread_Request.ProtoReflect.Descriptor instead.
func (*CCommunity_DeleteCommentFromThread_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{9}
}

func (x *CCommunity_DeleteCommentFromThread_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CCommunity_DeleteCommentFromThread_Request) GetCommentThreadType() ECommentThreadType {
	if x != nil && x.CommentThreadType != nil {
		return *x.CommentThreadType
	}
	return Default_CCommunity_DeleteCommentFromThread_Request_CommentThreadType
}

func (x *CCommunity_DeleteCommentFromThread_Request) GetGidfeature() uint64 {
	if x != nil && x.Gidfeature != nil {
		return *x.Gidfeature
	}
	return 0
}

func (x *CCommunity_DeleteCommentFromThread_Request) GetGidfeature2() uint64 {
	if x != nil && x.Gidfeature2 != nil {
		return *x.Gidfeature2
	}
	return 0
}

func (x *CCommunity_DeleteCommentFromThread_Request) GetGidcomment() uint64 {
	if x != nil && x.Gidcomment != nil {
		return *x.Gidcomment
	}
	return 0
}

func (x *CCommunity_DeleteCommentFromThread_Request) GetUndelete() bool {
	if x != nil && x.Undelete != nil {
		return *x.Undelete
	}
	return false
}

type CCommunity_DeleteCommentFromThread_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CCommunity_DeleteCommentFromThread_Response) Reset() {
	*x = CCommunity_DeleteCommentFromThread_Response{}
	mi := &file_steammessages_community_steamclient_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CCommunity_DeleteCommentFromThread_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_DeleteCommentFromThread_Response) ProtoMessage() {}

func (x *CCommunity_DeleteCommentFromThread_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_community_steamclient_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_DeleteCommentFromThread_Response.ProtoReflect.Descriptor instead.
func (*CCommunity_DeleteCommentFromThread_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{10}
}

type CCommunity_RateCommentThread_Request struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	Commentthreadtype     *string                `protobuf:"bytes,1,opt,name=commentthreadtype" json:"commentthreadtype,omitempty"`
	Steamid               *uint64                `protobuf:"varint,2,opt,name=steamid" json:"steamid,omitempty"`
	Gidfeature            *uint64                `protobuf:"varint,3,opt,name=gidfeature" json:"gidfeature,omitempty"`
	Gidfeature2           *uint64                `protobuf:"varint,4,opt,name=gidfeature2" json:"gidfeature2,omitempty"`
	Gidcomment            *uint64                `protobuf:"varint,5,opt,name=gidcomment" json:"gidcomment,omitempty"`
	RateUp                *bool                  `protobuf:"varint,6,opt,name=rate_up,json=rateUp" json:"rate_up,omitempty"`
	SuppressNotifications *bool                  `protobuf:"varint,7,opt,name=suppress_notifications,json=suppressNotifications" json:"suppress_notifications,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *CCommunity_RateCommentThread_Request) Reset() {
	*x = CCommunity_RateCommentThread_Request{}
	mi := &file_steammessages_community_steamclient_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CCommunity_RateCommentThread_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_RateCommentThread_Request) ProtoMessage() {}

func (x *CCommunity_RateCommentThread_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_community_steamclient_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_RateCommentThread_Request.ProtoReflect.Descriptor instead.
func (*CCommunity_RateCommentThread_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{11}
}

func (x *CCommunity_RateCommentThread_Request) GetCommentthreadtype() string {
	if x != nil && x.Commentthreadtype != nil {
		return *x.Commentthreadtype
	}
	return ""
}

func (x *CCommunity_RateCommentThread_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CCommunity_RateCommentThread_Request) GetGidfeature() uint64 {
	if x != nil && x.Gidfeature != nil {
		return *x.Gidfeature
	}
	return 0
}

func (x *CCommunity_RateCommentThread_Request) GetGidfeature2() uint64 {
	if x != nil && x.Gidfeature2 != nil {
		return *x.Gidfeature2
	}
	return 0
}

func (x *CCommunity_RateCommentThread_Request) GetGidcomment() uint64 {
	if x != nil && x.Gidcomment != nil {
		return *x.Gidcomment
	}
	return 0
}

func (x *CCommunity_RateCommentThread_Request) GetRateUp() bool {
	if x != nil && x.RateUp != nil {
		return *x.RateUp
	}
	return false
}

func (x *CCommunity_RateCommentThread_Request) GetSuppressNotifications() bool {
	if x != nil && x.SuppressNotifications != nil {
		return *x.SuppressNotifications
	}
	return false
}

type CCommunity_RateCommentThread_Response struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Gidcomment      *uint64                `protobuf:"varint,1,opt,name=gidcomment" json:"gidcomment,omitempty"`
	Commentthreadid *uint64                `protobuf:"varint,2,opt,name=commentthreadid" json:"commentthreadid,omitempty"`
	Count           *uint32                `protobuf:"varint,3,opt,name=count" json:"count,omitempty"`
	Upvotes         *uint32                `protobuf:"varint,4,opt,name=upvotes" json:"upvotes,omitempty"`
	HasUpvoted      *bool                  `protobuf:"varint,5,opt,name=has_upvoted,json=hasUpvoted" json:"has_upvoted,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CCommunity_RateCommentThread_Response) Reset() {
	*x = CCommunity_RateCommentThread_Response{}
	mi := &file_steammessages_community_steamclient_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CCommunity_RateCommentThread_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_RateCommentThread_Response) ProtoMessage() {}

func (x *CCommunity_RateCommentThread_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_community_steamclient_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_RateCommentThread_Response.ProtoReflect.Descriptor instead.
func (*CCommunity_RateCommentThread_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{12}
}

func (x *CCommunity_RateCommentThread_Response) GetGidcomment() uint64 {
	if x != nil && x.Gidcomment != nil {
		return *x.Gidcomment
	}
	return 0
}

func (x *CCommunity_RateCommentThread_Response) GetCommentthreadid() uint64 {
	if x != nil && x.Commentthreadid != nil {
		return *x.Commentthreadid
	}
	return 0
}

func (x *CCommunity_RateCommentThread_Response) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *CCommunity_RateCommentThread_Response) GetUpvotes() uint32 {
	if x != nil && x.Upvotes != nil {
		return *x.Upvotes
	}
	return 0
}

func (x *CCommunity_RateCommentThread_Response) GetHasUpvoted() bool {
	if x != nil && x.HasUpvoted != nil {
		return *x.HasUpvoted
	}
	return false
}

type CCommunity_GetCommentThreadRatings_Request struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Commentthreadtype *string                `protobuf:"bytes,1,opt,name=commentthreadtype" json:"commentthreadtype,omitempty"`
	Steamid           *uint64                `protobuf:"varint,2,opt,name=steamid" json:"steamid,omitempty"`
	Gidfeature        *uint64                `protobuf:"varint,3,opt,name=gidfeature" json:"gidfeature,omitempty"`
	Gidfeature2       *uint64                `protobuf:"varint,4,opt,name=gidfeature2" json:"gidfeature2,omitempty"`
	Gidcomment        *uint64                `protobuf:"varint,5,opt,name=gidcomment" json:"gidcomment,omitempty"`
	MaxResults        *uint32                `protobuf:"varint,6,opt,name=max_results,json=maxResults" json:"max_results,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *CCommunity_GetCommentThreadRatings_Request) Reset() {
	*x = CCommunity_GetCommentThreadRatings_Request{}
	mi := &file_steammessages_community_steamclient_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CCommunity_GetCommentThreadRatings_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_GetCommentThreadRatings_Request) ProtoMessage() {}

func (x *CCommunity_GetCommentThreadRatings_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_community_steamclient_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_GetCommentThreadRatings_Request.ProtoReflect.Descriptor instead.
func (*CCommunity_GetCommentThreadRatings_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{13}
}

func (x *CCommunity_GetCommentThreadRatings_Request) GetCommentthreadtype() string {
	if x != nil && x.Commentthreadtype != nil {
		return *x.Commentthreadtype
	}
	return ""
}

func (x *CCommunity_GetCommentThreadRatings_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CCommunity_GetCommentThreadRatings_Request) GetGidfeature() uint64 {
	if x != nil && x.Gidfeature != nil {
		return *x.Gidfeature
	}
	return 0
}

func (x *CCommunity_GetCommentThreadRatings_Request) GetGidfeature2() uint64 {
	if x != nil && x.Gidfeature2 != nil {
		return *x.Gidfeature2
	}
	return 0
}

func (x *CCommunity_GetCommentThreadRatings_Request) GetGidcomment() uint64 {
	if x != nil && x.Gidcomment != nil {
		return *x.Gidcomment
	}
	return 0
}

func (x *CCommunity_GetCommentThreadRatings_Request) GetMaxResults() uint32 {
	if x != nil && x.MaxResults != nil {
		return *x.MaxResults
	}
	return 0
}

type CCommunity_GetCommentThreadRatings_Response struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Commentthreadid   *uint64                `protobuf:"varint,1,opt,name=commentthreadid" json:"commentthreadid,omitempty"`
	Gidcomment        *uint64                `protobuf:"varint,2,opt,name=gidcomment" json:"gidcomment,omitempty"`
	Upvotes           *uint32                `protobuf:"varint,3,opt,name=upvotes" json:"upvotes,omitempty"`
	HasUpvoted        *bool                  `protobuf:"varint,4,opt,name=has_upvoted,json=hasUpvoted" json:"has_upvoted,omitempty"`
	UpvoterAccountids []uint32               `protobuf:"varint,5,rep,name=upvoter_accountids,json=upvoterAccountids" json:"upvoter_accountids,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *CCommunity_GetCommentThreadRatings_Response) Reset() {
	*x = CCommunity_GetCommentThreadRatings_Response{}
	mi := &file_steammessages_community_steamclient_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CCommunity_GetCommentThreadRatings_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_GetCommentThreadRatings_Response) ProtoMessage() {}

func (x *CCommunity_GetCommentThreadRatings_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_community_steamclient_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_GetCommentThreadRatings_Response.ProtoReflect.Descriptor instead.
func (*CCommunity_GetCommentThreadRatings_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{14}
}

func (x *CCommunity_GetCommentThreadRatings_Response) GetCommentthreadid() uint64 {
	if x != nil && x.Commentthreadid != nil {
		return *x.Commentthreadid
	}
	return 0
}

func (x *CCommunity_GetCommentThreadRatings_Response) GetGidcomment() uint64 {
	if x != nil && x.Gidcomment != nil {
		return *x.Gidcomment
	}
	return 0
}

func (x *CCommunity_GetCommentThreadRatings_Response) GetUpvotes() uint32 {
	if x != nil && x.Upvotes != nil {
		return *x.Upvotes
	}
	return 0
}

func (x *CCommunity_GetCommentThreadRatings_Response) GetHasUpvoted() bool {
	if x != nil && x.HasUpvoted != nil {
		return *x.HasUpvoted
	}
	return false
}

func (x *CCommunity_GetCommentThreadRatings_Response) GetUpvoterAccountids() []uint32 {
	if x != nil {
		return x.UpvoterAccountids
	}
	return nil
}

type CCommunity_RateClanAnnouncement_Request struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Announcementid *uint64                `protobuf:"varint,1,opt,name=announcementid" json:"announcementid,omitempty"`
	VoteUp         *bool                  `protobuf:"varint,2,opt,name=vote_up,json=voteUp" json:"vote_up,omitempty"`
	ClanAccountid  *uint32                `protobuf:"varint,3,opt,name=clan_accountid,json=clanAccountid" json:"clan_accountid,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CCommunity_RateClanAnnouncement_Request) Reset() {
	*x = CCommunity_RateClanAnnouncement_Request{}
	mi := &file_steammessages_community_steamclient_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CCommunity_RateClanAnnouncement_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_RateClanAnnouncement_Request) ProtoMessage() {}

func (x *CCommunity_RateClanAnnouncement_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_community_steamclient_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_RateClanAnnouncement_Request.ProtoReflect.Descriptor instead.
func (*CCommunity_RateClanAnnouncement_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{15}
}

func (x *CCommunity_RateClanAnnouncement_Request) GetAnnouncementid() uint64 {
	if x != nil && x.Announcementid != nil {
		return *x.Announcementid
	}
	return 0
}

func (x *CCommunity_RateClanAnnouncement_Request) GetVoteUp() bool {
	if x != nil && x.VoteUp != nil {
		return *x.VoteUp
	}
	return false
}

func (x *CCommunity_RateClanAnnouncement_Request) GetClanAccountid() uint32 {
	if x != nil && x.ClanAccountid != nil {
		return *x.ClanAccountid
	}
	return 0
}

type CCommunity_RateClanAnnouncement_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CCommunity_RateClanAnnouncement_Response) Reset() {
	*x = CCommunity_RateClanAnnouncement_Response{}
	mi := &file_steammessages_community_steamclient_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CCommunity_RateClanAnnouncement_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_RateClanAnnouncement_Response) ProtoMessage() {}

func (x *CCommunity_RateClanAnnouncement_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_community_steamclient_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_RateClanAnnouncement_Response.ProtoReflect.Descriptor instead.
func (*CCommunity_RateClanAnnouncement_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{16}
}

type CCommunity_GetClanAnnouncementVoteForUser_Request struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Announcementid *uint64                `protobuf:"varint,1,opt,name=announcementid" json:"announcementid,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CCommunity_GetClanAnnouncementVoteForUser_Request) Reset() {
	*x = CCommunity_GetClanAnnouncementVoteForUser_Request{}
	mi := &file_steammessages_community_steamclient_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CCommunity_GetClanAnnouncementVoteForUser_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_GetClanAnnouncementVoteForUser_Request) ProtoMessage() {}

func (x *CCommunity_GetClanAnnouncementVoteForUser_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_community_steamclient_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_GetClanAnnouncementVoteForUser_Request.ProtoReflect.Descriptor instead.
func (*CCommunity_GetClanAnnouncementVoteForUser_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{17}
}

func (x *CCommunity_GetClanAnnouncementVoteForUser_Request) GetAnnouncementid() uint64 {
	if x != nil && x.Announcementid != nil {
		return *x.Announcementid
	}
	return 0
}

type CCommunity_GetClanAnnouncementVoteForUser_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	VotedUp       *bool                  `protobuf:"varint,1,opt,name=voted_up,json=votedUp" json:"voted_up,omitempty"`
	VotedDown     *bool                  `protobuf:"varint,2,opt,name=voted_down,json=votedDown" json:"voted_down,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CCommunity_GetClanAnnouncementVoteForUser_Response) Reset() {
	*x = CCommunity_GetClanAnnouncementVoteForUser_Response{}
	mi := &file_steammessages_community_steamclient_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CCommunity_GetClanAnnouncementVoteForUser_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_GetClanAnnouncementVoteForUser_Response) ProtoMessage() {}

func (x *CCommunity_GetClanAnnouncementVoteForUser_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_community_steamclient_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_GetClanAnnouncementVoteForUser_Response.ProtoReflect.Descriptor instead.
func (*CCommunity_GetClanAnnouncementVoteForUser_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{18}
}

func (x *CCommunity_GetClanAnnouncementVoteForUser_Response) GetVotedUp() bool {
	if x != nil && x.VotedUp != nil {
		return *x.VotedUp
	}
	return false
}

func (x *CCommunity_GetClanAnnouncementVoteForUser_Response) GetVotedDown() bool {
	if x != nil && x.VotedDown != nil {
		return *x.VotedDown
	}
	return false
}

type CCommunity_GetClanLocGroupImages_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Steamid       *uint64                `protobuf:"varint,1,opt,name=steamid" json:"steamid,omitempty"`
	Group         *EClanImageGroup       `protobuf:"varint,2,opt,name=group,enum=EClanImageGroup,def=0" json:"group,omitempty"`
	Language      *uint32                `protobuf:"varint,3,opt,name=language" json:"language,omitempty"`
	LocGroupIds   []uint64               `protobuf:"varint,4,rep,name=loc_group_ids,json=locGroupIds" json:"loc_group_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CCommunity_GetClanLocGroupImages_Request fields.
const (
	Default_CCommunity_GetClanLocGroupImages_Request_Group = EClanImageGroup_k_EClanImageGroup_None
)

func (x *CCommunity_GetClanLocGroupImages_Request) Reset() {
	*x = CCommunity_GetClanLocGroupImages_Request{}
	mi := &file_steammessages_community_steamclient_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CCommunity_GetClanLocGroupImages_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_GetClanLocGroupImages_Request) ProtoMessage() {}

func (x *CCommunity_GetClanLocGroupImages_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_community_steamclient_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_GetClanLocGroupImages_Request.ProtoReflect.Descriptor instead.
func (*CCommunity_GetClanLocGroupImages_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{19}
}

func (x *CCommunity_GetClanLocGroupImages_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CCommunity_GetClanLocGroupImages_Request) GetGroup() EClanImageGroup {
	if x != nil && x.Group != nil {
		return *x.Group
	}
	return Default_CCommunity_GetClanLocGroupImages_Request_Group
}

func (x *CCommunity_GetClanLocGroupImages_Request) GetLanguage() uint32 {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return 0
}

func (x *CCommunity_GetClanLocGroupImages_Request) GetLocGroupIds() []uint64 {
	if x != nil {
		return x.LocGroupIds
	}
	return nil
}

type CCommunity_ClanLocGroupImage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LocGroupId    *uint64                `protobuf:"varint,1,opt,name=loc_group_id,json=locGroupId" json:"loc_group_id,omitempty"`
	ImageHash     *string                `protobuf:"bytes,2,opt,name=image_hash,json=imageHash" json:"image_hash,omitempty"`
	ThumbnailHash *string                `protobuf:"bytes,3,opt,name=thumbnail_hash,json=thumbnailHash" json:"thumbnail_hash,omitempty"`
	FileType      *EClanImageFileType    `protobuf:"varint,4,opt,name=file_type,json=fileType,enum=EClanImageFileType,def=0" json:"file_type,omitempty"`
	Group         *EClanImageGroup       `protobuf:"varint,5,opt,name=group,enum=EClanImageGroup,def=0" json:"group,omitempty"`
	Width         *uint32                `protobuf:"varint,6,opt,name=width" json:"width,omitempty"`
	Height        *uint32                `protobuf:"varint,7,opt,name=height" json:"height,omitempty"`
	Extensions    *string                `protobuf:"bytes,8,opt,name=extensions" json:"extensions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CCommunity_ClanLocGroupImage fields.
const (
	Default_CCommunity_ClanLocGroupImage_FileType = EClanImageFileType_k_EClanImageFileType_Unknown
	Default_CCommunity_ClanLocGroupImage_Group    = EClanImageGroup_k_EClanImageGroup_None
)

func (x *CCommunity_ClanLocGroupImage) Reset() {
	*x = CCommunity_ClanLocGroupImage{}
	mi := &file_steammessages_community_steamclient_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CCommunity_ClanLocGroupImage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_ClanLocGroupImage) ProtoMessage() {}

func (x *CCommunity_ClanLocGroupImage) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_community_steamclient_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_ClanLocGroupImage.ProtoReflect.Descriptor instead.
func (*CCommunity_ClanLocGroupImage) Descriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{20}
}

func (x *CCommunity_ClanLocGroupImage) GetLocGroupId() uint64 {
	if x != nil && x.LocGroupId != nil {
		return *x.LocGroupId
	}
	return 0
}

func (x *CCommunity_ClanLocGroupImage) GetImageHash() string {
	if x != nil && x.ImageHash != nil {
		return *x.ImageHash
	}
	return ""
}

func (x *CCommunity_ClanLocGroupImage) GetThumbnailHash() string {
	if x != nil && x.ThumbnailHash != nil {
		return *x.ThumbnailHash
	}
	return ""
}

func (x *CCommunity_ClanLocGroupImage) GetFileType() EClanImageFileType {
	if x != nil && x.FileType != nil {
		return *x.FileType
	}
	return Default_CCommunity_ClanLocGroupImage_FileType
}

func (x *CCommunity_ClanLocGroupImage) GetGroup() EClanImageGroup {
	if x != nil && x.Group != nil {
		return *x.Group
	}
	return Default_CCommunity_ClanLocGroupImage_Group
}

func (x *CCommunity_ClanLocGroupImage) GetWidth() uint32 {
	if x != nil && x.Width != nil {
		return *x.Width
	}
	return 0
}

func (x *CCommunity_ClanLocGroupImage) GetHeight() uint32 {
	if x != nil && x.Height != nil {
		return *x.Height
	}
	return 0
}

func (x *CCommunity_ClanLocGroupImage) GetExtensions() string {
	if x != nil && x.Extensions != nil {
		return *x.Extensions
	}
	return ""
}

type CCommunity_GetClanLocGroupImages_Response struct {
	state         protoimpl.MessageState          `protogen:"open.v1"`
	Images        []*CCommunity_ClanLocGroupImage `protobuf:"bytes,1,rep,name=images" json:"images,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CCommunity_GetClanLocGroupImages_Response) Reset() {
	*x = CCommunity_GetClanLocGroupImages_Response{}
	mi := &file_steammessages_community_steamclient_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CCommunity_GetClanLocGroupImages_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_GetClanLocGroupImages_Response) ProtoMessage() {}

func (x *CCommunity_GetClanLocGroupImages_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_community_steamclient_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_GetClanLocGroupImages_Response.ProtoReflect.Descriptor instead.
func (*CCommunity_GetClanLocGroupImages_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{21}
}

func (x *CCommunity_GetClanLocGroupImages_Response) GetImages() []*CCommunity_ClanLocGroupImage {
	if x != nil {
		return x.Images
	}
	return nil
}

type CCommunity_GetAvatarHistory_Request struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	Steamid                *uint64                `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	FilterUserUploadedOnly *bool                  `protobuf:"varint,2,opt,name=filter_user_uploaded_only,json=filterUserUploadedOnly" json:"filter_user_uploaded_only,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *CCommunity_GetAvatarHistory_Request) Reset() {
	*x = CCommunity_GetAvatarHistory_Request{}
	mi := &file_steammessages_community_steamclient_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CCommunity_GetAvatarHistory_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_GetAvatarHistory_Request) ProtoMessage() {}

func (x *CCommunity_GetAvatarHistory_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_community_steamclient_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_GetAvatarHistory_Request.ProtoReflect.Descriptor instead.
func (*CCommunity_GetAvatarHistory_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{22}
}

func (x *CCommunity_GetAvatarHistory_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CCommunity_GetAvatarHistory_Request) GetFilterUserUploadedOnly() bool {
	if x != nil && x.FilterUserUploadedOnly != nil {
		return *x.FilterUserUploadedOnly
	}
	return false
}

type CCommunity_GetAvatarHistory_Response struct {
	state         protoimpl.MessageState                             `protogen:"open.v1"`
	Avatars       []*CCommunity_GetAvatarHistory_Response_AvatarData `protobuf:"bytes,1,rep,name=avatars" json:"avatars,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CCommunity_GetAvatarHistory_Response) Reset() {
	*x = CCommunity_GetAvatarHistory_Response{}
	mi := &file_steammessages_community_steamclient_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CCommunity_GetAvatarHistory_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_GetAvatarHistory_Response) ProtoMessage() {}

func (x *CCommunity_GetAvatarHistory_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_community_steamclient_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_GetAvatarHistory_Response.ProtoReflect.Descriptor instead.
func (*CCommunity_GetAvatarHistory_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{23}
}

func (x *CCommunity_GetAvatarHistory_Response) GetAvatars() []*CCommunity_GetAvatarHistory_Response_AvatarData {
	if x != nil {
		return x.Avatars
	}
	return nil
}

type CCommunity_GetClanEventCrowdInMetadata_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Steamid       *uint64                `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	Itemid        *uint64                `protobuf:"varint,2,opt,name=itemid" json:"itemid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CCommunity_GetClanEventCrowdInMetadata_Request) Reset() {
	*x = CCommunity_GetClanEventCrowdInMetadata_Request{}
	mi := &file_steammessages_community_steamclient_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CCommunity_GetClanEventCrowdInMetadata_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_GetClanEventCrowdInMetadata_Request) ProtoMessage() {}

func (x *CCommunity_GetClanEventCrowdInMetadata_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_community_steamclient_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_GetClanEventCrowdInMetadata_Request.ProtoReflect.Descriptor instead.
func (*CCommunity_GetClanEventCrowdInMetadata_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{24}
}

func (x *CCommunity_GetClanEventCrowdInMetadata_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CCommunity_GetClanEventCrowdInMetadata_Request) GetItemid() uint64 {
	if x != nil && x.Itemid != nil {
		return *x.Itemid
	}
	return 0
}

type CCommunity_GetClanEventCrowdInMetadata_Response struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	CrowdinProjectId *uint64                `protobuf:"varint,1,opt,name=crowdin_project_id,json=crowdinProjectId" json:"crowdin_project_id,omitempty"`
	CrowdinFileId    *uint64                `protobuf:"varint,2,opt,name=crowdin_file_id,json=crowdinFileId" json:"crowdin_file_id,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CCommunity_GetClanEventCrowdInMetadata_Response) Reset() {
	*x = CCommunity_GetClanEventCrowdInMetadata_Response{}
	mi := &file_steammessages_community_steamclient_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CCommunity_GetClanEventCrowdInMetadata_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_GetClanEventCrowdInMetadata_Response) ProtoMessage() {}

func (x *CCommunity_GetClanEventCrowdInMetadata_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_community_steamclient_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_GetClanEventCrowdInMetadata_Response.ProtoReflect.Descriptor instead.
func (*CCommunity_GetClanEventCrowdInMetadata_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{25}
}

func (x *CCommunity_GetClanEventCrowdInMetadata_Response) GetCrowdinProjectId() uint64 {
	if x != nil && x.CrowdinProjectId != nil {
		return *x.CrowdinProjectId
	}
	return 0
}

func (x *CCommunity_GetClanEventCrowdInMetadata_Response) GetCrowdinFileId() uint64 {
	if x != nil && x.CrowdinFileId != nil {
		return *x.CrowdinFileId
	}
	return 0
}

type CCommunity_GetClanCrowdInMetadata_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Steamid       *uint64                `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CCommunity_GetClanCrowdInMetadata_Request) Reset() {
	*x = CCommunity_GetClanCrowdInMetadata_Request{}
	mi := &file_steammessages_community_steamclient_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CCommunity_GetClanCrowdInMetadata_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_GetClanCrowdInMetadata_Request) ProtoMessage() {}

func (x *CCommunity_GetClanCrowdInMetadata_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_community_steamclient_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_GetClanCrowdInMetadata_Request.ProtoReflect.Descriptor instead.
func (*CCommunity_GetClanCrowdInMetadata_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{26}
}

func (x *CCommunity_GetClanCrowdInMetadata_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

type CCommunity_GetClanCrowdInMetadata_Response struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	CrowdinProjectId   *uint64                `protobuf:"varint,1,opt,name=crowdin_project_id,json=crowdinProjectId" json:"crowdin_project_id,omitempty"`
	CrowdinDirectoryId *uint64                `protobuf:"varint,2,opt,name=crowdin_directory_id,json=crowdinDirectoryId" json:"crowdin_directory_id,omitempty"`
	PushByDefault      *bool                  `protobuf:"varint,3,opt,name=push_by_default,json=pushByDefault" json:"push_by_default,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *CCommunity_GetClanCrowdInMetadata_Response) Reset() {
	*x = CCommunity_GetClanCrowdInMetadata_Response{}
	mi := &file_steammessages_community_steamclient_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CCommunity_GetClanCrowdInMetadata_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_GetClanCrowdInMetadata_Response) ProtoMessage() {}

func (x *CCommunity_GetClanCrowdInMetadata_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_community_steamclient_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_GetClanCrowdInMetadata_Response.ProtoReflect.Descriptor instead.
func (*CCommunity_GetClanCrowdInMetadata_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{27}
}

func (x *CCommunity_GetClanCrowdInMetadata_Response) GetCrowdinProjectId() uint64 {
	if x != nil && x.CrowdinProjectId != nil {
		return *x.CrowdinProjectId
	}
	return 0
}

func (x *CCommunity_GetClanCrowdInMetadata_Response) GetCrowdinDirectoryId() uint64 {
	if x != nil && x.CrowdinDirectoryId != nil {
		return *x.CrowdinDirectoryId
	}
	return 0
}

func (x *CCommunity_GetClanCrowdInMetadata_Response) GetPushByDefault() bool {
	if x != nil && x.PushByDefault != nil {
		return *x.PushByDefault
	}
	return false
}

type CCommunity_FetchTranslationFromCrowdIn_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Steamid       *uint64                `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	Itemid        *uint64                `protobuf:"varint,2,opt,name=itemid" json:"itemid,omitempty"`
	Language      *int32                 `protobuf:"varint,3,opt,name=language" json:"language,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CCommunity_FetchTranslationFromCrowdIn_Request) Reset() {
	*x = CCommunity_FetchTranslationFromCrowdIn_Request{}
	mi := &file_steammessages_community_steamclient_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CCommunity_FetchTranslationFromCrowdIn_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_FetchTranslationFromCrowdIn_Request) ProtoMessage() {}

func (x *CCommunity_FetchTranslationFromCrowdIn_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_community_steamclient_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_FetchTranslationFromCrowdIn_Request.ProtoReflect.Descriptor instead.
func (*CCommunity_FetchTranslationFromCrowdIn_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{28}
}

func (x *CCommunity_FetchTranslationFromCrowdIn_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CCommunity_FetchTranslationFromCrowdIn_Request) GetItemid() uint64 {
	if x != nil && x.Itemid != nil {
		return *x.Itemid
	}
	return 0
}

func (x *CCommunity_FetchTranslationFromCrowdIn_Request) GetLanguage() int32 {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return 0
}

type CCommunity_FetchTranslationFromCrowdIn_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CCommunity_FetchTranslationFromCrowdIn_Response) Reset() {
	*x = CCommunity_FetchTranslationFromCrowdIn_Response{}
	mi := &file_steammessages_community_steamclient_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CCommunity_FetchTranslationFromCrowdIn_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_FetchTranslationFromCrowdIn_Response) ProtoMessage() {}

func (x *CCommunity_FetchTranslationFromCrowdIn_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_community_steamclient_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_FetchTranslationFromCrowdIn_Response.ProtoReflect.Descriptor instead.
func (*CCommunity_FetchTranslationFromCrowdIn_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{29}
}

type CCommunity_HideAndReportComment_Request struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Gidfeature        *uint64                `protobuf:"varint,1,opt,name=gidfeature" json:"gidfeature,omitempty"`
	Gidfeature2       *uint64                `protobuf:"varint,2,opt,name=gidfeature2" json:"gidfeature2,omitempty"`
	Gidcomment        *uint64                `protobuf:"varint,3,opt,name=gidcomment" json:"gidcomment,omitempty"`
	Steamid           *uint64                `protobuf:"fixed64,4,opt,name=steamid" json:"steamid,omitempty"`
	Commentthreadtype *string                `protobuf:"bytes,5,opt,name=commentthreadtype" json:"commentthreadtype,omitempty"`
	Hide              *bool                  `protobuf:"varint,6,opt,name=hide" json:"hide,omitempty"`
	ReportReason      *EContentReportReason  `protobuf:"varint,7,opt,name=report_reason,json=reportReason,enum=EContentReportReason,def=0" json:"report_reason,omitempty"`
	ReportText        *string                `protobuf:"bytes,8,opt,name=report_text,json=reportText" json:"report_text,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

// Default values for CCommunity_HideAndReportComment_Request fields.
const (
	Default_CCommunity_HideAndReportComment_Request_ReportReason = EContentReportReason_k_EContentReportReason_Invalid
)

func (x *CCommunity_HideAndReportComment_Request) Reset() {
	*x = CCommunity_HideAndReportComment_Request{}
	mi := &file_steammessages_community_steamclient_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CCommunity_HideAndReportComment_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_HideAndReportComment_Request) ProtoMessage() {}

func (x *CCommunity_HideAndReportComment_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_community_steamclient_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_HideAndReportComment_Request.ProtoReflect.Descriptor instead.
func (*CCommunity_HideAndReportComment_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{30}
}

func (x *CCommunity_HideAndReportComment_Request) GetGidfeature() uint64 {
	if x != nil && x.Gidfeature != nil {
		return *x.Gidfeature
	}
	return 0
}

func (x *CCommunity_HideAndReportComment_Request) GetGidfeature2() uint64 {
	if x != nil && x.Gidfeature2 != nil {
		return *x.Gidfeature2
	}
	return 0
}

func (x *CCommunity_HideAndReportComment_Request) GetGidcomment() uint64 {
	if x != nil && x.Gidcomment != nil {
		return *x.Gidcomment
	}
	return 0
}

func (x *CCommunity_HideAndReportComment_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CCommunity_HideAndReportComment_Request) GetCommentthreadtype() string {
	if x != nil && x.Commentthreadtype != nil {
		return *x.Commentthreadtype
	}
	return ""
}

func (x *CCommunity_HideAndReportComment_Request) GetHide() bool {
	if x != nil && x.Hide != nil {
		return *x.Hide
	}
	return false
}

func (x *CCommunity_HideAndReportComment_Request) GetReportReason() EContentReportReason {
	if x != nil && x.ReportReason != nil {
		return *x.ReportReason
	}
	return Default_CCommunity_HideAndReportComment_Request_ReportReason
}

func (x *CCommunity_HideAndReportComment_Request) GetReportText() string {
	if x != nil && x.ReportText != nil {
		return *x.ReportText
	}
	return ""
}

type CCommunity_HideAndReportComment_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CCommunity_HideAndReportComment_Response) Reset() {
	*x = CCommunity_HideAndReportComment_Response{}
	mi := &file_steammessages_community_steamclient_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CCommunity_HideAndReportComment_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_HideAndReportComment_Response) ProtoMessage() {}

func (x *CCommunity_HideAndReportComment_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_community_steamclient_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_HideAndReportComment_Response.ProtoReflect.Descriptor instead.
func (*CCommunity_HideAndReportComment_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{31}
}

type CAppPriority struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Priority      *uint32                `protobuf:"varint,1,opt,name=priority" json:"priority,omitempty"`
	Appid         []uint32               `protobuf:"varint,2,rep,name=appid" json:"appid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CAppPriority) Reset() {
	*x = CAppPriority{}
	mi := &file_steammessages_community_steamclient_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CAppPriority) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAppPriority) ProtoMessage() {}

func (x *CAppPriority) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_community_steamclient_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAppPriority.ProtoReflect.Descriptor instead.
func (*CAppPriority) Descriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{32}
}

func (x *CAppPriority) GetPriority() uint32 {
	if x != nil && x.Priority != nil {
		return *x.Priority
	}
	return 0
}

func (x *CAppPriority) GetAppid() []uint32 {
	if x != nil {
		return x.Appid
	}
	return nil
}

type CCommunity_GetUserPartnerEventNews_Request struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Count              *uint32                `protobuf:"varint,1,opt,name=count" json:"count,omitempty"`
	Offset             *uint32                `protobuf:"varint,2,opt,name=offset" json:"offset,omitempty"`
	Rtime32StartTime   *uint32                `protobuf:"varint,3,opt,name=rtime32_start_time,json=rtime32StartTime" json:"rtime32_start_time,omitempty"`
	Rtime32EndTime     *uint32                `protobuf:"varint,4,opt,name=rtime32_end_time,json=rtime32EndTime" json:"rtime32_end_time,omitempty"`
	LanguagePreference []uint32               `protobuf:"varint,5,rep,name=language_preference,json=languagePreference" json:"language_preference,omitempty"`
	FilterEventType    []EProtoClanEventType  `protobuf:"varint,6,rep,name=filter_event_type,json=filterEventType,enum=EProtoClanEventType" json:"filter_event_type,omitempty"`
	FilterToAppid      *bool                  `protobuf:"varint,7,opt,name=filter_to_appid,json=filterToAppid" json:"filter_to_appid,omitempty"`
	AppList            []*CAppPriority        `protobuf:"bytes,8,rep,name=app_list,json=appList" json:"app_list,omitempty"`
	CountAfter         *uint32                `protobuf:"varint,9,opt,name=count_after,json=countAfter,def=0" json:"count_after,omitempty"`
	CountBefore        *uint32                `protobuf:"varint,10,opt,name=count_before,json=countBefore,def=0" json:"count_before,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

// Default values for CCommunity_GetUserPartnerEventNews_Request fields.
const (
	Default_CCommunity_GetUserPartnerEventNews_Request_CountAfter  = uint32(0)
	Default_CCommunity_GetUserPartnerEventNews_Request_CountBefore = uint32(0)
)

func (x *CCommunity_GetUserPartnerEventNews_Request) Reset() {
	*x = CCommunity_GetUserPartnerEventNews_Request{}
	mi := &file_steammessages_community_steamclient_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CCommunity_GetUserPartnerEventNews_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_GetUserPartnerEventNews_Request) ProtoMessage() {}

func (x *CCommunity_GetUserPartnerEventNews_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_community_steamclient_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_GetUserPartnerEventNews_Request.ProtoReflect.Descriptor instead.
func (*CCommunity_GetUserPartnerEventNews_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{33}
}

func (x *CCommunity_GetUserPartnerEventNews_Request) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *CCommunity_GetUserPartnerEventNews_Request) GetOffset() uint32 {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return 0
}

func (x *CCommunity_GetUserPartnerEventNews_Request) GetRtime32StartTime() uint32 {
	if x != nil && x.Rtime32StartTime != nil {
		return *x.Rtime32StartTime
	}
	return 0
}

func (x *CCommunity_GetUserPartnerEventNews_Request) GetRtime32EndTime() uint32 {
	if x != nil && x.Rtime32EndTime != nil {
		return *x.Rtime32EndTime
	}
	return 0
}

func (x *CCommunity_GetUserPartnerEventNews_Request) GetLanguagePreference() []uint32 {
	if x != nil {
		return x.LanguagePreference
	}
	return nil
}

func (x *CCommunity_GetUserPartnerEventNews_Request) GetFilterEventType() []EProtoClanEventType {
	if x != nil {
		return x.FilterEventType
	}
	return nil
}

func (x *CCommunity_GetUserPartnerEventNews_Request) GetFilterToAppid() bool {
	if x != nil && x.FilterToAppid != nil {
		return *x.FilterToAppid
	}
	return false
}

func (x *CCommunity_GetUserPartnerEventNews_Request) GetAppList() []*CAppPriority {
	if x != nil {
		return x.AppList
	}
	return nil
}

func (x *CCommunity_GetUserPartnerEventNews_Request) GetCountAfter() uint32 {
	if x != nil && x.CountAfter != nil {
		return *x.CountAfter
	}
	return Default_CCommunity_GetUserPartnerEventNews_Request_CountAfter
}

func (x *CCommunity_GetUserPartnerEventNews_Request) GetCountBefore() uint32 {
	if x != nil && x.CountBefore != nil {
		return *x.CountBefore
	}
	return Default_CCommunity_GetUserPartnerEventNews_Request_CountBefore
}

type CCommunity_GetUserPartnerEventNews_Response struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Results       []*CClanMatchEventByRange `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CCommunity_GetUserPartnerEventNews_Response) Reset() {
	*x = CCommunity_GetUserPartnerEventNews_Response{}
	mi := &file_steammessages_community_steamclient_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CCommunity_GetUserPartnerEventNews_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_GetUserPartnerEventNews_Response) ProtoMessage() {}

func (x *CCommunity_GetUserPartnerEventNews_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_community_steamclient_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_GetUserPartnerEventNews_Response.ProtoReflect.Descriptor instead.
func (*CCommunity_GetUserPartnerEventNews_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{34}
}

func (x *CCommunity_GetUserPartnerEventNews_Response) GetResults() []*CClanMatchEventByRange {
	if x != nil {
		return x.Results
	}
	return nil
}

type CCommunity_GetBestEventsForUser_Request struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	IncludeSteamBlog         *bool                  `protobuf:"varint,1,opt,name=include_steam_blog,json=includeSteamBlog" json:"include_steam_blog,omitempty"`
	FilterToPlayedWithinDays *uint32                `protobuf:"varint,2,opt,name=filter_to_played_within_days,json=filterToPlayedWithinDays" json:"filter_to_played_within_days,omitempty"`
	IncludeOnlyGameUpdates   *bool                  `protobuf:"varint,3,opt,name=include_only_game_updates,json=includeOnlyGameUpdates" json:"include_only_game_updates,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *CCommunity_GetBestEventsForUser_Request) Reset() {
	*x = CCommunity_GetBestEventsForUser_Request{}
	mi := &file_steammessages_community_steamclient_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CCommunity_GetBestEventsForUser_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_GetBestEventsForUser_Request) ProtoMessage() {}

func (x *CCommunity_GetBestEventsForUser_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_community_steamclient_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_GetBestEventsForUser_Request.ProtoReflect.Descriptor instead.
func (*CCommunity_GetBestEventsForUser_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{35}
}

func (x *CCommunity_GetBestEventsForUser_Request) GetIncludeSteamBlog() bool {
	if x != nil && x.IncludeSteamBlog != nil {
		return *x.IncludeSteamBlog
	}
	return false
}

func (x *CCommunity_GetBestEventsForUser_Request) GetFilterToPlayedWithinDays() uint32 {
	if x != nil && x.FilterToPlayedWithinDays != nil {
		return *x.FilterToPlayedWithinDays
	}
	return 0
}

func (x *CCommunity_GetBestEventsForUser_Request) GetIncludeOnlyGameUpdates() bool {
	if x != nil && x.IncludeOnlyGameUpdates != nil {
		return *x.IncludeOnlyGameUpdates
	}
	return false
}

type CCommunity_PartnerEventResult struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Clanid              *uint32                `protobuf:"varint,1,opt,name=clanid" json:"clanid,omitempty"`
	EventGid            *uint64                `protobuf:"fixed64,2,opt,name=event_gid,json=eventGid" json:"event_gid,omitempty"`
	AnnouncementGid     *uint64                `protobuf:"fixed64,3,opt,name=announcement_gid,json=announcementGid" json:"announcement_gid,omitempty"`
	Appid               *uint32                `protobuf:"varint,4,opt,name=appid" json:"appid,omitempty"`
	PossibleTakeover    *bool                  `protobuf:"varint,5,opt,name=possible_takeover,json=possibleTakeover" json:"possible_takeover,omitempty"`
	Rtime32LastModified *uint32                `protobuf:"varint,6,opt,name=rtime32_last_modified,json=rtime32LastModified,def=0" json:"rtime32_last_modified,omitempty"`
	UserAppPriority     *int32                 `protobuf:"varint,7,opt,name=user_app_priority,json=userAppPriority" json:"user_app_priority,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

// Default values for CCommunity_PartnerEventResult fields.
const (
	Default_CCommunity_PartnerEventResult_Rtime32LastModified = uint32(0)
)

func (x *CCommunity_PartnerEventResult) Reset() {
	*x = CCommunity_PartnerEventResult{}
	mi := &file_steammessages_community_steamclient_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CCommunity_PartnerEventResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_PartnerEventResult) ProtoMessage() {}

func (x *CCommunity_PartnerEventResult) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_community_steamclient_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_PartnerEventResult.ProtoReflect.Descriptor instead.
func (*CCommunity_PartnerEventResult) Descriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{36}
}

func (x *CCommunity_PartnerEventResult) GetClanid() uint32 {
	if x != nil && x.Clanid != nil {
		return *x.Clanid
	}
	return 0
}

func (x *CCommunity_PartnerEventResult) GetEventGid() uint64 {
	if x != nil && x.EventGid != nil {
		return *x.EventGid
	}
	return 0
}

func (x *CCommunity_PartnerEventResult) GetAnnouncementGid() uint64 {
	if x != nil && x.AnnouncementGid != nil {
		return *x.AnnouncementGid
	}
	return 0
}

func (x *CCommunity_PartnerEventResult) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CCommunity_PartnerEventResult) GetPossibleTakeover() bool {
	if x != nil && x.PossibleTakeover != nil {
		return *x.PossibleTakeover
	}
	return false
}

func (x *CCommunity_PartnerEventResult) GetRtime32LastModified() uint32 {
	if x != nil && x.Rtime32LastModified != nil {
		return *x.Rtime32LastModified
	}
	return Default_CCommunity_PartnerEventResult_Rtime32LastModified
}

func (x *CCommunity_PartnerEventResult) GetUserAppPriority() int32 {
	if x != nil && x.UserAppPriority != nil {
		return *x.UserAppPriority
	}
	return 0
}

type CCommunity_GetBestEventsForUser_Response struct {
	state         protoimpl.MessageState           `protogen:"open.v1"`
	Results       []*CCommunity_PartnerEventResult `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CCommunity_GetBestEventsForUser_Response) Reset() {
	*x = CCommunity_GetBestEventsForUser_Response{}
	mi := &file_steammessages_community_steamclient_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CCommunity_GetBestEventsForUser_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_GetBestEventsForUser_Response) ProtoMessage() {}

func (x *CCommunity_GetBestEventsForUser_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_community_steamclient_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_GetBestEventsForUser_Response.ProtoReflect.Descriptor instead.
func (*CCommunity_GetBestEventsForUser_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{37}
}

func (x *CCommunity_GetBestEventsForUser_Response) GetResults() []*CCommunity_PartnerEventResult {
	if x != nil {
		return x.Results
	}
	return nil
}

type CCommunity_MarkPartnerEventsForUser_Request struct {
	state         protoimpl.MessageState                                             `protogen:"open.v1"`
	Markings      []*CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking `protobuf:"bytes,1,rep,name=markings" json:"markings,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CCommunity_MarkPartnerEventsForUser_Request) Reset() {
	*x = CCommunity_MarkPartnerEventsForUser_Request{}
	mi := &file_steammessages_community_steamclient_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CCommunity_MarkPartnerEventsForUser_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_MarkPartnerEventsForUser_Request) ProtoMessage() {}

func (x *CCommunity_MarkPartnerEventsForUser_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_community_steamclient_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_MarkPartnerEventsForUser_Request.ProtoReflect.Descriptor instead.
func (*CCommunity_MarkPartnerEventsForUser_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{38}
}

func (x *CCommunity_MarkPartnerEventsForUser_Request) GetMarkings() []*CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking {
	if x != nil {
		return x.Markings
	}
	return nil
}

type CCommunity_MarkPartnerEventsForUser_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CCommunity_MarkPartnerEventsForUser_Response) Reset() {
	*x = CCommunity_MarkPartnerEventsForUser_Response{}
	mi := &file_steammessages_community_steamclient_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CCommunity_MarkPartnerEventsForUser_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_MarkPartnerEventsForUser_Response) ProtoMessage() {}

func (x *CCommunity_MarkPartnerEventsForUser_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_community_steamclient_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_MarkPartnerEventsForUser_Response.ProtoReflect.Descriptor instead.
func (*CCommunity_MarkPartnerEventsForUser_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{39}
}

type CCommunity_GetUserPartnerEventViewStatus_Request struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	EventGids             []uint64               `protobuf:"fixed64,1,rep,name=event_gids,json=eventGids" json:"event_gids,omitempty"`
	IncludeReadEventsOnly *bool                  `protobuf:"varint,2,opt,name=include_read_events_only,json=includeReadEventsOnly" json:"include_read_events_only,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *CCommunity_GetUserPartnerEventViewStatus_Request) Reset() {
	*x = CCommunity_GetUserPartnerEventViewStatus_Request{}
	mi := &file_steammessages_community_steamclient_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CCommunity_GetUserPartnerEventViewStatus_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_GetUserPartnerEventViewStatus_Request) ProtoMessage() {}

func (x *CCommunity_GetUserPartnerEventViewStatus_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_community_steamclient_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_GetUserPartnerEventViewStatus_Request.ProtoReflect.Descriptor instead.
func (*CCommunity_GetUserPartnerEventViewStatus_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{40}
}

func (x *CCommunity_GetUserPartnerEventViewStatus_Request) GetEventGids() []uint64 {
	if x != nil {
		return x.EventGids
	}
	return nil
}

func (x *CCommunity_GetUserPartnerEventViewStatus_Request) GetIncludeReadEventsOnly() bool {
	if x != nil && x.IncludeReadEventsOnly != nil {
		return *x.IncludeReadEventsOnly
	}
	return false
}

type CCommunity_GetUserPartnerEventViewStatus_Response struct {
	state         protoimpl.MessageState                                            `protogen:"open.v1"`
	Events        []*CCommunity_GetUserPartnerEventViewStatus_Response_PartnerEvent `protobuf:"bytes,1,rep,name=events" json:"events,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CCommunity_GetUserPartnerEventViewStatus_Response) Reset() {
	*x = CCommunity_GetUserPartnerEventViewStatus_Response{}
	mi := &file_steammessages_community_steamclient_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CCommunity_GetUserPartnerEventViewStatus_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_GetUserPartnerEventViewStatus_Response) ProtoMessage() {}

func (x *CCommunity_GetUserPartnerEventViewStatus_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_community_steamclient_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_GetUserPartnerEventViewStatus_Response.ProtoReflect.Descriptor instead.
func (*CCommunity_GetUserPartnerEventViewStatus_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{41}
}

func (x *CCommunity_GetUserPartnerEventViewStatus_Response) GetEvents() []*CCommunity_GetUserPartnerEventViewStatus_Response_PartnerEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

type CCommunity_PartnerEventsShowMoreForApp_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Appid         *uint32                `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CCommunity_PartnerEventsShowMoreForApp_Request) Reset() {
	*x = CCommunity_PartnerEventsShowMoreForApp_Request{}
	mi := &file_steammessages_community_steamclient_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CCommunity_PartnerEventsShowMoreForApp_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_PartnerEventsShowMoreForApp_Request) ProtoMessage() {}

func (x *CCommunity_PartnerEventsShowMoreForApp_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_community_steamclient_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_PartnerEventsShowMoreForApp_Request.ProtoReflect.Descriptor instead.
func (*CCommunity_PartnerEventsShowMoreForApp_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{42}
}

func (x *CCommunity_PartnerEventsShowMoreForApp_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

type CCommunity_PartnerEventsShowMoreForApp_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CCommunity_PartnerEventsShowMoreForApp_Response) Reset() {
	*x = CCommunity_PartnerEventsShowMoreForApp_Response{}
	mi := &file_steammessages_community_steamclient_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CCommunity_PartnerEventsShowMoreForApp_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_PartnerEventsShowMoreForApp_Response) ProtoMessage() {}

func (x *CCommunity_PartnerEventsShowMoreForApp_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_community_steamclient_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_PartnerEventsShowMoreForApp_Response.ProtoReflect.Descriptor instead.
func (*CCommunity_PartnerEventsShowMoreForApp_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{43}
}

type CCommunity_PartnerEventsShowLessForApp_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Appid         *uint32                `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CCommunity_PartnerEventsShowLessForApp_Request) Reset() {
	*x = CCommunity_PartnerEventsShowLessForApp_Request{}
	mi := &file_steammessages_community_steamclient_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CCommunity_PartnerEventsShowLessForApp_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_PartnerEventsShowLessForApp_Request) ProtoMessage() {}

func (x *CCommunity_PartnerEventsShowLessForApp_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_community_steamclient_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_PartnerEventsShowLessForApp_Request.ProtoReflect.Descriptor instead.
func (*CCommunity_PartnerEventsShowLessForApp_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{44}
}

func (x *CCommunity_PartnerEventsShowLessForApp_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

type CCommunity_PartnerEventsShowLessForApp_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CCommunity_PartnerEventsShowLessForApp_Response) Reset() {
	*x = CCommunity_PartnerEventsShowLessForApp_Response{}
	mi := &file_steammessages_community_steamclient_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CCommunity_PartnerEventsShowLessForApp_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_PartnerEventsShowLessForApp_Response) ProtoMessage() {}

func (x *CCommunity_PartnerEventsShowLessForApp_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_community_steamclient_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_PartnerEventsShowLessForApp_Response.ProtoReflect.Descriptor instead.
func (*CCommunity_PartnerEventsShowLessForApp_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{45}
}

type CCommunity_ClearUserPartnerEventsAppPriorities_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CCommunity_ClearUserPartnerEventsAppPriorities_Request) Reset() {
	*x = CCommunity_ClearUserPartnerEventsAppPriorities_Request{}
	mi := &file_steammessages_community_steamclient_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CCommunity_ClearUserPartnerEventsAppPriorities_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_ClearUserPartnerEventsAppPriorities_Request) ProtoMessage() {}

func (x *CCommunity_ClearUserPartnerEventsAppPriorities_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_community_steamclient_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_ClearUserPartnerEventsAppPriorities_Request.ProtoReflect.Descriptor instead.
func (*CCommunity_ClearUserPartnerEventsAppPriorities_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{46}
}

type CCommunity_ClearUserPartnerEventsAppPriorities_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CCommunity_ClearUserPartnerEventsAppPriorities_Response) Reset() {
	*x = CCommunity_ClearUserPartnerEventsAppPriorities_Response{}
	mi := &file_steammessages_community_steamclient_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CCommunity_ClearUserPartnerEventsAppPriorities_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_ClearUserPartnerEventsAppPriorities_Response) ProtoMessage() {}

func (x *CCommunity_ClearUserPartnerEventsAppPriorities_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_community_steamclient_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_ClearUserPartnerEventsAppPriorities_Response.ProtoReflect.Descriptor instead.
func (*CCommunity_ClearUserPartnerEventsAppPriorities_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{47}
}

type CCommunity_GetUserPartnerEventsAppPriorities_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CCommunity_GetUserPartnerEventsAppPriorities_Request) Reset() {
	*x = CCommunity_GetUserPartnerEventsAppPriorities_Request{}
	mi := &file_steammessages_community_steamclient_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CCommunity_GetUserPartnerEventsAppPriorities_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_GetUserPartnerEventsAppPriorities_Request) ProtoMessage() {}

func (x *CCommunity_GetUserPartnerEventsAppPriorities_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_community_steamclient_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_GetUserPartnerEventsAppPriorities_Request.ProtoReflect.Descriptor instead.
func (*CCommunity_GetUserPartnerEventsAppPriorities_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{48}
}

type CCommunity_PartnerEventsAppPriority struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Appid           *uint32                `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	UserAppPriority *int32                 `protobuf:"varint,2,opt,name=user_app_priority,json=userAppPriority" json:"user_app_priority,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CCommunity_PartnerEventsAppPriority) Reset() {
	*x = CCommunity_PartnerEventsAppPriority{}
	mi := &file_steammessages_community_steamclient_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CCommunity_PartnerEventsAppPriority) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_PartnerEventsAppPriority) ProtoMessage() {}

func (x *CCommunity_PartnerEventsAppPriority) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_community_steamclient_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_PartnerEventsAppPriority.ProtoReflect.Descriptor instead.
func (*CCommunity_PartnerEventsAppPriority) Descriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{49}
}

func (x *CCommunity_PartnerEventsAppPriority) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CCommunity_PartnerEventsAppPriority) GetUserAppPriority() int32 {
	if x != nil && x.UserAppPriority != nil {
		return *x.UserAppPriority
	}
	return 0
}

type CCommunity_GetUserPartnerEventsAppPriorities_Response struct {
	state         protoimpl.MessageState                 `protogen:"open.v1"`
	Priorities    []*CCommunity_PartnerEventsAppPriority `protobuf:"bytes,1,rep,name=priorities" json:"priorities,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CCommunity_GetUserPartnerEventsAppPriorities_Response) Reset() {
	*x = CCommunity_GetUserPartnerEventsAppPriorities_Response{}
	mi := &file_steammessages_community_steamclient_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CCommunity_GetUserPartnerEventsAppPriorities_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_GetUserPartnerEventsAppPriorities_Response) ProtoMessage() {}

func (x *CCommunity_GetUserPartnerEventsAppPriorities_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_community_steamclient_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_GetUserPartnerEventsAppPriorities_Response.ProtoReflect.Descriptor instead.
func (*CCommunity_GetUserPartnerEventsAppPriorities_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{50}
}

func (x *CCommunity_GetUserPartnerEventsAppPriorities_Response) GetPriorities() []*CCommunity_PartnerEventsAppPriority {
	if x != nil {
		return x.Priorities
	}
	return nil
}

type CCommunity_ClearSinglePartnerEventsAppPriority_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Appid         *uint32                `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CCommunity_ClearSinglePartnerEventsAppPriority_Request) Reset() {
	*x = CCommunity_ClearSinglePartnerEventsAppPriority_Request{}
	mi := &file_steammessages_community_steamclient_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CCommunity_ClearSinglePartnerEventsAppPriority_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_ClearSinglePartnerEventsAppPriority_Request) ProtoMessage() {}

func (x *CCommunity_ClearSinglePartnerEventsAppPriority_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_community_steamclient_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_ClearSinglePartnerEventsAppPriority_Request.ProtoReflect.Descriptor instead.
func (*CCommunity_ClearSinglePartnerEventsAppPriority_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{51}
}

func (x *CCommunity_ClearSinglePartnerEventsAppPriority_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

type CCommunity_ClearSinglePartnerEventsAppPriority_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CCommunity_ClearSinglePartnerEventsAppPriority_Response) Reset() {
	*x = CCommunity_ClearSinglePartnerEventsAppPriority_Response{}
	mi := &file_steammessages_community_steamclient_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CCommunity_ClearSinglePartnerEventsAppPriority_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_ClearSinglePartnerEventsAppPriority_Response) ProtoMessage() {}

func (x *CCommunity_ClearSinglePartnerEventsAppPriority_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_community_steamclient_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_ClearSinglePartnerEventsAppPriority_Response.ProtoReflect.Descriptor instead.
func (*CCommunity_ClearSinglePartnerEventsAppPriority_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{52}
}

type CCommunity_SetRecommendationBotReviewStatus_Request struct {
	state         protoimpl.MessageState                                             `protogen:"open.v1"`
	ReviewLabels  []*CCommunity_SetRecommendationBotReviewStatus_Request_ReviewLabel `protobuf:"bytes,1,rep,name=review_labels,json=reviewLabels" json:"review_labels,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CCommunity_SetRecommendationBotReviewStatus_Request) Reset() {
	*x = CCommunity_SetRecommendationBotReviewStatus_Request{}
	mi := &file_steammessages_community_steamclient_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CCommunity_SetRecommendationBotReviewStatus_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_SetRecommendationBotReviewStatus_Request) ProtoMessage() {}

func (x *CCommunity_SetRecommendationBotReviewStatus_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_community_steamclient_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_SetRecommendationBotReviewStatus_Request.ProtoReflect.Descriptor instead.
func (*CCommunity_SetRecommendationBotReviewStatus_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{53}
}

func (x *CCommunity_SetRecommendationBotReviewStatus_Request) GetReviewLabels() []*CCommunity_SetRecommendationBotReviewStatus_Request_ReviewLabel {
	if x != nil {
		return x.ReviewLabels
	}
	return nil
}

type CCommunity_SetRecommendationBotReviewStatus_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CCommunity_SetRecommendationBotReviewStatus_Response) Reset() {
	*x = CCommunity_SetRecommendationBotReviewStatus_Response{}
	mi := &file_steammessages_community_steamclient_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CCommunity_SetRecommendationBotReviewStatus_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_SetRecommendationBotReviewStatus_Response) ProtoMessage() {}

func (x *CCommunity_SetRecommendationBotReviewStatus_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_community_steamclient_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_SetRecommendationBotReviewStatus_Response.ProtoReflect.Descriptor instead.
func (*CCommunity_SetRecommendationBotReviewStatus_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{54}
}

type CCommunity_GetBotReviewScoreForRecommendation_Request struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	RecommendationIds []uint64               `protobuf:"varint,1,rep,name=recommendation_ids,json=recommendationIds" json:"recommendation_ids,omitempty"`
	AppId             *uint32                `protobuf:"varint,2,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *CCommunity_GetBotReviewScoreForRecommendation_Request) Reset() {
	*x = CCommunity_GetBotReviewScoreForRecommendation_Request{}
	mi := &file_steammessages_community_steamclient_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CCommunity_GetBotReviewScoreForRecommendation_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_GetBotReviewScoreForRecommendation_Request) ProtoMessage() {}

func (x *CCommunity_GetBotReviewScoreForRecommendation_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_community_steamclient_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_GetBotReviewScoreForRecommendation_Request.ProtoReflect.Descriptor instead.
func (*CCommunity_GetBotReviewScoreForRecommendation_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{55}
}

func (x *CCommunity_GetBotReviewScoreForRecommendation_Request) GetRecommendationIds() []uint64 {
	if x != nil {
		return x.RecommendationIds
	}
	return nil
}

func (x *CCommunity_GetBotReviewScoreForRecommendation_Request) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

type CCommunity_GetBotReviewScoreForRecommendation_Response struct {
	state          protoimpl.MessageState                                                        `protogen:"open.v1"`
	BotReviewScore []*CCommunity_GetBotReviewScoreForRecommendation_Response_BotReviewScoreEntry `protobuf:"bytes,1,rep,name=bot_review_score,json=botReviewScore" json:"bot_review_score,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CCommunity_GetBotReviewScoreForRecommendation_Response) Reset() {
	*x = CCommunity_GetBotReviewScoreForRecommendation_Response{}
	mi := &file_steammessages_community_steamclient_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CCommunity_GetBotReviewScoreForRecommendation_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_GetBotReviewScoreForRecommendation_Response) ProtoMessage() {}

func (x *CCommunity_GetBotReviewScoreForRecommendation_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_community_steamclient_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_GetBotReviewScoreForRecommendation_Response.ProtoReflect.Descriptor instead.
func (*CCommunity_GetBotReviewScoreForRecommendation_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{56}
}

func (x *CCommunity_GetBotReviewScoreForRecommendation_Response) GetBotReviewScore() []*CCommunity_GetBotReviewScoreForRecommendation_Response_BotReviewScoreEntry {
	if x != nil {
		return x.BotReviewScore
	}
	return nil
}

type CCommunity_GetAppRichPresenceLocalization_Response_Token struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          *string                `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Value         *string                `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CCommunity_GetAppRichPresenceLocalization_Response_Token) Reset() {
	*x = CCommunity_GetAppRichPresenceLocalization_Response_Token{}
	mi := &file_steammessages_community_steamclient_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CCommunity_GetAppRichPresenceLocalization_Response_Token) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_GetAppRichPresenceLocalization_Response_Token) ProtoMessage() {}

func (x *CCommunity_GetAppRichPresenceLocalization_Response_Token) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_community_steamclient_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_GetAppRichPresenceLocalization_Response_Token.ProtoReflect.Descriptor instead.
func (*CCommunity_GetAppRichPresenceLocalization_Response_Token) Descriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{3, 0}
}

func (x *CCommunity_GetAppRichPresenceLocalization_Response_Token) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CCommunity_GetAppRichPresenceLocalization_Response_Token) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type CCommunity_GetAppRichPresenceLocalization_Response_TokenList struct {
	state         protoimpl.MessageState                                      `protogen:"open.v1"`
	Language      *string                                                     `protobuf:"bytes,1,opt,name=language" json:"language,omitempty"`
	Tokens        []*CCommunity_GetAppRichPresenceLocalization_Response_Token `protobuf:"bytes,2,rep,name=tokens" json:"tokens,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CCommunity_GetAppRichPresenceLocalization_Response_TokenList) Reset() {
	*x = CCommunity_GetAppRichPresenceLocalization_Response_TokenList{}
	mi := &file_steammessages_community_steamclient_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CCommunity_GetAppRichPresenceLocalization_Response_TokenList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_GetAppRichPresenceLocalization_Response_TokenList) ProtoMessage() {}

func (x *CCommunity_GetAppRichPresenceLocalization_Response_TokenList) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_community_steamclient_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_GetAppRichPresenceLocalization_Response_TokenList.ProtoReflect.Descriptor instead.
func (*CCommunity_GetAppRichPresenceLocalization_Response_TokenList) Descriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{3, 1}
}

func (x *CCommunity_GetAppRichPresenceLocalization_Response_TokenList) GetLanguage() string {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return ""
}

func (x *CCommunity_GetAppRichPresenceLocalization_Response_TokenList) GetTokens() []*CCommunity_GetAppRichPresenceLocalization_Response_Token {
	if x != nil {
		return x.Tokens
	}
	return nil
}

type CCommunity_Comment_Reaction struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Reactionid    *uint32                `protobuf:"varint,1,opt,name=reactionid" json:"reactionid,omitempty"`
	Count         *uint32                `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CCommunity_Comment_Reaction) Reset() {
	*x = CCommunity_Comment_Reaction{}
	mi := &file_steammessages_community_steamclient_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CCommunity_Comment_Reaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_Comment_Reaction) ProtoMessage() {}

func (x *CCommunity_Comment_Reaction) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_community_steamclient_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_Comment_Reaction.ProtoReflect.Descriptor instead.
func (*CCommunity_Comment_Reaction) Descriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{5, 0}
}

func (x *CCommunity_Comment_Reaction) GetReactionid() uint32 {
	if x != nil && x.Reactionid != nil {
		return *x.Reactionid
	}
	return 0
}

func (x *CCommunity_Comment_Reaction) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

type CCommunity_GetAvatarHistory_Response_AvatarData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AvatarSha1    *string                `protobuf:"bytes,1,opt,name=avatar_sha1,json=avatarSha1" json:"avatar_sha1,omitempty"`
	UserUploaded  *bool                  `protobuf:"varint,2,opt,name=user_uploaded,json=userUploaded" json:"user_uploaded,omitempty"`
	Timestamp     *uint32                `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CCommunity_GetAvatarHistory_Response_AvatarData) Reset() {
	*x = CCommunity_GetAvatarHistory_Response_AvatarData{}
	mi := &file_steammessages_community_steamclient_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CCommunity_GetAvatarHistory_Response_AvatarData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_GetAvatarHistory_Response_AvatarData) ProtoMessage() {}

func (x *CCommunity_GetAvatarHistory_Response_AvatarData) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_community_steamclient_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_GetAvatarHistory_Response_AvatarData.ProtoReflect.Descriptor instead.
func (*CCommunity_GetAvatarHistory_Response_AvatarData) Descriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{23, 0}
}

func (x *CCommunity_GetAvatarHistory_Response_AvatarData) GetAvatarSha1() string {
	if x != nil && x.AvatarSha1 != nil {
		return *x.AvatarSha1
	}
	return ""
}

func (x *CCommunity_GetAvatarHistory_Response_AvatarData) GetUserUploaded() bool {
	if x != nil && x.UserUploaded != nil {
		return *x.UserUploaded
	}
	return false
}

func (x *CCommunity_GetAvatarHistory_Response_AvatarData) GetTimestamp() uint32 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

type CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking struct {
	state           protoimpl.MessageState        `protogen:"open.v1"`
	Clanid          *uint32                       `protobuf:"varint,1,opt,name=clanid" json:"clanid,omitempty"`
	EventGid        *uint64                       `protobuf:"fixed64,2,opt,name=event_gid,json=eventGid" json:"event_gid,omitempty"`
	DisplayLocation *EPartnerEventDisplayLocation `protobuf:"varint,3,opt,name=display_location,json=displayLocation,enum=EPartnerEventDisplayLocation,def=0" json:"display_location,omitempty"`
	MarkShown       *bool                         `protobuf:"varint,4,opt,name=mark_shown,json=markShown" json:"mark_shown,omitempty"`
	MarkRead        *bool                         `protobuf:"varint,5,opt,name=mark_read,json=markRead" json:"mark_read,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

// Default values for CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking fields.
const (
	Default_CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking_DisplayLocation = EPartnerEventDisplayLocation_k_EPartnerEventDisplayLocation_Invalid
)

func (x *CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking) Reset() {
	*x = CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking{}
	mi := &file_steammessages_community_steamclient_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking) ProtoMessage() {}

func (x *CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_community_steamclient_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking.ProtoReflect.Descriptor instead.
func (*CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking) Descriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{38, 0}
}

func (x *CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking) GetClanid() uint32 {
	if x != nil && x.Clanid != nil {
		return *x.Clanid
	}
	return 0
}

func (x *CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking) GetEventGid() uint64 {
	if x != nil && x.EventGid != nil {
		return *x.EventGid
	}
	return 0
}

func (x *CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking) GetDisplayLocation() EPartnerEventDisplayLocation {
	if x != nil && x.DisplayLocation != nil {
		return *x.DisplayLocation
	}
	return Default_CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking_DisplayLocation
}

func (x *CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking) GetMarkShown() bool {
	if x != nil && x.MarkShown != nil {
		return *x.MarkShown
	}
	return false
}

func (x *CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking) GetMarkRead() bool {
	if x != nil && x.MarkRead != nil {
		return *x.MarkRead
	}
	return false
}

type CCommunity_GetUserPartnerEventViewStatus_Response_PartnerEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EventGid      *uint64                `protobuf:"fixed64,1,opt,name=event_gid,json=eventGid" json:"event_gid,omitempty"`
	LastShownTime *uint32                `protobuf:"varint,2,opt,name=last_shown_time,json=lastShownTime" json:"last_shown_time,omitempty"`
	LastReadTime  *uint32                `protobuf:"varint,3,opt,name=last_read_time,json=lastReadTime" json:"last_read_time,omitempty"`
	ClanAccountId *uint32                `protobuf:"varint,4,opt,name=clan_account_id,json=clanAccountId" json:"clan_account_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CCommunity_GetUserPartnerEventViewStatus_Response_PartnerEvent) Reset() {
	*x = CCommunity_GetUserPartnerEventViewStatus_Response_PartnerEvent{}
	mi := &file_steammessages_community_steamclient_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CCommunity_GetUserPartnerEventViewStatus_Response_PartnerEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_GetUserPartnerEventViewStatus_Response_PartnerEvent) ProtoMessage() {}

func (x *CCommunity_GetUserPartnerEventViewStatus_Response_PartnerEvent) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_community_steamclient_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_GetUserPartnerEventViewStatus_Response_PartnerEvent.ProtoReflect.Descriptor instead.
func (*CCommunity_GetUserPartnerEventViewStatus_Response_PartnerEvent) Descriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{41, 0}
}

func (x *CCommunity_GetUserPartnerEventViewStatus_Response_PartnerEvent) GetEventGid() uint64 {
	if x != nil && x.EventGid != nil {
		return *x.EventGid
	}
	return 0
}

func (x *CCommunity_GetUserPartnerEventViewStatus_Response_PartnerEvent) GetLastShownTime() uint32 {
	if x != nil && x.LastShownTime != nil {
		return *x.LastShownTime
	}
	return 0
}

func (x *CCommunity_GetUserPartnerEventViewStatus_Response_PartnerEvent) GetLastReadTime() uint32 {
	if x != nil && x.LastReadTime != nil {
		return *x.LastReadTime
	}
	return 0
}

func (x *CCommunity_GetUserPartnerEventViewStatus_Response_PartnerEvent) GetClanAccountId() uint32 {
	if x != nil && x.ClanAccountId != nil {
		return *x.ClanAccountId
	}
	return 0
}

type CCommunity_SetRecommendationBotReviewStatus_Request_ReviewLabel struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Appid            *uint32                `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	Recommendationid *uint64                `protobuf:"varint,2,opt,name=recommendationid" json:"recommendationid,omitempty"`
	IsBotReview      *bool                  `protobuf:"varint,3,opt,name=is_bot_review,json=isBotReview" json:"is_bot_review,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CCommunity_SetRecommendationBotReviewStatus_Request_ReviewLabel) Reset() {
	*x = CCommunity_SetRecommendationBotReviewStatus_Request_ReviewLabel{}
	mi := &file_steammessages_community_steamclient_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CCommunity_SetRecommendationBotReviewStatus_Request_ReviewLabel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_SetRecommendationBotReviewStatus_Request_ReviewLabel) ProtoMessage() {}

func (x *CCommunity_SetRecommendationBotReviewStatus_Request_ReviewLabel) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_community_steamclient_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_SetRecommendationBotReviewStatus_Request_ReviewLabel.ProtoReflect.Descriptor instead.
func (*CCommunity_SetRecommendationBotReviewStatus_Request_ReviewLabel) Descriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{53, 0}
}

func (x *CCommunity_SetRecommendationBotReviewStatus_Request_ReviewLabel) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CCommunity_SetRecommendationBotReviewStatus_Request_ReviewLabel) GetRecommendationid() uint64 {
	if x != nil && x.Recommendationid != nil {
		return *x.Recommendationid
	}
	return 0
}

func (x *CCommunity_SetRecommendationBotReviewStatus_Request_ReviewLabel) GetIsBotReview() bool {
	if x != nil && x.IsBotReview != nil {
		return *x.IsBotReview
	}
	return false
}

type CCommunity_GetBotReviewScoreForRecommendation_Response_BotReviewScoreEntry struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           *uint64                `protobuf:"varint,1,opt,name=key" json:"key,omitempty"`
	Value         *uint32                `protobuf:"varint,2,opt,name=value" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CCommunity_GetBotReviewScoreForRecommendation_Response_BotReviewScoreEntry) Reset() {
	*x = CCommunity_GetBotReviewScoreForRecommendation_Response_BotReviewScoreEntry{}
	mi := &file_steammessages_community_steamclient_proto_msgTypes[64]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CCommunity_GetBotReviewScoreForRecommendation_Response_BotReviewScoreEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCommunity_GetBotReviewScoreForRecommendation_Response_BotReviewScoreEntry) ProtoMessage() {}

func (x *CCommunity_GetBotReviewScoreForRecommendation_Response_BotReviewScoreEntry) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_community_steamclient_proto_msgTypes[64]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCommunity_GetBotReviewScoreForRecommendation_Response_BotReviewScoreEntry.ProtoReflect.Descriptor instead.
func (*CCommunity_GetBotReviewScoreForRecommendation_Response_BotReviewScoreEntry) Descriptor() ([]byte, []int) {
	return file_steammessages_community_steamclient_proto_rawDescGZIP(), []int{56, 0}
}

func (x *CCommunity_GetBotReviewScoreForRecommendation_Response_BotReviewScoreEntry) GetKey() uint64 {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return 0
}

func (x *CCommunity_GetBotReviewScoreForRecommendation_Response_BotReviewScoreEntry) GetValue() uint32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

var File_steammessages_community_steamclient_proto protoreflect.FileDescriptor

const file_steammessages_community_steamclient_proto_rawDesc = "" +
	"\n" +
	")steammessages_community.steamclient.proto\x1a\x18steammessages_base.proto\x1a,steammessages_unified_base.steamclient.proto\x1a\venums.proto\"P\n" +
	"\x1aCCommunity_GetApps_Request\x12\x16\n" +
	"\x06appids\x18\x01 \x03(\x05R\x06appids\x12\x1a\n" +
	"\blanguage\x18\x02 \x01(\rR\blanguage\"H\n" +
	"\x1bCCommunity_GetApps_Response\x12)\n" +
	"\x04apps\x18\x01 \x03(\v2\x15.CCDDBAppDetailCommonR\x04apps\"e\n" +
	"1CCommunity_GetAppRichPresenceLocalization_Request\x12\x14\n" +
	"\x05appid\x18\x01 \x01(\x05R\x05appid\x12\x1a\n" +
	"\blanguage\x18\x02 \x01(\tR\blanguage\"\xd9\x02\n" +
	"2CCommunity_GetAppRichPresenceLocalization_Response\x12\x14\n" +
	"\x05appid\x18\x01 \x01(\x05R\x05appid\x12^\n" +
	"\vtoken_lists\x18\x02 \x03(\v2=.CCommunity_GetAppRichPresenceLocalization_Response.TokenListR\n" +
	"tokenLists\x1a1\n" +
	"\x05Token\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value\x1az\n" +
	"\tTokenList\x12\x1a\n" +
	"\blanguage\x18\x01 \x01(\tR\blanguage\x12Q\n" +
	"\x06tokens\x18\x02 \x03(\v29.CCommunity_GetAppRichPresenceLocalization_Response.TokenR\x06tokens\"\xe2\x03\n" +
	"#CCommunity_GetCommentThread_Request\x12\x18\n" +
	"\asteamid\x18\x01 \x01(\x06R\asteamid\x12`\n" +
	"\x13comment_thread_type\x18\x02 \x01(\x0e2\x13.ECommentThreadType:\x1bk_ECommentThreadTypeInvalidR\x11commentThreadType\x12\x1e\n" +
	"\n" +
	"gidfeature\x18\x03 \x01(\x06R\n" +
	"gidfeature\x12 \n" +
	"\vgidfeature2\x18\x04 \x01(\x06R\vgidfeature2\x12(\n" +
	"\x0fcommentthreadid\x18\x05 \x01(\x06R\x0fcommentthreadid\x12\x14\n" +
	"\x05start\x18\x06 \x01(\x05R\x05start\x12\x14\n" +
	"\x05count\x18\a \x01(\x05R\x05count\x12\x1a\n" +
	"\bupvoters\x18\b \x01(\x05R\bupvoters\x12'\n" +
	"\x0finclude_deleted\x18\t \x01(\bR\x0eincludeDeleted\x12\x1e\n" +
	"\n" +
	"gidcomment\x18\n" +
	" \x01(\x06R\n" +
	"gidcomment\x12\x1f\n" +
	"\vtime_oldest\x18\v \x01(\rR\n" +
	"timeOldest\x12!\n" +
	"\foldest_first\x18\f \x01(\bR\voldestFirst\"\x95\x04\n" +
	"\x12CCommunity_Comment\x12\x1e\n" +
	"\n" +
	"gidcomment\x18\x01 \x01(\x06R\n" +
	"gidcomment\x12\x18\n" +
	"\asteamid\x18\x02 \x01(\x06R\asteamid\x12\x1c\n" +
	"\ttimestamp\x18\x03 \x01(\rR\ttimestamp\x12\x12\n" +
	"\x04text\x18\x04 \x01(\tR\x04text\x12\x18\n" +
	"\aupvotes\x18\x05 \x01(\x05R\aupvotes\x12\x16\n" +
	"\x06hidden\x18\x06 \x01(\bR\x06hidden\x12$\n" +
	"\x0ehidden_by_user\x18\a \x01(\bR\fhiddenByUser\x12\x18\n" +
	"\adeleted\x18\b \x01(\bR\adeleted\x12,\n" +
	"\tipaddress\x18\t \x01(\v2\x0e.CMsgIPAddressR\tipaddress\x12!\n" +
	"\ftotal_hidden\x18\n" +
	" \x01(\x05R\vtotalHidden\x12&\n" +
	"\x0fupvoted_by_user\x18\v \x01(\bR\rupvotedByUser\x12:\n" +
	"\treactions\x18\f \x03(\v2\x1c.CCommunity_Comment.ReactionR\treactions\x12*\n" +
	"\x10gidparentcomment\x18\r \x01(\x06R\x10gidparentcomment\x1a@\n" +
	"\bReaction\x12\x1e\n" +
	"\n" +
	"reactionid\x18\x01 \x01(\rR\n" +
	"reactionid\x12\x14\n" +
	"\x05count\x18\x02 \x01(\rR\x05count\"\xb1\x05\n" +
	"$CCommunity_GetCommentThread_Response\x12/\n" +
	"\bcomments\x18\x01 \x03(\v2\x13.CCommunity_CommentR\bcomments\x12>\n" +
	"\x10deleted_comments\x18\x02 \x03(\v2\x13.CCommunity_CommentR\x0fdeletedComments\x12\x18\n" +
	"\asteamid\x18\x03 \x01(\x06R\asteamid\x12(\n" +
	"\x0fcommentthreadid\x18\x04 \x01(\x06R\x0fcommentthreadid\x12\x14\n" +
	"\x05start\x18\x05 \x01(\x05R\x05start\x12\x14\n" +
	"\x05count\x18\x06 \x01(\x05R\x05count\x12\x1f\n" +
	"\vtotal_count\x18\a \x01(\x05R\n" +
	"totalCount\x12\x18\n" +
	"\aupvotes\x18\b \x01(\x05R\aupvotes\x12\x1a\n" +
	"\bupvoters\x18\t \x03(\rR\bupvoters\x12'\n" +
	"\x0fuser_subscribed\x18\n" +
	" \x01(\bR\x0euserSubscribed\x12!\n" +
	"\fuser_upvoted\x18\v \x01(\bR\vuserUpvoted\x12)\n" +
	"\x10answer_commentid\x18\f \x01(\x06R\x0fanswerCommentid\x12!\n" +
	"\fanswer_actor\x18\r \x01(\rR\vanswerActor\x12*\n" +
	"\x11answer_actor_rank\x18\x0e \x01(\x05R\x0fanswerActorRank\x12\x19\n" +
	"\bcan_post\x18\x0f \x01(\bR\acanPost\x12.\n" +
	"\x13comment_thread_type\x18\x10 \x01(\rR\x11commentThreadType\x12\x1e\n" +
	"\n" +
	"gidfeature\x18\x11 \x01(\x06R\n" +
	"gidfeature\x12 \n" +
	"\vgidfeature2\x18\x12 \x01(\x06R\vgidfeature2\"\x9d\x03\n" +
	"&CCommunity_PostCommentToThread_Request\x12\x18\n" +
	"\asteamid\x18\x01 \x01(\x06R\asteamid\x12`\n" +
	"\x13comment_thread_type\x18\x02 \x01(\x0e2\x13.ECommentThreadType:\x1bk_ECommentThreadTypeInvalidR\x11commentThreadType\x12\x1e\n" +
	"\n" +
	"gidfeature\x18\x03 \x01(\x06R\n" +
	"gidfeature\x12 \n" +
	"\vgidfeature2\x18\x04 \x01(\x06R\vgidfeature2\x12\x12\n" +
	"\x04text\x18\x06 \x01(\tR\x04text\x12*\n" +
	"\x10gidparentcomment\x18\a \x01(\x06R\x10gidparentcomment\x125\n" +
	"\x16suppress_notifications\x18\b \x01(\bR\x15suppressNotifications\x12\x1b\n" +
	"\tis_report\x18\t \x01(\bR\bisReport\x12!\n" +
	"\fstart_hidden\x18\n" +
	" \x01(\bR\vstartHidden\"\xa3\x01\n" +
	"'CCommunity_PostCommentToThread_Response\x12\x1e\n" +
	"\n" +
	"gidcomment\x18\x01 \x01(\x06R\n" +
	"gidcomment\x12(\n" +
	"\x0fcommentthreadid\x18\x02 \x01(\x06R\x0fcommentthreadid\x12\x14\n" +
	"\x05count\x18\x03 \x01(\x05R\x05count\x12\x18\n" +
	"\aupvotes\x18\x04 \x01(\x05R\aupvotes\"\xa6\x02\n" +
	"*CCommunity_DeleteCommentFromThread_Request\x12\x18\n" +
	"\asteamid\x18\x01 \x01(\x06R\asteamid\x12`\n" +
	"\x13comment_thread_type\x18\x02 \x01(\x0e2\x13.ECommentThreadType:\x1bk_ECommentThreadTypeInvalidR\x11commentThreadType\x12\x1e\n" +
	"\n" +
	"gidfeature\x18\x03 \x01(\x06R\n" +
	"gidfeature\x12 \n" +
	"\vgidfeature2\x18\x04 \x01(\x06R\vgidfeature2\x12\x1e\n" +
	"\n" +
	"gidcomment\x18\x05 \x01(\x06R\n" +
	"gidcomment\x12\x1a\n" +
	"\bundelete\x18\x06 \x01(\bR\bundelete\"-\n" +
	"+CCommunity_DeleteCommentFromThread_Response\"\xa0\x02\n" +
	"$CCommunity_RateCommentThread_Request\x12,\n" +
	"\x11commentthreadtype\x18\x01 \x01(\tR\x11commentthreadtype\x12\x18\n" +
	"\asteamid\x18\x02 \x01(\x04R\asteamid\x12\x1e\n" +
	"\n" +
	"gidfeature\x18\x03 \x01(\x04R\n" +
	"gidfeature\x12 \n" +
	"\vgidfeature2\x18\x04 \x01(\x04R\vgidfeature2\x12\x1e\n" +
	"\n" +
	"gidcomment\x18\x05 \x01(\x04R\n" +
	"gidcomment\x12\x17\n" +
	"\arate_up\x18\x06 \x01(\bR\x06rateUp\x125\n" +
	"\x16suppress_notifications\x18\a \x01(\bR\x15suppressNotifications\"\xc2\x01\n" +
	"%CCommunity_RateCommentThread_Response\x12\x1e\n" +
	"\n" +
	"gidcomment\x18\x01 \x01(\x04R\n" +
	"gidcomment\x12(\n" +
	"\x0fcommentthreadid\x18\x02 \x01(\x04R\x0fcommentthreadid\x12\x14\n" +
	"\x05count\x18\x03 \x01(\rR\x05count\x12\x18\n" +
	"\aupvotes\x18\x04 \x01(\rR\aupvotes\x12\x1f\n" +
	"\vhas_upvoted\x18\x05 \x01(\bR\n" +
	"hasUpvoted\"\xf7\x01\n" +
	"*CCommunity_GetCommentThreadRatings_Request\x12,\n" +
	"\x11commentthreadtype\x18\x01 \x01(\tR\x11commentthreadtype\x12\x18\n" +
	"\asteamid\x18\x02 \x01(\x04R\asteamid\x12\x1e\n" +
	"\n" +
	"gidfeature\x18\x03 \x01(\x04R\n" +
	"gidfeature\x12 \n" +
	"\vgidfeature2\x18\x04 \x01(\x04R\vgidfeature2\x12\x1e\n" +
	"\n" +
	"gidcomment\x18\x05 \x01(\x04R\n" +
	"gidcomment\x12\x1f\n" +
	"\vmax_results\x18\x06 \x01(\rR\n" +
	"maxResults\"\xe1\x01\n" +
	"+CCommunity_GetCommentThreadRatings_Response\x12(\n" +
	"\x0fcommentthreadid\x18\x01 \x01(\x04R\x0fcommentthreadid\x12\x1e\n" +
	"\n" +
	"gidcomment\x18\x02 \x01(\x04R\n" +
	"gidcomment\x12\x18\n" +
	"\aupvotes\x18\x03 \x01(\rR\aupvotes\x12\x1f\n" +
	"\vhas_upvoted\x18\x04 \x01(\bR\n" +
	"hasUpvoted\x12-\n" +
	"\x12upvoter_accountids\x18\x05 \x03(\rR\x11upvoterAccountids\"\x91\x01\n" +
	"'CCommunity_RateClanAnnouncement_Request\x12&\n" +
	"\x0eannouncementid\x18\x01 \x01(\x04R\x0eannouncementid\x12\x17\n" +
	"\avote_up\x18\x02 \x01(\bR\x06voteUp\x12%\n" +
	"\x0eclan_accountid\x18\x03 \x01(\rR\rclanAccountid\"*\n" +
	"(CCommunity_RateClanAnnouncement_Response\"[\n" +
	"1CCommunity_GetClanAnnouncementVoteForUser_Request\x12&\n" +
	"\x0eannouncementid\x18\x01 \x01(\x04R\x0eannouncementid\"n\n" +
	"2CCommunity_GetClanAnnouncementVoteForUser_Response\x12\x19\n" +
	"\bvoted_up\x18\x01 \x01(\bR\avotedUp\x12\x1d\n" +
	"\n" +
	"voted_down\x18\x02 \x01(\bR\tvotedDown\"\xc4\x01\n" +
	"(CCommunity_GetClanLocGroupImages_Request\x12\x18\n" +
	"\asteamid\x18\x01 \x01(\x04R\asteamid\x12>\n" +
	"\x05group\x18\x02 \x01(\x0e2\x10.EClanImageGroup:\x16k_EClanImageGroup_NoneR\x05group\x12\x1a\n" +
	"\blanguage\x18\x03 \x01(\rR\blanguage\x12\"\n" +
	"\rloc_group_ids\x18\x04 \x03(\x04R\vlocGroupIds\"\xe4\x02\n" +
	"\x1cCCommunity_ClanLocGroupImage\x12 \n" +
	"\floc_group_id\x18\x01 \x01(\x04R\n" +
	"locGroupId\x12\x1d\n" +
	"\n" +
	"image_hash\x18\x02 \x01(\tR\timageHash\x12%\n" +
	"\x0ethumbnail_hash\x18\x03 \x01(\tR\rthumbnailHash\x12N\n" +
	"\tfile_type\x18\x04 \x01(\x0e2\x13.EClanImageFileType:\x1ck_EClanImageFileType_UnknownR\bfileType\x12>\n" +
	"\x05group\x18\x05 \x01(\x0e2\x10.EClanImageGroup:\x16k_EClanImageGroup_NoneR\x05group\x12\x14\n" +
	"\x05width\x18\x06 \x01(\rR\x05width\x12\x16\n" +
	"\x06height\x18\a \x01(\rR\x06height\x12\x1e\n" +
	"\n" +
	"extensions\x18\b \x01(\tR\n" +
	"extensions\"b\n" +
	")CCommunity_GetClanLocGroupImages_Response\x125\n" +
	"\x06images\x18\x01 \x03(\v2\x1d.CCommunity_ClanLocGroupImageR\x06images\"z\n" +
	"#CCommunity_GetAvatarHistory_Request\x12\x18\n" +
	"\asteamid\x18\x01 \x01(\x06R\asteamid\x129\n" +
	"\x19filter_user_uploaded_only\x18\x02 \x01(\bR\x16filterUserUploadedOnly\"\xe4\x01\n" +
	"$CCommunity_GetAvatarHistory_Response\x12J\n" +
	"\aavatars\x18\x01 \x03(\v20.CCommunity_GetAvatarHistory_Response.AvatarDataR\aavatars\x1ap\n" +
	"\n" +
	"AvatarData\x12\x1f\n" +
	"\vavatar_sha1\x18\x01 \x01(\tR\n" +
	"avatarSha1\x12#\n" +
	"\ruser_uploaded\x18\x02 \x01(\bR\fuserUploaded\x12\x1c\n" +
	"\ttimestamp\x18\x03 \x01(\rR\ttimestamp\"b\n" +
	".CCommunity_GetClanEventCrowdInMetadata_Request\x12\x18\n" +
	"\asteamid\x18\x01 \x01(\x06R\asteamid\x12\x16\n" +
	"\x06itemid\x18\x02 \x01(\x04R\x06itemid\"\x87\x01\n" +
	"/CCommunity_GetClanEventCrowdInMetadata_Response\x12,\n" +
	"\x12crowdin_project_id\x18\x01 \x01(\x04R\x10crowdinProjectId\x12&\n" +
	"\x0fcrowdin_file_id\x18\x02 \x01(\x04R\rcrowdinFileId\"E\n" +
	")CCommunity_GetClanCrowdInMetadata_Request\x12\x18\n" +
	"\asteamid\x18\x01 \x01(\x06R\asteamid\"\xb4\x01\n" +
	"*CCommunity_GetClanCrowdInMetadata_Response\x12,\n" +
	"\x12crowdin_project_id\x18\x01 \x01(\x04R\x10crowdinProjectId\x120\n" +
	"\x14crowdin_directory_id\x18\x02 \x01(\x04R\x12crowdinDirectoryId\x12&\n" +
	"\x0fpush_by_default\x18\x03 \x01(\bR\rpushByDefault\"~\n" +
	".CCommunity_FetchTranslationFromCrowdIn_Request\x12\x18\n" +
	"\asteamid\x18\x01 \x01(\x06R\asteamid\x12\x16\n" +
	"\x06itemid\x18\x02 \x01(\x04R\x06itemid\x12\x1a\n" +
	"\blanguage\x18\x03 \x01(\x05R\blanguage\"1\n" +
	"/CCommunity_FetchTranslationFromCrowdIn_Response\"\xe4\x02\n" +
	"'CCommunity_HideAndReportComment_Request\x12\x1e\n" +
	"\n" +
	"gidfeature\x18\x01 \x01(\x04R\n" +
	"gidfeature\x12 \n" +
	"\vgidfeature2\x18\x02 \x01(\x04R\vgidfeature2\x12\x1e\n" +
	"\n" +
	"gidcomment\x18\x03 \x01(\x04R\n" +
	"gidcomment\x12\x18\n" +
	"\asteamid\x18\x04 \x01(\x06R\asteamid\x12,\n" +
	"\x11commentthreadtype\x18\x05 \x01(\tR\x11commentthreadtype\x12\x12\n" +
	"\x04hide\x18\x06 \x01(\bR\x04hide\x12Z\n" +
	"\rreport_reason\x18\a \x01(\x0e2\x15.EContentReportReason:\x1ek_EContentReportReason_InvalidR\freportReason\x12\x1f\n" +
	"\vreport_text\x18\b \x01(\tR\n" +
	"reportText\"*\n" +
	"(CCommunity_HideAndReportComment_Response\"@\n" +
	"\fCAppPriority\x12\x1a\n" +
	"\bpriority\x18\x01 \x01(\rR\bpriority\x12\x14\n" +
	"\x05appid\x18\x02 \x03(\rR\x05appid\"\xc1\x03\n" +
	"*CCommunity_GetUserPartnerEventNews_Request\x12\x14\n" +
	"\x05count\x18\x01 \x01(\rR\x05count\x12\x16\n" +
	"\x06offset\x18\x02 \x01(\rR\x06offset\x12,\n" +
	"\x12rtime32_start_time\x18\x03 \x01(\rR\x10rtime32StartTime\x12(\n" +
	"\x10rtime32_end_time\x18\x04 \x01(\rR\x0ertime32EndTime\x12/\n" +
	"\x13language_preference\x18\x05 \x03(\rR\x12languagePreference\x12@\n" +
	"\x11filter_event_type\x18\x06 \x03(\x0e2\x14.EProtoClanEventTypeR\x0ffilterEventType\x12&\n" +
	"\x0ffilter_to_appid\x18\a \x01(\bR\rfilterToAppid\x12(\n" +
	"\bapp_list\x18\b \x03(\v2\r.CAppPriorityR\aappList\x12\"\n" +
	"\vcount_after\x18\t \x01(\r:\x010R\n" +
	"countAfter\x12$\n" +
	"\fcount_before\x18\n" +
	" \x01(\r:\x010R\vcountBefore\"`\n" +
	"+CCommunity_GetUserPartnerEventNews_Response\x121\n" +
	"\aresults\x18\x01 \x03(\v2\x17.CClanMatchEventByRangeR\aresults\"\xd2\x01\n" +
	"'CCommunity_GetBestEventsForUser_Request\x12,\n" +
	"\x12include_steam_blog\x18\x01 \x01(\bR\x10includeSteamBlog\x12>\n" +
	"\x1cfilter_to_played_within_days\x18\x02 \x01(\rR\x18filterToPlayedWithinDays\x129\n" +
	"\x19include_only_game_updates\x18\x03 \x01(\bR\x16includeOnlyGameUpdates\"\xa5\x02\n" +
	"\x1dCCommunity_PartnerEventResult\x12\x16\n" +
	"\x06clanid\x18\x01 \x01(\rR\x06clanid\x12\x1b\n" +
	"\tevent_gid\x18\x02 \x01(\x06R\beventGid\x12)\n" +
	"\x10announcement_gid\x18\x03 \x01(\x06R\x0fannouncementGid\x12\x14\n" +
	"\x05appid\x18\x04 \x01(\rR\x05appid\x12+\n" +
	"\x11possible_takeover\x18\x05 \x01(\bR\x10possibleTakeover\x125\n" +
	"\x15rtime32_last_modified\x18\x06 \x01(\r:\x010R\x13rtime32LastModified\x12*\n" +
	"\x11user_app_priority\x18\a \x01(\x05R\x0fuserAppPriority\"d\n" +
	"(CCommunity_GetBestEventsForUser_Response\x128\n" +
	"\aresults\x18\x01 \x03(\v2\x1e.CCommunity_PartnerEventResultR\aresults\"\x86\x03\n" +
	"+CCommunity_MarkPartnerEventsForUser_Request\x12\\\n" +
	"\bmarkings\x18\x01 \x03(\v2@.CCommunity_MarkPartnerEventsForUser_Request.PartnerEventMarkingR\bmarkings\x1a\xf8\x01\n" +
	"\x13PartnerEventMarking\x12\x16\n" +
	"\x06clanid\x18\x01 \x01(\rR\x06clanid\x12\x1b\n" +
	"\tevent_gid\x18\x02 \x01(\x06R\beventGid\x12p\n" +
	"\x10display_location\x18\x03 \x01(\x0e2\x1d.EPartnerEventDisplayLocation:&k_EPartnerEventDisplayLocation_InvalidR\x0fdisplayLocation\x12\x1d\n" +
	"\n" +
	"mark_shown\x18\x04 \x01(\bR\tmarkShown\x12\x1b\n" +
	"\tmark_read\x18\x05 \x01(\bR\bmarkRead\".\n" +
	",CCommunity_MarkPartnerEventsForUser_Response\"\x8a\x01\n" +
	"0CCommunity_GetUserPartnerEventViewStatus_Request\x12\x1d\n" +
	"\n" +
	"event_gids\x18\x01 \x03(\x06R\teventGids\x127\n" +
	"\x18include_read_events_only\x18\x02 \x01(\bR\x15includeReadEventsOnly\"\xb0\x02\n" +
	"1CCommunity_GetUserPartnerEventViewStatus_Response\x12W\n" +
	"\x06events\x18\x01 \x03(\v2?.CCommunity_GetUserPartnerEventViewStatus_Response.PartnerEventR\x06events\x1a\xa1\x01\n" +
	"\fPartnerEvent\x12\x1b\n" +
	"\tevent_gid\x18\x01 \x01(\x06R\beventGid\x12&\n" +
	"\x0flast_shown_time\x18\x02 \x01(\rR\rlastShownTime\x12$\n" +
	"\x0elast_read_time\x18\x03 \x01(\rR\flastReadTime\x12&\n" +
	"\x0fclan_account_id\x18\x04 \x01(\rR\rclanAccountId\"F\n" +
	".CCommunity_PartnerEventsShowMoreForApp_Request\x12\x14\n" +
	"\x05appid\x18\x01 \x01(\rR\x05appid\"1\n" +
	"/CCommunity_PartnerEventsShowMoreForApp_Response\"F\n" +
	".CCommunity_PartnerEventsShowLessForApp_Request\x12\x14\n" +
	"\x05appid\x18\x01 \x01(\rR\x05appid\"1\n" +
	"/CCommunity_PartnerEventsShowLessForApp_Response\"8\n" +
	"6CCommunity_ClearUserPartnerEventsAppPriorities_Request\"9\n" +
	"7CCommunity_ClearUserPartnerEventsAppPriorities_Response\"6\n" +
	"4CCommunity_GetUserPartnerEventsAppPriorities_Request\"g\n" +
	"#CCommunity_PartnerEventsAppPriority\x12\x14\n" +
	"\x05appid\x18\x01 \x01(\rR\x05appid\x12*\n" +
	"\x11user_app_priority\x18\x02 \x01(\x05R\x0fuserAppPriority\"}\n" +
	"5CCommunity_GetUserPartnerEventsAppPriorities_Response\x12D\n" +
	"\n" +
	"priorities\x18\x01 \x03(\v2$.CCommunity_PartnerEventsAppPriorityR\n" +
	"priorities\"N\n" +
	"6CCommunity_ClearSinglePartnerEventsAppPriority_Request\x12\x14\n" +
	"\x05appid\x18\x01 \x01(\rR\x05appid\"9\n" +
	"7CCommunity_ClearSinglePartnerEventsAppPriority_Response\"\x91\x02\n" +
	"3CCommunity_SetRecommendationBotReviewStatus_Request\x12e\n" +
	"\rreview_labels\x18\x01 \x03(\v2@.CCommunity_SetRecommendationBotReviewStatus_Request.ReviewLabelR\freviewLabels\x1as\n" +
	"\vReviewLabel\x12\x14\n" +
	"\x05appid\x18\x01 \x01(\rR\x05appid\x12*\n" +
	"\x10recommendationid\x18\x02 \x01(\x04R\x10recommendationid\x12\"\n" +
	"\ris_bot_review\x18\x03 \x01(\bR\visBotReview\"6\n" +
	"4CCommunity_SetRecommendationBotReviewStatus_Response\"}\n" +
	"5CCommunity_GetBotReviewScoreForRecommendation_Request\x12-\n" +
	"\x12recommendation_ids\x18\x01 \x03(\x04R\x11recommendationIds\x12\x15\n" +
	"\x06app_id\x18\x02 \x01(\rR\x05appId\"\xee\x01\n" +
	"6CCommunity_GetBotReviewScoreForRecommendation_Response\x12u\n" +
	"\x10bot_review_score\x18\x01 \x03(\v2K.CCommunity_GetBotReviewScoreForRecommendation_Response.BotReviewScoreEntryR\x0ebotReviewScore\x1a=\n" +
	"\x13BotReviewScoreEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x04R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\rR\x05value*p\n" +
	"\x0fEClanImageGroup\x12\x1a\n" +
	"\x16k_EClanImageGroup_None\x10\x00\x12\"\n" +
	"\x1ek_EClanImageGroup_Announcement\x10\x01\x12\x1d\n" +
	"\x19k_EClanImageGroup_Curator\x10\x02*\xe5\x02\n" +
	"\x12EClanImageFileType\x12 \n" +
	"\x1ck_EClanImageFileType_Unknown\x10\x00\x12\x1d\n" +
	"\x19k_EClanImageFileType_JPEG\x10\x01\x12\x1c\n" +
	"\x18k_EClanImageFileType_GIF\x10\x02\x12\x1c\n" +
	"\x18k_EClanImageFileType_PNG\x10\x03\x12\x1c\n" +
	"\x18k_EClanImageFileType_MP4\x10\x04\x12\x1d\n" +
	"\x19k_EClanImageFileType_WEBM\x10\x05\x12\x1c\n" +
	"\x18k_EClanImageFileType_VTT\x10\x06\x12\x1c\n" +
	"\x18k_EClanImageFileType_SRT\x10\a\x12\x1c\n" +
	"\x18k_EClanImageFileType_SVG\x10\b\x12\x1c\n" +
	"\x18k_EClanImageFileType_XML\x10\t\x12\x1d\n" +
	"\x19k_EClanImageFileType_WEBP\x10\n" +
	"*\xbd\x04\n" +
	"\x1cEPartnerEventDisplayLocation\x12*\n" +
	"&k_EPartnerEventDisplayLocation_Invalid\x10\x00\x126\n" +
	"2k_EPartnerEventDisplayLocation_AppDetailsSpotlight\x10\x01\x122\n" +
	".k_EPartnerEventDisplayLocation_LibraryOverview\x10\x02\x12/\n" +
	"+k_EPartnerEventDisplayLocation_StoreAppPage\x10\x03\x120\n" +
	",k_EPartnerEventDisplayLocation_EventScroller\x10\x04\x125\n" +
	"1k_EPartnerEventDisplayLocation_AppDetailsActivity\x10\x05\x12/\n" +
	"+k_EPartnerEventDisplayLocation_CommunityHub\x10\x06\x121\n" +
	"-k_EPartnerEventDisplayLocation_StoreFrontPage\x10\a\x12*\n" +
	"&k_EPartnerEventDisplayLocation_NewsHub\x10\b\x12.\n" +
	"*k_EPartnerEventDisplayLocation_GamepadHome\x10\t\x12+\n" +
	"'k_EPartnerEventDisplayLocation_StoreHub\x10\n" +
	"2\x88\x19\n" +
	"\tCommunity\x12D\n" +
	"\aGetApps\x12\x1b.CCommunity_GetApps_Request\x1a\x1c.CCommunity_GetApps_Response\x12\x89\x01\n" +
	"\x1eGetAppRichPresenceLocalization\x122.CCommunity_GetAppRichPresenceLocalization_Request\x1a3.CCommunity_GetAppRichPresenceLocalization_Response\x12_\n" +
	"\x10GetCommentThread\x12$.CCommunity_GetCommentThread_Request\x1a%.CCommunity_GetCommentThread_Response\x12h\n" +
	"\x13PostCommentToThread\x12'.CCommunity_PostCommentToThread_Request\x1a(.CCommunity_PostCommentToThread_Response\x12t\n" +
	"\x17DeleteCommentFromThread\x12+.CCommunity_DeleteCommentFromThread_Request\x1a,.CCommunity_DeleteCommentFromThread_Response\x12b\n" +
	"\x11RateCommentThread\x12%.CCommunity_RateCommentThread_Request\x1a&.CCommunity_RateCommentThread_Response\x12t\n" +
	"\x17GetCommentThreadRatings\x12+.CCommunity_GetCommentThreadRatings_Request\x1a,.CCommunity_GetCommentThreadRatings_Response\x12k\n" +
	"\x14RateClanAnnouncement\x12(.CCommunity_RateClanAnnouncement_Request\x1a).CCommunity_RateClanAnnouncement_Response\x12\x89\x01\n" +
	"\x1eGetClanAnnouncementVoteForUser\x122.CCommunity_GetClanAnnouncementVoteForUser_Request\x1a3.CCommunity_GetClanAnnouncementVoteForUser_Response\x12n\n" +
	"\x15GetClanLocGroupImages\x12).CCommunity_GetClanLocGroupImages_Request\x1a*.CCommunity_GetClanLocGroupImages_Response\x12_\n" +
	"\x10GetAvatarHistory\x12$.CCommunity_GetAvatarHistory_Request\x1a%.CCommunity_GetAvatarHistory_Response\x12\x80\x01\n" +
	"\x1bGetClanEventCrowdInMetadata\x12/.CCommunity_GetClanEventCrowdInMetadata_Request\x1a0.CCommunity_GetClanEventCrowdInMetadata_Response\x12q\n" +
	"\x16GetClanCrowdInMetadata\x12*.CCommunity_GetClanCrowdInMetadata_Request\x1a+.CCommunity_GetClanCrowdInMetadata_Response\x12\x80\x01\n" +
	"\x1bFetchTranslationFromCrowdIn\x12/.CCommunity_FetchTranslationFromCrowdIn_Request\x1a0.CCommunity_FetchTranslationFromCrowdIn_Response\x12k\n" +
	"\x14HideAndReportComment\x12(.CCommunity_HideAndReportComment_Request\x1a).CCommunity_HideAndReportComment_Response\x12t\n" +
	"\x17GetUserPartnerEventNews\x12+.CCommunity_GetUserPartnerEventNews_Request\x1a,.CCommunity_GetUserPartnerEventNews_Response\x12k\n" +
	"\x14GetBestEventsForUser\x12(.CCommunity_GetBestEventsForUser_Request\x1a).CCommunity_GetBestEventsForUser_Response\x12w\n" +
	"\x18MarkPartnerEventsForUser\x12,.CCommunity_MarkPartnerEventsForUser_Request\x1a-.CCommunity_MarkPartnerEventsForUser_Response\x12\x86\x01\n" +
	"\x1dGetUserPartnerEventViewStatus\x121.CCommunity_GetUserPartnerEventViewStatus_Request\x1a2.CCommunity_GetUserPartnerEventViewStatus_Response\x12\x80\x01\n" +
	"\x1bPartnerEventsShowMoreForApp\x12/.CCommunity_PartnerEventsShowMoreForApp_Request\x1a0.CCommunity_PartnerEventsShowMoreForApp_Response\x12\x80\x01\n" +
	"\x1bPartnerEventsShowLessForApp\x12/.CCommunity_PartnerEventsShowLessForApp_Request\x1a0.CCommunity_PartnerEventsShowLessForApp_Response\x12\x98\x01\n" +
	"#ClearUserPartnerEventsAppPriorities\x127.CCommunity_ClearUserPartnerEventsAppPriorities_Request\x1a8.CCommunity_ClearUserPartnerEventsAppPriorities_Response\x12\x92\x01\n" +
	"!GetUserPartnerEventsAppPriorities\x125.CCommunity_GetUserPartnerEventsAppPriorities_Request\x1a6.CCommunity_GetUserPartnerEventsAppPriorities_Response\x12\x98\x01\n" +
	"#ClearSinglePartnerEventsAppPriority\x127.CCommunity_ClearSinglePartnerEventsAppPriority_Request\x1a8.CCommunity_ClearSinglePartnerEventsAppPriority_Response\x12\x8f\x01\n" +
	" SetRecommendationBotReviewStatus\x124.CCommunity_SetRecommendationBotReviewStatus_Request\x1a5.CCommunity_SetRecommendationBotReviewStatus_Response\x12\x95\x01\n" +
	"\"GetBotReviewScoreForRecommendation\x126.CCommunity_GetBotReviewScoreForRecommendation_Request\x1a7.CCommunity_GetBotReviewScoreForRecommendation_ResponseB\x03\x80\x01\x01"

var (
	file_steammessages_community_steamclient_proto_rawDescOnce sync.Once
	file_steammessages_community_steamclient_proto_rawDescData []byte
)

func file_steammessages_community_steamclient_proto_rawDescGZIP() []byte {
	file_steammessages_community_steamclient_proto_rawDescOnce.Do(func() {
		file_steammessages_community_steamclient_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_steammessages_community_steamclient_proto_rawDesc), len(file_steammessages_community_steamclient_proto_rawDesc)))
	})
	return file_steammessages_community_steamclient_proto_rawDescData
}

var file_steammessages_community_steamclient_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_steammessages_community_steamclient_proto_msgTypes = make([]protoimpl.MessageInfo, 65)
var file_steammessages_community_steamclient_proto_goTypes = []any{
	(EClanImageGroup)(0),                                                               // 0: EClanImageGroup
	(EClanImageFileType)(0),                                                            // 1: EClanImageFileType
	(EPartnerEventDisplayLocation)(0),                                                  // 2: EPartnerEventDisplayLocation
	(*CCommunity_GetApps_Request)(nil),                                                 // 3: CCommunity_GetApps_Request
	(*CCommunity_GetApps_Response)(nil),                                                // 4: CCommunity_GetApps_Response
	(*CCommunity_GetAppRichPresenceLocalization_Request)(nil),                          // 5: CCommunity_GetAppRichPresenceLocalization_Request
	(*CCommunity_GetAppRichPresenceLocalization_Response)(nil),                         // 6: CCommunity_GetAppRichPresenceLocalization_Response
	(*CCommunity_GetCommentThread_Request)(nil),                                        // 7: CCommunity_GetCommentThread_Request
	(*CCommunity_Comment)(nil),                                                         // 8: CCommunity_Comment
	(*CCommunity_GetCommentThread_Response)(nil),                                       // 9: CCommunity_GetCommentThread_Response
	(*CCommunity_PostCommentToThread_Request)(nil),                                     // 10: CCommunity_PostCommentToThread_Request
	(*CCommunity_PostCommentToThread_Response)(nil),                                    // 11: CCommunity_PostCommentToThread_Response
	(*CCommunity_DeleteCommentFromThread_Request)(nil),                                 // 12: CCommunity_DeleteCommentFromThread_Request
	(*CCommunity_DeleteCommentFromThread_Response)(nil),                                // 13: CCommunity_DeleteCommentFromThread_Response
	(*CCommunity_RateCommentThread_Request)(nil),                                       // 14: CCommunity_RateCommentThread_Request
	(*CCommunity_RateCommentThread_Response)(nil),                                      // 15: CCommunity_RateCommentThread_Response
	(*CCommunity_GetCommentThreadRatings_Request)(nil),                                 // 16: CCommunity_GetCommentThreadRatings_Request
	(*CCommunity_GetCommentThreadRatings_Response)(nil),                                // 17: CCommunity_GetCommentThreadRatings_Response
	(*CCommunity_RateClanAnnouncement_Request)(nil),                                    // 18: CCommunity_RateClanAnnouncement_Request
	(*CCommunity_RateClanAnnouncement_Response)(nil),                                   // 19: CCommunity_RateClanAnnouncement_Response
	(*CCommunity_GetClanAnnouncementVoteForUser_Request)(nil),                          // 20: CCommunity_GetClanAnnouncementVoteForUser_Request
	(*CCommunity_GetClanAnnouncementVoteForUser_Response)(nil),                         // 21: CCommunity_GetClanAnnouncementVoteForUser_Response
	(*CCommunity_GetClanLocGroupImages_Request)(nil),                                   // 22: CCommunity_GetClanLocGroupImages_Request
	(*CCommunity_ClanLocGroupImage)(nil),                                               // 23: CCommunity_ClanLocGroupImage
	(*CCommunity_GetClanLocGroupImages_Response)(nil),                                  // 24: CCommunity_GetClanLocGroupImages_Response
	(*CCommunity_GetAvatarHistory_Request)(nil),                                        // 25: CCommunity_GetAvatarHistory_Request
	(*CCommunity_GetAvatarHistory_Response)(nil),                                       // 26: CCommunity_GetAvatarHistory_Response
	(*CCommunity_GetClanEventCrowdInMetadata_Request)(nil),                             // 27: CCommunity_GetClanEventCrowdInMetadata_Request
	(*CCommunity_GetClanEventCrowdInMetadata_Response)(nil),                            // 28: CCommunity_GetClanEventCrowdInMetadata_Response
	(*CCommunity_GetClanCrowdInMetadata_Request)(nil),                                  // 29: CCommunity_GetClanCrowdInMetadata_Request
	(*CCommunity_GetClanCrowdInMetadata_Response)(nil),                                 // 30: CCommunity_GetClanCrowdInMetadata_Response
	(*CCommunity_FetchTranslationFromCrowdIn_Request)(nil),                             // 31: CCommunity_FetchTranslationFromCrowdIn_Request
	(*CCommunity_FetchTranslationFromCrowdIn_Response)(nil),                            // 32: CCommunity_FetchTranslationFromCrowdIn_Response
	(*CCommunity_HideAndReportComment_Request)(nil),                                    // 33: CCommunity_HideAndReportComment_Request
	(*CCommunity_HideAndReportComment_Response)(nil),                                   // 34: CCommunity_HideAndReportComment_Response
	(*CAppPriority)(nil),                                                               // 35: CAppPriority
	(*CCommunity_GetUserPartnerEventNews_Request)(nil),                                 // 36: CCommunity_GetUserPartnerEventNews_Request
	(*CCommunity_GetUserPartnerEventNews_Response)(nil),                                // 37: CCommunity_GetUserPartnerEventNews_Response
	(*CCommunity_GetBestEventsForUser_Request)(nil),                                    // 38: CCommunity_GetBestEventsForUser_Request
	(*CCommunity_PartnerEventResult)(nil),                                              // 39: CCommunity_PartnerEventResult
	(*CCommunity_GetBestEventsForUser_Response)(nil),                                   // 40: CCommunity_GetBestEventsForUser_Response
	(*CCommunity_MarkPartnerEventsForUser_Request)(nil),                                // 41: CCommunity_MarkPartnerEventsForUser_Request
	(*CCommunity_MarkPartnerEventsForUser_Response)(nil),                               // 42: CCommunity_MarkPartnerEventsForUser_Response
	(*CCommunity_GetUserPartnerEventViewStatus_Request)(nil),                           // 43: CCommunity_GetUserPartnerEventViewStatus_Request
	(*CCommunity_GetUserPartnerEventViewStatus_Response)(nil),                          // 44: CCommunity_GetUserPartnerEventViewStatus_Response
	(*CCommunity_PartnerEventsShowMoreForApp_Request)(nil),                             // 45: CCommunity_PartnerEventsShowMoreForApp_Request
	(*CCommunity_PartnerEventsShowMoreForApp_Response)(nil),                            // 46: CCommunity_PartnerEventsShowMoreForApp_Response
	(*CCommunity_PartnerEventsShowLessForApp_Request)(nil),                             // 47: CCommunity_PartnerEventsShowLessForApp_Request
	(*CCommunity_PartnerEventsShowLessForApp_Response)(nil),                            // 48: CCommunity_PartnerEventsShowLessForApp_Response
	(*CCommunity_ClearUserPartnerEventsAppPriorities_Request)(nil),                     // 49: CCommunity_ClearUserPartnerEventsAppPriorities_Request
	(*CCommunity_ClearUserPartnerEventsAppPriorities_Response)(nil),                    // 50: CCommunity_ClearUserPartnerEventsAppPriorities_Response
	(*CCommunity_GetUserPartnerEventsAppPriorities_Request)(nil),                       // 51: CCommunity_GetUserPartnerEventsAppPriorities_Request
	(*CCommunity_PartnerEventsAppPriority)(nil),                                        // 52: CCommunity_PartnerEventsAppPriority
	(*CCommunity_GetUserPartnerEventsAppPriorities_Response)(nil),                      // 53: CCommunity_GetUserPartnerEventsAppPriorities_Response
	(*CCommunity_ClearSinglePartnerEventsAppPriority_Request)(nil),                     // 54: CCommunity_ClearSinglePartnerEventsAppPriority_Request
	(*CCommunity_ClearSinglePartnerEventsAppPriority_Response)(nil),                    // 55: CCommunity_ClearSinglePartnerEventsAppPriority_Response
	(*CCommunity_SetRecommendationBotReviewStatus_Request)(nil),                        // 56: CCommunity_SetRecommendationBotReviewStatus_Request
	(*CCommunity_SetRecommendationBotReviewStatus_Response)(nil),                       // 57: CCommunity_SetRecommendationBotReviewStatus_Response
	(*CCommunity_GetBotReviewScoreForRecommendation_Request)(nil),                      // 58: CCommunity_GetBotReviewScoreForRecommendation_Request
	(*CCommunity_GetBotReviewScoreForRecommendation_Response)(nil),                     // 59: CCommunity_GetBotReviewScoreForRecommendation_Response
	(*CCommunity_GetAppRichPresenceLocalization_Response_Token)(nil),                   // 60: CCommunity_GetAppRichPresenceLocalization_Response.Token
	(*CCommunity_GetAppRichPresenceLocalization_Response_TokenList)(nil),               // 61: CCommunity_GetAppRichPresenceLocalization_Response.TokenList
	(*CCommunity_Comment_Reaction)(nil),                                                // 62: CCommunity_Comment.Reaction
	(*CCommunity_GetAvatarHistory_Response_AvatarData)(nil),                            // 63: CCommunity_GetAvatarHistory_Response.AvatarData
	(*CCommunity_MarkPartnerEventsForUser_Request_PartnerEventMarking)(nil),            // 64: CCommunity_MarkPartnerEventsForUser_Request.PartnerEventMarking
	(*CCommunity_GetUserPartnerEventViewStatus_Response_PartnerEvent)(nil),             // 65: CCommunity_GetUserPartnerEventViewStatus_Response.PartnerEvent
	(*CCommunity_SetRecommendationBotReviewStatus_Request_ReviewLabel)(nil),            // 66: CCommunity_SetRecommendationBotReviewStatus_Request.ReviewLabel
	(*CCommunity_GetBotReviewScoreForRecommendation_Response_BotReviewScoreEntry)(nil), // 67: CCommunity_GetBotReviewScoreForRecommendation_Response.BotReviewScoreEntry
	(*CCDDBAppDetailCommon)(nil),                                                       // 68: CCDDBAppDetailCommon
	(ECommentThreadType)(0),                                                            // 69: ECommentThreadType
	(*CMsgIPAddress)(nil),                                                              // 70: CMsgIPAddress
	(EContentReportReason)(0),                                                          // 71: EContentReportReason
	(EProtoClanEventType)(0),                                                           // 72: EProtoClanEventType
	(*CClanMatchEventByRange)(nil),                                                     // 73: CClanMatchEventByRange
}
var file_steammessages_community_steamclient_proto_depIdxs = []int32{
	68, // 0: CCommunity_GetApps_Response.apps:type_name -> CCDDBAppDetailCommon
	61, // 1: CCommunity_GetAppRichPresenceLocalization_Response.token_lists:type_name -> CCommunity_GetAppRichPresenceLocalization_Response.TokenList
	69, // 2: CCommunity_GetCommentThread_Request.comment_thread_type:type_name -> ECommentThreadType
	70, // 3: CCommunity_Comment.ipaddress:type_name -> CMsgIPAddress
	62, // 4: CCommunity_Comment.reactions:type_name -> CCommunity_Comment.Reaction
	8,  // 5: CCommunity_GetCommentThread_Response.comments:type_name -> CCommunity_Comment
	8,  // 6: CCommunity_GetCommentThread_Response.deleted_comments:type_name -> CCommunity_Comment
	69, // 7: CCommunity_PostCommentToThread_Request.comment_thread_type:type_name -> ECommentThreadType
	69, // 8: CCommunity_DeleteCommentFromThread_Request.comment_thread_type:type_name -> ECommentThreadType
	0,  // 9: CCommunity_GetClanLocGroupImages_Request.group:type_name -> EClanImageGroup
	1,  // 10: CCommunity_ClanLocGroupImage.file_type:type_name -> EClanImageFileType
	0,  // 11: CCommunity_ClanLocGroupImage.group:type_name -> EClanImageGroup
	23, // 12: CCommunity_GetClanLocGroupImages_Response.images:type_name -> CCommunity_ClanLocGroupImage
	63, // 13: CCommunity_GetAvatarHistory_Response.avatars:type_name -> CCommunity_GetAvatarHistory_Response.AvatarData
	71, // 14: CCommunity_HideAndReportComment_Request.report_reason:type_name -> EContentReportReason
	72, // 15: CCommunity_GetUserPartnerEventNews_Request.filter_event_type:type_name -> EProtoClanEventType
	35, // 16: CCommunity_GetUserPartnerEventNews_Request.app_list:type_name -> CAppPriority
	73, // 17: CCommunity_GetUserPartnerEventNews_Response.results:type_name -> CClanMatchEventByRange
	39, // 18: CCommunity_GetBestEventsForUser_Response.results:type_name -> CCommunity_PartnerEventResult
	64, // 19: CCommunity_MarkPartnerEventsForUser_Request.markings:type_name -> CCommunity_MarkPartnerEventsForUser_Request.PartnerEventMarking
	65, // 20: CCommunity_GetUserPartnerEventViewStatus_Response.events:type_name -> CCommunity_GetUserPartnerEventViewStatus_Response.PartnerEvent
	52, // 21: CCommunity_GetUserPartnerEventsAppPriorities_Response.priorities:type_name -> CCommunity_PartnerEventsAppPriority
	66, // 22: CCommunity_SetRecommendationBotReviewStatus_Request.review_labels:type_name -> CCommunity_SetRecommendationBotReviewStatus_Request.ReviewLabel
	67, // 23: CCommunity_GetBotReviewScoreForRecommendation_Response.bot_review_score:type_name -> CCommunity_GetBotReviewScoreForRecommendation_Response.BotReviewScoreEntry
	60, // 24: CCommunity_GetAppRichPresenceLocalization_Response.TokenList.tokens:type_name -> CCommunity_GetAppRichPresenceLocalization_Response.Token
	2,  // 25: CCommunity_MarkPartnerEventsForUser_Request.PartnerEventMarking.display_location:type_name -> EPartnerEventDisplayLocation
	3,  // 26: Community.GetApps:input_type -> CCommunity_GetApps_Request
	5,  // 27: Community.GetAppRichPresenceLocalization:input_type -> CCommunity_GetAppRichPresenceLocalization_Request
	7,  // 28: Community.GetCommentThread:input_type -> CCommunity_GetCommentThread_Request
	10, // 29: Community.PostCommentToThread:input_type -> CCommunity_PostCommentToThread_Request
	12, // 30: Community.DeleteCommentFromThread:input_type -> CCommunity_DeleteCommentFromThread_Request
	14, // 31: Community.RateCommentThread:input_type -> CCommunity_RateCommentThread_Request
	16, // 32: Community.GetCommentThreadRatings:input_type -> CCommunity_GetCommentThreadRatings_Request
	18, // 33: Community.RateClanAnnouncement:input_type -> CCommunity_RateClanAnnouncement_Request
	20, // 34: Community.GetClanAnnouncementVoteForUser:input_type -> CCommunity_GetClanAnnouncementVoteForUser_Request
	22, // 35: Community.GetClanLocGroupImages:input_type -> CCommunity_GetClanLocGroupImages_Request
	25, // 36: Community.GetAvatarHistory:input_type -> CCommunity_GetAvatarHistory_Request
	27, // 37: Community.GetClanEventCrowdInMetadata:input_type -> CCommunity_GetClanEventCrowdInMetadata_Request
	29, // 38: Community.GetClanCrowdInMetadata:input_type -> CCommunity_GetClanCrowdInMetadata_Request
	31, // 39: Community.FetchTranslationFromCrowdIn:input_type -> CCommunity_FetchTranslationFromCrowdIn_Request
	33, // 40: Community.HideAndReportComment:input_type -> CCommunity_HideAndReportComment_Request
	36, // 41: Community.GetUserPartnerEventNews:input_type -> CCommunity_GetUserPartnerEventNews_Request
	38, // 42: Community.GetBestEventsForUser:input_type -> CCommunity_GetBestEventsForUser_Request
	41, // 43: Community.MarkPartnerEventsForUser:input_type -> CCommunity_MarkPartnerEventsForUser_Request
	43, // 44: Community.GetUserPartnerEventViewStatus:input_type -> CCommunity_GetUserPartnerEventViewStatus_Request
	45, // 45: Community.PartnerEventsShowMoreForApp:input_type -> CCommunity_PartnerEventsShowMoreForApp_Request
	47, // 46: Community.PartnerEventsShowLessForApp:input_type -> CCommunity_PartnerEventsShowLessForApp_Request
	49, // 47: Community.ClearUserPartnerEventsAppPriorities:input_type -> CCommunity_ClearUserPartnerEventsAppPriorities_Request
	51, // 48: Community.GetUserPartnerEventsAppPriorities:input_type -> CCommunity_GetUserPartnerEventsAppPriorities_Request
	54, // 49: Community.ClearSinglePartnerEventsAppPriority:input_type -> CCommunity_ClearSinglePartnerEventsAppPriority_Request
	56, // 50: Community.SetRecommendationBotReviewStatus:input_type -> CCommunity_SetRecommendationBotReviewStatus_Request
	58, // 51: Community.GetBotReviewScoreForRecommendation:input_type -> CCommunity_GetBotReviewScoreForRecommendation_Request
	4,  // 52: Community.GetApps:output_type -> CCommunity_GetApps_Response
	6,  // 53: Community.GetAppRichPresenceLocalization:output_type -> CCommunity_GetAppRichPresenceLocalization_Response
	9,  // 54: Community.GetCommentThread:output_type -> CCommunity_GetCommentThread_Response
	11, // 55: Community.PostCommentToThread:output_type -> CCommunity_PostCommentToThread_Response
	13, // 56: Community.DeleteCommentFromThread:output_type -> CCommunity_DeleteCommentFromThread_Response
	15, // 57: Community.RateCommentThread:output_type -> CCommunity_RateCommentThread_Response
	17, // 58: Community.GetCommentThreadRatings:output_type -> CCommunity_GetCommentThreadRatings_Response
	19, // 59: Community.RateClanAnnouncement:output_type -> CCommunity_RateClanAnnouncement_Response
	21, // 60: Community.GetClanAnnouncementVoteForUser:output_type -> CCommunity_GetClanAnnouncementVoteForUser_Response
	24, // 61: Community.GetClanLocGroupImages:output_type -> CCommunity_GetClanLocGroupImages_Response
	26, // 62: Community.GetAvatarHistory:output_type -> CCommunity_GetAvatarHistory_Response
	28, // 63: Community.GetClanEventCrowdInMetadata:output_type -> CCommunity_GetClanEventCrowdInMetadata_Response
	30, // 64: Community.GetClanCrowdInMetadata:output_type -> CCommunity_GetClanCrowdInMetadata_Response
	32, // 65: Community.FetchTranslationFromCrowdIn:output_type -> CCommunity_FetchTranslationFromCrowdIn_Response
	34, // 66: Community.HideAndReportComment:output_type -> CCommunity_HideAndReportComment_Response
	37, // 67: Community.GetUserPartnerEventNews:output_type -> CCommunity_GetUserPartnerEventNews_Response
	40, // 68: Community.GetBestEventsForUser:output_type -> CCommunity_GetBestEventsForUser_Response
	42, // 69: Community.MarkPartnerEventsForUser:output_type -> CCommunity_MarkPartnerEventsForUser_Response
	44, // 70: Community.GetUserPartnerEventViewStatus:output_type -> CCommunity_GetUserPartnerEventViewStatus_Response
	46, // 71: Community.PartnerEventsShowMoreForApp:output_type -> CCommunity_PartnerEventsShowMoreForApp_Response
	48, // 72: Community.PartnerEventsShowLessForApp:output_type -> CCommunity_PartnerEventsShowLessForApp_Response
	50, // 73: Community.ClearUserPartnerEventsAppPriorities:output_type -> CCommunity_ClearUserPartnerEventsAppPriorities_Response
	53, // 74: Community.GetUserPartnerEventsAppPriorities:output_type -> CCommunity_GetUserPartnerEventsAppPriorities_Response
	55, // 75: Community.ClearSinglePartnerEventsAppPriority:output_type -> CCommunity_ClearSinglePartnerEventsAppPriority_Response
	57, // 76: Community.SetRecommendationBotReviewStatus:output_type -> CCommunity_SetRecommendationBotReviewStatus_Response
	59, // 77: Community.GetBotReviewScoreForRecommendation:output_type -> CCommunity_GetBotReviewScoreForRecommendation_Response
	52, // [52:78] is the sub-list for method output_type
	26, // [26:52] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_steammessages_community_steamclient_proto_init() }
func file_steammessages_community_steamclient_proto_init() {
	if File_steammessages_community_steamclient_proto != nil {
		return
	}
	file_steammessages_base_proto_init()
	file_steammessages_unified_base_steamclient_proto_init()
	file_enums_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_steammessages_community_steamclient_proto_rawDesc), len(file_steammessages_community_steamclient_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   65,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_steammessages_community_steamclient_proto_goTypes,
		DependencyIndexes: file_steammessages_community_steamclient_proto_depIdxs,
		EnumInfos:         file_steammessages_community_steamclient_proto_enumTypes,
		MessageInfos:      file_steammessages_community_steamclient_proto_msgTypes,
	}.Build()
	File_steammessages_community_steamclient_proto = out.File
	file_steammessages_community_steamclient_proto_goTypes = nil
	file_steammessages_community_steamclient_proto_depIdxs = nil
}
