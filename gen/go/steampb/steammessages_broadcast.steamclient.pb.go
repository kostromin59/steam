// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v6.32.0
// source: steammessages_broadcast.steamclient.proto

package steampb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EBroadcastWatchLocation int32

const (
	EBroadcastWatchLocation_k_EBroadcastWatchLocation_Invalid            EBroadcastWatchLocation = 0
	EBroadcastWatchLocation_k_EBroadcastWatchLocation_SteamTV_Tab        EBroadcastWatchLocation = 1
	EBroadcastWatchLocation_k_EBroadcastWatchLocation_SteamTV_WatchParty EBroadcastWatchLocation = 2
	EBroadcastWatchLocation_k_EBroadcastWatchLocation_Chat_Tab           EBroadcastWatchLocation = 3
	EBroadcastWatchLocation_k_EBroadcastWatchLocation_Chat_WatchParty    EBroadcastWatchLocation = 4
	EBroadcastWatchLocation_k_EBroadcastWatchLocation_CommunityPage      EBroadcastWatchLocation = 5
	EBroadcastWatchLocation_k_EBroadcastWatchLocation_StoreAppPage       EBroadcastWatchLocation = 6
	EBroadcastWatchLocation_k_EBroadcastWatchLocation_InGame             EBroadcastWatchLocation = 7
	EBroadcastWatchLocation_k_EBroadcastWatchLocation_BigPicture         EBroadcastWatchLocation = 8
	EBroadcastWatchLocation_k_EBroadcastWatchLocation_SalesPage          EBroadcastWatchLocation = 9
	EBroadcastWatchLocation_k_EBroadcastWatchLocation_CuratorPage        EBroadcastWatchLocation = 10
	EBroadcastWatchLocation_k_EBroadcastWatchLocation_DeveloperPage      EBroadcastWatchLocation = 11
	EBroadcastWatchLocation_k_EBroadcastWatchLocation_Chat_Friends       EBroadcastWatchLocation = 12
	EBroadcastWatchLocation_k_EBroadcastWatchLocation_SteamTV_Web        EBroadcastWatchLocation = 13
	EBroadcastWatchLocation_k_EBroadcastWatchLocation_DesktopUI_Overlay  EBroadcastWatchLocation = 14
	EBroadcastWatchLocation_k_EBroadcastWatchLocation_TrailerCarousel    EBroadcastWatchLocation = 15
)

// Enum value maps for EBroadcastWatchLocation.
var (
	EBroadcastWatchLocation_name = map[int32]string{
		0:  "k_EBroadcastWatchLocation_Invalid",
		1:  "k_EBroadcastWatchLocation_SteamTV_Tab",
		2:  "k_EBroadcastWatchLocation_SteamTV_WatchParty",
		3:  "k_EBroadcastWatchLocation_Chat_Tab",
		4:  "k_EBroadcastWatchLocation_Chat_WatchParty",
		5:  "k_EBroadcastWatchLocation_CommunityPage",
		6:  "k_EBroadcastWatchLocation_StoreAppPage",
		7:  "k_EBroadcastWatchLocation_InGame",
		8:  "k_EBroadcastWatchLocation_BigPicture",
		9:  "k_EBroadcastWatchLocation_SalesPage",
		10: "k_EBroadcastWatchLocation_CuratorPage",
		11: "k_EBroadcastWatchLocation_DeveloperPage",
		12: "k_EBroadcastWatchLocation_Chat_Friends",
		13: "k_EBroadcastWatchLocation_SteamTV_Web",
		14: "k_EBroadcastWatchLocation_DesktopUI_Overlay",
		15: "k_EBroadcastWatchLocation_TrailerCarousel",
	}
	EBroadcastWatchLocation_value = map[string]int32{
		"k_EBroadcastWatchLocation_Invalid":            0,
		"k_EBroadcastWatchLocation_SteamTV_Tab":        1,
		"k_EBroadcastWatchLocation_SteamTV_WatchParty": 2,
		"k_EBroadcastWatchLocation_Chat_Tab":           3,
		"k_EBroadcastWatchLocation_Chat_WatchParty":    4,
		"k_EBroadcastWatchLocation_CommunityPage":      5,
		"k_EBroadcastWatchLocation_StoreAppPage":       6,
		"k_EBroadcastWatchLocation_InGame":             7,
		"k_EBroadcastWatchLocation_BigPicture":         8,
		"k_EBroadcastWatchLocation_SalesPage":          9,
		"k_EBroadcastWatchLocation_CuratorPage":        10,
		"k_EBroadcastWatchLocation_DeveloperPage":      11,
		"k_EBroadcastWatchLocation_Chat_Friends":       12,
		"k_EBroadcastWatchLocation_SteamTV_Web":        13,
		"k_EBroadcastWatchLocation_DesktopUI_Overlay":  14,
		"k_EBroadcastWatchLocation_TrailerCarousel":    15,
	}
)

func (x EBroadcastWatchLocation) Enum() *EBroadcastWatchLocation {
	p := new(EBroadcastWatchLocation)
	*p = x
	return p
}

func (x EBroadcastWatchLocation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EBroadcastWatchLocation) Descriptor() protoreflect.EnumDescriptor {
	return file_steammessages_broadcast_steamclient_proto_enumTypes[0].Descriptor()
}

func (EBroadcastWatchLocation) Type() protoreflect.EnumType {
	return &file_steammessages_broadcast_steamclient_proto_enumTypes[0]
}

func (x EBroadcastWatchLocation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EBroadcastWatchLocation) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EBroadcastWatchLocation(num)
	return nil
}

// Deprecated: Use EBroadcastWatchLocation.Descriptor instead.
func (EBroadcastWatchLocation) EnumDescriptor() ([]byte, []int) {
	return file_steammessages_broadcast_steamclient_proto_rawDescGZIP(), []int{0}
}

type EBroadcastChatPermission int32

const (
	EBroadcastChatPermission_k_EBroadcastChatPermissionPublic  EBroadcastChatPermission = 0
	EBroadcastChatPermission_k_EBroadcastChatPermissionOwnsApp EBroadcastChatPermission = 1
)

// Enum value maps for EBroadcastChatPermission.
var (
	EBroadcastChatPermission_name = map[int32]string{
		0: "k_EBroadcastChatPermissionPublic",
		1: "k_EBroadcastChatPermissionOwnsApp",
	}
	EBroadcastChatPermission_value = map[string]int32{
		"k_EBroadcastChatPermissionPublic":  0,
		"k_EBroadcastChatPermissionOwnsApp": 1,
	}
)

func (x EBroadcastChatPermission) Enum() *EBroadcastChatPermission {
	p := new(EBroadcastChatPermission)
	*p = x
	return p
}

func (x EBroadcastChatPermission) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EBroadcastChatPermission) Descriptor() protoreflect.EnumDescriptor {
	return file_steammessages_broadcast_steamclient_proto_enumTypes[1].Descriptor()
}

func (EBroadcastChatPermission) Type() protoreflect.EnumType {
	return &file_steammessages_broadcast_steamclient_proto_enumTypes[1]
}

func (x EBroadcastChatPermission) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EBroadcastChatPermission) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EBroadcastChatPermission(num)
	return nil
}

// Deprecated: Use EBroadcastChatPermission.Descriptor instead.
func (EBroadcastChatPermission) EnumDescriptor() ([]byte, []int) {
	return file_steammessages_broadcast_steamclient_proto_rawDescGZIP(), []int{1}
}

type CBroadcast_WatchBroadcast_Response_EWatchResponse int32

const (
	CBroadcast_WatchBroadcast_Response_k_EWatchResponseReady               CBroadcast_WatchBroadcast_Response_EWatchResponse = 1
	CBroadcast_WatchBroadcast_Response_k_EWatchResponseNotAvailable        CBroadcast_WatchBroadcast_Response_EWatchResponse = 2
	CBroadcast_WatchBroadcast_Response_k_EWatchResponseWaitingForApproval  CBroadcast_WatchBroadcast_Response_EWatchResponse = 3
	CBroadcast_WatchBroadcast_Response_k_EWatchResponseWaitingForStart     CBroadcast_WatchBroadcast_Response_EWatchResponse = 4
	CBroadcast_WatchBroadcast_Response_k_EWatchResponseInvalidSession      CBroadcast_WatchBroadcast_Response_EWatchResponse = 5
	CBroadcast_WatchBroadcast_Response_k_EWatchResponseTooManyBroadcasts   CBroadcast_WatchBroadcast_Response_EWatchResponse = 6
	CBroadcast_WatchBroadcast_Response_k_EWatchResponseWaitingForReconnect CBroadcast_WatchBroadcast_Response_EWatchResponse = 7
	CBroadcast_WatchBroadcast_Response_k_EWatchResponseSystemNotSupported  CBroadcast_WatchBroadcast_Response_EWatchResponse = 8
	CBroadcast_WatchBroadcast_Response_k_EWatchResponseUserRestricted      CBroadcast_WatchBroadcast_Response_EWatchResponse = 9
	CBroadcast_WatchBroadcast_Response_k_EWatchResponseClientOutOfDate     CBroadcast_WatchBroadcast_Response_EWatchResponse = 10
	CBroadcast_WatchBroadcast_Response_k_EWatchResponsePoorUploadQuality   CBroadcast_WatchBroadcast_Response_EWatchResponse = 11
	CBroadcast_WatchBroadcast_Response_k_EWatchResponseMissingSubscription CBroadcast_WatchBroadcast_Response_EWatchResponse = 12
	CBroadcast_WatchBroadcast_Response_k_EWatchResponseTooManyViewers      CBroadcast_WatchBroadcast_Response_EWatchResponse = 13
)

// Enum value maps for CBroadcast_WatchBroadcast_Response_EWatchResponse.
var (
	CBroadcast_WatchBroadcast_Response_EWatchResponse_name = map[int32]string{
		1:  "k_EWatchResponseReady",
		2:  "k_EWatchResponseNotAvailable",
		3:  "k_EWatchResponseWaitingForApproval",
		4:  "k_EWatchResponseWaitingForStart",
		5:  "k_EWatchResponseInvalidSession",
		6:  "k_EWatchResponseTooManyBroadcasts",
		7:  "k_EWatchResponseWaitingForReconnect",
		8:  "k_EWatchResponseSystemNotSupported",
		9:  "k_EWatchResponseUserRestricted",
		10: "k_EWatchResponseClientOutOfDate",
		11: "k_EWatchResponsePoorUploadQuality",
		12: "k_EWatchResponseMissingSubscription",
		13: "k_EWatchResponseTooManyViewers",
	}
	CBroadcast_WatchBroadcast_Response_EWatchResponse_value = map[string]int32{
		"k_EWatchResponseReady":               1,
		"k_EWatchResponseNotAvailable":        2,
		"k_EWatchResponseWaitingForApproval":  3,
		"k_EWatchResponseWaitingForStart":     4,
		"k_EWatchResponseInvalidSession":      5,
		"k_EWatchResponseTooManyBroadcasts":   6,
		"k_EWatchResponseWaitingForReconnect": 7,
		"k_EWatchResponseSystemNotSupported":  8,
		"k_EWatchResponseUserRestricted":      9,
		"k_EWatchResponseClientOutOfDate":     10,
		"k_EWatchResponsePoorUploadQuality":   11,
		"k_EWatchResponseMissingSubscription": 12,
		"k_EWatchResponseTooManyViewers":      13,
	}
)

func (x CBroadcast_WatchBroadcast_Response_EWatchResponse) Enum() *CBroadcast_WatchBroadcast_Response_EWatchResponse {
	p := new(CBroadcast_WatchBroadcast_Response_EWatchResponse)
	*p = x
	return p
}

func (x CBroadcast_WatchBroadcast_Response_EWatchResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CBroadcast_WatchBroadcast_Response_EWatchResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_steammessages_broadcast_steamclient_proto_enumTypes[2].Descriptor()
}

func (CBroadcast_WatchBroadcast_Response_EWatchResponse) Type() protoreflect.EnumType {
	return &file_steammessages_broadcast_steamclient_proto_enumTypes[2]
}

func (x CBroadcast_WatchBroadcast_Response_EWatchResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CBroadcast_WatchBroadcast_Response_EWatchResponse) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CBroadcast_WatchBroadcast_Response_EWatchResponse(num)
	return nil
}

// Deprecated: Use CBroadcast_WatchBroadcast_Response_EWatchResponse.Descriptor instead.
func (CBroadcast_WatchBroadcast_Response_EWatchResponse) EnumDescriptor() ([]byte, []int) {
	return file_steammessages_broadcast_steamclient_proto_rawDescGZIP(), []int{8, 0}
}

type CBroadcast_BroadcastViewerState_Notification_EViewerState int32

const (
	CBroadcast_BroadcastViewerState_Notification_k_EViewerNeedsApproval CBroadcast_BroadcastViewerState_Notification_EViewerState = 1
	CBroadcast_BroadcastViewerState_Notification_k_EViewerWatching      CBroadcast_BroadcastViewerState_Notification_EViewerState = 2
	CBroadcast_BroadcastViewerState_Notification_k_EViewerLeft          CBroadcast_BroadcastViewerState_Notification_EViewerState = 3
)

// Enum value maps for CBroadcast_BroadcastViewerState_Notification_EViewerState.
var (
	CBroadcast_BroadcastViewerState_Notification_EViewerState_name = map[int32]string{
		1: "k_EViewerNeedsApproval",
		2: "k_EViewerWatching",
		3: "k_EViewerLeft",
	}
	CBroadcast_BroadcastViewerState_Notification_EViewerState_value = map[string]int32{
		"k_EViewerNeedsApproval": 1,
		"k_EViewerWatching":      2,
		"k_EViewerLeft":          3,
	}
)

func (x CBroadcast_BroadcastViewerState_Notification_EViewerState) Enum() *CBroadcast_BroadcastViewerState_Notification_EViewerState {
	p := new(CBroadcast_BroadcastViewerState_Notification_EViewerState)
	*p = x
	return p
}

func (x CBroadcast_BroadcastViewerState_Notification_EViewerState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CBroadcast_BroadcastViewerState_Notification_EViewerState) Descriptor() protoreflect.EnumDescriptor {
	return file_steammessages_broadcast_steamclient_proto_enumTypes[3].Descriptor()
}

func (CBroadcast_BroadcastViewerState_Notification_EViewerState) Type() protoreflect.EnumType {
	return &file_steammessages_broadcast_steamclient_proto_enumTypes[3]
}

func (x CBroadcast_BroadcastViewerState_Notification_EViewerState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CBroadcast_BroadcastViewerState_Notification_EViewerState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CBroadcast_BroadcastViewerState_Notification_EViewerState(num)
	return nil
}

// Deprecated: Use CBroadcast_BroadcastViewerState_Notification_EViewerState.Descriptor instead.
func (CBroadcast_BroadcastViewerState_Notification_EViewerState) EnumDescriptor() ([]byte, []int) {
	return file_steammessages_broadcast_steamclient_proto_rawDescGZIP(), []int{64, 0}
}

type CBroadcast_BeginBroadcastSession_Request struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Permission       *int32                 `protobuf:"varint,1,opt,name=permission" json:"permission,omitempty"`
	Gameid           *uint64                `protobuf:"varint,2,opt,name=gameid" json:"gameid,omitempty"`
	ClientInstanceId *uint64                `protobuf:"varint,3,opt,name=client_instance_id,json=clientInstanceId" json:"client_instance_id,omitempty"`
	Title            *string                `protobuf:"bytes,4,opt,name=title" json:"title,omitempty"`
	Cellid           *uint32                `protobuf:"varint,5,opt,name=cellid" json:"cellid,omitempty"`
	RtmpToken        *uint64                `protobuf:"varint,6,opt,name=rtmp_token,json=rtmpToken" json:"rtmp_token,omitempty"`
	ThumbnailUpload  *bool                  `protobuf:"varint,7,opt,name=thumbnail_upload,json=thumbnailUpload" json:"thumbnail_upload,omitempty"`
	Sysid            *uint32                `protobuf:"varint,9,opt,name=sysid" json:"sysid,omitempty"`
	AllowWebrtc      *bool                  `protobuf:"varint,10,opt,name=allow_webrtc,json=allowWebrtc" json:"allow_webrtc,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CBroadcast_BeginBroadcastSession_Request) Reset() {
	*x = CBroadcast_BeginBroadcastSession_Request{}
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CBroadcast_BeginBroadcastSession_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBroadcast_BeginBroadcastSession_Request) ProtoMessage() {}

func (x *CBroadcast_BeginBroadcastSession_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBroadcast_BeginBroadcastSession_Request.ProtoReflect.Descriptor instead.
func (*CBroadcast_BeginBroadcastSession_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_broadcast_steamclient_proto_rawDescGZIP(), []int{0}
}

func (x *CBroadcast_BeginBroadcastSession_Request) GetPermission() int32 {
	if x != nil && x.Permission != nil {
		return *x.Permission
	}
	return 0
}

func (x *CBroadcast_BeginBroadcastSession_Request) GetGameid() uint64 {
	if x != nil && x.Gameid != nil {
		return *x.Gameid
	}
	return 0
}

func (x *CBroadcast_BeginBroadcastSession_Request) GetClientInstanceId() uint64 {
	if x != nil && x.ClientInstanceId != nil {
		return *x.ClientInstanceId
	}
	return 0
}

func (x *CBroadcast_BeginBroadcastSession_Request) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *CBroadcast_BeginBroadcastSession_Request) GetCellid() uint32 {
	if x != nil && x.Cellid != nil {
		return *x.Cellid
	}
	return 0
}

func (x *CBroadcast_BeginBroadcastSession_Request) GetRtmpToken() uint64 {
	if x != nil && x.RtmpToken != nil {
		return *x.RtmpToken
	}
	return 0
}

func (x *CBroadcast_BeginBroadcastSession_Request) GetThumbnailUpload() bool {
	if x != nil && x.ThumbnailUpload != nil {
		return *x.ThumbnailUpload
	}
	return false
}

func (x *CBroadcast_BeginBroadcastSession_Request) GetSysid() uint32 {
	if x != nil && x.Sysid != nil {
		return *x.Sysid
	}
	return 0
}

func (x *CBroadcast_BeginBroadcastSession_Request) GetAllowWebrtc() bool {
	if x != nil && x.AllowWebrtc != nil {
		return *x.AllowWebrtc
	}
	return false
}

type CBroadcast_BeginBroadcastSession_Response struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	BroadcastId              *uint64                `protobuf:"fixed64,1,opt,name=broadcast_id,json=broadcastId" json:"broadcast_id,omitempty"`
	ThumbnailUploadAddress   *string                `protobuf:"bytes,2,opt,name=thumbnail_upload_address,json=thumbnailUploadAddress" json:"thumbnail_upload_address,omitempty"`
	ThumbnailUploadToken     *string                `protobuf:"bytes,3,opt,name=thumbnail_upload_token,json=thumbnailUploadToken" json:"thumbnail_upload_token,omitempty"`
	ThumbnailIntervalSeconds *uint32                `protobuf:"varint,4,opt,name=thumbnail_interval_seconds,json=thumbnailIntervalSeconds" json:"thumbnail_interval_seconds,omitempty"`
	HeartbeatIntervalSeconds *uint32                `protobuf:"varint,5,opt,name=heartbeat_interval_seconds,json=heartbeatIntervalSeconds" json:"heartbeat_interval_seconds,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *CBroadcast_BeginBroadcastSession_Response) Reset() {
	*x = CBroadcast_BeginBroadcastSession_Response{}
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CBroadcast_BeginBroadcastSession_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBroadcast_BeginBroadcastSession_Response) ProtoMessage() {}

func (x *CBroadcast_BeginBroadcastSession_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBroadcast_BeginBroadcastSession_Response.ProtoReflect.Descriptor instead.
func (*CBroadcast_BeginBroadcastSession_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_broadcast_steamclient_proto_rawDescGZIP(), []int{1}
}

func (x *CBroadcast_BeginBroadcastSession_Response) GetBroadcastId() uint64 {
	if x != nil && x.BroadcastId != nil {
		return *x.BroadcastId
	}
	return 0
}

func (x *CBroadcast_BeginBroadcastSession_Response) GetThumbnailUploadAddress() string {
	if x != nil && x.ThumbnailUploadAddress != nil {
		return *x.ThumbnailUploadAddress
	}
	return ""
}

func (x *CBroadcast_BeginBroadcastSession_Response) GetThumbnailUploadToken() string {
	if x != nil && x.ThumbnailUploadToken != nil {
		return *x.ThumbnailUploadToken
	}
	return ""
}

func (x *CBroadcast_BeginBroadcastSession_Response) GetThumbnailIntervalSeconds() uint32 {
	if x != nil && x.ThumbnailIntervalSeconds != nil {
		return *x.ThumbnailIntervalSeconds
	}
	return 0
}

func (x *CBroadcast_BeginBroadcastSession_Response) GetHeartbeatIntervalSeconds() uint32 {
	if x != nil && x.HeartbeatIntervalSeconds != nil {
		return *x.HeartbeatIntervalSeconds
	}
	return 0
}

type CBroadcast_EndBroadcastSession_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BroadcastId   *uint64                `protobuf:"fixed64,1,opt,name=broadcast_id,json=broadcastId" json:"broadcast_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CBroadcast_EndBroadcastSession_Request) Reset() {
	*x = CBroadcast_EndBroadcastSession_Request{}
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CBroadcast_EndBroadcastSession_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBroadcast_EndBroadcastSession_Request) ProtoMessage() {}

func (x *CBroadcast_EndBroadcastSession_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBroadcast_EndBroadcastSession_Request.ProtoReflect.Descriptor instead.
func (*CBroadcast_EndBroadcastSession_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_broadcast_steamclient_proto_rawDescGZIP(), []int{2}
}

func (x *CBroadcast_EndBroadcastSession_Request) GetBroadcastId() uint64 {
	if x != nil && x.BroadcastId != nil {
		return *x.BroadcastId
	}
	return 0
}

type CBroadcast_EndBroadcastSession_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CBroadcast_EndBroadcastSession_Response) Reset() {
	*x = CBroadcast_EndBroadcastSession_Response{}
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CBroadcast_EndBroadcastSession_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBroadcast_EndBroadcastSession_Response) ProtoMessage() {}

func (x *CBroadcast_EndBroadcastSession_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBroadcast_EndBroadcastSession_Response.ProtoReflect.Descriptor instead.
func (*CBroadcast_EndBroadcastSession_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_broadcast_steamclient_proto_rawDescGZIP(), []int{3}
}

type CBroadcast_StartBroadcastUpload_Request struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	BroadcastId     *uint64                `protobuf:"fixed64,1,opt,name=broadcast_id,json=broadcastId" json:"broadcast_id,omitempty"`
	Cellid          *uint32                `protobuf:"varint,2,opt,name=cellid" json:"cellid,omitempty"`
	AsRtmp          *bool                  `protobuf:"varint,3,opt,name=as_rtmp,json=asRtmp" json:"as_rtmp,omitempty"`
	DelaySeconds    *uint32                `protobuf:"varint,4,opt,name=delay_seconds,json=delaySeconds" json:"delay_seconds,omitempty"`
	RtmpToken       *uint64                `protobuf:"varint,5,opt,name=rtmp_token,json=rtmpToken,def=0" json:"rtmp_token,omitempty"`
	UploadIpAddress *uint32                `protobuf:"varint,6,opt,name=upload_ip_address,json=uploadIpAddress" json:"upload_ip_address,omitempty"`
	IsReplay        *bool                  `protobuf:"varint,7,opt,name=is_replay,json=isReplay" json:"is_replay,omitempty"`
	Sysid           *uint32                `protobuf:"varint,8,opt,name=sysid" json:"sysid,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

// Default values for CBroadcast_StartBroadcastUpload_Request fields.
const (
	Default_CBroadcast_StartBroadcastUpload_Request_RtmpToken = uint64(0)
)

func (x *CBroadcast_StartBroadcastUpload_Request) Reset() {
	*x = CBroadcast_StartBroadcastUpload_Request{}
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CBroadcast_StartBroadcastUpload_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBroadcast_StartBroadcastUpload_Request) ProtoMessage() {}

func (x *CBroadcast_StartBroadcastUpload_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBroadcast_StartBroadcastUpload_Request.ProtoReflect.Descriptor instead.
func (*CBroadcast_StartBroadcastUpload_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_broadcast_steamclient_proto_rawDescGZIP(), []int{4}
}

func (x *CBroadcast_StartBroadcastUpload_Request) GetBroadcastId() uint64 {
	if x != nil && x.BroadcastId != nil {
		return *x.BroadcastId
	}
	return 0
}

func (x *CBroadcast_StartBroadcastUpload_Request) GetCellid() uint32 {
	if x != nil && x.Cellid != nil {
		return *x.Cellid
	}
	return 0
}

func (x *CBroadcast_StartBroadcastUpload_Request) GetAsRtmp() bool {
	if x != nil && x.AsRtmp != nil {
		return *x.AsRtmp
	}
	return false
}

func (x *CBroadcast_StartBroadcastUpload_Request) GetDelaySeconds() uint32 {
	if x != nil && x.DelaySeconds != nil {
		return *x.DelaySeconds
	}
	return 0
}

func (x *CBroadcast_StartBroadcastUpload_Request) GetRtmpToken() uint64 {
	if x != nil && x.RtmpToken != nil {
		return *x.RtmpToken
	}
	return Default_CBroadcast_StartBroadcastUpload_Request_RtmpToken
}

func (x *CBroadcast_StartBroadcastUpload_Request) GetUploadIpAddress() uint32 {
	if x != nil && x.UploadIpAddress != nil {
		return *x.UploadIpAddress
	}
	return 0
}

func (x *CBroadcast_StartBroadcastUpload_Request) GetIsReplay() bool {
	if x != nil && x.IsReplay != nil {
		return *x.IsReplay
	}
	return false
}

func (x *CBroadcast_StartBroadcastUpload_Request) GetSysid() uint32 {
	if x != nil && x.Sysid != nil {
		return *x.Sysid
	}
	return 0
}

type CBroadcast_StartBroadcastUpload_Response struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	UploadToken       *string                `protobuf:"bytes,1,opt,name=upload_token,json=uploadToken" json:"upload_token,omitempty"`
	UploadAddress     *string                `protobuf:"bytes,2,opt,name=upload_address,json=uploadAddress" json:"upload_address,omitempty"`
	BroadcastUploadId *uint64                `protobuf:"fixed64,3,opt,name=broadcast_upload_id,json=broadcastUploadId" json:"broadcast_upload_id,omitempty"`
	EnableReplay      *bool                  `protobuf:"varint,6,opt,name=enable_replay,json=enableReplay" json:"enable_replay,omitempty"`
	HttpAddress       *string                `protobuf:"bytes,7,opt,name=http_address,json=httpAddress" json:"http_address,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *CBroadcast_StartBroadcastUpload_Response) Reset() {
	*x = CBroadcast_StartBroadcastUpload_Response{}
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CBroadcast_StartBroadcastUpload_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBroadcast_StartBroadcastUpload_Response) ProtoMessage() {}

func (x *CBroadcast_StartBroadcastUpload_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBroadcast_StartBroadcastUpload_Response.ProtoReflect.Descriptor instead.
func (*CBroadcast_StartBroadcastUpload_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_broadcast_steamclient_proto_rawDescGZIP(), []int{5}
}

func (x *CBroadcast_StartBroadcastUpload_Response) GetUploadToken() string {
	if x != nil && x.UploadToken != nil {
		return *x.UploadToken
	}
	return ""
}

func (x *CBroadcast_StartBroadcastUpload_Response) GetUploadAddress() string {
	if x != nil && x.UploadAddress != nil {
		return *x.UploadAddress
	}
	return ""
}

func (x *CBroadcast_StartBroadcastUpload_Response) GetBroadcastUploadId() uint64 {
	if x != nil && x.BroadcastUploadId != nil {
		return *x.BroadcastUploadId
	}
	return 0
}

func (x *CBroadcast_StartBroadcastUpload_Response) GetEnableReplay() bool {
	if x != nil && x.EnableReplay != nil {
		return *x.EnableReplay
	}
	return false
}

func (x *CBroadcast_StartBroadcastUpload_Response) GetHttpAddress() string {
	if x != nil && x.HttpAddress != nil {
		return *x.HttpAddress
	}
	return ""
}

type CBroadcast_NotifyBroadcastUploadStop_Notification struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	BroadcastUploadId *uint64                `protobuf:"fixed64,1,opt,name=broadcast_upload_id,json=broadcastUploadId" json:"broadcast_upload_id,omitempty"`
	UploadResult      *uint32                `protobuf:"varint,2,opt,name=upload_result,json=uploadResult" json:"upload_result,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *CBroadcast_NotifyBroadcastUploadStop_Notification) Reset() {
	*x = CBroadcast_NotifyBroadcastUploadStop_Notification{}
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CBroadcast_NotifyBroadcastUploadStop_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBroadcast_NotifyBroadcastUploadStop_Notification) ProtoMessage() {}

func (x *CBroadcast_NotifyBroadcastUploadStop_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBroadcast_NotifyBroadcastUploadStop_Notification.ProtoReflect.Descriptor instead.
func (*CBroadcast_NotifyBroadcastUploadStop_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_broadcast_steamclient_proto_rawDescGZIP(), []int{6}
}

func (x *CBroadcast_NotifyBroadcastUploadStop_Notification) GetBroadcastUploadId() uint64 {
	if x != nil && x.BroadcastUploadId != nil {
		return *x.BroadcastUploadId
	}
	return 0
}

func (x *CBroadcast_NotifyBroadcastUploadStop_Notification) GetUploadResult() uint32 {
	if x != nil && x.UploadResult != nil {
		return *x.UploadResult
	}
	return 0
}

type CBroadcast_WatchBroadcast_Request struct {
	state               protoimpl.MessageState   `protogen:"open.v1"`
	Steamid             *uint64                  `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	ExistingBroadcastId *uint64                  `protobuf:"fixed64,2,opt,name=existing_broadcast_id,json=existingBroadcastId" json:"existing_broadcast_id,omitempty"`
	ViewerToken         *uint64                  `protobuf:"fixed64,3,opt,name=viewer_token,json=viewerToken" json:"viewer_token,omitempty"`
	ClientCell          *uint32                  `protobuf:"varint,5,opt,name=client_cell,json=clientCell" json:"client_cell,omitempty"`
	WatchLocation       *EBroadcastWatchLocation `protobuf:"varint,6,opt,name=watch_location,json=watchLocation,enum=EBroadcastWatchLocation,def=0" json:"watch_location,omitempty"`
	IsWebrtc            *bool                    `protobuf:"varint,7,opt,name=is_webrtc,json=isWebrtc" json:"is_webrtc,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

// Default values for CBroadcast_WatchBroadcast_Request fields.
const (
	Default_CBroadcast_WatchBroadcast_Request_WatchLocation = EBroadcastWatchLocation_k_EBroadcastWatchLocation_Invalid
)

func (x *CBroadcast_WatchBroadcast_Request) Reset() {
	*x = CBroadcast_WatchBroadcast_Request{}
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CBroadcast_WatchBroadcast_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBroadcast_WatchBroadcast_Request) ProtoMessage() {}

func (x *CBroadcast_WatchBroadcast_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBroadcast_WatchBroadcast_Request.ProtoReflect.Descriptor instead.
func (*CBroadcast_WatchBroadcast_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_broadcast_steamclient_proto_rawDescGZIP(), []int{7}
}

func (x *CBroadcast_WatchBroadcast_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CBroadcast_WatchBroadcast_Request) GetExistingBroadcastId() uint64 {
	if x != nil && x.ExistingBroadcastId != nil {
		return *x.ExistingBroadcastId
	}
	return 0
}

func (x *CBroadcast_WatchBroadcast_Request) GetViewerToken() uint64 {
	if x != nil && x.ViewerToken != nil {
		return *x.ViewerToken
	}
	return 0
}

func (x *CBroadcast_WatchBroadcast_Request) GetClientCell() uint32 {
	if x != nil && x.ClientCell != nil {
		return *x.ClientCell
	}
	return 0
}

func (x *CBroadcast_WatchBroadcast_Request) GetWatchLocation() EBroadcastWatchLocation {
	if x != nil && x.WatchLocation != nil {
		return *x.WatchLocation
	}
	return Default_CBroadcast_WatchBroadcast_Request_WatchLocation
}

func (x *CBroadcast_WatchBroadcast_Request) GetIsWebrtc() bool {
	if x != nil && x.IsWebrtc != nil {
		return *x.IsWebrtc
	}
	return false
}

type CBroadcast_WatchBroadcast_Response struct {
	state                protoimpl.MessageState                             `protogen:"open.v1"`
	Response             *CBroadcast_WatchBroadcast_Response_EWatchResponse `protobuf:"varint,1,opt,name=response,enum=CBroadcast_WatchBroadcast_Response_EWatchResponse,def=1" json:"response,omitempty"`
	MpdUrl               *string                                            `protobuf:"bytes,2,opt,name=mpd_url,json=mpdUrl" json:"mpd_url,omitempty"`
	BroadcastId          *uint64                                            `protobuf:"fixed64,3,opt,name=broadcast_id,json=broadcastId" json:"broadcast_id,omitempty"`
	Gameid               *uint64                                            `protobuf:"varint,4,opt,name=gameid" json:"gameid,omitempty"`
	Title                *string                                            `protobuf:"bytes,5,opt,name=title" json:"title,omitempty"`
	NumViewers           *uint32                                            `protobuf:"varint,6,opt,name=num_viewers,json=numViewers" json:"num_viewers,omitempty"`
	Permission           *int32                                             `protobuf:"varint,7,opt,name=permission" json:"permission,omitempty"`
	IsRtmp               *bool                                              `protobuf:"varint,8,opt,name=is_rtmp,json=isRtmp" json:"is_rtmp,omitempty"`
	SecondsDelay         *int32                                             `protobuf:"varint,9,opt,name=seconds_delay,json=secondsDelay" json:"seconds_delay,omitempty"`
	ViewerToken          *uint64                                            `protobuf:"fixed64,10,opt,name=viewer_token,json=viewerToken" json:"viewer_token,omitempty"`
	HlsM3U8MasterUrl     *string                                            `protobuf:"bytes,11,opt,name=hls_m3u8_master_url,json=hlsM3u8MasterUrl" json:"hls_m3u8_master_url,omitempty"`
	HeartbeatInterval    *int32                                             `protobuf:"varint,12,opt,name=heartbeat_interval,json=heartbeatInterval" json:"heartbeat_interval,omitempty"`
	ThumbnailUrl         *string                                            `protobuf:"bytes,13,opt,name=thumbnail_url,json=thumbnailUrl" json:"thumbnail_url,omitempty"`
	IsWebrtc             *bool                                              `protobuf:"varint,14,opt,name=is_webrtc,json=isWebrtc" json:"is_webrtc,omitempty"`
	WebrtcSessionId      *uint64                                            `protobuf:"fixed64,15,opt,name=webrtc_session_id,json=webrtcSessionId" json:"webrtc_session_id,omitempty"`
	WebrtcOfferSdp       *string                                            `protobuf:"bytes,16,opt,name=webrtc_offer_sdp,json=webrtcOfferSdp" json:"webrtc_offer_sdp,omitempty"`
	WebrtcTurnServer     *string                                            `protobuf:"bytes,17,opt,name=webrtc_turn_server,json=webrtcTurnServer" json:"webrtc_turn_server,omitempty"`
	IsReplay             *bool                                              `protobuf:"varint,18,opt,name=is_replay,json=isReplay" json:"is_replay,omitempty"`
	Duration             *int32                                             `protobuf:"varint,19,opt,name=duration" json:"duration,omitempty"`
	CdnAuthUrlParameters *string                                            `protobuf:"bytes,20,opt,name=cdn_auth_url_parameters,json=cdnAuthUrlParameters" json:"cdn_auth_url_parameters,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

// Default values for CBroadcast_WatchBroadcast_Response fields.
const (
	Default_CBroadcast_WatchBroadcast_Response_Response = CBroadcast_WatchBroadcast_Response_k_EWatchResponseReady
)

func (x *CBroadcast_WatchBroadcast_Response) Reset() {
	*x = CBroadcast_WatchBroadcast_Response{}
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CBroadcast_WatchBroadcast_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBroadcast_WatchBroadcast_Response) ProtoMessage() {}

func (x *CBroadcast_WatchBroadcast_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBroadcast_WatchBroadcast_Response.ProtoReflect.Descriptor instead.
func (*CBroadcast_WatchBroadcast_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_broadcast_steamclient_proto_rawDescGZIP(), []int{8}
}

func (x *CBroadcast_WatchBroadcast_Response) GetResponse() CBroadcast_WatchBroadcast_Response_EWatchResponse {
	if x != nil && x.Response != nil {
		return *x.Response
	}
	return Default_CBroadcast_WatchBroadcast_Response_Response
}

func (x *CBroadcast_WatchBroadcast_Response) GetMpdUrl() string {
	if x != nil && x.MpdUrl != nil {
		return *x.MpdUrl
	}
	return ""
}

func (x *CBroadcast_WatchBroadcast_Response) GetBroadcastId() uint64 {
	if x != nil && x.BroadcastId != nil {
		return *x.BroadcastId
	}
	return 0
}

func (x *CBroadcast_WatchBroadcast_Response) GetGameid() uint64 {
	if x != nil && x.Gameid != nil {
		return *x.Gameid
	}
	return 0
}

func (x *CBroadcast_WatchBroadcast_Response) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *CBroadcast_WatchBroadcast_Response) GetNumViewers() uint32 {
	if x != nil && x.NumViewers != nil {
		return *x.NumViewers
	}
	return 0
}

func (x *CBroadcast_WatchBroadcast_Response) GetPermission() int32 {
	if x != nil && x.Permission != nil {
		return *x.Permission
	}
	return 0
}

func (x *CBroadcast_WatchBroadcast_Response) GetIsRtmp() bool {
	if x != nil && x.IsRtmp != nil {
		return *x.IsRtmp
	}
	return false
}

func (x *CBroadcast_WatchBroadcast_Response) GetSecondsDelay() int32 {
	if x != nil && x.SecondsDelay != nil {
		return *x.SecondsDelay
	}
	return 0
}

func (x *CBroadcast_WatchBroadcast_Response) GetViewerToken() uint64 {
	if x != nil && x.ViewerToken != nil {
		return *x.ViewerToken
	}
	return 0
}

func (x *CBroadcast_WatchBroadcast_Response) GetHlsM3U8MasterUrl() string {
	if x != nil && x.HlsM3U8MasterUrl != nil {
		return *x.HlsM3U8MasterUrl
	}
	return ""
}

func (x *CBroadcast_WatchBroadcast_Response) GetHeartbeatInterval() int32 {
	if x != nil && x.HeartbeatInterval != nil {
		return *x.HeartbeatInterval
	}
	return 0
}

func (x *CBroadcast_WatchBroadcast_Response) GetThumbnailUrl() string {
	if x != nil && x.ThumbnailUrl != nil {
		return *x.ThumbnailUrl
	}
	return ""
}

func (x *CBroadcast_WatchBroadcast_Response) GetIsWebrtc() bool {
	if x != nil && x.IsWebrtc != nil {
		return *x.IsWebrtc
	}
	return false
}

func (x *CBroadcast_WatchBroadcast_Response) GetWebrtcSessionId() uint64 {
	if x != nil && x.WebrtcSessionId != nil {
		return *x.WebrtcSessionId
	}
	return 0
}

func (x *CBroadcast_WatchBroadcast_Response) GetWebrtcOfferSdp() string {
	if x != nil && x.WebrtcOfferSdp != nil {
		return *x.WebrtcOfferSdp
	}
	return ""
}

func (x *CBroadcast_WatchBroadcast_Response) GetWebrtcTurnServer() string {
	if x != nil && x.WebrtcTurnServer != nil {
		return *x.WebrtcTurnServer
	}
	return ""
}

func (x *CBroadcast_WatchBroadcast_Response) GetIsReplay() bool {
	if x != nil && x.IsReplay != nil {
		return *x.IsReplay
	}
	return false
}

func (x *CBroadcast_WatchBroadcast_Response) GetDuration() int32 {
	if x != nil && x.Duration != nil {
		return *x.Duration
	}
	return 0
}

func (x *CBroadcast_WatchBroadcast_Response) GetCdnAuthUrlParameters() string {
	if x != nil && x.CdnAuthUrlParameters != nil {
		return *x.CdnAuthUrlParameters
	}
	return ""
}

type CBroadcast_HeartbeatBroadcast_Notification struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Steamid        *uint64                `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	BroadcastId    *uint64                `protobuf:"fixed64,2,opt,name=broadcast_id,json=broadcastId" json:"broadcast_id,omitempty"`
	ViewerToken    *uint64                `protobuf:"fixed64,3,opt,name=viewer_token,json=viewerToken" json:"viewer_token,omitempty"`
	Representation *uint32                `protobuf:"varint,4,opt,name=representation" json:"representation,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CBroadcast_HeartbeatBroadcast_Notification) Reset() {
	*x = CBroadcast_HeartbeatBroadcast_Notification{}
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CBroadcast_HeartbeatBroadcast_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBroadcast_HeartbeatBroadcast_Notification) ProtoMessage() {}

func (x *CBroadcast_HeartbeatBroadcast_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBroadcast_HeartbeatBroadcast_Notification.ProtoReflect.Descriptor instead.
func (*CBroadcast_HeartbeatBroadcast_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_broadcast_steamclient_proto_rawDescGZIP(), []int{9}
}

func (x *CBroadcast_HeartbeatBroadcast_Notification) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CBroadcast_HeartbeatBroadcast_Notification) GetBroadcastId() uint64 {
	if x != nil && x.BroadcastId != nil {
		return *x.BroadcastId
	}
	return 0
}

func (x *CBroadcast_HeartbeatBroadcast_Notification) GetViewerToken() uint64 {
	if x != nil && x.ViewerToken != nil {
		return *x.ViewerToken
	}
	return 0
}

func (x *CBroadcast_HeartbeatBroadcast_Notification) GetRepresentation() uint32 {
	if x != nil && x.Representation != nil {
		return *x.Representation
	}
	return 0
}

type CBroadcast_StopWatchingBroadcast_Notification struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Steamid       *uint64                `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	BroadcastId   *uint64                `protobuf:"fixed64,2,opt,name=broadcast_id,json=broadcastId" json:"broadcast_id,omitempty"`
	ViewerToken   *uint64                `protobuf:"fixed64,3,opt,name=viewer_token,json=viewerToken" json:"viewer_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CBroadcast_StopWatchingBroadcast_Notification) Reset() {
	*x = CBroadcast_StopWatchingBroadcast_Notification{}
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CBroadcast_StopWatchingBroadcast_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBroadcast_StopWatchingBroadcast_Notification) ProtoMessage() {}

func (x *CBroadcast_StopWatchingBroadcast_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBroadcast_StopWatchingBroadcast_Notification.ProtoReflect.Descriptor instead.
func (*CBroadcast_StopWatchingBroadcast_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_broadcast_steamclient_proto_rawDescGZIP(), []int{10}
}

func (x *CBroadcast_StopWatchingBroadcast_Notification) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CBroadcast_StopWatchingBroadcast_Notification) GetBroadcastId() uint64 {
	if x != nil && x.BroadcastId != nil {
		return *x.BroadcastId
	}
	return 0
}

func (x *CBroadcast_StopWatchingBroadcast_Notification) GetViewerToken() uint64 {
	if x != nil && x.ViewerToken != nil {
		return *x.ViewerToken
	}
	return 0
}

type CBroadcast_GetBroadcastStatus_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Steamid       *uint64                `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	BroadcastId   *uint64                `protobuf:"fixed64,2,opt,name=broadcast_id,json=broadcastId" json:"broadcast_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CBroadcast_GetBroadcastStatus_Request) Reset() {
	*x = CBroadcast_GetBroadcastStatus_Request{}
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CBroadcast_GetBroadcastStatus_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBroadcast_GetBroadcastStatus_Request) ProtoMessage() {}

func (x *CBroadcast_GetBroadcastStatus_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBroadcast_GetBroadcastStatus_Request.ProtoReflect.Descriptor instead.
func (*CBroadcast_GetBroadcastStatus_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_broadcast_steamclient_proto_rawDescGZIP(), []int{11}
}

func (x *CBroadcast_GetBroadcastStatus_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CBroadcast_GetBroadcastStatus_Request) GetBroadcastId() uint64 {
	if x != nil && x.BroadcastId != nil {
		return *x.BroadcastId
	}
	return 0
}

type CBroadcast_GetBroadcastStatus_Response struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Gameid             *uint64                `protobuf:"varint,1,opt,name=gameid" json:"gameid,omitempty"`
	Title              *string                `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	NumViewers         *uint32                `protobuf:"varint,3,opt,name=num_viewers,json=numViewers" json:"num_viewers,omitempty"`
	Permission         *int32                 `protobuf:"varint,4,opt,name=permission" json:"permission,omitempty"`
	IsRtmp             *bool                  `protobuf:"varint,5,opt,name=is_rtmp,json=isRtmp" json:"is_rtmp,omitempty"`
	SecondsDelay       *int32                 `protobuf:"varint,6,opt,name=seconds_delay,json=secondsDelay" json:"seconds_delay,omitempty"`
	IsPublisher        *bool                  `protobuf:"varint,7,opt,name=is_publisher,json=isPublisher" json:"is_publisher,omitempty"`
	ThumbnailUrl       *string                `protobuf:"bytes,8,opt,name=thumbnail_url,json=thumbnailUrl" json:"thumbnail_url,omitempty"`
	UpdateInterval     *int32                 `protobuf:"varint,9,opt,name=update_interval,json=updateInterval" json:"update_interval,omitempty"`
	IsUploading        *bool                  `protobuf:"varint,10,opt,name=is_uploading,json=isUploading" json:"is_uploading,omitempty"`
	Duration           *uint32                `protobuf:"varint,11,opt,name=duration" json:"duration,omitempty"`
	IsReplay           *bool                  `protobuf:"varint,12,opt,name=is_replay,json=isReplay" json:"is_replay,omitempty"`
	IsCapturingVod     *bool                  `protobuf:"varint,13,opt,name=is_capturing_vod,json=isCapturingVod" json:"is_capturing_vod,omitempty"`
	IsStoreWhitelisted *bool                  `protobuf:"varint,14,opt,name=is_store_whitelisted,json=isStoreWhitelisted" json:"is_store_whitelisted,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *CBroadcast_GetBroadcastStatus_Response) Reset() {
	*x = CBroadcast_GetBroadcastStatus_Response{}
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CBroadcast_GetBroadcastStatus_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBroadcast_GetBroadcastStatus_Response) ProtoMessage() {}

func (x *CBroadcast_GetBroadcastStatus_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBroadcast_GetBroadcastStatus_Response.ProtoReflect.Descriptor instead.
func (*CBroadcast_GetBroadcastStatus_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_broadcast_steamclient_proto_rawDescGZIP(), []int{12}
}

func (x *CBroadcast_GetBroadcastStatus_Response) GetGameid() uint64 {
	if x != nil && x.Gameid != nil {
		return *x.Gameid
	}
	return 0
}

func (x *CBroadcast_GetBroadcastStatus_Response) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *CBroadcast_GetBroadcastStatus_Response) GetNumViewers() uint32 {
	if x != nil && x.NumViewers != nil {
		return *x.NumViewers
	}
	return 0
}

func (x *CBroadcast_GetBroadcastStatus_Response) GetPermission() int32 {
	if x != nil && x.Permission != nil {
		return *x.Permission
	}
	return 0
}

func (x *CBroadcast_GetBroadcastStatus_Response) GetIsRtmp() bool {
	if x != nil && x.IsRtmp != nil {
		return *x.IsRtmp
	}
	return false
}

func (x *CBroadcast_GetBroadcastStatus_Response) GetSecondsDelay() int32 {
	if x != nil && x.SecondsDelay != nil {
		return *x.SecondsDelay
	}
	return 0
}

func (x *CBroadcast_GetBroadcastStatus_Response) GetIsPublisher() bool {
	if x != nil && x.IsPublisher != nil {
		return *x.IsPublisher
	}
	return false
}

func (x *CBroadcast_GetBroadcastStatus_Response) GetThumbnailUrl() string {
	if x != nil && x.ThumbnailUrl != nil {
		return *x.ThumbnailUrl
	}
	return ""
}

func (x *CBroadcast_GetBroadcastStatus_Response) GetUpdateInterval() int32 {
	if x != nil && x.UpdateInterval != nil {
		return *x.UpdateInterval
	}
	return 0
}

func (x *CBroadcast_GetBroadcastStatus_Response) GetIsUploading() bool {
	if x != nil && x.IsUploading != nil {
		return *x.IsUploading
	}
	return false
}

func (x *CBroadcast_GetBroadcastStatus_Response) GetDuration() uint32 {
	if x != nil && x.Duration != nil {
		return *x.Duration
	}
	return 0
}

func (x *CBroadcast_GetBroadcastStatus_Response) GetIsReplay() bool {
	if x != nil && x.IsReplay != nil {
		return *x.IsReplay
	}
	return false
}

func (x *CBroadcast_GetBroadcastStatus_Response) GetIsCapturingVod() bool {
	if x != nil && x.IsCapturingVod != nil {
		return *x.IsCapturingVod
	}
	return false
}

func (x *CBroadcast_GetBroadcastStatus_Response) GetIsStoreWhitelisted() bool {
	if x != nil && x.IsStoreWhitelisted != nil {
		return *x.IsStoreWhitelisted
	}
	return false
}

type CBroadcast_GetBroadcastThumbnail_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Steamid       *uint64                `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	BroadcastId   *uint64                `protobuf:"fixed64,2,opt,name=broadcast_id,json=broadcastId" json:"broadcast_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CBroadcast_GetBroadcastThumbnail_Request) Reset() {
	*x = CBroadcast_GetBroadcastThumbnail_Request{}
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CBroadcast_GetBroadcastThumbnail_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBroadcast_GetBroadcastThumbnail_Request) ProtoMessage() {}

func (x *CBroadcast_GetBroadcastThumbnail_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBroadcast_GetBroadcastThumbnail_Request.ProtoReflect.Descriptor instead.
func (*CBroadcast_GetBroadcastThumbnail_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_broadcast_steamclient_proto_rawDescGZIP(), []int{13}
}

func (x *CBroadcast_GetBroadcastThumbnail_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CBroadcast_GetBroadcastThumbnail_Request) GetBroadcastId() uint64 {
	if x != nil && x.BroadcastId != nil {
		return *x.BroadcastId
	}
	return 0
}

type CBroadcast_GetBroadcastThumbnail_Response struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	ThumbnailUrl   *string                `protobuf:"bytes,1,opt,name=thumbnail_url,json=thumbnailUrl" json:"thumbnail_url,omitempty"`
	UpdateInterval *int32                 `protobuf:"varint,2,opt,name=update_interval,json=updateInterval" json:"update_interval,omitempty"`
	NumViewers     *int32                 `protobuf:"varint,3,opt,name=num_viewers,json=numViewers" json:"num_viewers,omitempty"`
	Duration       *int32                 `protobuf:"varint,4,opt,name=duration" json:"duration,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CBroadcast_GetBroadcastThumbnail_Response) Reset() {
	*x = CBroadcast_GetBroadcastThumbnail_Response{}
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CBroadcast_GetBroadcastThumbnail_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBroadcast_GetBroadcastThumbnail_Response) ProtoMessage() {}

func (x *CBroadcast_GetBroadcastThumbnail_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBroadcast_GetBroadcastThumbnail_Response.ProtoReflect.Descriptor instead.
func (*CBroadcast_GetBroadcastThumbnail_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_broadcast_steamclient_proto_rawDescGZIP(), []int{14}
}

func (x *CBroadcast_GetBroadcastThumbnail_Response) GetThumbnailUrl() string {
	if x != nil && x.ThumbnailUrl != nil {
		return *x.ThumbnailUrl
	}
	return ""
}

func (x *CBroadcast_GetBroadcastThumbnail_Response) GetUpdateInterval() int32 {
	if x != nil && x.UpdateInterval != nil {
		return *x.UpdateInterval
	}
	return 0
}

func (x *CBroadcast_GetBroadcastThumbnail_Response) GetNumViewers() int32 {
	if x != nil && x.NumViewers != nil {
		return *x.NumViewers
	}
	return 0
}

func (x *CBroadcast_GetBroadcastThumbnail_Response) GetDuration() int32 {
	if x != nil && x.Duration != nil {
		return *x.Duration
	}
	return 0
}

type CBroadcast_InviteToBroadcast_Request struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Steamid          *uint64                `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	ApprovalResponse *bool                  `protobuf:"varint,2,opt,name=approval_response,json=approvalResponse" json:"approval_response,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CBroadcast_InviteToBroadcast_Request) Reset() {
	*x = CBroadcast_InviteToBroadcast_Request{}
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CBroadcast_InviteToBroadcast_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBroadcast_InviteToBroadcast_Request) ProtoMessage() {}

func (x *CBroadcast_InviteToBroadcast_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBroadcast_InviteToBroadcast_Request.ProtoReflect.Descriptor instead.
func (*CBroadcast_InviteToBroadcast_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_broadcast_steamclient_proto_rawDescGZIP(), []int{15}
}

func (x *CBroadcast_InviteToBroadcast_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CBroadcast_InviteToBroadcast_Request) GetApprovalResponse() bool {
	if x != nil && x.ApprovalResponse != nil {
		return *x.ApprovalResponse
	}
	return false
}

type CBroadcast_InviteToBroadcast_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       *bool                  `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CBroadcast_InviteToBroadcast_Response) Reset() {
	*x = CBroadcast_InviteToBroadcast_Response{}
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CBroadcast_InviteToBroadcast_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBroadcast_InviteToBroadcast_Response) ProtoMessage() {}

func (x *CBroadcast_InviteToBroadcast_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBroadcast_InviteToBroadcast_Response.ProtoReflect.Descriptor instead.
func (*CBroadcast_InviteToBroadcast_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_broadcast_steamclient_proto_rawDescGZIP(), []int{16}
}

func (x *CBroadcast_InviteToBroadcast_Response) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

type CBroadcast_SendBroadcastStateToServer_Request struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Permission     *int32                 `protobuf:"varint,1,opt,name=permission" json:"permission,omitempty"`
	Gameid         *uint64                `protobuf:"varint,2,opt,name=gameid" json:"gameid,omitempty"`
	Title          *string                `protobuf:"bytes,3,opt,name=title" json:"title,omitempty"`
	GameDataConfig *string                `protobuf:"bytes,4,opt,name=game_data_config,json=gameDataConfig" json:"game_data_config,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CBroadcast_SendBroadcastStateToServer_Request) Reset() {
	*x = CBroadcast_SendBroadcastStateToServer_Request{}
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CBroadcast_SendBroadcastStateToServer_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBroadcast_SendBroadcastStateToServer_Request) ProtoMessage() {}

func (x *CBroadcast_SendBroadcastStateToServer_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBroadcast_SendBroadcastStateToServer_Request.ProtoReflect.Descriptor instead.
func (*CBroadcast_SendBroadcastStateToServer_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_broadcast_steamclient_proto_rawDescGZIP(), []int{17}
}

func (x *CBroadcast_SendBroadcastStateToServer_Request) GetPermission() int32 {
	if x != nil && x.Permission != nil {
		return *x.Permission
	}
	return 0
}

func (x *CBroadcast_SendBroadcastStateToServer_Request) GetGameid() uint64 {
	if x != nil && x.Gameid != nil {
		return *x.Gameid
	}
	return 0
}

func (x *CBroadcast_SendBroadcastStateToServer_Request) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *CBroadcast_SendBroadcastStateToServer_Request) GetGameDataConfig() string {
	if x != nil && x.GameDataConfig != nil {
		return *x.GameDataConfig
	}
	return ""
}

type CBroadcast_SendBroadcastStateToServer_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CBroadcast_SendBroadcastStateToServer_Response) Reset() {
	*x = CBroadcast_SendBroadcastStateToServer_Response{}
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CBroadcast_SendBroadcastStateToServer_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBroadcast_SendBroadcastStateToServer_Response) ProtoMessage() {}

func (x *CBroadcast_SendBroadcastStateToServer_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBroadcast_SendBroadcastStateToServer_Response.ProtoReflect.Descriptor instead.
func (*CBroadcast_SendBroadcastStateToServer_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_broadcast_steamclient_proto_rawDescGZIP(), []int{18}
}

type CBroadcast_NotifyBroadcastSessionHeartbeat_Notification struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BroadcastId   *uint64                `protobuf:"fixed64,1,opt,name=broadcast_id,json=broadcastId" json:"broadcast_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CBroadcast_NotifyBroadcastSessionHeartbeat_Notification) Reset() {
	*x = CBroadcast_NotifyBroadcastSessionHeartbeat_Notification{}
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CBroadcast_NotifyBroadcastSessionHeartbeat_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBroadcast_NotifyBroadcastSessionHeartbeat_Notification) ProtoMessage() {}

func (x *CBroadcast_NotifyBroadcastSessionHeartbeat_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBroadcast_NotifyBroadcastSessionHeartbeat_Notification.ProtoReflect.Descriptor instead.
func (*CBroadcast_NotifyBroadcastSessionHeartbeat_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_broadcast_steamclient_proto_rawDescGZIP(), []int{19}
}

func (x *CBroadcast_NotifyBroadcastSessionHeartbeat_Notification) GetBroadcastId() uint64 {
	if x != nil && x.BroadcastId != nil {
		return *x.BroadcastId
	}
	return 0
}

type CBroadcast_GetBroadcastChatInfo_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Steamid       *uint64                `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	BroadcastId   *uint64                `protobuf:"fixed64,2,opt,name=broadcast_id,json=broadcastId" json:"broadcast_id,omitempty"`
	ClientIp      *uint32                `protobuf:"varint,3,opt,name=client_ip,json=clientIp" json:"client_ip,omitempty"`
	ClientCell    *uint32                `protobuf:"varint,4,opt,name=client_cell,json=clientCell" json:"client_cell,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CBroadcast_GetBroadcastChatInfo_Request) Reset() {
	*x = CBroadcast_GetBroadcastChatInfo_Request{}
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CBroadcast_GetBroadcastChatInfo_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBroadcast_GetBroadcastChatInfo_Request) ProtoMessage() {}

func (x *CBroadcast_GetBroadcastChatInfo_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBroadcast_GetBroadcastChatInfo_Request.ProtoReflect.Descriptor instead.
func (*CBroadcast_GetBroadcastChatInfo_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_broadcast_steamclient_proto_rawDescGZIP(), []int{20}
}

func (x *CBroadcast_GetBroadcastChatInfo_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CBroadcast_GetBroadcastChatInfo_Request) GetBroadcastId() uint64 {
	if x != nil && x.BroadcastId != nil {
		return *x.BroadcastId
	}
	return 0
}

func (x *CBroadcast_GetBroadcastChatInfo_Request) GetClientIp() uint32 {
	if x != nil && x.ClientIp != nil {
		return *x.ClientIp
	}
	return 0
}

func (x *CBroadcast_GetBroadcastChatInfo_Request) GetClientCell() uint32 {
	if x != nil && x.ClientCell != nil {
		return *x.ClientCell
	}
	return 0
}

type CBroadcast_GetBroadcastChatInfo_Response struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	ChatId          *uint64                `protobuf:"fixed64,1,opt,name=chat_id,json=chatId" json:"chat_id,omitempty"`
	ViewUrlTemplate *string                `protobuf:"bytes,3,opt,name=view_url_template,json=viewUrlTemplate" json:"view_url_template,omitempty"`
	FlairGroupIds   []uint32               `protobuf:"varint,4,rep,name=flair_group_ids,json=flairGroupIds" json:"flair_group_ids,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CBroadcast_GetBroadcastChatInfo_Response) Reset() {
	*x = CBroadcast_GetBroadcastChatInfo_Response{}
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CBroadcast_GetBroadcastChatInfo_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBroadcast_GetBroadcastChatInfo_Response) ProtoMessage() {}

func (x *CBroadcast_GetBroadcastChatInfo_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBroadcast_GetBroadcastChatInfo_Response.ProtoReflect.Descriptor instead.
func (*CBroadcast_GetBroadcastChatInfo_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_broadcast_steamclient_proto_rawDescGZIP(), []int{21}
}

func (x *CBroadcast_GetBroadcastChatInfo_Response) GetChatId() uint64 {
	if x != nil && x.ChatId != nil {
		return *x.ChatId
	}
	return 0
}

func (x *CBroadcast_GetBroadcastChatInfo_Response) GetViewUrlTemplate() string {
	if x != nil && x.ViewUrlTemplate != nil {
		return *x.ViewUrlTemplate
	}
	return ""
}

func (x *CBroadcast_GetBroadcastChatInfo_Response) GetFlairGroupIds() []uint32 {
	if x != nil {
		return x.FlairGroupIds
	}
	return nil
}

type CBroadcast_PostChatMessage_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChatId        *uint64                `protobuf:"fixed64,1,opt,name=chat_id,json=chatId" json:"chat_id,omitempty"`
	Message       *string                `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	InstanceId    *uint32                `protobuf:"varint,3,opt,name=instance_id,json=instanceId" json:"instance_id,omitempty"`
	Language      *uint32                `protobuf:"varint,4,opt,name=language,def=0" json:"language,omitempty"`
	CountryCode   *string                `protobuf:"bytes,5,opt,name=country_code,json=countryCode" json:"country_code,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CBroadcast_PostChatMessage_Request fields.
const (
	Default_CBroadcast_PostChatMessage_Request_Language = uint32(0)
)

func (x *CBroadcast_PostChatMessage_Request) Reset() {
	*x = CBroadcast_PostChatMessage_Request{}
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CBroadcast_PostChatMessage_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBroadcast_PostChatMessage_Request) ProtoMessage() {}

func (x *CBroadcast_PostChatMessage_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBroadcast_PostChatMessage_Request.ProtoReflect.Descriptor instead.
func (*CBroadcast_PostChatMessage_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_broadcast_steamclient_proto_rawDescGZIP(), []int{22}
}

func (x *CBroadcast_PostChatMessage_Request) GetChatId() uint64 {
	if x != nil && x.ChatId != nil {
		return *x.ChatId
	}
	return 0
}

func (x *CBroadcast_PostChatMessage_Request) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *CBroadcast_PostChatMessage_Request) GetInstanceId() uint32 {
	if x != nil && x.InstanceId != nil {
		return *x.InstanceId
	}
	return 0
}

func (x *CBroadcast_PostChatMessage_Request) GetLanguage() uint32 {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return Default_CBroadcast_PostChatMessage_Request_Language
}

func (x *CBroadcast_PostChatMessage_Request) GetCountryCode() string {
	if x != nil && x.CountryCode != nil {
		return *x.CountryCode
	}
	return ""
}

type CBroadcast_PostChatMessage_Response struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	PersonaName         *string                `protobuf:"bytes,1,opt,name=persona_name,json=personaName" json:"persona_name,omitempty"`
	InGame              *bool                  `protobuf:"varint,2,opt,name=in_game,json=inGame" json:"in_game,omitempty"`
	Result              *int32                 `protobuf:"varint,3,opt,name=result" json:"result,omitempty"`
	CooldownTimeSeconds *int32                 `protobuf:"varint,4,opt,name=cooldown_time_seconds,json=cooldownTimeSeconds" json:"cooldown_time_seconds,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *CBroadcast_PostChatMessage_Response) Reset() {
	*x = CBroadcast_PostChatMessage_Response{}
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CBroadcast_PostChatMessage_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBroadcast_PostChatMessage_Response) ProtoMessage() {}

func (x *CBroadcast_PostChatMessage_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBroadcast_PostChatMessage_Response.ProtoReflect.Descriptor instead.
func (*CBroadcast_PostChatMessage_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_broadcast_steamclient_proto_rawDescGZIP(), []int{23}
}

func (x *CBroadcast_PostChatMessage_Response) GetPersonaName() string {
	if x != nil && x.PersonaName != nil {
		return *x.PersonaName
	}
	return ""
}

func (x *CBroadcast_PostChatMessage_Response) GetInGame() bool {
	if x != nil && x.InGame != nil {
		return *x.InGame
	}
	return false
}

func (x *CBroadcast_PostChatMessage_Response) GetResult() int32 {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return 0
}

func (x *CBroadcast_PostChatMessage_Response) GetCooldownTimeSeconds() int32 {
	if x != nil && x.CooldownTimeSeconds != nil {
		return *x.CooldownTimeSeconds
	}
	return 0
}

type CBroadcast_UpdateChatMessageFlair_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChatId        *uint64                `protobuf:"fixed64,1,opt,name=chat_id,json=chatId" json:"chat_id,omitempty"`
	Flair         *string                `protobuf:"bytes,2,opt,name=flair" json:"flair,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CBroadcast_UpdateChatMessageFlair_Request) Reset() {
	*x = CBroadcast_UpdateChatMessageFlair_Request{}
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CBroadcast_UpdateChatMessageFlair_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBroadcast_UpdateChatMessageFlair_Request) ProtoMessage() {}

func (x *CBroadcast_UpdateChatMessageFlair_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBroadcast_UpdateChatMessageFlair_Request.ProtoReflect.Descriptor instead.
func (*CBroadcast_UpdateChatMessageFlair_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_broadcast_steamclient_proto_rawDescGZIP(), []int{24}
}

func (x *CBroadcast_UpdateChatMessageFlair_Request) GetChatId() uint64 {
	if x != nil && x.ChatId != nil {
		return *x.ChatId
	}
	return 0
}

func (x *CBroadcast_UpdateChatMessageFlair_Request) GetFlair() string {
	if x != nil && x.Flair != nil {
		return *x.Flair
	}
	return ""
}

type CBroadcast_UpdateChatMessageFlair_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Result        *int32                 `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	ChatId        *uint64                `protobuf:"fixed64,2,opt,name=chat_id,json=chatId" json:"chat_id,omitempty"`
	Flair         *string                `protobuf:"bytes,3,opt,name=flair" json:"flair,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CBroadcast_UpdateChatMessageFlair_Response) Reset() {
	*x = CBroadcast_UpdateChatMessageFlair_Response{}
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CBroadcast_UpdateChatMessageFlair_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBroadcast_UpdateChatMessageFlair_Response) ProtoMessage() {}

func (x *CBroadcast_UpdateChatMessageFlair_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBroadcast_UpdateChatMessageFlair_Response.ProtoReflect.Descriptor instead.
func (*CBroadcast_UpdateChatMessageFlair_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_broadcast_steamclient_proto_rawDescGZIP(), []int{25}
}

func (x *CBroadcast_UpdateChatMessageFlair_Response) GetResult() int32 {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return 0
}

func (x *CBroadcast_UpdateChatMessageFlair_Response) GetChatId() uint64 {
	if x != nil && x.ChatId != nil {
		return *x.ChatId
	}
	return 0
}

func (x *CBroadcast_UpdateChatMessageFlair_Response) GetFlair() string {
	if x != nil && x.Flair != nil {
		return *x.Flair
	}
	return ""
}

type CBroadcast_MuteBroadcastChatUser_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChatId        *uint64                `protobuf:"fixed64,1,opt,name=chat_id,json=chatId" json:"chat_id,omitempty"`
	UserSteamid   *uint64                `protobuf:"fixed64,2,opt,name=user_steamid,json=userSteamid" json:"user_steamid,omitempty"`
	Muted         *bool                  `protobuf:"varint,3,opt,name=muted" json:"muted,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CBroadcast_MuteBroadcastChatUser_Request) Reset() {
	*x = CBroadcast_MuteBroadcastChatUser_Request{}
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CBroadcast_MuteBroadcastChatUser_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBroadcast_MuteBroadcastChatUser_Request) ProtoMessage() {}

func (x *CBroadcast_MuteBroadcastChatUser_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBroadcast_MuteBroadcastChatUser_Request.ProtoReflect.Descriptor instead.
func (*CBroadcast_MuteBroadcastChatUser_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_broadcast_steamclient_proto_rawDescGZIP(), []int{26}
}

func (x *CBroadcast_MuteBroadcastChatUser_Request) GetChatId() uint64 {
	if x != nil && x.ChatId != nil {
		return *x.ChatId
	}
	return 0
}

func (x *CBroadcast_MuteBroadcastChatUser_Request) GetUserSteamid() uint64 {
	if x != nil && x.UserSteamid != nil {
		return *x.UserSteamid
	}
	return 0
}

func (x *CBroadcast_MuteBroadcastChatUser_Request) GetMuted() bool {
	if x != nil && x.Muted != nil {
		return *x.Muted
	}
	return false
}

type CBroadcast_MuteBroadcastChatUser_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CBroadcast_MuteBroadcastChatUser_Response) Reset() {
	*x = CBroadcast_MuteBroadcastChatUser_Response{}
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CBroadcast_MuteBroadcastChatUser_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBroadcast_MuteBroadcastChatUser_Response) ProtoMessage() {}

func (x *CBroadcast_MuteBroadcastChatUser_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBroadcast_MuteBroadcastChatUser_Response.ProtoReflect.Descriptor instead.
func (*CBroadcast_MuteBroadcastChatUser_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_broadcast_steamclient_proto_rawDescGZIP(), []int{27}
}

type CBroadcast_RemoveUserChatText_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChatId        *uint64                `protobuf:"fixed64,1,opt,name=chat_id,json=chatId" json:"chat_id,omitempty"`
	UserSteamid   *uint64                `protobuf:"fixed64,2,opt,name=user_steamid,json=userSteamid" json:"user_steamid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CBroadcast_RemoveUserChatText_Request) Reset() {
	*x = CBroadcast_RemoveUserChatText_Request{}
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CBroadcast_RemoveUserChatText_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBroadcast_RemoveUserChatText_Request) ProtoMessage() {}

func (x *CBroadcast_RemoveUserChatText_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBroadcast_RemoveUserChatText_Request.ProtoReflect.Descriptor instead.
func (*CBroadcast_RemoveUserChatText_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_broadcast_steamclient_proto_rawDescGZIP(), []int{28}
}

func (x *CBroadcast_RemoveUserChatText_Request) GetChatId() uint64 {
	if x != nil && x.ChatId != nil {
		return *x.ChatId
	}
	return 0
}

func (x *CBroadcast_RemoveUserChatText_Request) GetUserSteamid() uint64 {
	if x != nil && x.UserSteamid != nil {
		return *x.UserSteamid
	}
	return 0
}

type CBroadcast_RemoveUserChatText_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CBroadcast_RemoveUserChatText_Response) Reset() {
	*x = CBroadcast_RemoveUserChatText_Response{}
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CBroadcast_RemoveUserChatText_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBroadcast_RemoveUserChatText_Response) ProtoMessage() {}

func (x *CBroadcast_RemoveUserChatText_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBroadcast_RemoveUserChatText_Response.ProtoReflect.Descriptor instead.
func (*CBroadcast_RemoveUserChatText_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_broadcast_steamclient_proto_rawDescGZIP(), []int{29}
}

type CBroadcast_GetBroadcastChatUserNames_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChatId        *uint64                `protobuf:"fixed64,1,opt,name=chat_id,json=chatId" json:"chat_id,omitempty"`
	UserSteamid   []uint64               `protobuf:"fixed64,2,rep,name=user_steamid,json=userSteamid" json:"user_steamid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CBroadcast_GetBroadcastChatUserNames_Request) Reset() {
	*x = CBroadcast_GetBroadcastChatUserNames_Request{}
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CBroadcast_GetBroadcastChatUserNames_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBroadcast_GetBroadcastChatUserNames_Request) ProtoMessage() {}

func (x *CBroadcast_GetBroadcastChatUserNames_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBroadcast_GetBroadcastChatUserNames_Request.ProtoReflect.Descriptor instead.
func (*CBroadcast_GetBroadcastChatUserNames_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_broadcast_steamclient_proto_rawDescGZIP(), []int{30}
}

func (x *CBroadcast_GetBroadcastChatUserNames_Request) GetChatId() uint64 {
	if x != nil && x.ChatId != nil {
		return *x.ChatId
	}
	return 0
}

func (x *CBroadcast_GetBroadcastChatUserNames_Request) GetUserSteamid() []uint64 {
	if x != nil {
		return x.UserSteamid
	}
	return nil
}

type CBroadcast_GetBroadcastChatUserNames_Response struct {
	state         protoimpl.MessageState                                       `protogen:"open.v1"`
	PersonaNames  []*CBroadcast_GetBroadcastChatUserNames_Response_PersonaName `protobuf:"bytes,1,rep,name=persona_names,json=personaNames" json:"persona_names,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CBroadcast_GetBroadcastChatUserNames_Response) Reset() {
	*x = CBroadcast_GetBroadcastChatUserNames_Response{}
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CBroadcast_GetBroadcastChatUserNames_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBroadcast_GetBroadcastChatUserNames_Response) ProtoMessage() {}

func (x *CBroadcast_GetBroadcastChatUserNames_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBroadcast_GetBroadcastChatUserNames_Response.ProtoReflect.Descriptor instead.
func (*CBroadcast_GetBroadcastChatUserNames_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_broadcast_steamclient_proto_rawDescGZIP(), []int{31}
}

func (x *CBroadcast_GetBroadcastChatUserNames_Response) GetPersonaNames() []*CBroadcast_GetBroadcastChatUserNames_Response_PersonaName {
	if x != nil {
		return x.PersonaNames
	}
	return nil
}

type CBroadcast_StartBuildClip_Request struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Steamid            *uint64                `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	BroadcastSessionId *uint64                `protobuf:"fixed64,2,opt,name=broadcast_session_id,json=broadcastSessionId" json:"broadcast_session_id,omitempty"`
	FirstSegment       *int32                 `protobuf:"varint,3,opt,name=first_segment,json=firstSegment" json:"first_segment,omitempty"`
	NumSegments        *int32                 `protobuf:"varint,4,opt,name=num_segments,json=numSegments" json:"num_segments,omitempty"`
	ClipDescription    *string                `protobuf:"bytes,5,opt,name=clip_description,json=clipDescription" json:"clip_description,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *CBroadcast_StartBuildClip_Request) Reset() {
	*x = CBroadcast_StartBuildClip_Request{}
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CBroadcast_StartBuildClip_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBroadcast_StartBuildClip_Request) ProtoMessage() {}

func (x *CBroadcast_StartBuildClip_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBroadcast_StartBuildClip_Request.ProtoReflect.Descriptor instead.
func (*CBroadcast_StartBuildClip_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_broadcast_steamclient_proto_rawDescGZIP(), []int{32}
}

func (x *CBroadcast_StartBuildClip_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CBroadcast_StartBuildClip_Request) GetBroadcastSessionId() uint64 {
	if x != nil && x.BroadcastSessionId != nil {
		return *x.BroadcastSessionId
	}
	return 0
}

func (x *CBroadcast_StartBuildClip_Request) GetFirstSegment() int32 {
	if x != nil && x.FirstSegment != nil {
		return *x.FirstSegment
	}
	return 0
}

func (x *CBroadcast_StartBuildClip_Request) GetNumSegments() int32 {
	if x != nil && x.NumSegments != nil {
		return *x.NumSegments
	}
	return 0
}

func (x *CBroadcast_StartBuildClip_Request) GetClipDescription() string {
	if x != nil && x.ClipDescription != nil {
		return *x.ClipDescription
	}
	return ""
}

type CBroadcast_StartBuildClip_Response struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	BroadcastClipId *uint64                `protobuf:"fixed64,1,opt,name=broadcast_clip_id,json=broadcastClipId" json:"broadcast_clip_id,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CBroadcast_StartBuildClip_Response) Reset() {
	*x = CBroadcast_StartBuildClip_Response{}
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CBroadcast_StartBuildClip_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBroadcast_StartBuildClip_Response) ProtoMessage() {}

func (x *CBroadcast_StartBuildClip_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBroadcast_StartBuildClip_Response.ProtoReflect.Descriptor instead.
func (*CBroadcast_StartBuildClip_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_broadcast_steamclient_proto_rawDescGZIP(), []int{33}
}

func (x *CBroadcast_StartBuildClip_Response) GetBroadcastClipId() uint64 {
	if x != nil && x.BroadcastClipId != nil {
		return *x.BroadcastClipId
	}
	return 0
}

type CBroadcast_GetBuildClipStatus_Request struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	BroadcastClipId *uint64                `protobuf:"fixed64,1,opt,name=broadcast_clip_id,json=broadcastClipId" json:"broadcast_clip_id,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CBroadcast_GetBuildClipStatus_Request) Reset() {
	*x = CBroadcast_GetBuildClipStatus_Request{}
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CBroadcast_GetBuildClipStatus_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBroadcast_GetBuildClipStatus_Request) ProtoMessage() {}

func (x *CBroadcast_GetBuildClipStatus_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBroadcast_GetBuildClipStatus_Request.ProtoReflect.Descriptor instead.
func (*CBroadcast_GetBuildClipStatus_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_broadcast_steamclient_proto_rawDescGZIP(), []int{34}
}

func (x *CBroadcast_GetBuildClipStatus_Request) GetBroadcastClipId() uint64 {
	if x != nil && x.BroadcastClipId != nil {
		return *x.BroadcastClipId
	}
	return 0
}

type CBroadcast_GetBuildClipStatus_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CBroadcast_GetBuildClipStatus_Response) Reset() {
	*x = CBroadcast_GetBuildClipStatus_Response{}
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CBroadcast_GetBuildClipStatus_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBroadcast_GetBuildClipStatus_Response) ProtoMessage() {}

func (x *CBroadcast_GetBuildClipStatus_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBroadcast_GetBuildClipStatus_Response.ProtoReflect.Descriptor instead.
func (*CBroadcast_GetBuildClipStatus_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_broadcast_steamclient_proto_rawDescGZIP(), []int{35}
}

type CBroadcast_SetClipDetails_Request struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	BroadcastClipId  *uint64                `protobuf:"varint,1,opt,name=broadcast_clip_id,json=broadcastClipId" json:"broadcast_clip_id,omitempty"`
	StartTime        *uint32                `protobuf:"varint,2,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	EndTime          *uint32                `protobuf:"varint,3,opt,name=end_time,json=endTime" json:"end_time,omitempty"`
	VideoDescription *string                `protobuf:"bytes,4,opt,name=video_description,json=videoDescription" json:"video_description,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CBroadcast_SetClipDetails_Request) Reset() {
	*x = CBroadcast_SetClipDetails_Request{}
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CBroadcast_SetClipDetails_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBroadcast_SetClipDetails_Request) ProtoMessage() {}

func (x *CBroadcast_SetClipDetails_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBroadcast_SetClipDetails_Request.ProtoReflect.Descriptor instead.
func (*CBroadcast_SetClipDetails_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_broadcast_steamclient_proto_rawDescGZIP(), []int{36}
}

func (x *CBroadcast_SetClipDetails_Request) GetBroadcastClipId() uint64 {
	if x != nil && x.BroadcastClipId != nil {
		return *x.BroadcastClipId
	}
	return 0
}

func (x *CBroadcast_SetClipDetails_Request) GetStartTime() uint32 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

func (x *CBroadcast_SetClipDetails_Request) GetEndTime() uint32 {
	if x != nil && x.EndTime != nil {
		return *x.EndTime
	}
	return 0
}

func (x *CBroadcast_SetClipDetails_Request) GetVideoDescription() string {
	if x != nil && x.VideoDescription != nil {
		return *x.VideoDescription
	}
	return ""
}

type CBroadcast_SetClipDetails_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CBroadcast_SetClipDetails_Response) Reset() {
	*x = CBroadcast_SetClipDetails_Response{}
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CBroadcast_SetClipDetails_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBroadcast_SetClipDetails_Response) ProtoMessage() {}

func (x *CBroadcast_SetClipDetails_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBroadcast_SetClipDetails_Response.ProtoReflect.Descriptor instead.
func (*CBroadcast_SetClipDetails_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_broadcast_steamclient_proto_rawDescGZIP(), []int{37}
}

type CBroadcast_GetClipDetails_Request struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	BroadcastClipId *uint64                `protobuf:"varint,1,opt,name=broadcast_clip_id,json=broadcastClipId" json:"broadcast_clip_id,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CBroadcast_GetClipDetails_Request) Reset() {
	*x = CBroadcast_GetClipDetails_Request{}
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CBroadcast_GetClipDetails_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBroadcast_GetClipDetails_Request) ProtoMessage() {}

func (x *CBroadcast_GetClipDetails_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBroadcast_GetClipDetails_Request.ProtoReflect.Descriptor instead.
func (*CBroadcast_GetClipDetails_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_broadcast_steamclient_proto_rawDescGZIP(), []int{38}
}

func (x *CBroadcast_GetClipDetails_Request) GetBroadcastClipId() uint64 {
	if x != nil && x.BroadcastClipId != nil {
		return *x.BroadcastClipId
	}
	return 0
}

type CBroadcast_GetClipDetails_Response struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	BroadcastClipId      *uint64                `protobuf:"varint,1,opt,name=broadcast_clip_id,json=broadcastClipId" json:"broadcast_clip_id,omitempty"`
	VideoId              *uint64                `protobuf:"varint,2,opt,name=video_id,json=videoId" json:"video_id,omitempty"`
	ChannelId            *uint64                `protobuf:"varint,3,opt,name=channel_id,json=channelId" json:"channel_id,omitempty"`
	AppId                *uint32                `protobuf:"varint,4,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	AccountidBroadcaster *uint32                `protobuf:"varint,5,opt,name=accountid_broadcaster,json=accountidBroadcaster" json:"accountid_broadcaster,omitempty"`
	AccountidClipmaker   *uint32                `protobuf:"varint,6,opt,name=accountid_clipmaker,json=accountidClipmaker" json:"accountid_clipmaker,omitempty"`
	VideoDescription     *string                `protobuf:"bytes,7,opt,name=video_description,json=videoDescription" json:"video_description,omitempty"`
	StartTime            *uint32                `protobuf:"varint,8,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	LengthMilliseconds   *uint32                `protobuf:"varint,9,opt,name=length_milliseconds,json=lengthMilliseconds" json:"length_milliseconds,omitempty"`
	ThumbnailPath        *string                `protobuf:"bytes,10,opt,name=thumbnail_path,json=thumbnailPath" json:"thumbnail_path,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *CBroadcast_GetClipDetails_Response) Reset() {
	*x = CBroadcast_GetClipDetails_Response{}
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CBroadcast_GetClipDetails_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBroadcast_GetClipDetails_Response) ProtoMessage() {}

func (x *CBroadcast_GetClipDetails_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBroadcast_GetClipDetails_Response.ProtoReflect.Descriptor instead.
func (*CBroadcast_GetClipDetails_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_broadcast_steamclient_proto_rawDescGZIP(), []int{39}
}

func (x *CBroadcast_GetClipDetails_Response) GetBroadcastClipId() uint64 {
	if x != nil && x.BroadcastClipId != nil {
		return *x.BroadcastClipId
	}
	return 0
}

func (x *CBroadcast_GetClipDetails_Response) GetVideoId() uint64 {
	if x != nil && x.VideoId != nil {
		return *x.VideoId
	}
	return 0
}

func (x *CBroadcast_GetClipDetails_Response) GetChannelId() uint64 {
	if x != nil && x.ChannelId != nil {
		return *x.ChannelId
	}
	return 0
}

func (x *CBroadcast_GetClipDetails_Response) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CBroadcast_GetClipDetails_Response) GetAccountidBroadcaster() uint32 {
	if x != nil && x.AccountidBroadcaster != nil {
		return *x.AccountidBroadcaster
	}
	return 0
}

func (x *CBroadcast_GetClipDetails_Response) GetAccountidClipmaker() uint32 {
	if x != nil && x.AccountidClipmaker != nil {
		return *x.AccountidClipmaker
	}
	return 0
}

func (x *CBroadcast_GetClipDetails_Response) GetVideoDescription() string {
	if x != nil && x.VideoDescription != nil {
		return *x.VideoDescription
	}
	return ""
}

func (x *CBroadcast_GetClipDetails_Response) GetStartTime() uint32 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

func (x *CBroadcast_GetClipDetails_Response) GetLengthMilliseconds() uint32 {
	if x != nil && x.LengthMilliseconds != nil {
		return *x.LengthMilliseconds
	}
	return 0
}

func (x *CBroadcast_GetClipDetails_Response) GetThumbnailPath() string {
	if x != nil && x.ThumbnailPath != nil {
		return *x.ThumbnailPath
	}
	return ""
}

type CBroadcast_SetRTMPInfo_Request struct {
	state                   protoimpl.MessageState    `protogen:"open.v1"`
	BroadcastPermission     *int32                    `protobuf:"varint,1,opt,name=broadcast_permission,json=broadcastPermission" json:"broadcast_permission,omitempty"`
	UpdateToken             *bool                     `protobuf:"varint,2,opt,name=update_token,json=updateToken" json:"update_token,omitempty"`
	BroadcastDelay          *int32                    `protobuf:"varint,3,opt,name=broadcast_delay,json=broadcastDelay" json:"broadcast_delay,omitempty"`
	AppId                   *uint32                   `protobuf:"varint,4,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	RequiredAppId           *uint32                   `protobuf:"varint,5,opt,name=required_app_id,json=requiredAppId" json:"required_app_id,omitempty"`
	BroadcastChatPermission *EBroadcastChatPermission `protobuf:"varint,6,opt,name=broadcast_chat_permission,json=broadcastChatPermission,enum=EBroadcastChatPermission,def=0" json:"broadcast_chat_permission,omitempty"`
	BroadcastBuffer         *int32                    `protobuf:"varint,7,opt,name=broadcast_buffer,json=broadcastBuffer" json:"broadcast_buffer,omitempty"`
	Steamid                 *uint64                   `protobuf:"fixed64,8,opt,name=steamid" json:"steamid,omitempty"`
	ChatRateLimit           *uint32                   `protobuf:"varint,9,opt,name=chat_rate_limit,json=chatRateLimit" json:"chat_rate_limit,omitempty"`
	EnableReplay            *bool                     `protobuf:"varint,10,opt,name=enable_replay,json=enableReplay" json:"enable_replay,omitempty"`
	IsPartnerChatOnly       *bool                     `protobuf:"varint,11,opt,name=is_partner_chat_only,json=isPartnerChatOnly" json:"is_partner_chat_only,omitempty"`
	WordbanList             *string                   `protobuf:"bytes,12,opt,name=wordban_list,json=wordbanList" json:"wordban_list,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

// Default values for CBroadcast_SetRTMPInfo_Request fields.
const (
	Default_CBroadcast_SetRTMPInfo_Request_BroadcastChatPermission = EBroadcastChatPermission_k_EBroadcastChatPermissionPublic
)

func (x *CBroadcast_SetRTMPInfo_Request) Reset() {
	*x = CBroadcast_SetRTMPInfo_Request{}
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CBroadcast_SetRTMPInfo_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBroadcast_SetRTMPInfo_Request) ProtoMessage() {}

func (x *CBroadcast_SetRTMPInfo_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBroadcast_SetRTMPInfo_Request.ProtoReflect.Descriptor instead.
func (*CBroadcast_SetRTMPInfo_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_broadcast_steamclient_proto_rawDescGZIP(), []int{40}
}

func (x *CBroadcast_SetRTMPInfo_Request) GetBroadcastPermission() int32 {
	if x != nil && x.BroadcastPermission != nil {
		return *x.BroadcastPermission
	}
	return 0
}

func (x *CBroadcast_SetRTMPInfo_Request) GetUpdateToken() bool {
	if x != nil && x.UpdateToken != nil {
		return *x.UpdateToken
	}
	return false
}

func (x *CBroadcast_SetRTMPInfo_Request) GetBroadcastDelay() int32 {
	if x != nil && x.BroadcastDelay != nil {
		return *x.BroadcastDelay
	}
	return 0
}

func (x *CBroadcast_SetRTMPInfo_Request) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CBroadcast_SetRTMPInfo_Request) GetRequiredAppId() uint32 {
	if x != nil && x.RequiredAppId != nil {
		return *x.RequiredAppId
	}
	return 0
}

func (x *CBroadcast_SetRTMPInfo_Request) GetBroadcastChatPermission() EBroadcastChatPermission {
	if x != nil && x.BroadcastChatPermission != nil {
		return *x.BroadcastChatPermission
	}
	return Default_CBroadcast_SetRTMPInfo_Request_BroadcastChatPermission
}

func (x *CBroadcast_SetRTMPInfo_Request) GetBroadcastBuffer() int32 {
	if x != nil && x.BroadcastBuffer != nil {
		return *x.BroadcastBuffer
	}
	return 0
}

func (x *CBroadcast_SetRTMPInfo_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CBroadcast_SetRTMPInfo_Request) GetChatRateLimit() uint32 {
	if x != nil && x.ChatRateLimit != nil {
		return *x.ChatRateLimit
	}
	return 0
}

func (x *CBroadcast_SetRTMPInfo_Request) GetEnableReplay() bool {
	if x != nil && x.EnableReplay != nil {
		return *x.EnableReplay
	}
	return false
}

func (x *CBroadcast_SetRTMPInfo_Request) GetIsPartnerChatOnly() bool {
	if x != nil && x.IsPartnerChatOnly != nil {
		return *x.IsPartnerChatOnly
	}
	return false
}

func (x *CBroadcast_SetRTMPInfo_Request) GetWordbanList() string {
	if x != nil && x.WordbanList != nil {
		return *x.WordbanList
	}
	return ""
}

type CBroadcast_SetRTMPInfo_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CBroadcast_SetRTMPInfo_Response) Reset() {
	*x = CBroadcast_SetRTMPInfo_Response{}
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CBroadcast_SetRTMPInfo_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBroadcast_SetRTMPInfo_Response) ProtoMessage() {}

func (x *CBroadcast_SetRTMPInfo_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBroadcast_SetRTMPInfo_Response.ProtoReflect.Descriptor instead.
func (*CBroadcast_SetRTMPInfo_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_broadcast_steamclient_proto_rawDescGZIP(), []int{41}
}

type CBroadcast_GetRTMPInfo_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ip            *uint32                `protobuf:"varint,1,opt,name=ip" json:"ip,omitempty"`
	Steamid       *uint64                `protobuf:"fixed64,2,opt,name=steamid" json:"steamid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CBroadcast_GetRTMPInfo_Request) Reset() {
	*x = CBroadcast_GetRTMPInfo_Request{}
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CBroadcast_GetRTMPInfo_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBroadcast_GetRTMPInfo_Request) ProtoMessage() {}

func (x *CBroadcast_GetRTMPInfo_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBroadcast_GetRTMPInfo_Request.ProtoReflect.Descriptor instead.
func (*CBroadcast_GetRTMPInfo_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_broadcast_steamclient_proto_rawDescGZIP(), []int{42}
}

func (x *CBroadcast_GetRTMPInfo_Request) GetIp() uint32 {
	if x != nil && x.Ip != nil {
		return *x.Ip
	}
	return 0
}

func (x *CBroadcast_GetRTMPInfo_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

type CBroadcast_GetRTMPInfo_Response struct {
	state                   protoimpl.MessageState    `protogen:"open.v1"`
	BroadcastPermission     *int32                    `protobuf:"varint,1,opt,name=broadcast_permission,json=broadcastPermission" json:"broadcast_permission,omitempty"`
	RtmpHost                *string                   `protobuf:"bytes,2,opt,name=rtmp_host,json=rtmpHost" json:"rtmp_host,omitempty"`
	RtmpToken               *string                   `protobuf:"bytes,3,opt,name=rtmp_token,json=rtmpToken" json:"rtmp_token,omitempty"`
	BroadcastDelay          *int32                    `protobuf:"varint,4,opt,name=broadcast_delay,json=broadcastDelay" json:"broadcast_delay,omitempty"`
	AppId                   *uint32                   `protobuf:"varint,5,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	RequiredAppId           *uint32                   `protobuf:"varint,6,opt,name=required_app_id,json=requiredAppId" json:"required_app_id,omitempty"`
	BroadcastChatPermission *EBroadcastChatPermission `protobuf:"varint,7,opt,name=broadcast_chat_permission,json=broadcastChatPermission,enum=EBroadcastChatPermission,def=0" json:"broadcast_chat_permission,omitempty"`
	BroadcastBuffer         *int32                    `protobuf:"varint,8,opt,name=broadcast_buffer,json=broadcastBuffer" json:"broadcast_buffer,omitempty"`
	Steamid                 *uint64                   `protobuf:"fixed64,9,opt,name=steamid" json:"steamid,omitempty"`
	ChatRateLimit           *uint32                   `protobuf:"varint,10,opt,name=chat_rate_limit,json=chatRateLimit" json:"chat_rate_limit,omitempty"`
	EnableReplay            *bool                     `protobuf:"varint,11,opt,name=enable_replay,json=enableReplay" json:"enable_replay,omitempty"`
	IsPartnerChatOnly       *bool                     `protobuf:"varint,12,opt,name=is_partner_chat_only,json=isPartnerChatOnly" json:"is_partner_chat_only,omitempty"`
	WordbanList             *string                   `protobuf:"bytes,13,opt,name=wordban_list,json=wordbanList" json:"wordban_list,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

// Default values for CBroadcast_GetRTMPInfo_Response fields.
const (
	Default_CBroadcast_GetRTMPInfo_Response_BroadcastChatPermission = EBroadcastChatPermission_k_EBroadcastChatPermissionPublic
)

func (x *CBroadcast_GetRTMPInfo_Response) Reset() {
	*x = CBroadcast_GetRTMPInfo_Response{}
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CBroadcast_GetRTMPInfo_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBroadcast_GetRTMPInfo_Response) ProtoMessage() {}

func (x *CBroadcast_GetRTMPInfo_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBroadcast_GetRTMPInfo_Response.ProtoReflect.Descriptor instead.
func (*CBroadcast_GetRTMPInfo_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_broadcast_steamclient_proto_rawDescGZIP(), []int{43}
}

func (x *CBroadcast_GetRTMPInfo_Response) GetBroadcastPermission() int32 {
	if x != nil && x.BroadcastPermission != nil {
		return *x.BroadcastPermission
	}
	return 0
}

func (x *CBroadcast_GetRTMPInfo_Response) GetRtmpHost() string {
	if x != nil && x.RtmpHost != nil {
		return *x.RtmpHost
	}
	return ""
}

func (x *CBroadcast_GetRTMPInfo_Response) GetRtmpToken() string {
	if x != nil && x.RtmpToken != nil {
		return *x.RtmpToken
	}
	return ""
}

func (x *CBroadcast_GetRTMPInfo_Response) GetBroadcastDelay() int32 {
	if x != nil && x.BroadcastDelay != nil {
		return *x.BroadcastDelay
	}
	return 0
}

func (x *CBroadcast_GetRTMPInfo_Response) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CBroadcast_GetRTMPInfo_Response) GetRequiredAppId() uint32 {
	if x != nil && x.RequiredAppId != nil {
		return *x.RequiredAppId
	}
	return 0
}

func (x *CBroadcast_GetRTMPInfo_Response) GetBroadcastChatPermission() EBroadcastChatPermission {
	if x != nil && x.BroadcastChatPermission != nil {
		return *x.BroadcastChatPermission
	}
	return Default_CBroadcast_GetRTMPInfo_Response_BroadcastChatPermission
}

func (x *CBroadcast_GetRTMPInfo_Response) GetBroadcastBuffer() int32 {
	if x != nil && x.BroadcastBuffer != nil {
		return *x.BroadcastBuffer
	}
	return 0
}

func (x *CBroadcast_GetRTMPInfo_Response) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CBroadcast_GetRTMPInfo_Response) GetChatRateLimit() uint32 {
	if x != nil && x.ChatRateLimit != nil {
		return *x.ChatRateLimit
	}
	return 0
}

func (x *CBroadcast_GetRTMPInfo_Response) GetEnableReplay() bool {
	if x != nil && x.EnableReplay != nil {
		return *x.EnableReplay
	}
	return false
}

func (x *CBroadcast_GetRTMPInfo_Response) GetIsPartnerChatOnly() bool {
	if x != nil && x.IsPartnerChatOnly != nil {
		return *x.IsPartnerChatOnly
	}
	return false
}

func (x *CBroadcast_GetRTMPInfo_Response) GetWordbanList() string {
	if x != nil && x.WordbanList != nil {
		return *x.WordbanList
	}
	return ""
}

type CBroadcast_WebRTCHaveTURNServer_Notification struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	BroadcastSessionId *uint64                `protobuf:"fixed64,1,opt,name=broadcast_session_id,json=broadcastSessionId" json:"broadcast_session_id,omitempty"`
	TurnServer         *string                `protobuf:"bytes,2,opt,name=turn_server,json=turnServer" json:"turn_server,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *CBroadcast_WebRTCHaveTURNServer_Notification) Reset() {
	*x = CBroadcast_WebRTCHaveTURNServer_Notification{}
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CBroadcast_WebRTCHaveTURNServer_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBroadcast_WebRTCHaveTURNServer_Notification) ProtoMessage() {}

func (x *CBroadcast_WebRTCHaveTURNServer_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBroadcast_WebRTCHaveTURNServer_Notification.ProtoReflect.Descriptor instead.
func (*CBroadcast_WebRTCHaveTURNServer_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_broadcast_steamclient_proto_rawDescGZIP(), []int{44}
}

func (x *CBroadcast_WebRTCHaveTURNServer_Notification) GetBroadcastSessionId() uint64 {
	if x != nil && x.BroadcastSessionId != nil {
		return *x.BroadcastSessionId
	}
	return 0
}

func (x *CBroadcast_WebRTCHaveTURNServer_Notification) GetTurnServer() string {
	if x != nil && x.TurnServer != nil {
		return *x.TurnServer
	}
	return ""
}

type CBroadcast_WebRTCStartResult_Request struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	WebrtcSessionId *uint64                `protobuf:"fixed64,1,opt,name=webrtc_session_id,json=webrtcSessionId" json:"webrtc_session_id,omitempty"`
	Started         *bool                  `protobuf:"varint,2,opt,name=started" json:"started,omitempty"`
	Offer           *string                `protobuf:"bytes,3,opt,name=offer" json:"offer,omitempty"`
	ResolutionX     *uint32                `protobuf:"varint,4,opt,name=resolution_x,json=resolutionX" json:"resolution_x,omitempty"`
	ResolutionY     *uint32                `protobuf:"varint,5,opt,name=resolution_y,json=resolutionY" json:"resolution_y,omitempty"`
	Fps             *uint32                `protobuf:"varint,6,opt,name=fps" json:"fps,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CBroadcast_WebRTCStartResult_Request) Reset() {
	*x = CBroadcast_WebRTCStartResult_Request{}
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CBroadcast_WebRTCStartResult_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBroadcast_WebRTCStartResult_Request) ProtoMessage() {}

func (x *CBroadcast_WebRTCStartResult_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBroadcast_WebRTCStartResult_Request.ProtoReflect.Descriptor instead.
func (*CBroadcast_WebRTCStartResult_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_broadcast_steamclient_proto_rawDescGZIP(), []int{45}
}

func (x *CBroadcast_WebRTCStartResult_Request) GetWebrtcSessionId() uint64 {
	if x != nil && x.WebrtcSessionId != nil {
		return *x.WebrtcSessionId
	}
	return 0
}

func (x *CBroadcast_WebRTCStartResult_Request) GetStarted() bool {
	if x != nil && x.Started != nil {
		return *x.Started
	}
	return false
}

func (x *CBroadcast_WebRTCStartResult_Request) GetOffer() string {
	if x != nil && x.Offer != nil {
		return *x.Offer
	}
	return ""
}

func (x *CBroadcast_WebRTCStartResult_Request) GetResolutionX() uint32 {
	if x != nil && x.ResolutionX != nil {
		return *x.ResolutionX
	}
	return 0
}

func (x *CBroadcast_WebRTCStartResult_Request) GetResolutionY() uint32 {
	if x != nil && x.ResolutionY != nil {
		return *x.ResolutionY
	}
	return 0
}

func (x *CBroadcast_WebRTCStartResult_Request) GetFps() uint32 {
	if x != nil && x.Fps != nil {
		return *x.Fps
	}
	return 0
}

type CBroadcast_WebRTCStartResult_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CBroadcast_WebRTCStartResult_Response) Reset() {
	*x = CBroadcast_WebRTCStartResult_Response{}
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CBroadcast_WebRTCStartResult_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBroadcast_WebRTCStartResult_Response) ProtoMessage() {}

func (x *CBroadcast_WebRTCStartResult_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBroadcast_WebRTCStartResult_Response.ProtoReflect.Descriptor instead.
func (*CBroadcast_WebRTCStartResult_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_broadcast_steamclient_proto_rawDescGZIP(), []int{46}
}

type CBroadcast_WebRTCStopped_Request struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	WebrtcSessionId *uint64                `protobuf:"fixed64,1,opt,name=webrtc_session_id,json=webrtcSessionId" json:"webrtc_session_id,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CBroadcast_WebRTCStopped_Request) Reset() {
	*x = CBroadcast_WebRTCStopped_Request{}
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CBroadcast_WebRTCStopped_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBroadcast_WebRTCStopped_Request) ProtoMessage() {}

func (x *CBroadcast_WebRTCStopped_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBroadcast_WebRTCStopped_Request.ProtoReflect.Descriptor instead.
func (*CBroadcast_WebRTCStopped_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_broadcast_steamclient_proto_rawDescGZIP(), []int{47}
}

func (x *CBroadcast_WebRTCStopped_Request) GetWebrtcSessionId() uint64 {
	if x != nil && x.WebrtcSessionId != nil {
		return *x.WebrtcSessionId
	}
	return 0
}

type CBroadcast_WebRTCStopped_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CBroadcast_WebRTCStopped_Response) Reset() {
	*x = CBroadcast_WebRTCStopped_Response{}
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CBroadcast_WebRTCStopped_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBroadcast_WebRTCStopped_Response) ProtoMessage() {}

func (x *CBroadcast_WebRTCStopped_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBroadcast_WebRTCStopped_Response.ProtoReflect.Descriptor instead.
func (*CBroadcast_WebRTCStopped_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_broadcast_steamclient_proto_rawDescGZIP(), []int{48}
}

type CBroadcast_WebRTCSetAnswer_Request struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	BroadcasterSteamid *uint64                `protobuf:"fixed64,1,opt,name=broadcaster_steamid,json=broadcasterSteamid" json:"broadcaster_steamid,omitempty"`
	WebrtcSessionId    *uint64                `protobuf:"fixed64,2,opt,name=webrtc_session_id,json=webrtcSessionId" json:"webrtc_session_id,omitempty"`
	Answer             *string                `protobuf:"bytes,3,opt,name=answer" json:"answer,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *CBroadcast_WebRTCSetAnswer_Request) Reset() {
	*x = CBroadcast_WebRTCSetAnswer_Request{}
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CBroadcast_WebRTCSetAnswer_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBroadcast_WebRTCSetAnswer_Request) ProtoMessage() {}

func (x *CBroadcast_WebRTCSetAnswer_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBroadcast_WebRTCSetAnswer_Request.ProtoReflect.Descriptor instead.
func (*CBroadcast_WebRTCSetAnswer_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_broadcast_steamclient_proto_rawDescGZIP(), []int{49}
}

func (x *CBroadcast_WebRTCSetAnswer_Request) GetBroadcasterSteamid() uint64 {
	if x != nil && x.BroadcasterSteamid != nil {
		return *x.BroadcasterSteamid
	}
	return 0
}

func (x *CBroadcast_WebRTCSetAnswer_Request) GetWebrtcSessionId() uint64 {
	if x != nil && x.WebrtcSessionId != nil {
		return *x.WebrtcSessionId
	}
	return 0
}

func (x *CBroadcast_WebRTCSetAnswer_Request) GetAnswer() string {
	if x != nil && x.Answer != nil {
		return *x.Answer
	}
	return ""
}

type CBroadcast_WebRTCSetAnswer_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CBroadcast_WebRTCSetAnswer_Response) Reset() {
	*x = CBroadcast_WebRTCSetAnswer_Response{}
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CBroadcast_WebRTCSetAnswer_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBroadcast_WebRTCSetAnswer_Response) ProtoMessage() {}

func (x *CBroadcast_WebRTCSetAnswer_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBroadcast_WebRTCSetAnswer_Response.ProtoReflect.Descriptor instead.
func (*CBroadcast_WebRTCSetAnswer_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_broadcast_steamclient_proto_rawDescGZIP(), []int{50}
}

type CBroadcast_WebRTCLookupTURNServer_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Cellid        *uint32                `protobuf:"varint,1,opt,name=cellid" json:"cellid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CBroadcast_WebRTCLookupTURNServer_Request) Reset() {
	*x = CBroadcast_WebRTCLookupTURNServer_Request{}
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CBroadcast_WebRTCLookupTURNServer_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBroadcast_WebRTCLookupTURNServer_Request) ProtoMessage() {}

func (x *CBroadcast_WebRTCLookupTURNServer_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBroadcast_WebRTCLookupTURNServer_Request.ProtoReflect.Descriptor instead.
func (*CBroadcast_WebRTCLookupTURNServer_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_broadcast_steamclient_proto_rawDescGZIP(), []int{51}
}

func (x *CBroadcast_WebRTCLookupTURNServer_Request) GetCellid() uint32 {
	if x != nil && x.Cellid != nil {
		return *x.Cellid
	}
	return 0
}

type CBroadcast_WebRTCLookupTURNServer_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TurnServer    *string                `protobuf:"bytes,1,opt,name=turn_server,json=turnServer" json:"turn_server,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CBroadcast_WebRTCLookupTURNServer_Response) Reset() {
	*x = CBroadcast_WebRTCLookupTURNServer_Response{}
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CBroadcast_WebRTCLookupTURNServer_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBroadcast_WebRTCLookupTURNServer_Response) ProtoMessage() {}

func (x *CBroadcast_WebRTCLookupTURNServer_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBroadcast_WebRTCLookupTURNServer_Response.ProtoReflect.Descriptor instead.
func (*CBroadcast_WebRTCLookupTURNServer_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_broadcast_steamclient_proto_rawDescGZIP(), []int{52}
}

func (x *CBroadcast_WebRTCLookupTURNServer_Response) GetTurnServer() string {
	if x != nil && x.TurnServer != nil {
		return *x.TurnServer
	}
	return ""
}

type CBroadcast_WebRTC_Candidate struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SdpMid        *string                `protobuf:"bytes,1,opt,name=sdp_mid,json=sdpMid" json:"sdp_mid,omitempty"`
	SdpMlineIndex *int32                 `protobuf:"varint,2,opt,name=sdp_mline_index,json=sdpMlineIndex" json:"sdp_mline_index,omitempty"`
	Candidate     *string                `protobuf:"bytes,3,opt,name=candidate" json:"candidate,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CBroadcast_WebRTC_Candidate) Reset() {
	*x = CBroadcast_WebRTC_Candidate{}
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CBroadcast_WebRTC_Candidate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBroadcast_WebRTC_Candidate) ProtoMessage() {}

func (x *CBroadcast_WebRTC_Candidate) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBroadcast_WebRTC_Candidate.ProtoReflect.Descriptor instead.
func (*CBroadcast_WebRTC_Candidate) Descriptor() ([]byte, []int) {
	return file_steammessages_broadcast_steamclient_proto_rawDescGZIP(), []int{53}
}

func (x *CBroadcast_WebRTC_Candidate) GetSdpMid() string {
	if x != nil && x.SdpMid != nil {
		return *x.SdpMid
	}
	return ""
}

func (x *CBroadcast_WebRTC_Candidate) GetSdpMlineIndex() int32 {
	if x != nil && x.SdpMlineIndex != nil {
		return *x.SdpMlineIndex
	}
	return 0
}

func (x *CBroadcast_WebRTC_Candidate) GetCandidate() string {
	if x != nil && x.Candidate != nil {
		return *x.Candidate
	}
	return ""
}

type CBroadcast_WebRTCAddHostCandidate_Request struct {
	state           protoimpl.MessageState       `protogen:"open.v1"`
	WebrtcSessionId *uint64                      `protobuf:"fixed64,1,opt,name=webrtc_session_id,json=webrtcSessionId" json:"webrtc_session_id,omitempty"`
	Candidate       *CBroadcast_WebRTC_Candidate `protobuf:"bytes,2,opt,name=candidate" json:"candidate,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CBroadcast_WebRTCAddHostCandidate_Request) Reset() {
	*x = CBroadcast_WebRTCAddHostCandidate_Request{}
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CBroadcast_WebRTCAddHostCandidate_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBroadcast_WebRTCAddHostCandidate_Request) ProtoMessage() {}

func (x *CBroadcast_WebRTCAddHostCandidate_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBroadcast_WebRTCAddHostCandidate_Request.ProtoReflect.Descriptor instead.
func (*CBroadcast_WebRTCAddHostCandidate_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_broadcast_steamclient_proto_rawDescGZIP(), []int{54}
}

func (x *CBroadcast_WebRTCAddHostCandidate_Request) GetWebrtcSessionId() uint64 {
	if x != nil && x.WebrtcSessionId != nil {
		return *x.WebrtcSessionId
	}
	return 0
}

func (x *CBroadcast_WebRTCAddHostCandidate_Request) GetCandidate() *CBroadcast_WebRTC_Candidate {
	if x != nil {
		return x.Candidate
	}
	return nil
}

type CBroadcast_WebRTCAddHostCandidate_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CBroadcast_WebRTCAddHostCandidate_Response) Reset() {
	*x = CBroadcast_WebRTCAddHostCandidate_Response{}
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CBroadcast_WebRTCAddHostCandidate_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBroadcast_WebRTCAddHostCandidate_Response) ProtoMessage() {}

func (x *CBroadcast_WebRTCAddHostCandidate_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBroadcast_WebRTCAddHostCandidate_Response.ProtoReflect.Descriptor instead.
func (*CBroadcast_WebRTCAddHostCandidate_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_broadcast_steamclient_proto_rawDescGZIP(), []int{55}
}

type CBroadcast_WebRTCAddViewerCandidate_Request struct {
	state              protoimpl.MessageState       `protogen:"open.v1"`
	BroadcasterSteamid *uint64                      `protobuf:"fixed64,1,opt,name=broadcaster_steamid,json=broadcasterSteamid" json:"broadcaster_steamid,omitempty"`
	WebrtcSessionId    *uint64                      `protobuf:"fixed64,2,opt,name=webrtc_session_id,json=webrtcSessionId" json:"webrtc_session_id,omitempty"`
	Candidate          *CBroadcast_WebRTC_Candidate `protobuf:"bytes,3,opt,name=candidate" json:"candidate,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *CBroadcast_WebRTCAddViewerCandidate_Request) Reset() {
	*x = CBroadcast_WebRTCAddViewerCandidate_Request{}
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CBroadcast_WebRTCAddViewerCandidate_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBroadcast_WebRTCAddViewerCandidate_Request) ProtoMessage() {}

func (x *CBroadcast_WebRTCAddViewerCandidate_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBroadcast_WebRTCAddViewerCandidate_Request.ProtoReflect.Descriptor instead.
func (*CBroadcast_WebRTCAddViewerCandidate_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_broadcast_steamclient_proto_rawDescGZIP(), []int{56}
}

func (x *CBroadcast_WebRTCAddViewerCandidate_Request) GetBroadcasterSteamid() uint64 {
	if x != nil && x.BroadcasterSteamid != nil {
		return *x.BroadcasterSteamid
	}
	return 0
}

func (x *CBroadcast_WebRTCAddViewerCandidate_Request) GetWebrtcSessionId() uint64 {
	if x != nil && x.WebrtcSessionId != nil {
		return *x.WebrtcSessionId
	}
	return 0
}

func (x *CBroadcast_WebRTCAddViewerCandidate_Request) GetCandidate() *CBroadcast_WebRTC_Candidate {
	if x != nil {
		return x.Candidate
	}
	return nil
}

type CBroadcast_WebRTCAddViewerCandidate_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CBroadcast_WebRTCAddViewerCandidate_Response) Reset() {
	*x = CBroadcast_WebRTCAddViewerCandidate_Response{}
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CBroadcast_WebRTCAddViewerCandidate_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBroadcast_WebRTCAddViewerCandidate_Response) ProtoMessage() {}

func (x *CBroadcast_WebRTCAddViewerCandidate_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBroadcast_WebRTCAddViewerCandidate_Response.ProtoReflect.Descriptor instead.
func (*CBroadcast_WebRTCAddViewerCandidate_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_broadcast_steamclient_proto_rawDescGZIP(), []int{57}
}

type CBroadcast_WebRTCGetHostCandidates_Request struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	BroadcasterSteamid  *uint64                `protobuf:"fixed64,1,opt,name=broadcaster_steamid,json=broadcasterSteamid" json:"broadcaster_steamid,omitempty"`
	WebrtcSessionId     *uint64                `protobuf:"fixed64,2,opt,name=webrtc_session_id,json=webrtcSessionId" json:"webrtc_session_id,omitempty"`
	CandidateGeneration *uint32                `protobuf:"varint,3,opt,name=candidate_generation,json=candidateGeneration" json:"candidate_generation,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *CBroadcast_WebRTCGetHostCandidates_Request) Reset() {
	*x = CBroadcast_WebRTCGetHostCandidates_Request{}
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CBroadcast_WebRTCGetHostCandidates_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBroadcast_WebRTCGetHostCandidates_Request) ProtoMessage() {}

func (x *CBroadcast_WebRTCGetHostCandidates_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBroadcast_WebRTCGetHostCandidates_Request.ProtoReflect.Descriptor instead.
func (*CBroadcast_WebRTCGetHostCandidates_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_broadcast_steamclient_proto_rawDescGZIP(), []int{58}
}

func (x *CBroadcast_WebRTCGetHostCandidates_Request) GetBroadcasterSteamid() uint64 {
	if x != nil && x.BroadcasterSteamid != nil {
		return *x.BroadcasterSteamid
	}
	return 0
}

func (x *CBroadcast_WebRTCGetHostCandidates_Request) GetWebrtcSessionId() uint64 {
	if x != nil && x.WebrtcSessionId != nil {
		return *x.WebrtcSessionId
	}
	return 0
}

func (x *CBroadcast_WebRTCGetHostCandidates_Request) GetCandidateGeneration() uint32 {
	if x != nil && x.CandidateGeneration != nil {
		return *x.CandidateGeneration
	}
	return 0
}

type CBroadcast_WebRTCGetHostCandidates_Response struct {
	state               protoimpl.MessageState         `protogen:"open.v1"`
	CandidateGeneration *uint32                        `protobuf:"varint,1,opt,name=candidate_generation,json=candidateGeneration" json:"candidate_generation,omitempty"`
	Candidates          []*CBroadcast_WebRTC_Candidate `protobuf:"bytes,2,rep,name=candidates" json:"candidates,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *CBroadcast_WebRTCGetHostCandidates_Response) Reset() {
	*x = CBroadcast_WebRTCGetHostCandidates_Response{}
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CBroadcast_WebRTCGetHostCandidates_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBroadcast_WebRTCGetHostCandidates_Response) ProtoMessage() {}

func (x *CBroadcast_WebRTCGetHostCandidates_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBroadcast_WebRTCGetHostCandidates_Response.ProtoReflect.Descriptor instead.
func (*CBroadcast_WebRTCGetHostCandidates_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_broadcast_steamclient_proto_rawDescGZIP(), []int{59}
}

func (x *CBroadcast_WebRTCGetHostCandidates_Response) GetCandidateGeneration() uint32 {
	if x != nil && x.CandidateGeneration != nil {
		return *x.CandidateGeneration
	}
	return 0
}

func (x *CBroadcast_WebRTCGetHostCandidates_Response) GetCandidates() []*CBroadcast_WebRTC_Candidate {
	if x != nil {
		return x.Candidates
	}
	return nil
}

type CBroadcast_GetBroadcastUploadStats_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RowLimit      *uint32                `protobuf:"varint,1,opt,name=row_limit,json=rowLimit,def=100" json:"row_limit,omitempty"`
	StartTime     *uint32                `protobuf:"varint,2,opt,name=start_time,json=startTime,def=0" json:"start_time,omitempty"`
	UploadId      *uint64                `protobuf:"varint,3,opt,name=upload_id,json=uploadId" json:"upload_id,omitempty"`
	Steamid       *uint64                `protobuf:"fixed64,4,opt,name=steamid" json:"steamid,omitempty"`
	SessionId     *uint64                `protobuf:"varint,5,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CBroadcast_GetBroadcastUploadStats_Request fields.
const (
	Default_CBroadcast_GetBroadcastUploadStats_Request_RowLimit  = uint32(100)
	Default_CBroadcast_GetBroadcastUploadStats_Request_StartTime = uint32(0)
)

func (x *CBroadcast_GetBroadcastUploadStats_Request) Reset() {
	*x = CBroadcast_GetBroadcastUploadStats_Request{}
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CBroadcast_GetBroadcastUploadStats_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBroadcast_GetBroadcastUploadStats_Request) ProtoMessage() {}

func (x *CBroadcast_GetBroadcastUploadStats_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBroadcast_GetBroadcastUploadStats_Request.ProtoReflect.Descriptor instead.
func (*CBroadcast_GetBroadcastUploadStats_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_broadcast_steamclient_proto_rawDescGZIP(), []int{60}
}

func (x *CBroadcast_GetBroadcastUploadStats_Request) GetRowLimit() uint32 {
	if x != nil && x.RowLimit != nil {
		return *x.RowLimit
	}
	return Default_CBroadcast_GetBroadcastUploadStats_Request_RowLimit
}

func (x *CBroadcast_GetBroadcastUploadStats_Request) GetStartTime() uint32 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return Default_CBroadcast_GetBroadcastUploadStats_Request_StartTime
}

func (x *CBroadcast_GetBroadcastUploadStats_Request) GetUploadId() uint64 {
	if x != nil && x.UploadId != nil {
		return *x.UploadId
	}
	return 0
}

func (x *CBroadcast_GetBroadcastUploadStats_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CBroadcast_GetBroadcastUploadStats_Request) GetSessionId() uint64 {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return 0
}

type CBroadcast_GetBroadcastUploadStats_Response struct {
	state         protoimpl.MessageState                                     `protogen:"open.v1"`
	UploadStats   []*CBroadcast_GetBroadcastUploadStats_Response_UploadStats `protobuf:"bytes,1,rep,name=upload_stats,json=uploadStats" json:"upload_stats,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CBroadcast_GetBroadcastUploadStats_Response) Reset() {
	*x = CBroadcast_GetBroadcastUploadStats_Response{}
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CBroadcast_GetBroadcastUploadStats_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBroadcast_GetBroadcastUploadStats_Response) ProtoMessage() {}

func (x *CBroadcast_GetBroadcastUploadStats_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBroadcast_GetBroadcastUploadStats_Response.ProtoReflect.Descriptor instead.
func (*CBroadcast_GetBroadcastUploadStats_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_broadcast_steamclient_proto_rawDescGZIP(), []int{61}
}

func (x *CBroadcast_GetBroadcastUploadStats_Response) GetUploadStats() []*CBroadcast_GetBroadcastUploadStats_Response_UploadStats {
	if x != nil {
		return x.UploadStats
	}
	return nil
}

type CBroadcast_GetBroadcastViewerStats_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UploadId      *uint64                `protobuf:"varint,1,opt,name=upload_id,json=uploadId" json:"upload_id,omitempty"`
	Steamid       *uint64                `protobuf:"fixed64,2,opt,name=steamid" json:"steamid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CBroadcast_GetBroadcastViewerStats_Request) Reset() {
	*x = CBroadcast_GetBroadcastViewerStats_Request{}
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CBroadcast_GetBroadcastViewerStats_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBroadcast_GetBroadcastViewerStats_Request) ProtoMessage() {}

func (x *CBroadcast_GetBroadcastViewerStats_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBroadcast_GetBroadcastViewerStats_Request.ProtoReflect.Descriptor instead.
func (*CBroadcast_GetBroadcastViewerStats_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_broadcast_steamclient_proto_rawDescGZIP(), []int{62}
}

func (x *CBroadcast_GetBroadcastViewerStats_Request) GetUploadId() uint64 {
	if x != nil && x.UploadId != nil {
		return *x.UploadId
	}
	return 0
}

func (x *CBroadcast_GetBroadcastViewerStats_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

type CBroadcast_GetBroadcastViewerStats_Response struct {
	state         protoimpl.MessageState                                      `protogen:"open.v1"`
	ViewerStats   []*CBroadcast_GetBroadcastViewerStats_Response_ViewerStats  `protobuf:"bytes,1,rep,name=viewer_stats,json=viewerStats" json:"viewer_stats,omitempty"`
	CountryStats  []*CBroadcast_GetBroadcastViewerStats_Response_CountryStats `protobuf:"bytes,2,rep,name=country_stats,json=countryStats" json:"country_stats,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CBroadcast_GetBroadcastViewerStats_Response) Reset() {
	*x = CBroadcast_GetBroadcastViewerStats_Response{}
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CBroadcast_GetBroadcastViewerStats_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBroadcast_GetBroadcastViewerStats_Response) ProtoMessage() {}

func (x *CBroadcast_GetBroadcastViewerStats_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBroadcast_GetBroadcastViewerStats_Response.ProtoReflect.Descriptor instead.
func (*CBroadcast_GetBroadcastViewerStats_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_broadcast_steamclient_proto_rawDescGZIP(), []int{63}
}

func (x *CBroadcast_GetBroadcastViewerStats_Response) GetViewerStats() []*CBroadcast_GetBroadcastViewerStats_Response_ViewerStats {
	if x != nil {
		return x.ViewerStats
	}
	return nil
}

func (x *CBroadcast_GetBroadcastViewerStats_Response) GetCountryStats() []*CBroadcast_GetBroadcastViewerStats_Response_CountryStats {
	if x != nil {
		return x.CountryStats
	}
	return nil
}

type CBroadcast_BroadcastViewerState_Notification struct {
	state         protoimpl.MessageState                                     `protogen:"open.v1"`
	Steamid       *uint64                                                    `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	State         *CBroadcast_BroadcastViewerState_Notification_EViewerState `protobuf:"varint,2,opt,name=state,enum=CBroadcast_BroadcastViewerState_Notification_EViewerState,def=1" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CBroadcast_BroadcastViewerState_Notification fields.
const (
	Default_CBroadcast_BroadcastViewerState_Notification_State = CBroadcast_BroadcastViewerState_Notification_k_EViewerNeedsApproval
)

func (x *CBroadcast_BroadcastViewerState_Notification) Reset() {
	*x = CBroadcast_BroadcastViewerState_Notification{}
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[64]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CBroadcast_BroadcastViewerState_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBroadcast_BroadcastViewerState_Notification) ProtoMessage() {}

func (x *CBroadcast_BroadcastViewerState_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[64]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBroadcast_BroadcastViewerState_Notification.ProtoReflect.Descriptor instead.
func (*CBroadcast_BroadcastViewerState_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_broadcast_steamclient_proto_rawDescGZIP(), []int{64}
}

func (x *CBroadcast_BroadcastViewerState_Notification) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CBroadcast_BroadcastViewerState_Notification) GetState() CBroadcast_BroadcastViewerState_Notification_EViewerState {
	if x != nil && x.State != nil {
		return *x.State
	}
	return Default_CBroadcast_BroadcastViewerState_Notification_State
}

type CBroadcast_WaitingBroadcastViewer_Notification struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BroadcastId   *uint64                `protobuf:"fixed64,1,opt,name=broadcast_id,json=broadcastId" json:"broadcast_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CBroadcast_WaitingBroadcastViewer_Notification) Reset() {
	*x = CBroadcast_WaitingBroadcastViewer_Notification{}
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[65]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CBroadcast_WaitingBroadcastViewer_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBroadcast_WaitingBroadcastViewer_Notification) ProtoMessage() {}

func (x *CBroadcast_WaitingBroadcastViewer_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[65]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBroadcast_WaitingBroadcastViewer_Notification.ProtoReflect.Descriptor instead.
func (*CBroadcast_WaitingBroadcastViewer_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_broadcast_steamclient_proto_rawDescGZIP(), []int{65}
}

func (x *CBroadcast_WaitingBroadcastViewer_Notification) GetBroadcastId() uint64 {
	if x != nil && x.BroadcastId != nil {
		return *x.BroadcastId
	}
	return 0
}

type CBroadcast_BroadcastUploadStarted_Notification struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	BroadcastId              *uint64                `protobuf:"fixed64,1,opt,name=broadcast_id,json=broadcastId" json:"broadcast_id,omitempty"`
	UploadToken              *string                `protobuf:"bytes,2,opt,name=upload_token,json=uploadToken" json:"upload_token,omitempty"`
	UploadAddress            *string                `protobuf:"bytes,3,opt,name=upload_address,json=uploadAddress" json:"upload_address,omitempty"`
	HttpAddress              *string                `protobuf:"bytes,4,opt,name=http_address,json=httpAddress" json:"http_address,omitempty"`
	BroadcastUploadId        *uint64                `protobuf:"fixed64,5,opt,name=broadcast_upload_id,json=broadcastUploadId" json:"broadcast_upload_id,omitempty"`
	HeartbeatIntervalSeconds *uint32                `protobuf:"varint,6,opt,name=heartbeat_interval_seconds,json=heartbeatIntervalSeconds" json:"heartbeat_interval_seconds,omitempty"`
	IsRtmp                   *bool                  `protobuf:"varint,7,opt,name=is_rtmp,json=isRtmp" json:"is_rtmp,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *CBroadcast_BroadcastUploadStarted_Notification) Reset() {
	*x = CBroadcast_BroadcastUploadStarted_Notification{}
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[66]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CBroadcast_BroadcastUploadStarted_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBroadcast_BroadcastUploadStarted_Notification) ProtoMessage() {}

func (x *CBroadcast_BroadcastUploadStarted_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[66]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBroadcast_BroadcastUploadStarted_Notification.ProtoReflect.Descriptor instead.
func (*CBroadcast_BroadcastUploadStarted_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_broadcast_steamclient_proto_rawDescGZIP(), []int{66}
}

func (x *CBroadcast_BroadcastUploadStarted_Notification) GetBroadcastId() uint64 {
	if x != nil && x.BroadcastId != nil {
		return *x.BroadcastId
	}
	return 0
}

func (x *CBroadcast_BroadcastUploadStarted_Notification) GetUploadToken() string {
	if x != nil && x.UploadToken != nil {
		return *x.UploadToken
	}
	return ""
}

func (x *CBroadcast_BroadcastUploadStarted_Notification) GetUploadAddress() string {
	if x != nil && x.UploadAddress != nil {
		return *x.UploadAddress
	}
	return ""
}

func (x *CBroadcast_BroadcastUploadStarted_Notification) GetHttpAddress() string {
	if x != nil && x.HttpAddress != nil {
		return *x.HttpAddress
	}
	return ""
}

func (x *CBroadcast_BroadcastUploadStarted_Notification) GetBroadcastUploadId() uint64 {
	if x != nil && x.BroadcastUploadId != nil {
		return *x.BroadcastUploadId
	}
	return 0
}

func (x *CBroadcast_BroadcastUploadStarted_Notification) GetHeartbeatIntervalSeconds() uint32 {
	if x != nil && x.HeartbeatIntervalSeconds != nil {
		return *x.HeartbeatIntervalSeconds
	}
	return 0
}

func (x *CBroadcast_BroadcastUploadStarted_Notification) GetIsRtmp() bool {
	if x != nil && x.IsRtmp != nil {
		return *x.IsRtmp
	}
	return false
}

type CBroadcast_StopBroadcastUpload_Notification struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	BroadcastId        *uint64                `protobuf:"fixed64,1,opt,name=broadcast_id,json=broadcastId" json:"broadcast_id,omitempty"`
	BroadcastRelayId   *uint64                `protobuf:"fixed64,2,opt,name=broadcast_relay_id,json=broadcastRelayId" json:"broadcast_relay_id,omitempty"`
	UploadResult       *uint32                `protobuf:"varint,3,opt,name=upload_result,json=uploadResult" json:"upload_result,omitempty"`
	TooManyPoorUploads *bool                  `protobuf:"varint,4,opt,name=too_many_poor_uploads,json=tooManyPoorUploads" json:"too_many_poor_uploads,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *CBroadcast_StopBroadcastUpload_Notification) Reset() {
	*x = CBroadcast_StopBroadcastUpload_Notification{}
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[67]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CBroadcast_StopBroadcastUpload_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBroadcast_StopBroadcastUpload_Notification) ProtoMessage() {}

func (x *CBroadcast_StopBroadcastUpload_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[67]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBroadcast_StopBroadcastUpload_Notification.ProtoReflect.Descriptor instead.
func (*CBroadcast_StopBroadcastUpload_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_broadcast_steamclient_proto_rawDescGZIP(), []int{67}
}

func (x *CBroadcast_StopBroadcastUpload_Notification) GetBroadcastId() uint64 {
	if x != nil && x.BroadcastId != nil {
		return *x.BroadcastId
	}
	return 0
}

func (x *CBroadcast_StopBroadcastUpload_Notification) GetBroadcastRelayId() uint64 {
	if x != nil && x.BroadcastRelayId != nil {
		return *x.BroadcastRelayId
	}
	return 0
}

func (x *CBroadcast_StopBroadcastUpload_Notification) GetUploadResult() uint32 {
	if x != nil && x.UploadResult != nil {
		return *x.UploadResult
	}
	return 0
}

func (x *CBroadcast_StopBroadcastUpload_Notification) GetTooManyPoorUploads() bool {
	if x != nil && x.TooManyPoorUploads != nil {
		return *x.TooManyPoorUploads
	}
	return false
}

type CBroadcast_SessionClosed_Notification struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BroadcastId   *uint64                `protobuf:"fixed64,1,opt,name=broadcast_id,json=broadcastId" json:"broadcast_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CBroadcast_SessionClosed_Notification) Reset() {
	*x = CBroadcast_SessionClosed_Notification{}
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[68]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CBroadcast_SessionClosed_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBroadcast_SessionClosed_Notification) ProtoMessage() {}

func (x *CBroadcast_SessionClosed_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[68]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBroadcast_SessionClosed_Notification.ProtoReflect.Descriptor instead.
func (*CBroadcast_SessionClosed_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_broadcast_steamclient_proto_rawDescGZIP(), []int{68}
}

func (x *CBroadcast_SessionClosed_Notification) GetBroadcastId() uint64 {
	if x != nil && x.BroadcastId != nil {
		return *x.BroadcastId
	}
	return 0
}

type CBroadcast_ViewerBroadcastInvite_Notification struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	BroadcasterSteamid *uint64                `protobuf:"fixed64,1,opt,name=broadcaster_steamid,json=broadcasterSteamid" json:"broadcaster_steamid,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *CBroadcast_ViewerBroadcastInvite_Notification) Reset() {
	*x = CBroadcast_ViewerBroadcastInvite_Notification{}
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[69]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CBroadcast_ViewerBroadcastInvite_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBroadcast_ViewerBroadcastInvite_Notification) ProtoMessage() {}

func (x *CBroadcast_ViewerBroadcastInvite_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[69]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBroadcast_ViewerBroadcastInvite_Notification.ProtoReflect.Descriptor instead.
func (*CBroadcast_ViewerBroadcastInvite_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_broadcast_steamclient_proto_rawDescGZIP(), []int{69}
}

func (x *CBroadcast_ViewerBroadcastInvite_Notification) GetBroadcasterSteamid() uint64 {
	if x != nil && x.BroadcasterSteamid != nil {
		return *x.BroadcasterSteamid
	}
	return 0
}

type CBroadcast_BroadcastStatus_Notification struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BroadcastId   *uint64                `protobuf:"fixed64,1,opt,name=broadcast_id,json=broadcastId" json:"broadcast_id,omitempty"`
	NumViewers    *int32                 `protobuf:"varint,2,opt,name=num_viewers,json=numViewers" json:"num_viewers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CBroadcast_BroadcastStatus_Notification) Reset() {
	*x = CBroadcast_BroadcastStatus_Notification{}
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[70]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CBroadcast_BroadcastStatus_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBroadcast_BroadcastStatus_Notification) ProtoMessage() {}

func (x *CBroadcast_BroadcastStatus_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[70]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBroadcast_BroadcastStatus_Notification.ProtoReflect.Descriptor instead.
func (*CBroadcast_BroadcastStatus_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_broadcast_steamclient_proto_rawDescGZIP(), []int{70}
}

func (x *CBroadcast_BroadcastStatus_Notification) GetBroadcastId() uint64 {
	if x != nil && x.BroadcastId != nil {
		return *x.BroadcastId
	}
	return 0
}

func (x *CBroadcast_BroadcastStatus_Notification) GetNumViewers() int32 {
	if x != nil && x.NumViewers != nil {
		return *x.NumViewers
	}
	return 0
}

type CBroadcast_BroadcastChannelLive_Notification struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	BroadcastChannelId     *uint64                `protobuf:"fixed64,1,opt,name=broadcast_channel_id,json=broadcastChannelId" json:"broadcast_channel_id,omitempty"`
	BroadcastChannelName   *string                `protobuf:"bytes,2,opt,name=broadcast_channel_name,json=broadcastChannelName" json:"broadcast_channel_name,omitempty"`
	BroadcastChannelAvatar *string                `protobuf:"bytes,3,opt,name=broadcast_channel_avatar,json=broadcastChannelAvatar" json:"broadcast_channel_avatar,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *CBroadcast_BroadcastChannelLive_Notification) Reset() {
	*x = CBroadcast_BroadcastChannelLive_Notification{}
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[71]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CBroadcast_BroadcastChannelLive_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBroadcast_BroadcastChannelLive_Notification) ProtoMessage() {}

func (x *CBroadcast_BroadcastChannelLive_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[71]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBroadcast_BroadcastChannelLive_Notification.ProtoReflect.Descriptor instead.
func (*CBroadcast_BroadcastChannelLive_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_broadcast_steamclient_proto_rawDescGZIP(), []int{71}
}

func (x *CBroadcast_BroadcastChannelLive_Notification) GetBroadcastChannelId() uint64 {
	if x != nil && x.BroadcastChannelId != nil {
		return *x.BroadcastChannelId
	}
	return 0
}

func (x *CBroadcast_BroadcastChannelLive_Notification) GetBroadcastChannelName() string {
	if x != nil && x.BroadcastChannelName != nil {
		return *x.BroadcastChannelName
	}
	return ""
}

func (x *CBroadcast_BroadcastChannelLive_Notification) GetBroadcastChannelAvatar() string {
	if x != nil && x.BroadcastChannelAvatar != nil {
		return *x.BroadcastChannelAvatar
	}
	return ""
}

type CBroadcast_SendThumbnailToRelay_Notification struct {
	state                       protoimpl.MessageState `protogen:"open.v1"`
	ThumbnailUploadToken        *string                `protobuf:"bytes,1,opt,name=thumbnail_upload_token,json=thumbnailUploadToken" json:"thumbnail_upload_token,omitempty"`
	ThumbnailBroadcastSessionId *uint64                `protobuf:"fixed64,2,opt,name=thumbnail_broadcast_session_id,json=thumbnailBroadcastSessionId" json:"thumbnail_broadcast_session_id,omitempty"`
	ThumbnailData               []byte                 `protobuf:"bytes,3,opt,name=thumbnail_data,json=thumbnailData" json:"thumbnail_data,omitempty"`
	ThumbnailWidth              *uint32                `protobuf:"varint,4,opt,name=thumbnail_width,json=thumbnailWidth" json:"thumbnail_width,omitempty"`
	ThumbnailHeight             *uint32                `protobuf:"varint,5,opt,name=thumbnail_height,json=thumbnailHeight" json:"thumbnail_height,omitempty"`
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

func (x *CBroadcast_SendThumbnailToRelay_Notification) Reset() {
	*x = CBroadcast_SendThumbnailToRelay_Notification{}
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[72]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CBroadcast_SendThumbnailToRelay_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBroadcast_SendThumbnailToRelay_Notification) ProtoMessage() {}

func (x *CBroadcast_SendThumbnailToRelay_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[72]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBroadcast_SendThumbnailToRelay_Notification.ProtoReflect.Descriptor instead.
func (*CBroadcast_SendThumbnailToRelay_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_broadcast_steamclient_proto_rawDescGZIP(), []int{72}
}

func (x *CBroadcast_SendThumbnailToRelay_Notification) GetThumbnailUploadToken() string {
	if x != nil && x.ThumbnailUploadToken != nil {
		return *x.ThumbnailUploadToken
	}
	return ""
}

func (x *CBroadcast_SendThumbnailToRelay_Notification) GetThumbnailBroadcastSessionId() uint64 {
	if x != nil && x.ThumbnailBroadcastSessionId != nil {
		return *x.ThumbnailBroadcastSessionId
	}
	return 0
}

func (x *CBroadcast_SendThumbnailToRelay_Notification) GetThumbnailData() []byte {
	if x != nil {
		return x.ThumbnailData
	}
	return nil
}

func (x *CBroadcast_SendThumbnailToRelay_Notification) GetThumbnailWidth() uint32 {
	if x != nil && x.ThumbnailWidth != nil {
		return *x.ThumbnailWidth
	}
	return 0
}

func (x *CBroadcast_SendThumbnailToRelay_Notification) GetThumbnailHeight() uint32 {
	if x != nil && x.ThumbnailHeight != nil {
		return *x.ThumbnailHeight
	}
	return 0
}

type CBroadcast_WebRTCNeedTURNServer_Notification struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	BroadcastSessionId *uint64                `protobuf:"fixed64,1,opt,name=broadcast_session_id,json=broadcastSessionId" json:"broadcast_session_id,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *CBroadcast_WebRTCNeedTURNServer_Notification) Reset() {
	*x = CBroadcast_WebRTCNeedTURNServer_Notification{}
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[73]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CBroadcast_WebRTCNeedTURNServer_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBroadcast_WebRTCNeedTURNServer_Notification) ProtoMessage() {}

func (x *CBroadcast_WebRTCNeedTURNServer_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[73]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBroadcast_WebRTCNeedTURNServer_Notification.ProtoReflect.Descriptor instead.
func (*CBroadcast_WebRTCNeedTURNServer_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_broadcast_steamclient_proto_rawDescGZIP(), []int{73}
}

func (x *CBroadcast_WebRTCNeedTURNServer_Notification) GetBroadcastSessionId() uint64 {
	if x != nil && x.BroadcastSessionId != nil {
		return *x.BroadcastSessionId
	}
	return 0
}

type CBroadcast_WebRTCStart_Notification struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	BroadcastSessionId *uint64                `protobuf:"fixed64,1,opt,name=broadcast_session_id,json=broadcastSessionId" json:"broadcast_session_id,omitempty"`
	WebrtcSessionId    *uint64                `protobuf:"fixed64,2,opt,name=webrtc_session_id,json=webrtcSessionId" json:"webrtc_session_id,omitempty"`
	ViewerSteamid      *uint64                `protobuf:"fixed64,3,opt,name=viewer_steamid,json=viewerSteamid" json:"viewer_steamid,omitempty"`
	ViewerToken        *uint64                `protobuf:"fixed64,4,opt,name=viewer_token,json=viewerToken" json:"viewer_token,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *CBroadcast_WebRTCStart_Notification) Reset() {
	*x = CBroadcast_WebRTCStart_Notification{}
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[74]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CBroadcast_WebRTCStart_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBroadcast_WebRTCStart_Notification) ProtoMessage() {}

func (x *CBroadcast_WebRTCStart_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[74]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBroadcast_WebRTCStart_Notification.ProtoReflect.Descriptor instead.
func (*CBroadcast_WebRTCStart_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_broadcast_steamclient_proto_rawDescGZIP(), []int{74}
}

func (x *CBroadcast_WebRTCStart_Notification) GetBroadcastSessionId() uint64 {
	if x != nil && x.BroadcastSessionId != nil {
		return *x.BroadcastSessionId
	}
	return 0
}

func (x *CBroadcast_WebRTCStart_Notification) GetWebrtcSessionId() uint64 {
	if x != nil && x.WebrtcSessionId != nil {
		return *x.WebrtcSessionId
	}
	return 0
}

func (x *CBroadcast_WebRTCStart_Notification) GetViewerSteamid() uint64 {
	if x != nil && x.ViewerSteamid != nil {
		return *x.ViewerSteamid
	}
	return 0
}

func (x *CBroadcast_WebRTCStart_Notification) GetViewerToken() uint64 {
	if x != nil && x.ViewerToken != nil {
		return *x.ViewerToken
	}
	return 0
}

type CBroadcast_WebRTCSetAnswer_Notification struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	BroadcastSessionId *uint64                `protobuf:"fixed64,1,opt,name=broadcast_session_id,json=broadcastSessionId" json:"broadcast_session_id,omitempty"`
	WebrtcSessionId    *uint64                `protobuf:"fixed64,2,opt,name=webrtc_session_id,json=webrtcSessionId" json:"webrtc_session_id,omitempty"`
	Answer             *string                `protobuf:"bytes,3,opt,name=answer" json:"answer,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *CBroadcast_WebRTCSetAnswer_Notification) Reset() {
	*x = CBroadcast_WebRTCSetAnswer_Notification{}
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[75]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CBroadcast_WebRTCSetAnswer_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBroadcast_WebRTCSetAnswer_Notification) ProtoMessage() {}

func (x *CBroadcast_WebRTCSetAnswer_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[75]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBroadcast_WebRTCSetAnswer_Notification.ProtoReflect.Descriptor instead.
func (*CBroadcast_WebRTCSetAnswer_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_broadcast_steamclient_proto_rawDescGZIP(), []int{75}
}

func (x *CBroadcast_WebRTCSetAnswer_Notification) GetBroadcastSessionId() uint64 {
	if x != nil && x.BroadcastSessionId != nil {
		return *x.BroadcastSessionId
	}
	return 0
}

func (x *CBroadcast_WebRTCSetAnswer_Notification) GetWebrtcSessionId() uint64 {
	if x != nil && x.WebrtcSessionId != nil {
		return *x.WebrtcSessionId
	}
	return 0
}

func (x *CBroadcast_WebRTCSetAnswer_Notification) GetAnswer() string {
	if x != nil && x.Answer != nil {
		return *x.Answer
	}
	return ""
}

type CBroadcast_WebRTCAddViewerCandidate_Notification struct {
	state              protoimpl.MessageState       `protogen:"open.v1"`
	BroadcastSessionId *uint64                      `protobuf:"fixed64,1,opt,name=broadcast_session_id,json=broadcastSessionId" json:"broadcast_session_id,omitempty"`
	WebrtcSessionId    *uint64                      `protobuf:"fixed64,2,opt,name=webrtc_session_id,json=webrtcSessionId" json:"webrtc_session_id,omitempty"`
	Candidate          *CBroadcast_WebRTC_Candidate `protobuf:"bytes,3,opt,name=candidate" json:"candidate,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *CBroadcast_WebRTCAddViewerCandidate_Notification) Reset() {
	*x = CBroadcast_WebRTCAddViewerCandidate_Notification{}
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[76]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CBroadcast_WebRTCAddViewerCandidate_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBroadcast_WebRTCAddViewerCandidate_Notification) ProtoMessage() {}

func (x *CBroadcast_WebRTCAddViewerCandidate_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[76]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBroadcast_WebRTCAddViewerCandidate_Notification.ProtoReflect.Descriptor instead.
func (*CBroadcast_WebRTCAddViewerCandidate_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_broadcast_steamclient_proto_rawDescGZIP(), []int{76}
}

func (x *CBroadcast_WebRTCAddViewerCandidate_Notification) GetBroadcastSessionId() uint64 {
	if x != nil && x.BroadcastSessionId != nil {
		return *x.BroadcastSessionId
	}
	return 0
}

func (x *CBroadcast_WebRTCAddViewerCandidate_Notification) GetWebrtcSessionId() uint64 {
	if x != nil && x.WebrtcSessionId != nil {
		return *x.WebrtcSessionId
	}
	return 0
}

func (x *CBroadcast_WebRTCAddViewerCandidate_Notification) GetCandidate() *CBroadcast_WebRTC_Candidate {
	if x != nil {
		return x.Candidate
	}
	return nil
}

type CBroadcast_GetBroadcastChatUserNames_Response_PersonaName struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SteamId       *uint64                `protobuf:"fixed64,1,opt,name=steam_id,json=steamId" json:"steam_id,omitempty"`
	Persona       *string                `protobuf:"bytes,2,opt,name=persona" json:"persona,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CBroadcast_GetBroadcastChatUserNames_Response_PersonaName) Reset() {
	*x = CBroadcast_GetBroadcastChatUserNames_Response_PersonaName{}
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[77]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CBroadcast_GetBroadcastChatUserNames_Response_PersonaName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBroadcast_GetBroadcastChatUserNames_Response_PersonaName) ProtoMessage() {}

func (x *CBroadcast_GetBroadcastChatUserNames_Response_PersonaName) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[77]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBroadcast_GetBroadcastChatUserNames_Response_PersonaName.ProtoReflect.Descriptor instead.
func (*CBroadcast_GetBroadcastChatUserNames_Response_PersonaName) Descriptor() ([]byte, []int) {
	return file_steammessages_broadcast_steamclient_proto_rawDescGZIP(), []int{31, 0}
}

func (x *CBroadcast_GetBroadcastChatUserNames_Response_PersonaName) GetSteamId() uint64 {
	if x != nil && x.SteamId != nil {
		return *x.SteamId
	}
	return 0
}

func (x *CBroadcast_GetBroadcastChatUserNames_Response_PersonaName) GetPersona() string {
	if x != nil && x.Persona != nil {
		return *x.Persona
	}
	return ""
}

type CBroadcast_GetBroadcastUploadStats_Response_UploadStats struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	UploadResult        *uint32                `protobuf:"varint,1,opt,name=upload_result,json=uploadResult" json:"upload_result,omitempty"`
	TimeStopped         *uint32                `protobuf:"varint,2,opt,name=time_stopped,json=timeStopped" json:"time_stopped,omitempty"`
	SecondsUploaded     *uint32                `protobuf:"varint,3,opt,name=seconds_uploaded,json=secondsUploaded" json:"seconds_uploaded,omitempty"`
	MaxViewers          *uint32                `protobuf:"varint,4,opt,name=max_viewers,json=maxViewers" json:"max_viewers,omitempty"`
	ResolutionX         *uint32                `protobuf:"varint,5,opt,name=resolution_x,json=resolutionX" json:"resolution_x,omitempty"`
	ResolutionY         *uint32                `protobuf:"varint,6,opt,name=resolution_y,json=resolutionY" json:"resolution_y,omitempty"`
	AvgBandwidth        *uint32                `protobuf:"varint,7,opt,name=avg_bandwidth,json=avgBandwidth" json:"avg_bandwidth,omitempty"`
	TotalBytes          *uint64                `protobuf:"varint,8,opt,name=total_bytes,json=totalBytes" json:"total_bytes,omitempty"`
	AppId               *uint32                `protobuf:"varint,9,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	TotalUniqueViewers  *uint32                `protobuf:"varint,10,opt,name=total_unique_viewers,json=totalUniqueViewers" json:"total_unique_viewers,omitempty"`
	TotalSecondsWatched *uint64                `protobuf:"varint,11,opt,name=total_seconds_watched,json=totalSecondsWatched" json:"total_seconds_watched,omitempty"`
	TimeStarted         *uint32                `protobuf:"varint,12,opt,name=time_started,json=timeStarted" json:"time_started,omitempty"`
	UploadId            *uint64                `protobuf:"varint,13,opt,name=upload_id,json=uploadId" json:"upload_id,omitempty"`
	LocalAddress        *string                `protobuf:"bytes,14,opt,name=local_address,json=localAddress" json:"local_address,omitempty"`
	RemoteAddress       *string                `protobuf:"bytes,15,opt,name=remote_address,json=remoteAddress" json:"remote_address,omitempty"`
	FramesPerSecond     *uint32                `protobuf:"varint,16,opt,name=frames_per_second,json=framesPerSecond" json:"frames_per_second,omitempty"`
	NumRepresentations  *uint32                `protobuf:"varint,17,opt,name=num_representations,json=numRepresentations" json:"num_representations,omitempty"`
	AppName             *string                `protobuf:"bytes,18,opt,name=app_name,json=appName" json:"app_name,omitempty"`
	IsReplay            *bool                  `protobuf:"varint,19,opt,name=is_replay,json=isReplay" json:"is_replay,omitempty"`
	SessionId           *uint64                `protobuf:"varint,20,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *CBroadcast_GetBroadcastUploadStats_Response_UploadStats) Reset() {
	*x = CBroadcast_GetBroadcastUploadStats_Response_UploadStats{}
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[78]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CBroadcast_GetBroadcastUploadStats_Response_UploadStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBroadcast_GetBroadcastUploadStats_Response_UploadStats) ProtoMessage() {}

func (x *CBroadcast_GetBroadcastUploadStats_Response_UploadStats) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[78]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBroadcast_GetBroadcastUploadStats_Response_UploadStats.ProtoReflect.Descriptor instead.
func (*CBroadcast_GetBroadcastUploadStats_Response_UploadStats) Descriptor() ([]byte, []int) {
	return file_steammessages_broadcast_steamclient_proto_rawDescGZIP(), []int{61, 0}
}

func (x *CBroadcast_GetBroadcastUploadStats_Response_UploadStats) GetUploadResult() uint32 {
	if x != nil && x.UploadResult != nil {
		return *x.UploadResult
	}
	return 0
}

func (x *CBroadcast_GetBroadcastUploadStats_Response_UploadStats) GetTimeStopped() uint32 {
	if x != nil && x.TimeStopped != nil {
		return *x.TimeStopped
	}
	return 0
}

func (x *CBroadcast_GetBroadcastUploadStats_Response_UploadStats) GetSecondsUploaded() uint32 {
	if x != nil && x.SecondsUploaded != nil {
		return *x.SecondsUploaded
	}
	return 0
}

func (x *CBroadcast_GetBroadcastUploadStats_Response_UploadStats) GetMaxViewers() uint32 {
	if x != nil && x.MaxViewers != nil {
		return *x.MaxViewers
	}
	return 0
}

func (x *CBroadcast_GetBroadcastUploadStats_Response_UploadStats) GetResolutionX() uint32 {
	if x != nil && x.ResolutionX != nil {
		return *x.ResolutionX
	}
	return 0
}

func (x *CBroadcast_GetBroadcastUploadStats_Response_UploadStats) GetResolutionY() uint32 {
	if x != nil && x.ResolutionY != nil {
		return *x.ResolutionY
	}
	return 0
}

func (x *CBroadcast_GetBroadcastUploadStats_Response_UploadStats) GetAvgBandwidth() uint32 {
	if x != nil && x.AvgBandwidth != nil {
		return *x.AvgBandwidth
	}
	return 0
}

func (x *CBroadcast_GetBroadcastUploadStats_Response_UploadStats) GetTotalBytes() uint64 {
	if x != nil && x.TotalBytes != nil {
		return *x.TotalBytes
	}
	return 0
}

func (x *CBroadcast_GetBroadcastUploadStats_Response_UploadStats) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CBroadcast_GetBroadcastUploadStats_Response_UploadStats) GetTotalUniqueViewers() uint32 {
	if x != nil && x.TotalUniqueViewers != nil {
		return *x.TotalUniqueViewers
	}
	return 0
}

func (x *CBroadcast_GetBroadcastUploadStats_Response_UploadStats) GetTotalSecondsWatched() uint64 {
	if x != nil && x.TotalSecondsWatched != nil {
		return *x.TotalSecondsWatched
	}
	return 0
}

func (x *CBroadcast_GetBroadcastUploadStats_Response_UploadStats) GetTimeStarted() uint32 {
	if x != nil && x.TimeStarted != nil {
		return *x.TimeStarted
	}
	return 0
}

func (x *CBroadcast_GetBroadcastUploadStats_Response_UploadStats) GetUploadId() uint64 {
	if x != nil && x.UploadId != nil {
		return *x.UploadId
	}
	return 0
}

func (x *CBroadcast_GetBroadcastUploadStats_Response_UploadStats) GetLocalAddress() string {
	if x != nil && x.LocalAddress != nil {
		return *x.LocalAddress
	}
	return ""
}

func (x *CBroadcast_GetBroadcastUploadStats_Response_UploadStats) GetRemoteAddress() string {
	if x != nil && x.RemoteAddress != nil {
		return *x.RemoteAddress
	}
	return ""
}

func (x *CBroadcast_GetBroadcastUploadStats_Response_UploadStats) GetFramesPerSecond() uint32 {
	if x != nil && x.FramesPerSecond != nil {
		return *x.FramesPerSecond
	}
	return 0
}

func (x *CBroadcast_GetBroadcastUploadStats_Response_UploadStats) GetNumRepresentations() uint32 {
	if x != nil && x.NumRepresentations != nil {
		return *x.NumRepresentations
	}
	return 0
}

func (x *CBroadcast_GetBroadcastUploadStats_Response_UploadStats) GetAppName() string {
	if x != nil && x.AppName != nil {
		return *x.AppName
	}
	return ""
}

func (x *CBroadcast_GetBroadcastUploadStats_Response_UploadStats) GetIsReplay() bool {
	if x != nil && x.IsReplay != nil {
		return *x.IsReplay
	}
	return false
}

func (x *CBroadcast_GetBroadcastUploadStats_Response_UploadStats) GetSessionId() uint64 {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return 0
}

type CBroadcast_GetBroadcastViewerStats_Response_ViewerStats struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Time          *uint32                `protobuf:"varint,1,opt,name=time" json:"time,omitempty"`
	NumViewers    *uint32                `protobuf:"varint,2,opt,name=num_viewers,json=numViewers" json:"num_viewers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CBroadcast_GetBroadcastViewerStats_Response_ViewerStats) Reset() {
	*x = CBroadcast_GetBroadcastViewerStats_Response_ViewerStats{}
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[79]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CBroadcast_GetBroadcastViewerStats_Response_ViewerStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBroadcast_GetBroadcastViewerStats_Response_ViewerStats) ProtoMessage() {}

func (x *CBroadcast_GetBroadcastViewerStats_Response_ViewerStats) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[79]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBroadcast_GetBroadcastViewerStats_Response_ViewerStats.ProtoReflect.Descriptor instead.
func (*CBroadcast_GetBroadcastViewerStats_Response_ViewerStats) Descriptor() ([]byte, []int) {
	return file_steammessages_broadcast_steamclient_proto_rawDescGZIP(), []int{63, 0}
}

func (x *CBroadcast_GetBroadcastViewerStats_Response_ViewerStats) GetTime() uint32 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return 0
}

func (x *CBroadcast_GetBroadcastViewerStats_Response_ViewerStats) GetNumViewers() uint32 {
	if x != nil && x.NumViewers != nil {
		return *x.NumViewers
	}
	return 0
}

type CBroadcast_GetBroadcastViewerStats_Response_CountryStats struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CountryCode   *string                `protobuf:"bytes,1,opt,name=country_code,json=countryCode" json:"country_code,omitempty"`
	NumViewers    *uint32                `protobuf:"varint,2,opt,name=num_viewers,json=numViewers" json:"num_viewers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CBroadcast_GetBroadcastViewerStats_Response_CountryStats) Reset() {
	*x = CBroadcast_GetBroadcastViewerStats_Response_CountryStats{}
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[80]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CBroadcast_GetBroadcastViewerStats_Response_CountryStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CBroadcast_GetBroadcastViewerStats_Response_CountryStats) ProtoMessage() {}

func (x *CBroadcast_GetBroadcastViewerStats_Response_CountryStats) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_broadcast_steamclient_proto_msgTypes[80]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CBroadcast_GetBroadcastViewerStats_Response_CountryStats.ProtoReflect.Descriptor instead.
func (*CBroadcast_GetBroadcastViewerStats_Response_CountryStats) Descriptor() ([]byte, []int) {
	return file_steammessages_broadcast_steamclient_proto_rawDescGZIP(), []int{63, 1}
}

func (x *CBroadcast_GetBroadcastViewerStats_Response_CountryStats) GetCountryCode() string {
	if x != nil && x.CountryCode != nil {
		return *x.CountryCode
	}
	return ""
}

func (x *CBroadcast_GetBroadcastViewerStats_Response_CountryStats) GetNumViewers() uint32 {
	if x != nil && x.NumViewers != nil {
		return *x.NumViewers
	}
	return 0
}

var File_steammessages_broadcast_steamclient_proto protoreflect.FileDescriptor

const file_steammessages_broadcast_steamclient_proto_rawDesc = "" +
	"\n" +
	")steammessages_broadcast.steamclient.proto\x1a\x18steammessages_base.proto\x1a,steammessages_unified_base.steamclient.proto\"\xc1\x02\n" +
	"(CBroadcast_BeginBroadcastSession_Request\x12\x1e\n" +
	"\n" +
	"permission\x18\x01 \x01(\x05R\n" +
	"permission\x12\x16\n" +
	"\x06gameid\x18\x02 \x01(\x04R\x06gameid\x12,\n" +
	"\x12client_instance_id\x18\x03 \x01(\x04R\x10clientInstanceId\x12\x14\n" +
	"\x05title\x18\x04 \x01(\tR\x05title\x12\x16\n" +
	"\x06cellid\x18\x05 \x01(\rR\x06cellid\x12\x1d\n" +
	"\n" +
	"rtmp_token\x18\x06 \x01(\x04R\trtmpToken\x12)\n" +
	"\x10thumbnail_upload\x18\a \x01(\bR\x0fthumbnailUpload\x12\x14\n" +
	"\x05sysid\x18\t \x01(\rR\x05sysid\x12!\n" +
	"\fallow_webrtc\x18\n" +
	" \x01(\bR\vallowWebrtc\"\xba\x02\n" +
	")CBroadcast_BeginBroadcastSession_Response\x12!\n" +
	"\fbroadcast_id\x18\x01 \x01(\x06R\vbroadcastId\x128\n" +
	"\x18thumbnail_upload_address\x18\x02 \x01(\tR\x16thumbnailUploadAddress\x124\n" +
	"\x16thumbnail_upload_token\x18\x03 \x01(\tR\x14thumbnailUploadToken\x12<\n" +
	"\x1athumbnail_interval_seconds\x18\x04 \x01(\rR\x18thumbnailIntervalSeconds\x12<\n" +
	"\x1aheartbeat_interval_seconds\x18\x05 \x01(\rR\x18heartbeatIntervalSeconds\"K\n" +
	"&CBroadcast_EndBroadcastSession_Request\x12!\n" +
	"\fbroadcast_id\x18\x01 \x01(\x06R\vbroadcastId\")\n" +
	"'CBroadcast_EndBroadcastSession_Response\"\xa3\x02\n" +
	"'CBroadcast_StartBroadcastUpload_Request\x12!\n" +
	"\fbroadcast_id\x18\x01 \x01(\x06R\vbroadcastId\x12\x16\n" +
	"\x06cellid\x18\x02 \x01(\rR\x06cellid\x12\x17\n" +
	"\aas_rtmp\x18\x03 \x01(\bR\x06asRtmp\x12#\n" +
	"\rdelay_seconds\x18\x04 \x01(\rR\fdelaySeconds\x12 \n" +
	"\n" +
	"rtmp_token\x18\x05 \x01(\x04:\x010R\trtmpToken\x12*\n" +
	"\x11upload_ip_address\x18\x06 \x01(\rR\x0fuploadIpAddress\x12\x1b\n" +
	"\tis_replay\x18\a \x01(\bR\bisReplay\x12\x14\n" +
	"\x05sysid\x18\b \x01(\rR\x05sysid\"\xec\x01\n" +
	"(CBroadcast_StartBroadcastUpload_Response\x12!\n" +
	"\fupload_token\x18\x01 \x01(\tR\vuploadToken\x12%\n" +
	"\x0eupload_address\x18\x02 \x01(\tR\ruploadAddress\x12.\n" +
	"\x13broadcast_upload_id\x18\x03 \x01(\x06R\x11broadcastUploadId\x12#\n" +
	"\renable_replay\x18\x06 \x01(\bR\fenableReplay\x12!\n" +
	"\fhttp_address\x18\a \x01(\tR\vhttpAddress\"\x88\x01\n" +
	"1CBroadcast_NotifyBroadcastUploadStop_Notification\x12.\n" +
	"\x13broadcast_upload_id\x18\x01 \x01(\x06R\x11broadcastUploadId\x12#\n" +
	"\rupload_result\x18\x02 \x01(\rR\fuploadResult\"\xb6\x02\n" +
	"!CBroadcast_WatchBroadcast_Request\x12\x18\n" +
	"\asteamid\x18\x01 \x01(\x06R\asteamid\x122\n" +
	"\x15existing_broadcast_id\x18\x02 \x01(\x06R\x13existingBroadcastId\x12!\n" +
	"\fviewer_token\x18\x03 \x01(\x06R\vviewerToken\x12\x1f\n" +
	"\vclient_cell\x18\x05 \x01(\rR\n" +
	"clientCell\x12b\n" +
	"\x0ewatch_location\x18\x06 \x01(\x0e2\x18.EBroadcastWatchLocation:!k_EBroadcastWatchLocation_InvalidR\rwatchLocation\x12\x1b\n" +
	"\tis_webrtc\x18\a \x01(\bR\bisWebrtc\"\xa1\n" +
	"\n" +
	"\"CBroadcast_WatchBroadcast_Response\x12e\n" +
	"\bresponse\x18\x01 \x01(\x0e22.CBroadcast_WatchBroadcast_Response.EWatchResponse:\x15k_EWatchResponseReadyR\bresponse\x12\x17\n" +
	"\ampd_url\x18\x02 \x01(\tR\x06mpdUrl\x12!\n" +
	"\fbroadcast_id\x18\x03 \x01(\x06R\vbroadcastId\x12\x16\n" +
	"\x06gameid\x18\x04 \x01(\x04R\x06gameid\x12\x14\n" +
	"\x05title\x18\x05 \x01(\tR\x05title\x12\x1f\n" +
	"\vnum_viewers\x18\x06 \x01(\rR\n" +
	"numViewers\x12\x1e\n" +
	"\n" +
	"permission\x18\a \x01(\x05R\n" +
	"permission\x12\x17\n" +
	"\ais_rtmp\x18\b \x01(\bR\x06isRtmp\x12#\n" +
	"\rseconds_delay\x18\t \x01(\x05R\fsecondsDelay\x12!\n" +
	"\fviewer_token\x18\n" +
	" \x01(\x06R\vviewerToken\x12-\n" +
	"\x13hls_m3u8_master_url\x18\v \x01(\tR\x10hlsM3u8MasterUrl\x12-\n" +
	"\x12heartbeat_interval\x18\f \x01(\x05R\x11heartbeatInterval\x12#\n" +
	"\rthumbnail_url\x18\r \x01(\tR\fthumbnailUrl\x12\x1b\n" +
	"\tis_webrtc\x18\x0e \x01(\bR\bisWebrtc\x12*\n" +
	"\x11webrtc_session_id\x18\x0f \x01(\x06R\x0fwebrtcSessionId\x12(\n" +
	"\x10webrtc_offer_sdp\x18\x10 \x01(\tR\x0ewebrtcOfferSdp\x12,\n" +
	"\x12webrtc_turn_server\x18\x11 \x01(\tR\x10webrtcTurnServer\x12\x1b\n" +
	"\tis_replay\x18\x12 \x01(\bR\bisReplay\x12\x1a\n" +
	"\bduration\x18\x13 \x01(\x05R\bduration\x125\n" +
	"\x17cdn_auth_url_parameters\x18\x14 \x01(\tR\x14cdnAuthUrlParameters\"\xf3\x03\n" +
	"\x0eEWatchResponse\x12\x19\n" +
	"\x15k_EWatchResponseReady\x10\x01\x12 \n" +
	"\x1ck_EWatchResponseNotAvailable\x10\x02\x12&\n" +
	"\"k_EWatchResponseWaitingForApproval\x10\x03\x12#\n" +
	"\x1fk_EWatchResponseWaitingForStart\x10\x04\x12\"\n" +
	"\x1ek_EWatchResponseInvalidSession\x10\x05\x12%\n" +
	"!k_EWatchResponseTooManyBroadcasts\x10\x06\x12'\n" +
	"#k_EWatchResponseWaitingForReconnect\x10\a\x12&\n" +
	"\"k_EWatchResponseSystemNotSupported\x10\b\x12\"\n" +
	"\x1ek_EWatchResponseUserRestricted\x10\t\x12#\n" +
	"\x1fk_EWatchResponseClientOutOfDate\x10\n" +
	"\x12%\n" +
	"!k_EWatchResponsePoorUploadQuality\x10\v\x12'\n" +
	"#k_EWatchResponseMissingSubscription\x10\f\x12\"\n" +
	"\x1ek_EWatchResponseTooManyViewers\x10\r\"\xb4\x01\n" +
	"*CBroadcast_HeartbeatBroadcast_Notification\x12\x18\n" +
	"\asteamid\x18\x01 \x01(\x06R\asteamid\x12!\n" +
	"\fbroadcast_id\x18\x02 \x01(\x06R\vbroadcastId\x12!\n" +
	"\fviewer_token\x18\x03 \x01(\x06R\vviewerToken\x12&\n" +
	"\x0erepresentation\x18\x04 \x01(\rR\x0erepresentation\"\x8f\x01\n" +
	"-CBroadcast_StopWatchingBroadcast_Notification\x12\x18\n" +
	"\asteamid\x18\x01 \x01(\x06R\asteamid\x12!\n" +
	"\fbroadcast_id\x18\x02 \x01(\x06R\vbroadcastId\x12!\n" +
	"\fviewer_token\x18\x03 \x01(\x06R\vviewerToken\"d\n" +
	"%CBroadcast_GetBroadcastStatus_Request\x12\x18\n" +
	"\asteamid\x18\x01 \x01(\x06R\asteamid\x12!\n" +
	"\fbroadcast_id\x18\x02 \x01(\x06R\vbroadcastId\"\xfe\x03\n" +
	"&CBroadcast_GetBroadcastStatus_Response\x12\x16\n" +
	"\x06gameid\x18\x01 \x01(\x04R\x06gameid\x12\x14\n" +
	"\x05title\x18\x02 \x01(\tR\x05title\x12\x1f\n" +
	"\vnum_viewers\x18\x03 \x01(\rR\n" +
	"numViewers\x12\x1e\n" +
	"\n" +
	"permission\x18\x04 \x01(\x05R\n" +
	"permission\x12\x17\n" +
	"\ais_rtmp\x18\x05 \x01(\bR\x06isRtmp\x12#\n" +
	"\rseconds_delay\x18\x06 \x01(\x05R\fsecondsDelay\x12!\n" +
	"\fis_publisher\x18\a \x01(\bR\visPublisher\x12#\n" +
	"\rthumbnail_url\x18\b \x01(\tR\fthumbnailUrl\x12'\n" +
	"\x0fupdate_interval\x18\t \x01(\x05R\x0eupdateInterval\x12!\n" +
	"\fis_uploading\x18\n" +
	" \x01(\bR\visUploading\x12\x1a\n" +
	"\bduration\x18\v \x01(\rR\bduration\x12\x1b\n" +
	"\tis_replay\x18\f \x01(\bR\bisReplay\x12(\n" +
	"\x10is_capturing_vod\x18\r \x01(\bR\x0eisCapturingVod\x120\n" +
	"\x14is_store_whitelisted\x18\x0e \x01(\bR\x12isStoreWhitelisted\"g\n" +
	"(CBroadcast_GetBroadcastThumbnail_Request\x12\x18\n" +
	"\asteamid\x18\x01 \x01(\x06R\asteamid\x12!\n" +
	"\fbroadcast_id\x18\x02 \x01(\x06R\vbroadcastId\"\xb6\x01\n" +
	")CBroadcast_GetBroadcastThumbnail_Response\x12#\n" +
	"\rthumbnail_url\x18\x01 \x01(\tR\fthumbnailUrl\x12'\n" +
	"\x0fupdate_interval\x18\x02 \x01(\x05R\x0eupdateInterval\x12\x1f\n" +
	"\vnum_viewers\x18\x03 \x01(\x05R\n" +
	"numViewers\x12\x1a\n" +
	"\bduration\x18\x04 \x01(\x05R\bduration\"m\n" +
	"$CBroadcast_InviteToBroadcast_Request\x12\x18\n" +
	"\asteamid\x18\x01 \x01(\x06R\asteamid\x12+\n" +
	"\x11approval_response\x18\x02 \x01(\bR\x10approvalResponse\"A\n" +
	"%CBroadcast_InviteToBroadcast_Response\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\"\xa7\x01\n" +
	"-CBroadcast_SendBroadcastStateToServer_Request\x12\x1e\n" +
	"\n" +
	"permission\x18\x01 \x01(\x05R\n" +
	"permission\x12\x16\n" +
	"\x06gameid\x18\x02 \x01(\x04R\x06gameid\x12\x14\n" +
	"\x05title\x18\x03 \x01(\tR\x05title\x12(\n" +
	"\x10game_data_config\x18\x04 \x01(\tR\x0egameDataConfig\"0\n" +
	".CBroadcast_SendBroadcastStateToServer_Response\"\\\n" +
	"7CBroadcast_NotifyBroadcastSessionHeartbeat_Notification\x12!\n" +
	"\fbroadcast_id\x18\x01 \x01(\x06R\vbroadcastId\"\xa4\x01\n" +
	"'CBroadcast_GetBroadcastChatInfo_Request\x12\x18\n" +
	"\asteamid\x18\x01 \x01(\x06R\asteamid\x12!\n" +
	"\fbroadcast_id\x18\x02 \x01(\x06R\vbroadcastId\x12\x1b\n" +
	"\tclient_ip\x18\x03 \x01(\rR\bclientIp\x12\x1f\n" +
	"\vclient_cell\x18\x04 \x01(\rR\n" +
	"clientCell\"\x97\x01\n" +
	"(CBroadcast_GetBroadcastChatInfo_Response\x12\x17\n" +
	"\achat_id\x18\x01 \x01(\x06R\x06chatId\x12*\n" +
	"\x11view_url_template\x18\x03 \x01(\tR\x0fviewUrlTemplate\x12&\n" +
	"\x0fflair_group_ids\x18\x04 \x03(\rR\rflairGroupIds\"\xba\x01\n" +
	"\"CBroadcast_PostChatMessage_Request\x12\x17\n" +
	"\achat_id\x18\x01 \x01(\x06R\x06chatId\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12\x1f\n" +
	"\vinstance_id\x18\x03 \x01(\rR\n" +
	"instanceId\x12\x1d\n" +
	"\blanguage\x18\x04 \x01(\r:\x010R\blanguage\x12!\n" +
	"\fcountry_code\x18\x05 \x01(\tR\vcountryCode\"\xad\x01\n" +
	"#CBroadcast_PostChatMessage_Response\x12!\n" +
	"\fpersona_name\x18\x01 \x01(\tR\vpersonaName\x12\x17\n" +
	"\ain_game\x18\x02 \x01(\bR\x06inGame\x12\x16\n" +
	"\x06result\x18\x03 \x01(\x05R\x06result\x122\n" +
	"\x15cooldown_time_seconds\x18\x04 \x01(\x05R\x13cooldownTimeSeconds\"Z\n" +
	")CBroadcast_UpdateChatMessageFlair_Request\x12\x17\n" +
	"\achat_id\x18\x01 \x01(\x06R\x06chatId\x12\x14\n" +
	"\x05flair\x18\x02 \x01(\tR\x05flair\"s\n" +
	"*CBroadcast_UpdateChatMessageFlair_Response\x12\x16\n" +
	"\x06result\x18\x01 \x01(\x05R\x06result\x12\x17\n" +
	"\achat_id\x18\x02 \x01(\x06R\x06chatId\x12\x14\n" +
	"\x05flair\x18\x03 \x01(\tR\x05flair\"|\n" +
	"(CBroadcast_MuteBroadcastChatUser_Request\x12\x17\n" +
	"\achat_id\x18\x01 \x01(\x06R\x06chatId\x12!\n" +
	"\fuser_steamid\x18\x02 \x01(\x06R\vuserSteamid\x12\x14\n" +
	"\x05muted\x18\x03 \x01(\bR\x05muted\"+\n" +
	")CBroadcast_MuteBroadcastChatUser_Response\"c\n" +
	"%CBroadcast_RemoveUserChatText_Request\x12\x17\n" +
	"\achat_id\x18\x01 \x01(\x06R\x06chatId\x12!\n" +
	"\fuser_steamid\x18\x02 \x01(\x06R\vuserSteamid\"(\n" +
	"&CBroadcast_RemoveUserChatText_Response\"j\n" +
	",CBroadcast_GetBroadcastChatUserNames_Request\x12\x17\n" +
	"\achat_id\x18\x01 \x01(\x06R\x06chatId\x12!\n" +
	"\fuser_steamid\x18\x02 \x03(\x06R\vuserSteamid\"\xda\x01\n" +
	"-CBroadcast_GetBroadcastChatUserNames_Response\x12_\n" +
	"\rpersona_names\x18\x01 \x03(\v2:.CBroadcast_GetBroadcastChatUserNames_Response.PersonaNameR\fpersonaNames\x1aH\n" +
	"\vPersonaName\x12\x1f\n" +
	"\bsteam_id\x18\x01 \x01(\x06B\x04\xc0\xb6\x18\x01R\asteamId\x12\x18\n" +
	"\apersona\x18\x02 \x01(\tR\apersona\"\xe2\x01\n" +
	"!CBroadcast_StartBuildClip_Request\x12\x18\n" +
	"\asteamid\x18\x01 \x01(\x06R\asteamid\x120\n" +
	"\x14broadcast_session_id\x18\x02 \x01(\x06R\x12broadcastSessionId\x12#\n" +
	"\rfirst_segment\x18\x03 \x01(\x05R\ffirstSegment\x12!\n" +
	"\fnum_segments\x18\x04 \x01(\x05R\vnumSegments\x12)\n" +
	"\x10clip_description\x18\x05 \x01(\tR\x0fclipDescription\"P\n" +
	"\"CBroadcast_StartBuildClip_Response\x12*\n" +
	"\x11broadcast_clip_id\x18\x01 \x01(\x06R\x0fbroadcastClipId\"S\n" +
	"%CBroadcast_GetBuildClipStatus_Request\x12*\n" +
	"\x11broadcast_clip_id\x18\x01 \x01(\x06R\x0fbroadcastClipId\"(\n" +
	"&CBroadcast_GetBuildClipStatus_Response\"\xb6\x01\n" +
	"!CBroadcast_SetClipDetails_Request\x12*\n" +
	"\x11broadcast_clip_id\x18\x01 \x01(\x04R\x0fbroadcastClipId\x12\x1d\n" +
	"\n" +
	"start_time\x18\x02 \x01(\rR\tstartTime\x12\x19\n" +
	"\bend_time\x18\x03 \x01(\rR\aendTime\x12+\n" +
	"\x11video_description\x18\x04 \x01(\tR\x10videoDescription\"$\n" +
	"\"CBroadcast_SetClipDetails_Response\"O\n" +
	"!CBroadcast_GetClipDetails_Request\x12*\n" +
	"\x11broadcast_clip_id\x18\x01 \x01(\x04R\x0fbroadcastClipId\"\xab\x03\n" +
	"\"CBroadcast_GetClipDetails_Response\x12*\n" +
	"\x11broadcast_clip_id\x18\x01 \x01(\x04R\x0fbroadcastClipId\x12\x19\n" +
	"\bvideo_id\x18\x02 \x01(\x04R\avideoId\x12\x1d\n" +
	"\n" +
	"channel_id\x18\x03 \x01(\x04R\tchannelId\x12\x15\n" +
	"\x06app_id\x18\x04 \x01(\rR\x05appId\x123\n" +
	"\x15accountid_broadcaster\x18\x05 \x01(\rR\x14accountidBroadcaster\x12/\n" +
	"\x13accountid_clipmaker\x18\x06 \x01(\rR\x12accountidClipmaker\x12+\n" +
	"\x11video_description\x18\a \x01(\tR\x10videoDescription\x12\x1d\n" +
	"\n" +
	"start_time\x18\b \x01(\rR\tstartTime\x12/\n" +
	"\x13length_milliseconds\x18\t \x01(\rR\x12lengthMilliseconds\x12%\n" +
	"\x0ethumbnail_path\x18\n" +
	" \x01(\tR\rthumbnailPath\"\xbd\x04\n" +
	"\x1eCBroadcast_SetRTMPInfo_Request\x121\n" +
	"\x14broadcast_permission\x18\x01 \x01(\x05R\x13broadcastPermission\x12!\n" +
	"\fupdate_token\x18\x02 \x01(\bR\vupdateToken\x12'\n" +
	"\x0fbroadcast_delay\x18\x03 \x01(\x05R\x0ebroadcastDelay\x12\x15\n" +
	"\x06app_id\x18\x04 \x01(\rR\x05appId\x12&\n" +
	"\x0frequired_app_id\x18\x05 \x01(\rR\rrequiredAppId\x12w\n" +
	"\x19broadcast_chat_permission\x18\x06 \x01(\x0e2\x19.EBroadcastChatPermission: k_EBroadcastChatPermissionPublicR\x17broadcastChatPermission\x12)\n" +
	"\x10broadcast_buffer\x18\a \x01(\x05R\x0fbroadcastBuffer\x12\x18\n" +
	"\asteamid\x18\b \x01(\x06R\asteamid\x12&\n" +
	"\x0fchat_rate_limit\x18\t \x01(\rR\rchatRateLimit\x12#\n" +
	"\renable_replay\x18\n" +
	" \x01(\bR\fenableReplay\x12/\n" +
	"\x14is_partner_chat_only\x18\v \x01(\bR\x11isPartnerChatOnly\x12!\n" +
	"\fwordban_list\x18\f \x01(\tR\vwordbanList\"!\n" +
	"\x1fCBroadcast_SetRTMPInfo_Response\"J\n" +
	"\x1eCBroadcast_GetRTMPInfo_Request\x12\x0e\n" +
	"\x02ip\x18\x01 \x01(\rR\x02ip\x12\x18\n" +
	"\asteamid\x18\x02 \x01(\x06R\asteamid\"\xd7\x04\n" +
	"\x1fCBroadcast_GetRTMPInfo_Response\x121\n" +
	"\x14broadcast_permission\x18\x01 \x01(\x05R\x13broadcastPermission\x12\x1b\n" +
	"\trtmp_host\x18\x02 \x01(\tR\brtmpHost\x12\x1d\n" +
	"\n" +
	"rtmp_token\x18\x03 \x01(\tR\trtmpToken\x12'\n" +
	"\x0fbroadcast_delay\x18\x04 \x01(\x05R\x0ebroadcastDelay\x12\x15\n" +
	"\x06app_id\x18\x05 \x01(\rR\x05appId\x12&\n" +
	"\x0frequired_app_id\x18\x06 \x01(\rR\rrequiredAppId\x12w\n" +
	"\x19broadcast_chat_permission\x18\a \x01(\x0e2\x19.EBroadcastChatPermission: k_EBroadcastChatPermissionPublicR\x17broadcastChatPermission\x12)\n" +
	"\x10broadcast_buffer\x18\b \x01(\x05R\x0fbroadcastBuffer\x12\x18\n" +
	"\asteamid\x18\t \x01(\x06R\asteamid\x12&\n" +
	"\x0fchat_rate_limit\x18\n" +
	" \x01(\rR\rchatRateLimit\x12#\n" +
	"\renable_replay\x18\v \x01(\bR\fenableReplay\x12/\n" +
	"\x14is_partner_chat_only\x18\f \x01(\bR\x11isPartnerChatOnly\x12!\n" +
	"\fwordban_list\x18\r \x01(\tR\vwordbanList\"\x81\x01\n" +
	",CBroadcast_WebRTCHaveTURNServer_Notification\x120\n" +
	"\x14broadcast_session_id\x18\x01 \x01(\x06R\x12broadcastSessionId\x12\x1f\n" +
	"\vturn_server\x18\x02 \x01(\tR\n" +
	"turnServer\"\xda\x01\n" +
	"$CBroadcast_WebRTCStartResult_Request\x12*\n" +
	"\x11webrtc_session_id\x18\x01 \x01(\x06R\x0fwebrtcSessionId\x12\x18\n" +
	"\astarted\x18\x02 \x01(\bR\astarted\x12\x14\n" +
	"\x05offer\x18\x03 \x01(\tR\x05offer\x12!\n" +
	"\fresolution_x\x18\x04 \x01(\rR\vresolutionX\x12!\n" +
	"\fresolution_y\x18\x05 \x01(\rR\vresolutionY\x12\x10\n" +
	"\x03fps\x18\x06 \x01(\rR\x03fps\"'\n" +
	"%CBroadcast_WebRTCStartResult_Response\"N\n" +
	" CBroadcast_WebRTCStopped_Request\x12*\n" +
	"\x11webrtc_session_id\x18\x01 \x01(\x06R\x0fwebrtcSessionId\"#\n" +
	"!CBroadcast_WebRTCStopped_Response\"\x99\x01\n" +
	"\"CBroadcast_WebRTCSetAnswer_Request\x12/\n" +
	"\x13broadcaster_steamid\x18\x01 \x01(\x06R\x12broadcasterSteamid\x12*\n" +
	"\x11webrtc_session_id\x18\x02 \x01(\x06R\x0fwebrtcSessionId\x12\x16\n" +
	"\x06answer\x18\x03 \x01(\tR\x06answer\"%\n" +
	"#CBroadcast_WebRTCSetAnswer_Response\"C\n" +
	")CBroadcast_WebRTCLookupTURNServer_Request\x12\x16\n" +
	"\x06cellid\x18\x01 \x01(\rR\x06cellid\"M\n" +
	"*CBroadcast_WebRTCLookupTURNServer_Response\x12\x1f\n" +
	"\vturn_server\x18\x01 \x01(\tR\n" +
	"turnServer\"|\n" +
	"\x1bCBroadcast_WebRTC_Candidate\x12\x17\n" +
	"\asdp_mid\x18\x01 \x01(\tR\x06sdpMid\x12&\n" +
	"\x0fsdp_mline_index\x18\x02 \x01(\x05R\rsdpMlineIndex\x12\x1c\n" +
	"\tcandidate\x18\x03 \x01(\tR\tcandidate\"\x93\x01\n" +
	")CBroadcast_WebRTCAddHostCandidate_Request\x12*\n" +
	"\x11webrtc_session_id\x18\x01 \x01(\x06R\x0fwebrtcSessionId\x12:\n" +
	"\tcandidate\x18\x02 \x01(\v2\x1c.CBroadcast_WebRTC_CandidateR\tcandidate\",\n" +
	"*CBroadcast_WebRTCAddHostCandidate_Response\"\xc6\x01\n" +
	"+CBroadcast_WebRTCAddViewerCandidate_Request\x12/\n" +
	"\x13broadcaster_steamid\x18\x01 \x01(\x06R\x12broadcasterSteamid\x12*\n" +
	"\x11webrtc_session_id\x18\x02 \x01(\x06R\x0fwebrtcSessionId\x12:\n" +
	"\tcandidate\x18\x03 \x01(\v2\x1c.CBroadcast_WebRTC_CandidateR\tcandidate\".\n" +
	",CBroadcast_WebRTCAddViewerCandidate_Response\"\xbc\x01\n" +
	"*CBroadcast_WebRTCGetHostCandidates_Request\x12/\n" +
	"\x13broadcaster_steamid\x18\x01 \x01(\x06R\x12broadcasterSteamid\x12*\n" +
	"\x11webrtc_session_id\x18\x02 \x01(\x06R\x0fwebrtcSessionId\x121\n" +
	"\x14candidate_generation\x18\x03 \x01(\rR\x13candidateGeneration\"\x9e\x01\n" +
	"+CBroadcast_WebRTCGetHostCandidates_Response\x121\n" +
	"\x14candidate_generation\x18\x01 \x01(\rR\x13candidateGeneration\x12<\n" +
	"\n" +
	"candidates\x18\x02 \x03(\v2\x1c.CBroadcast_WebRTC_CandidateR\n" +
	"candidates\"\xc6\x01\n" +
	"*CBroadcast_GetBroadcastUploadStats_Request\x12 \n" +
	"\trow_limit\x18\x01 \x01(\r:\x03100R\browLimit\x12 \n" +
	"\n" +
	"start_time\x18\x02 \x01(\r:\x010R\tstartTime\x12\x1b\n" +
	"\tupload_id\x18\x03 \x01(\x04R\buploadId\x12\x18\n" +
	"\asteamid\x18\x04 \x01(\x06R\asteamid\x12\x1d\n" +
	"\n" +
	"session_id\x18\x05 \x01(\x04R\tsessionId\"\xf7\x06\n" +
	"+CBroadcast_GetBroadcastUploadStats_Response\x12[\n" +
	"\fupload_stats\x18\x01 \x03(\v28.CBroadcast_GetBroadcastUploadStats_Response.UploadStatsR\vuploadStats\x1a\xea\x05\n" +
	"\vUploadStats\x12#\n" +
	"\rupload_result\x18\x01 \x01(\rR\fuploadResult\x12!\n" +
	"\ftime_stopped\x18\x02 \x01(\rR\vtimeStopped\x12)\n" +
	"\x10seconds_uploaded\x18\x03 \x01(\rR\x0fsecondsUploaded\x12\x1f\n" +
	"\vmax_viewers\x18\x04 \x01(\rR\n" +
	"maxViewers\x12!\n" +
	"\fresolution_x\x18\x05 \x01(\rR\vresolutionX\x12!\n" +
	"\fresolution_y\x18\x06 \x01(\rR\vresolutionY\x12#\n" +
	"\ravg_bandwidth\x18\a \x01(\rR\favgBandwidth\x12\x1f\n" +
	"\vtotal_bytes\x18\b \x01(\x04R\n" +
	"totalBytes\x12\x15\n" +
	"\x06app_id\x18\t \x01(\rR\x05appId\x120\n" +
	"\x14total_unique_viewers\x18\n" +
	" \x01(\rR\x12totalUniqueViewers\x122\n" +
	"\x15total_seconds_watched\x18\v \x01(\x04R\x13totalSecondsWatched\x12!\n" +
	"\ftime_started\x18\f \x01(\rR\vtimeStarted\x12\x1b\n" +
	"\tupload_id\x18\r \x01(\x04R\buploadId\x12#\n" +
	"\rlocal_address\x18\x0e \x01(\tR\flocalAddress\x12%\n" +
	"\x0eremote_address\x18\x0f \x01(\tR\rremoteAddress\x12*\n" +
	"\x11frames_per_second\x18\x10 \x01(\rR\x0fframesPerSecond\x12/\n" +
	"\x13num_representations\x18\x11 \x01(\rR\x12numRepresentations\x12\x19\n" +
	"\bapp_name\x18\x12 \x01(\tR\aappName\x12\x1b\n" +
	"\tis_replay\x18\x13 \x01(\bR\bisReplay\x12\x1d\n" +
	"\n" +
	"session_id\x18\x14 \x01(\x04R\tsessionId\"c\n" +
	"*CBroadcast_GetBroadcastViewerStats_Request\x12\x1b\n" +
	"\tupload_id\x18\x01 \x01(\x04R\buploadId\x12\x18\n" +
	"\asteamid\x18\x02 \x01(\x06R\asteamid\"\x82\x03\n" +
	"+CBroadcast_GetBroadcastViewerStats_Response\x12[\n" +
	"\fviewer_stats\x18\x01 \x03(\v28.CBroadcast_GetBroadcastViewerStats_Response.ViewerStatsR\vviewerStats\x12^\n" +
	"\rcountry_stats\x18\x02 \x03(\v29.CBroadcast_GetBroadcastViewerStats_Response.CountryStatsR\fcountryStats\x1aB\n" +
	"\vViewerStats\x12\x12\n" +
	"\x04time\x18\x01 \x01(\rR\x04time\x12\x1f\n" +
	"\vnum_viewers\x18\x02 \x01(\rR\n" +
	"numViewers\x1aR\n" +
	"\fCountryStats\x12!\n" +
	"\fcountry_code\x18\x01 \x01(\tR\vcountryCode\x12\x1f\n" +
	"\vnum_viewers\x18\x02 \x01(\rR\n" +
	"numViewers\"\x88\x02\n" +
	",CBroadcast_BroadcastViewerState_Notification\x12\x18\n" +
	"\asteamid\x18\x01 \x01(\x06R\asteamid\x12h\n" +
	"\x05state\x18\x02 \x01(\x0e2:.CBroadcast_BroadcastViewerState_Notification.EViewerState:\x16k_EViewerNeedsApprovalR\x05state\"T\n" +
	"\fEViewerState\x12\x1a\n" +
	"\x16k_EViewerNeedsApproval\x10\x01\x12\x15\n" +
	"\x11k_EViewerWatching\x10\x02\x12\x11\n" +
	"\rk_EViewerLeft\x10\x03\"S\n" +
	".CBroadcast_WaitingBroadcastViewer_Notification\x12!\n" +
	"\fbroadcast_id\x18\x01 \x01(\x06R\vbroadcastId\"\xc7\x02\n" +
	".CBroadcast_BroadcastUploadStarted_Notification\x12!\n" +
	"\fbroadcast_id\x18\x01 \x01(\x06R\vbroadcastId\x12!\n" +
	"\fupload_token\x18\x02 \x01(\tR\vuploadToken\x12%\n" +
	"\x0eupload_address\x18\x03 \x01(\tR\ruploadAddress\x12!\n" +
	"\fhttp_address\x18\x04 \x01(\tR\vhttpAddress\x12.\n" +
	"\x13broadcast_upload_id\x18\x05 \x01(\x06R\x11broadcastUploadId\x12<\n" +
	"\x1aheartbeat_interval_seconds\x18\x06 \x01(\rR\x18heartbeatIntervalSeconds\x12\x17\n" +
	"\ais_rtmp\x18\a \x01(\bR\x06isRtmp\"\xd6\x01\n" +
	"+CBroadcast_StopBroadcastUpload_Notification\x12!\n" +
	"\fbroadcast_id\x18\x01 \x01(\x06R\vbroadcastId\x12,\n" +
	"\x12broadcast_relay_id\x18\x02 \x01(\x06R\x10broadcastRelayId\x12#\n" +
	"\rupload_result\x18\x03 \x01(\rR\fuploadResult\x121\n" +
	"\x15too_many_poor_uploads\x18\x04 \x01(\bR\x12tooManyPoorUploads\"J\n" +
	"%CBroadcast_SessionClosed_Notification\x12!\n" +
	"\fbroadcast_id\x18\x01 \x01(\x06R\vbroadcastId\"`\n" +
	"-CBroadcast_ViewerBroadcastInvite_Notification\x12/\n" +
	"\x13broadcaster_steamid\x18\x01 \x01(\x06R\x12broadcasterSteamid\"m\n" +
	"'CBroadcast_BroadcastStatus_Notification\x12!\n" +
	"\fbroadcast_id\x18\x01 \x01(\x06R\vbroadcastId\x12\x1f\n" +
	"\vnum_viewers\x18\x02 \x01(\x05R\n" +
	"numViewers\"\xd0\x01\n" +
	",CBroadcast_BroadcastChannelLive_Notification\x120\n" +
	"\x14broadcast_channel_id\x18\x01 \x01(\x06R\x12broadcastChannelId\x124\n" +
	"\x16broadcast_channel_name\x18\x02 \x01(\tR\x14broadcastChannelName\x128\n" +
	"\x18broadcast_channel_avatar\x18\x03 \x01(\tR\x16broadcastChannelAvatar\"\xa4\x02\n" +
	",CBroadcast_SendThumbnailToRelay_Notification\x124\n" +
	"\x16thumbnail_upload_token\x18\x01 \x01(\tR\x14thumbnailUploadToken\x12C\n" +
	"\x1ethumbnail_broadcast_session_id\x18\x02 \x01(\x06R\x1bthumbnailBroadcastSessionId\x12%\n" +
	"\x0ethumbnail_data\x18\x03 \x01(\fR\rthumbnailData\x12'\n" +
	"\x0fthumbnail_width\x18\x04 \x01(\rR\x0ethumbnailWidth\x12)\n" +
	"\x10thumbnail_height\x18\x05 \x01(\rR\x0fthumbnailHeight\"`\n" +
	",CBroadcast_WebRTCNeedTURNServer_Notification\x120\n" +
	"\x14broadcast_session_id\x18\x01 \x01(\x06R\x12broadcastSessionId\"\xcd\x01\n" +
	"#CBroadcast_WebRTCStart_Notification\x120\n" +
	"\x14broadcast_session_id\x18\x01 \x01(\x06R\x12broadcastSessionId\x12*\n" +
	"\x11webrtc_session_id\x18\x02 \x01(\x06R\x0fwebrtcSessionId\x12%\n" +
	"\x0eviewer_steamid\x18\x03 \x01(\x06R\rviewerSteamid\x12!\n" +
	"\fviewer_token\x18\x04 \x01(\x06R\vviewerToken\"\x9f\x01\n" +
	"'CBroadcast_WebRTCSetAnswer_Notification\x120\n" +
	"\x14broadcast_session_id\x18\x01 \x01(\x06R\x12broadcastSessionId\x12*\n" +
	"\x11webrtc_session_id\x18\x02 \x01(\x06R\x0fwebrtcSessionId\x12\x16\n" +
	"\x06answer\x18\x03 \x01(\tR\x06answer\"\xcc\x01\n" +
	"0CBroadcast_WebRTCAddViewerCandidate_Notification\x120\n" +
	"\x14broadcast_session_id\x18\x01 \x01(\x06R\x12broadcastSessionId\x12*\n" +
	"\x11webrtc_session_id\x18\x02 \x01(\x06R\x0fwebrtcSessionId\x12:\n" +
	"\tcandidate\x18\x03 \x01(\v2\x1c.CBroadcast_WebRTC_CandidateR\tcandidate*\xd5\x05\n" +
	"\x17EBroadcastWatchLocation\x12%\n" +
	"!k_EBroadcastWatchLocation_Invalid\x10\x00\x12)\n" +
	"%k_EBroadcastWatchLocation_SteamTV_Tab\x10\x01\x120\n" +
	",k_EBroadcastWatchLocation_SteamTV_WatchParty\x10\x02\x12&\n" +
	"\"k_EBroadcastWatchLocation_Chat_Tab\x10\x03\x12-\n" +
	")k_EBroadcastWatchLocation_Chat_WatchParty\x10\x04\x12+\n" +
	"'k_EBroadcastWatchLocation_CommunityPage\x10\x05\x12*\n" +
	"&k_EBroadcastWatchLocation_StoreAppPage\x10\x06\x12$\n" +
	" k_EBroadcastWatchLocation_InGame\x10\a\x12(\n" +
	"$k_EBroadcastWatchLocation_BigPicture\x10\b\x12'\n" +
	"#k_EBroadcastWatchLocation_SalesPage\x10\t\x12)\n" +
	"%k_EBroadcastWatchLocation_CuratorPage\x10\n" +
	"\x12+\n" +
	"'k_EBroadcastWatchLocation_DeveloperPage\x10\v\x12*\n" +
	"&k_EBroadcastWatchLocation_Chat_Friends\x10\f\x12)\n" +
	"%k_EBroadcastWatchLocation_SteamTV_Web\x10\r\x12/\n" +
	"+k_EBroadcastWatchLocation_DesktopUI_Overlay\x10\x0e\x12-\n" +
	")k_EBroadcastWatchLocation_TrailerCarousel\x10\x0f*g\n" +
	"\x18EBroadcastChatPermission\x12$\n" +
	" k_EBroadcastChatPermissionPublic\x10\x00\x12%\n" +
	"!k_EBroadcastChatPermissionOwnsApp\x10\x012\xb7\x1b\n" +
	"\tBroadcast\x12n\n" +
	"\x15BeginBroadcastSession\x12).CBroadcast_BeginBroadcastSession_Request\x1a*.CBroadcast_BeginBroadcastSession_Response\x12h\n" +
	"\x13EndBroadcastSession\x12'.CBroadcast_EndBroadcastSession_Request\x1a(.CBroadcast_EndBroadcastSession_Response\x12k\n" +
	"\x14StartBroadcastUpload\x12(.CBroadcast_StartBroadcastUpload_Request\x1a).CBroadcast_StartBroadcastUpload_Response\x12\\\n" +
	"\x19NotifyBroadcastUploadStop\x122.CBroadcast_NotifyBroadcastUploadStop_Notification\x1a\v.NoResponse\x12Y\n" +
	"\x0eWatchBroadcast\x12\".CBroadcast_WatchBroadcast_Request\x1a#.CBroadcast_WatchBroadcast_Response\x12N\n" +
	"\x12HeartbeatBroadcast\x12+.CBroadcast_HeartbeatBroadcast_Notification\x1a\v.NoResponse\x12T\n" +
	"\x15StopWatchingBroadcast\x12..CBroadcast_StopWatchingBroadcast_Notification\x1a\v.NoResponse\x12e\n" +
	"\x12GetBroadcastStatus\x12&.CBroadcast_GetBroadcastStatus_Request\x1a'.CBroadcast_GetBroadcastStatus_Response\x12n\n" +
	"\x15GetBroadcastThumbnail\x12).CBroadcast_GetBroadcastThumbnail_Request\x1a*.CBroadcast_GetBroadcastThumbnail_Response\x12b\n" +
	"\x11InviteToBroadcast\x12%.CBroadcast_InviteToBroadcast_Request\x1a&.CBroadcast_InviteToBroadcast_Response\x12}\n" +
	"\x1aSendBroadcastStateToServer\x12..CBroadcast_SendBroadcastStateToServer_Request\x1a/.CBroadcast_SendBroadcastStateToServer_Response\x12h\n" +
	"\x1fNotifyBroadcastSessionHeartbeat\x128.CBroadcast_NotifyBroadcastSessionHeartbeat_Notification\x1a\v.NoResponse\x12k\n" +
	"\x14GetBroadcastChatInfo\x12(.CBroadcast_GetBroadcastChatInfo_Request\x1a).CBroadcast_GetBroadcastChatInfo_Response\x12\\\n" +
	"\x0fPostChatMessage\x12#.CBroadcast_PostChatMessage_Request\x1a$.CBroadcast_PostChatMessage_Response\x12q\n" +
	"\x16UpdateChatMessageFlair\x12*.CBroadcast_UpdateChatMessageFlair_Request\x1a+.CBroadcast_UpdateChatMessageFlair_Response\x12n\n" +
	"\x15MuteBroadcastChatUser\x12).CBroadcast_MuteBroadcastChatUser_Request\x1a*.CBroadcast_MuteBroadcastChatUser_Response\x12e\n" +
	"\x12RemoveUserChatText\x12&.CBroadcast_RemoveUserChatText_Request\x1a'.CBroadcast_RemoveUserChatText_Response\x12z\n" +
	"\x19GetBroadcastChatUserNames\x12-.CBroadcast_GetBroadcastChatUserNames_Request\x1a..CBroadcast_GetBroadcastChatUserNames_Response\x12Y\n" +
	"\x0eStartBuildClip\x12\".CBroadcast_StartBuildClip_Request\x1a#.CBroadcast_StartBuildClip_Response\x12e\n" +
	"\x12GetBuildClipStatus\x12&.CBroadcast_GetBuildClipStatus_Request\x1a'.CBroadcast_GetBuildClipStatus_Response\x12Y\n" +
	"\x0eSetClipDetails\x12\".CBroadcast_SetClipDetails_Request\x1a#.CBroadcast_SetClipDetails_Response\x12Y\n" +
	"\x0eGetClipDetails\x12\".CBroadcast_GetClipDetails_Request\x1a#.CBroadcast_GetClipDetails_Response\x12P\n" +
	"\vSetRTMPInfo\x12\x1f.CBroadcast_SetRTMPInfo_Request\x1a .CBroadcast_SetRTMPInfo_Response\x12P\n" +
	"\vGetRTMPInfo\x12\x1f.CBroadcast_GetRTMPInfo_Request\x1a .CBroadcast_GetRTMPInfo_Response\x12X\n" +
	"\x1aNotifyWebRTCHaveTURNServer\x12-.CBroadcast_WebRTCHaveTURNServer_Notification\x1a\v.NoResponse\x12b\n" +
	"\x11WebRTCStartResult\x12%.CBroadcast_WebRTCStartResult_Request\x1a&.CBroadcast_WebRTCStartResult_Response\x12V\n" +
	"\rWebRTCStopped\x12!.CBroadcast_WebRTCStopped_Request\x1a\".CBroadcast_WebRTCStopped_Response\x12\\\n" +
	"\x0fWebRTCSetAnswer\x12#.CBroadcast_WebRTCSetAnswer_Request\x1a$.CBroadcast_WebRTCSetAnswer_Response\x12q\n" +
	"\x16WebRTCLookupTURNServer\x12*.CBroadcast_WebRTCLookupTURNServer_Request\x1a+.CBroadcast_WebRTCLookupTURNServer_Response\x12q\n" +
	"\x16WebRTCAddHostCandidate\x12*.CBroadcast_WebRTCAddHostCandidate_Request\x1a+.CBroadcast_WebRTCAddHostCandidate_Response\x12w\n" +
	"\x18WebRTCAddViewerCandidate\x12,.CBroadcast_WebRTCAddViewerCandidate_Request\x1a-.CBroadcast_WebRTCAddViewerCandidate_Response\x12t\n" +
	"\x17WebRTCGetHostCandidates\x12+.CBroadcast_WebRTCGetHostCandidates_Request\x1a,.CBroadcast_WebRTCGetHostCandidates_Response\x12t\n" +
	"\x17GetBroadcastUploadStats\x12+.CBroadcast_GetBroadcastUploadStats_Request\x1a,.CBroadcast_GetBroadcastUploadStats_Response\x12t\n" +
	"\x17GetBroadcastViewerStats\x12+.CBroadcast_GetBroadcastViewerStats_Request\x1a,.CBroadcast_GetBroadcastViewerStats_Response2\xff\b\n" +
	"\x0fBroadcastClient\x12X\n" +
	"\x1aNotifyBroadcastViewerState\x12-.CBroadcast_BroadcastViewerState_Notification\x1a\v.NoResponse\x12\\\n" +
	"\x1cNotifyWaitingBroadcastViewer\x12/.CBroadcast_WaitingBroadcastViewer_Notification\x1a\v.NoResponse\x12\\\n" +
	"\x1cNotifyBroadcastUploadStarted\x12/.CBroadcast_BroadcastUploadStarted_Notification\x1a\v.NoResponse\x12V\n" +
	"\x19NotifyStopBroadcastUpload\x12,.CBroadcast_StopBroadcastUpload_Notification\x1a\v.NoResponse\x12J\n" +
	"\x13NotifySessionClosed\x12&.CBroadcast_SessionClosed_Notification\x1a\v.NoResponse\x12Z\n" +
	"\x1bNotifyViewerBroadcastInvite\x12..CBroadcast_ViewerBroadcastInvite_Notification\x1a\v.NoResponse\x12N\n" +
	"\x15NotifyBroadcastStatus\x12(.CBroadcast_BroadcastStatus_Notification\x1a\v.NoResponse\x12X\n" +
	"\x1aNotifyBroadcastChannelLive\x12-.CBroadcast_BroadcastChannelLive_Notification\x1a\v.NoResponse\x12R\n" +
	"\x14SendThumbnailToRelay\x12-.CBroadcast_SendThumbnailToRelay_Notification\x1a\v.NoResponse\x12X\n" +
	"\x1aNotifyWebRTCNeedTURNServer\x12-.CBroadcast_WebRTCNeedTURNServer_Notification\x1a\v.NoResponse\x12F\n" +
	"\x11NotifyWebRTCStart\x12$.CBroadcast_WebRTCStart_Notification\x1a\v.NoResponse\x12N\n" +
	"\x15NotifyWebRTCSetAnswer\x12(.CBroadcast_WebRTCSetAnswer_Notification\x1a\v.NoResponse\x12`\n" +
	"\x1eNotifyWebRTCAddViewerCandidate\x121.CBroadcast_WebRTCAddViewerCandidate_Notification\x1a\v.NoResponse\x1a\x04\xc0\xb5\x18\x02B\x03\x80\x01\x01"

var (
	file_steammessages_broadcast_steamclient_proto_rawDescOnce sync.Once
	file_steammessages_broadcast_steamclient_proto_rawDescData []byte
)

func file_steammessages_broadcast_steamclient_proto_rawDescGZIP() []byte {
	file_steammessages_broadcast_steamclient_proto_rawDescOnce.Do(func() {
		file_steammessages_broadcast_steamclient_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_steammessages_broadcast_steamclient_proto_rawDesc), len(file_steammessages_broadcast_steamclient_proto_rawDesc)))
	})
	return file_steammessages_broadcast_steamclient_proto_rawDescData
}

var file_steammessages_broadcast_steamclient_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_steammessages_broadcast_steamclient_proto_msgTypes = make([]protoimpl.MessageInfo, 81)
var file_steammessages_broadcast_steamclient_proto_goTypes = []any{
	(EBroadcastWatchLocation)(0),                                      // 0: EBroadcastWatchLocation
	(EBroadcastChatPermission)(0),                                     // 1: EBroadcastChatPermission
	(CBroadcast_WatchBroadcast_Response_EWatchResponse)(0),            // 2: CBroadcast_WatchBroadcast_Response.EWatchResponse
	(CBroadcast_BroadcastViewerState_Notification_EViewerState)(0),    // 3: CBroadcast_BroadcastViewerState_Notification.EViewerState
	(*CBroadcast_BeginBroadcastSession_Request)(nil),                  // 4: CBroadcast_BeginBroadcastSession_Request
	(*CBroadcast_BeginBroadcastSession_Response)(nil),                 // 5: CBroadcast_BeginBroadcastSession_Response
	(*CBroadcast_EndBroadcastSession_Request)(nil),                    // 6: CBroadcast_EndBroadcastSession_Request
	(*CBroadcast_EndBroadcastSession_Response)(nil),                   // 7: CBroadcast_EndBroadcastSession_Response
	(*CBroadcast_StartBroadcastUpload_Request)(nil),                   // 8: CBroadcast_StartBroadcastUpload_Request
	(*CBroadcast_StartBroadcastUpload_Response)(nil),                  // 9: CBroadcast_StartBroadcastUpload_Response
	(*CBroadcast_NotifyBroadcastUploadStop_Notification)(nil),         // 10: CBroadcast_NotifyBroadcastUploadStop_Notification
	(*CBroadcast_WatchBroadcast_Request)(nil),                         // 11: CBroadcast_WatchBroadcast_Request
	(*CBroadcast_WatchBroadcast_Response)(nil),                        // 12: CBroadcast_WatchBroadcast_Response
	(*CBroadcast_HeartbeatBroadcast_Notification)(nil),                // 13: CBroadcast_HeartbeatBroadcast_Notification
	(*CBroadcast_StopWatchingBroadcast_Notification)(nil),             // 14: CBroadcast_StopWatchingBroadcast_Notification
	(*CBroadcast_GetBroadcastStatus_Request)(nil),                     // 15: CBroadcast_GetBroadcastStatus_Request
	(*CBroadcast_GetBroadcastStatus_Response)(nil),                    // 16: CBroadcast_GetBroadcastStatus_Response
	(*CBroadcast_GetBroadcastThumbnail_Request)(nil),                  // 17: CBroadcast_GetBroadcastThumbnail_Request
	(*CBroadcast_GetBroadcastThumbnail_Response)(nil),                 // 18: CBroadcast_GetBroadcastThumbnail_Response
	(*CBroadcast_InviteToBroadcast_Request)(nil),                      // 19: CBroadcast_InviteToBroadcast_Request
	(*CBroadcast_InviteToBroadcast_Response)(nil),                     // 20: CBroadcast_InviteToBroadcast_Response
	(*CBroadcast_SendBroadcastStateToServer_Request)(nil),             // 21: CBroadcast_SendBroadcastStateToServer_Request
	(*CBroadcast_SendBroadcastStateToServer_Response)(nil),            // 22: CBroadcast_SendBroadcastStateToServer_Response
	(*CBroadcast_NotifyBroadcastSessionHeartbeat_Notification)(nil),   // 23: CBroadcast_NotifyBroadcastSessionHeartbeat_Notification
	(*CBroadcast_GetBroadcastChatInfo_Request)(nil),                   // 24: CBroadcast_GetBroadcastChatInfo_Request
	(*CBroadcast_GetBroadcastChatInfo_Response)(nil),                  // 25: CBroadcast_GetBroadcastChatInfo_Response
	(*CBroadcast_PostChatMessage_Request)(nil),                        // 26: CBroadcast_PostChatMessage_Request
	(*CBroadcast_PostChatMessage_Response)(nil),                       // 27: CBroadcast_PostChatMessage_Response
	(*CBroadcast_UpdateChatMessageFlair_Request)(nil),                 // 28: CBroadcast_UpdateChatMessageFlair_Request
	(*CBroadcast_UpdateChatMessageFlair_Response)(nil),                // 29: CBroadcast_UpdateChatMessageFlair_Response
	(*CBroadcast_MuteBroadcastChatUser_Request)(nil),                  // 30: CBroadcast_MuteBroadcastChatUser_Request
	(*CBroadcast_MuteBroadcastChatUser_Response)(nil),                 // 31: CBroadcast_MuteBroadcastChatUser_Response
	(*CBroadcast_RemoveUserChatText_Request)(nil),                     // 32: CBroadcast_RemoveUserChatText_Request
	(*CBroadcast_RemoveUserChatText_Response)(nil),                    // 33: CBroadcast_RemoveUserChatText_Response
	(*CBroadcast_GetBroadcastChatUserNames_Request)(nil),              // 34: CBroadcast_GetBroadcastChatUserNames_Request
	(*CBroadcast_GetBroadcastChatUserNames_Response)(nil),             // 35: CBroadcast_GetBroadcastChatUserNames_Response
	(*CBroadcast_StartBuildClip_Request)(nil),                         // 36: CBroadcast_StartBuildClip_Request
	(*CBroadcast_StartBuildClip_Response)(nil),                        // 37: CBroadcast_StartBuildClip_Response
	(*CBroadcast_GetBuildClipStatus_Request)(nil),                     // 38: CBroadcast_GetBuildClipStatus_Request
	(*CBroadcast_GetBuildClipStatus_Response)(nil),                    // 39: CBroadcast_GetBuildClipStatus_Response
	(*CBroadcast_SetClipDetails_Request)(nil),                         // 40: CBroadcast_SetClipDetails_Request
	(*CBroadcast_SetClipDetails_Response)(nil),                        // 41: CBroadcast_SetClipDetails_Response
	(*CBroadcast_GetClipDetails_Request)(nil),                         // 42: CBroadcast_GetClipDetails_Request
	(*CBroadcast_GetClipDetails_Response)(nil),                        // 43: CBroadcast_GetClipDetails_Response
	(*CBroadcast_SetRTMPInfo_Request)(nil),                            // 44: CBroadcast_SetRTMPInfo_Request
	(*CBroadcast_SetRTMPInfo_Response)(nil),                           // 45: CBroadcast_SetRTMPInfo_Response
	(*CBroadcast_GetRTMPInfo_Request)(nil),                            // 46: CBroadcast_GetRTMPInfo_Request
	(*CBroadcast_GetRTMPInfo_Response)(nil),                           // 47: CBroadcast_GetRTMPInfo_Response
	(*CBroadcast_WebRTCHaveTURNServer_Notification)(nil),              // 48: CBroadcast_WebRTCHaveTURNServer_Notification
	(*CBroadcast_WebRTCStartResult_Request)(nil),                      // 49: CBroadcast_WebRTCStartResult_Request
	(*CBroadcast_WebRTCStartResult_Response)(nil),                     // 50: CBroadcast_WebRTCStartResult_Response
	(*CBroadcast_WebRTCStopped_Request)(nil),                          // 51: CBroadcast_WebRTCStopped_Request
	(*CBroadcast_WebRTCStopped_Response)(nil),                         // 52: CBroadcast_WebRTCStopped_Response
	(*CBroadcast_WebRTCSetAnswer_Request)(nil),                        // 53: CBroadcast_WebRTCSetAnswer_Request
	(*CBroadcast_WebRTCSetAnswer_Response)(nil),                       // 54: CBroadcast_WebRTCSetAnswer_Response
	(*CBroadcast_WebRTCLookupTURNServer_Request)(nil),                 // 55: CBroadcast_WebRTCLookupTURNServer_Request
	(*CBroadcast_WebRTCLookupTURNServer_Response)(nil),                // 56: CBroadcast_WebRTCLookupTURNServer_Response
	(*CBroadcast_WebRTC_Candidate)(nil),                               // 57: CBroadcast_WebRTC_Candidate
	(*CBroadcast_WebRTCAddHostCandidate_Request)(nil),                 // 58: CBroadcast_WebRTCAddHostCandidate_Request
	(*CBroadcast_WebRTCAddHostCandidate_Response)(nil),                // 59: CBroadcast_WebRTCAddHostCandidate_Response
	(*CBroadcast_WebRTCAddViewerCandidate_Request)(nil),               // 60: CBroadcast_WebRTCAddViewerCandidate_Request
	(*CBroadcast_WebRTCAddViewerCandidate_Response)(nil),              // 61: CBroadcast_WebRTCAddViewerCandidate_Response
	(*CBroadcast_WebRTCGetHostCandidates_Request)(nil),                // 62: CBroadcast_WebRTCGetHostCandidates_Request
	(*CBroadcast_WebRTCGetHostCandidates_Response)(nil),               // 63: CBroadcast_WebRTCGetHostCandidates_Response
	(*CBroadcast_GetBroadcastUploadStats_Request)(nil),                // 64: CBroadcast_GetBroadcastUploadStats_Request
	(*CBroadcast_GetBroadcastUploadStats_Response)(nil),               // 65: CBroadcast_GetBroadcastUploadStats_Response
	(*CBroadcast_GetBroadcastViewerStats_Request)(nil),                // 66: CBroadcast_GetBroadcastViewerStats_Request
	(*CBroadcast_GetBroadcastViewerStats_Response)(nil),               // 67: CBroadcast_GetBroadcastViewerStats_Response
	(*CBroadcast_BroadcastViewerState_Notification)(nil),              // 68: CBroadcast_BroadcastViewerState_Notification
	(*CBroadcast_WaitingBroadcastViewer_Notification)(nil),            // 69: CBroadcast_WaitingBroadcastViewer_Notification
	(*CBroadcast_BroadcastUploadStarted_Notification)(nil),            // 70: CBroadcast_BroadcastUploadStarted_Notification
	(*CBroadcast_StopBroadcastUpload_Notification)(nil),               // 71: CBroadcast_StopBroadcastUpload_Notification
	(*CBroadcast_SessionClosed_Notification)(nil),                     // 72: CBroadcast_SessionClosed_Notification
	(*CBroadcast_ViewerBroadcastInvite_Notification)(nil),             // 73: CBroadcast_ViewerBroadcastInvite_Notification
	(*CBroadcast_BroadcastStatus_Notification)(nil),                   // 74: CBroadcast_BroadcastStatus_Notification
	(*CBroadcast_BroadcastChannelLive_Notification)(nil),              // 75: CBroadcast_BroadcastChannelLive_Notification
	(*CBroadcast_SendThumbnailToRelay_Notification)(nil),              // 76: CBroadcast_SendThumbnailToRelay_Notification
	(*CBroadcast_WebRTCNeedTURNServer_Notification)(nil),              // 77: CBroadcast_WebRTCNeedTURNServer_Notification
	(*CBroadcast_WebRTCStart_Notification)(nil),                       // 78: CBroadcast_WebRTCStart_Notification
	(*CBroadcast_WebRTCSetAnswer_Notification)(nil),                   // 79: CBroadcast_WebRTCSetAnswer_Notification
	(*CBroadcast_WebRTCAddViewerCandidate_Notification)(nil),          // 80: CBroadcast_WebRTCAddViewerCandidate_Notification
	(*CBroadcast_GetBroadcastChatUserNames_Response_PersonaName)(nil), // 81: CBroadcast_GetBroadcastChatUserNames_Response.PersonaName
	(*CBroadcast_GetBroadcastUploadStats_Response_UploadStats)(nil),   // 82: CBroadcast_GetBroadcastUploadStats_Response.UploadStats
	(*CBroadcast_GetBroadcastViewerStats_Response_ViewerStats)(nil),   // 83: CBroadcast_GetBroadcastViewerStats_Response.ViewerStats
	(*CBroadcast_GetBroadcastViewerStats_Response_CountryStats)(nil),  // 84: CBroadcast_GetBroadcastViewerStats_Response.CountryStats
	(*NoResponse)(nil), // 85: NoResponse
}
var file_steammessages_broadcast_steamclient_proto_depIdxs = []int32{
	0,  // 0: CBroadcast_WatchBroadcast_Request.watch_location:type_name -> EBroadcastWatchLocation
	2,  // 1: CBroadcast_WatchBroadcast_Response.response:type_name -> CBroadcast_WatchBroadcast_Response.EWatchResponse
	81, // 2: CBroadcast_GetBroadcastChatUserNames_Response.persona_names:type_name -> CBroadcast_GetBroadcastChatUserNames_Response.PersonaName
	1,  // 3: CBroadcast_SetRTMPInfo_Request.broadcast_chat_permission:type_name -> EBroadcastChatPermission
	1,  // 4: CBroadcast_GetRTMPInfo_Response.broadcast_chat_permission:type_name -> EBroadcastChatPermission
	57, // 5: CBroadcast_WebRTCAddHostCandidate_Request.candidate:type_name -> CBroadcast_WebRTC_Candidate
	57, // 6: CBroadcast_WebRTCAddViewerCandidate_Request.candidate:type_name -> CBroadcast_WebRTC_Candidate
	57, // 7: CBroadcast_WebRTCGetHostCandidates_Response.candidates:type_name -> CBroadcast_WebRTC_Candidate
	82, // 8: CBroadcast_GetBroadcastUploadStats_Response.upload_stats:type_name -> CBroadcast_GetBroadcastUploadStats_Response.UploadStats
	83, // 9: CBroadcast_GetBroadcastViewerStats_Response.viewer_stats:type_name -> CBroadcast_GetBroadcastViewerStats_Response.ViewerStats
	84, // 10: CBroadcast_GetBroadcastViewerStats_Response.country_stats:type_name -> CBroadcast_GetBroadcastViewerStats_Response.CountryStats
	3,  // 11: CBroadcast_BroadcastViewerState_Notification.state:type_name -> CBroadcast_BroadcastViewerState_Notification.EViewerState
	57, // 12: CBroadcast_WebRTCAddViewerCandidate_Notification.candidate:type_name -> CBroadcast_WebRTC_Candidate
	4,  // 13: Broadcast.BeginBroadcastSession:input_type -> CBroadcast_BeginBroadcastSession_Request
	6,  // 14: Broadcast.EndBroadcastSession:input_type -> CBroadcast_EndBroadcastSession_Request
	8,  // 15: Broadcast.StartBroadcastUpload:input_type -> CBroadcast_StartBroadcastUpload_Request
	10, // 16: Broadcast.NotifyBroadcastUploadStop:input_type -> CBroadcast_NotifyBroadcastUploadStop_Notification
	11, // 17: Broadcast.WatchBroadcast:input_type -> CBroadcast_WatchBroadcast_Request
	13, // 18: Broadcast.HeartbeatBroadcast:input_type -> CBroadcast_HeartbeatBroadcast_Notification
	14, // 19: Broadcast.StopWatchingBroadcast:input_type -> CBroadcast_StopWatchingBroadcast_Notification
	15, // 20: Broadcast.GetBroadcastStatus:input_type -> CBroadcast_GetBroadcastStatus_Request
	17, // 21: Broadcast.GetBroadcastThumbnail:input_type -> CBroadcast_GetBroadcastThumbnail_Request
	19, // 22: Broadcast.InviteToBroadcast:input_type -> CBroadcast_InviteToBroadcast_Request
	21, // 23: Broadcast.SendBroadcastStateToServer:input_type -> CBroadcast_SendBroadcastStateToServer_Request
	23, // 24: Broadcast.NotifyBroadcastSessionHeartbeat:input_type -> CBroadcast_NotifyBroadcastSessionHeartbeat_Notification
	24, // 25: Broadcast.GetBroadcastChatInfo:input_type -> CBroadcast_GetBroadcastChatInfo_Request
	26, // 26: Broadcast.PostChatMessage:input_type -> CBroadcast_PostChatMessage_Request
	28, // 27: Broadcast.UpdateChatMessageFlair:input_type -> CBroadcast_UpdateChatMessageFlair_Request
	30, // 28: Broadcast.MuteBroadcastChatUser:input_type -> CBroadcast_MuteBroadcastChatUser_Request
	32, // 29: Broadcast.RemoveUserChatText:input_type -> CBroadcast_RemoveUserChatText_Request
	34, // 30: Broadcast.GetBroadcastChatUserNames:input_type -> CBroadcast_GetBroadcastChatUserNames_Request
	36, // 31: Broadcast.StartBuildClip:input_type -> CBroadcast_StartBuildClip_Request
	38, // 32: Broadcast.GetBuildClipStatus:input_type -> CBroadcast_GetBuildClipStatus_Request
	40, // 33: Broadcast.SetClipDetails:input_type -> CBroadcast_SetClipDetails_Request
	42, // 34: Broadcast.GetClipDetails:input_type -> CBroadcast_GetClipDetails_Request
	44, // 35: Broadcast.SetRTMPInfo:input_type -> CBroadcast_SetRTMPInfo_Request
	46, // 36: Broadcast.GetRTMPInfo:input_type -> CBroadcast_GetRTMPInfo_Request
	48, // 37: Broadcast.NotifyWebRTCHaveTURNServer:input_type -> CBroadcast_WebRTCHaveTURNServer_Notification
	49, // 38: Broadcast.WebRTCStartResult:input_type -> CBroadcast_WebRTCStartResult_Request
	51, // 39: Broadcast.WebRTCStopped:input_type -> CBroadcast_WebRTCStopped_Request
	53, // 40: Broadcast.WebRTCSetAnswer:input_type -> CBroadcast_WebRTCSetAnswer_Request
	55, // 41: Broadcast.WebRTCLookupTURNServer:input_type -> CBroadcast_WebRTCLookupTURNServer_Request
	58, // 42: Broadcast.WebRTCAddHostCandidate:input_type -> CBroadcast_WebRTCAddHostCandidate_Request
	60, // 43: Broadcast.WebRTCAddViewerCandidate:input_type -> CBroadcast_WebRTCAddViewerCandidate_Request
	62, // 44: Broadcast.WebRTCGetHostCandidates:input_type -> CBroadcast_WebRTCGetHostCandidates_Request
	64, // 45: Broadcast.GetBroadcastUploadStats:input_type -> CBroadcast_GetBroadcastUploadStats_Request
	66, // 46: Broadcast.GetBroadcastViewerStats:input_type -> CBroadcast_GetBroadcastViewerStats_Request
	68, // 47: BroadcastClient.NotifyBroadcastViewerState:input_type -> CBroadcast_BroadcastViewerState_Notification
	69, // 48: BroadcastClient.NotifyWaitingBroadcastViewer:input_type -> CBroadcast_WaitingBroadcastViewer_Notification
	70, // 49: BroadcastClient.NotifyBroadcastUploadStarted:input_type -> CBroadcast_BroadcastUploadStarted_Notification
	71, // 50: BroadcastClient.NotifyStopBroadcastUpload:input_type -> CBroadcast_StopBroadcastUpload_Notification
	72, // 51: BroadcastClient.NotifySessionClosed:input_type -> CBroadcast_SessionClosed_Notification
	73, // 52: BroadcastClient.NotifyViewerBroadcastInvite:input_type -> CBroadcast_ViewerBroadcastInvite_Notification
	74, // 53: BroadcastClient.NotifyBroadcastStatus:input_type -> CBroadcast_BroadcastStatus_Notification
	75, // 54: BroadcastClient.NotifyBroadcastChannelLive:input_type -> CBroadcast_BroadcastChannelLive_Notification
	76, // 55: BroadcastClient.SendThumbnailToRelay:input_type -> CBroadcast_SendThumbnailToRelay_Notification
	77, // 56: BroadcastClient.NotifyWebRTCNeedTURNServer:input_type -> CBroadcast_WebRTCNeedTURNServer_Notification
	78, // 57: BroadcastClient.NotifyWebRTCStart:input_type -> CBroadcast_WebRTCStart_Notification
	79, // 58: BroadcastClient.NotifyWebRTCSetAnswer:input_type -> CBroadcast_WebRTCSetAnswer_Notification
	80, // 59: BroadcastClient.NotifyWebRTCAddViewerCandidate:input_type -> CBroadcast_WebRTCAddViewerCandidate_Notification
	5,  // 60: Broadcast.BeginBroadcastSession:output_type -> CBroadcast_BeginBroadcastSession_Response
	7,  // 61: Broadcast.EndBroadcastSession:output_type -> CBroadcast_EndBroadcastSession_Response
	9,  // 62: Broadcast.StartBroadcastUpload:output_type -> CBroadcast_StartBroadcastUpload_Response
	85, // 63: Broadcast.NotifyBroadcastUploadStop:output_type -> NoResponse
	12, // 64: Broadcast.WatchBroadcast:output_type -> CBroadcast_WatchBroadcast_Response
	85, // 65: Broadcast.HeartbeatBroadcast:output_type -> NoResponse
	85, // 66: Broadcast.StopWatchingBroadcast:output_type -> NoResponse
	16, // 67: Broadcast.GetBroadcastStatus:output_type -> CBroadcast_GetBroadcastStatus_Response
	18, // 68: Broadcast.GetBroadcastThumbnail:output_type -> CBroadcast_GetBroadcastThumbnail_Response
	20, // 69: Broadcast.InviteToBroadcast:output_type -> CBroadcast_InviteToBroadcast_Response
	22, // 70: Broadcast.SendBroadcastStateToServer:output_type -> CBroadcast_SendBroadcastStateToServer_Response
	85, // 71: Broadcast.NotifyBroadcastSessionHeartbeat:output_type -> NoResponse
	25, // 72: Broadcast.GetBroadcastChatInfo:output_type -> CBroadcast_GetBroadcastChatInfo_Response
	27, // 73: Broadcast.PostChatMessage:output_type -> CBroadcast_PostChatMessage_Response
	29, // 74: Broadcast.UpdateChatMessageFlair:output_type -> CBroadcast_UpdateChatMessageFlair_Response
	31, // 75: Broadcast.MuteBroadcastChatUser:output_type -> CBroadcast_MuteBroadcastChatUser_Response
	33, // 76: Broadcast.RemoveUserChatText:output_type -> CBroadcast_RemoveUserChatText_Response
	35, // 77: Broadcast.GetBroadcastChatUserNames:output_type -> CBroadcast_GetBroadcastChatUserNames_Response
	37, // 78: Broadcast.StartBuildClip:output_type -> CBroadcast_StartBuildClip_Response
	39, // 79: Broadcast.GetBuildClipStatus:output_type -> CBroadcast_GetBuildClipStatus_Response
	41, // 80: Broadcast.SetClipDetails:output_type -> CBroadcast_SetClipDetails_Response
	43, // 81: Broadcast.GetClipDetails:output_type -> CBroadcast_GetClipDetails_Response
	45, // 82: Broadcast.SetRTMPInfo:output_type -> CBroadcast_SetRTMPInfo_Response
	47, // 83: Broadcast.GetRTMPInfo:output_type -> CBroadcast_GetRTMPInfo_Response
	85, // 84: Broadcast.NotifyWebRTCHaveTURNServer:output_type -> NoResponse
	50, // 85: Broadcast.WebRTCStartResult:output_type -> CBroadcast_WebRTCStartResult_Response
	52, // 86: Broadcast.WebRTCStopped:output_type -> CBroadcast_WebRTCStopped_Response
	54, // 87: Broadcast.WebRTCSetAnswer:output_type -> CBroadcast_WebRTCSetAnswer_Response
	56, // 88: Broadcast.WebRTCLookupTURNServer:output_type -> CBroadcast_WebRTCLookupTURNServer_Response
	59, // 89: Broadcast.WebRTCAddHostCandidate:output_type -> CBroadcast_WebRTCAddHostCandidate_Response
	61, // 90: Broadcast.WebRTCAddViewerCandidate:output_type -> CBroadcast_WebRTCAddViewerCandidate_Response
	63, // 91: Broadcast.WebRTCGetHostCandidates:output_type -> CBroadcast_WebRTCGetHostCandidates_Response
	65, // 92: Broadcast.GetBroadcastUploadStats:output_type -> CBroadcast_GetBroadcastUploadStats_Response
	67, // 93: Broadcast.GetBroadcastViewerStats:output_type -> CBroadcast_GetBroadcastViewerStats_Response
	85, // 94: BroadcastClient.NotifyBroadcastViewerState:output_type -> NoResponse
	85, // 95: BroadcastClient.NotifyWaitingBroadcastViewer:output_type -> NoResponse
	85, // 96: BroadcastClient.NotifyBroadcastUploadStarted:output_type -> NoResponse
	85, // 97: BroadcastClient.NotifyStopBroadcastUpload:output_type -> NoResponse
	85, // 98: BroadcastClient.NotifySessionClosed:output_type -> NoResponse
	85, // 99: BroadcastClient.NotifyViewerBroadcastInvite:output_type -> NoResponse
	85, // 100: BroadcastClient.NotifyBroadcastStatus:output_type -> NoResponse
	85, // 101: BroadcastClient.NotifyBroadcastChannelLive:output_type -> NoResponse
	85, // 102: BroadcastClient.SendThumbnailToRelay:output_type -> NoResponse
	85, // 103: BroadcastClient.NotifyWebRTCNeedTURNServer:output_type -> NoResponse
	85, // 104: BroadcastClient.NotifyWebRTCStart:output_type -> NoResponse
	85, // 105: BroadcastClient.NotifyWebRTCSetAnswer:output_type -> NoResponse
	85, // 106: BroadcastClient.NotifyWebRTCAddViewerCandidate:output_type -> NoResponse
	60, // [60:107] is the sub-list for method output_type
	13, // [13:60] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_steammessages_broadcast_steamclient_proto_init() }
func file_steammessages_broadcast_steamclient_proto_init() {
	if File_steammessages_broadcast_steamclient_proto != nil {
		return
	}
	file_steammessages_base_proto_init()
	file_steammessages_unified_base_steamclient_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_steammessages_broadcast_steamclient_proto_rawDesc), len(file_steammessages_broadcast_steamclient_proto_rawDesc)),
			NumEnums:      4,
			NumMessages:   81,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_steammessages_broadcast_steamclient_proto_goTypes,
		DependencyIndexes: file_steammessages_broadcast_steamclient_proto_depIdxs,
		EnumInfos:         file_steammessages_broadcast_steamclient_proto_enumTypes,
		MessageInfos:      file_steammessages_broadcast_steamclient_proto_msgTypes,
	}.Build()
	File_steammessages_broadcast_steamclient_proto = out.File
	file_steammessages_broadcast_steamclient_proto_goTypes = nil
	file_steammessages_broadcast_steamclient_proto_depIdxs = nil
}
