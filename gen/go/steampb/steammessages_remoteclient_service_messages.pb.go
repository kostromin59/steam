// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v6.32.0
// source: steammessages_remoteclient_service_messages.proto

package steampb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ECLientTaskListType int32

const (
	ECLientTaskListType_k_EClientTask_DownloadClip ECLientTaskListType = 1
)

// Enum value maps for ECLientTaskListType.
var (
	ECLientTaskListType_name = map[int32]string{
		1: "k_EClientTask_DownloadClip",
	}
	ECLientTaskListType_value = map[string]int32{
		"k_EClientTask_DownloadClip": 1,
	}
)

func (x ECLientTaskListType) Enum() *ECLientTaskListType {
	p := new(ECLientTaskListType)
	*p = x
	return p
}

func (x ECLientTaskListType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ECLientTaskListType) Descriptor() protoreflect.EnumDescriptor {
	return file_steammessages_remoteclient_service_messages_proto_enumTypes[0].Descriptor()
}

func (ECLientTaskListType) Type() protoreflect.EnumType {
	return &file_steammessages_remoteclient_service_messages_proto_enumTypes[0]
}

func (x ECLientTaskListType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ECLientTaskListType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ECLientTaskListType(num)
	return nil
}

// Deprecated: Use ECLientTaskListType.Descriptor instead.
func (ECLientTaskListType) EnumDescriptor() ([]byte, []int) {
	return file_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{0}
}

type CRemoteClient_CreateSession_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CRemoteClient_CreateSession_Request) Reset() {
	*x = CRemoteClient_CreateSession_Request{}
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CRemoteClient_CreateSession_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemoteClient_CreateSession_Request) ProtoMessage() {}

func (x *CRemoteClient_CreateSession_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemoteClient_CreateSession_Request.ProtoReflect.Descriptor instead.
func (*CRemoteClient_CreateSession_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{0}
}

type CRemoteClient_CreateSession_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SessionId     *uint64                `protobuf:"fixed64,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	Euniverse     *int32                 `protobuf:"varint,2,opt,name=euniverse" json:"euniverse,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CRemoteClient_CreateSession_Response) Reset() {
	*x = CRemoteClient_CreateSession_Response{}
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CRemoteClient_CreateSession_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemoteClient_CreateSession_Response) ProtoMessage() {}

func (x *CRemoteClient_CreateSession_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemoteClient_CreateSession_Response.ProtoReflect.Descriptor instead.
func (*CRemoteClient_CreateSession_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{1}
}

func (x *CRemoteClient_CreateSession_Response) GetSessionId() uint64 {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return 0
}

func (x *CRemoteClient_CreateSession_Response) GetEuniverse() int32 {
	if x != nil && x.Euniverse != nil {
		return *x.Euniverse
	}
	return 0
}

type CRemoteClient_DeleteSession_Notification struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SessionId     *uint64                `protobuf:"fixed64,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CRemoteClient_DeleteSession_Notification) Reset() {
	*x = CRemoteClient_DeleteSession_Notification{}
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CRemoteClient_DeleteSession_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemoteClient_DeleteSession_Notification) ProtoMessage() {}

func (x *CRemoteClient_DeleteSession_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemoteClient_DeleteSession_Notification.ProtoReflect.Descriptor instead.
func (*CRemoteClient_DeleteSession_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{2}
}

func (x *CRemoteClient_DeleteSession_Notification) GetSessionId() uint64 {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return 0
}

type CRemoteClient_StartPairing_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SessionId     *uint64                `protobuf:"fixed64,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CRemoteClient_StartPairing_Request) Reset() {
	*x = CRemoteClient_StartPairing_Request{}
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CRemoteClient_StartPairing_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemoteClient_StartPairing_Request) ProtoMessage() {}

func (x *CRemoteClient_StartPairing_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemoteClient_StartPairing_Request.ProtoReflect.Descriptor instead.
func (*CRemoteClient_StartPairing_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{3}
}

func (x *CRemoteClient_StartPairing_Request) GetSessionId() uint64 {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return 0
}

type CRemoteClient_StartPairing_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pin           *uint32                `protobuf:"varint,1,opt,name=pin" json:"pin,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CRemoteClient_StartPairing_Response) Reset() {
	*x = CRemoteClient_StartPairing_Response{}
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CRemoteClient_StartPairing_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemoteClient_StartPairing_Response) ProtoMessage() {}

func (x *CRemoteClient_StartPairing_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemoteClient_StartPairing_Response.ProtoReflect.Descriptor instead.
func (*CRemoteClient_StartPairing_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{4}
}

func (x *CRemoteClient_StartPairing_Response) GetPin() uint32 {
	if x != nil && x.Pin != nil {
		return *x.Pin
	}
	return 0
}

type CRemoteClient_SetPairingInfo_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SessionId     *uint64                `protobuf:"fixed64,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	DeviceId      *uint64                `protobuf:"fixed64,2,opt,name=device_id,json=deviceId" json:"device_id,omitempty"`
	Request       []byte                 `protobuf:"bytes,3,opt,name=request" json:"request,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CRemoteClient_SetPairingInfo_Request) Reset() {
	*x = CRemoteClient_SetPairingInfo_Request{}
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CRemoteClient_SetPairingInfo_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemoteClient_SetPairingInfo_Request) ProtoMessage() {}

func (x *CRemoteClient_SetPairingInfo_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemoteClient_SetPairingInfo_Request.ProtoReflect.Descriptor instead.
func (*CRemoteClient_SetPairingInfo_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{5}
}

func (x *CRemoteClient_SetPairingInfo_Request) GetSessionId() uint64 {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return 0
}

func (x *CRemoteClient_SetPairingInfo_Request) GetDeviceId() uint64 {
	if x != nil && x.DeviceId != nil {
		return *x.DeviceId
	}
	return 0
}

func (x *CRemoteClient_SetPairingInfo_Request) GetRequest() []byte {
	if x != nil {
		return x.Request
	}
	return nil
}

type CRemoteClient_SetPairingInfo_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CRemoteClient_SetPairingInfo_Response) Reset() {
	*x = CRemoteClient_SetPairingInfo_Response{}
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CRemoteClient_SetPairingInfo_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemoteClient_SetPairingInfo_Response) ProtoMessage() {}

func (x *CRemoteClient_SetPairingInfo_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemoteClient_SetPairingInfo_Response.ProtoReflect.Descriptor instead.
func (*CRemoteClient_SetPairingInfo_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{6}
}

type CRemoteClient_GetPairingInfo_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pin           *uint32                `protobuf:"varint,1,opt,name=pin" json:"pin,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CRemoteClient_GetPairingInfo_Request) Reset() {
	*x = CRemoteClient_GetPairingInfo_Request{}
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CRemoteClient_GetPairingInfo_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemoteClient_GetPairingInfo_Request) ProtoMessage() {}

func (x *CRemoteClient_GetPairingInfo_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemoteClient_GetPairingInfo_Request.ProtoReflect.Descriptor instead.
func (*CRemoteClient_GetPairingInfo_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{7}
}

func (x *CRemoteClient_GetPairingInfo_Request) GetPin() uint32 {
	if x != nil && x.Pin != nil {
		return *x.Pin
	}
	return 0
}

type CRemoteClient_GetPairingInfo_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SessionId     *uint64                `protobuf:"fixed64,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	DeviceId      *uint64                `protobuf:"fixed64,2,opt,name=device_id,json=deviceId" json:"device_id,omitempty"`
	Request       []byte                 `protobuf:"bytes,3,opt,name=request" json:"request,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CRemoteClient_GetPairingInfo_Response) Reset() {
	*x = CRemoteClient_GetPairingInfo_Response{}
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CRemoteClient_GetPairingInfo_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemoteClient_GetPairingInfo_Response) ProtoMessage() {}

func (x *CRemoteClient_GetPairingInfo_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemoteClient_GetPairingInfo_Response.ProtoReflect.Descriptor instead.
func (*CRemoteClient_GetPairingInfo_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{8}
}

func (x *CRemoteClient_GetPairingInfo_Response) GetSessionId() uint64 {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return 0
}

func (x *CRemoteClient_GetPairingInfo_Response) GetDeviceId() uint64 {
	if x != nil && x.DeviceId != nil {
		return *x.DeviceId
	}
	return 0
}

func (x *CRemoteClient_GetPairingInfo_Response) GetRequest() []byte {
	if x != nil {
		return x.Request
	}
	return nil
}

type CRemoteClient_CancelPairing_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SessionId     *uint64                `protobuf:"fixed64,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CRemoteClient_CancelPairing_Request) Reset() {
	*x = CRemoteClient_CancelPairing_Request{}
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CRemoteClient_CancelPairing_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemoteClient_CancelPairing_Request) ProtoMessage() {}

func (x *CRemoteClient_CancelPairing_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemoteClient_CancelPairing_Request.ProtoReflect.Descriptor instead.
func (*CRemoteClient_CancelPairing_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{9}
}

func (x *CRemoteClient_CancelPairing_Request) GetSessionId() uint64 {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return 0
}

type CRemoteClient_CancelPairing_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CRemoteClient_CancelPairing_Response) Reset() {
	*x = CRemoteClient_CancelPairing_Response{}
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CRemoteClient_CancelPairing_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemoteClient_CancelPairing_Response) ProtoMessage() {}

func (x *CRemoteClient_CancelPairing_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemoteClient_CancelPairing_Response.ProtoReflect.Descriptor instead.
func (*CRemoteClient_CancelPairing_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{10}
}

type CRemoteClient_RegisterStatusUpdate_Notification struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SessionId     *uint64                `protobuf:"fixed64,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	Steamid       *uint64                `protobuf:"fixed64,2,opt,name=steamid" json:"steamid,omitempty"`
	DeviceId      *uint64                `protobuf:"fixed64,3,opt,name=device_id,json=deviceId" json:"device_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CRemoteClient_RegisterStatusUpdate_Notification) Reset() {
	*x = CRemoteClient_RegisterStatusUpdate_Notification{}
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CRemoteClient_RegisterStatusUpdate_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemoteClient_RegisterStatusUpdate_Notification) ProtoMessage() {}

func (x *CRemoteClient_RegisterStatusUpdate_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemoteClient_RegisterStatusUpdate_Notification.ProtoReflect.Descriptor instead.
func (*CRemoteClient_RegisterStatusUpdate_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{11}
}

func (x *CRemoteClient_RegisterStatusUpdate_Notification) GetSessionId() uint64 {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return 0
}

func (x *CRemoteClient_RegisterStatusUpdate_Notification) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CRemoteClient_RegisterStatusUpdate_Notification) GetDeviceId() uint64 {
	if x != nil && x.DeviceId != nil {
		return *x.DeviceId
	}
	return 0
}

type CRemoteClient_UnregisterStatusUpdate_Notification struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SessionId     *uint64                `protobuf:"fixed64,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	Steamid       *uint64                `protobuf:"fixed64,2,opt,name=steamid" json:"steamid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CRemoteClient_UnregisterStatusUpdate_Notification) Reset() {
	*x = CRemoteClient_UnregisterStatusUpdate_Notification{}
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CRemoteClient_UnregisterStatusUpdate_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemoteClient_UnregisterStatusUpdate_Notification) ProtoMessage() {}

func (x *CRemoteClient_UnregisterStatusUpdate_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemoteClient_UnregisterStatusUpdate_Notification.ProtoReflect.Descriptor instead.
func (*CRemoteClient_UnregisterStatusUpdate_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{12}
}

func (x *CRemoteClient_UnregisterStatusUpdate_Notification) GetSessionId() uint64 {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return 0
}

func (x *CRemoteClient_UnregisterStatusUpdate_Notification) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

type CRemoteClient_DeviceDetails struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	DeviceFriendlyName *string                `protobuf:"bytes,1,opt,name=device_friendly_name,json=deviceFriendlyName" json:"device_friendly_name,omitempty"`
	OsType             *int32                 `protobuf:"varint,2,opt,name=os_type,json=osType" json:"os_type,omitempty"`
	GamingDeviceType   *uint32                `protobuf:"varint,3,opt,name=gaming_device_type,json=gamingDeviceType" json:"gaming_device_type,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *CRemoteClient_DeviceDetails) Reset() {
	*x = CRemoteClient_DeviceDetails{}
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CRemoteClient_DeviceDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemoteClient_DeviceDetails) ProtoMessage() {}

func (x *CRemoteClient_DeviceDetails) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemoteClient_DeviceDetails.ProtoReflect.Descriptor instead.
func (*CRemoteClient_DeviceDetails) Descriptor() ([]byte, []int) {
	return file_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{13}
}

func (x *CRemoteClient_DeviceDetails) GetDeviceFriendlyName() string {
	if x != nil && x.DeviceFriendlyName != nil {
		return *x.DeviceFriendlyName
	}
	return ""
}

func (x *CRemoteClient_DeviceDetails) GetOsType() int32 {
	if x != nil && x.OsType != nil {
		return *x.OsType
	}
	return 0
}

func (x *CRemoteClient_DeviceDetails) GetGamingDeviceType() uint32 {
	if x != nil && x.GamingDeviceType != nil {
		return *x.GamingDeviceType
	}
	return 0
}

type CRemoteClient_Online_Notification struct {
	state          protoimpl.MessageState       `protogen:"open.v1"`
	Steamid        *uint64                      `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	RemoteClientId *uint64                      `protobuf:"fixed64,2,opt,name=remote_client_id,json=remoteClientId" json:"remote_client_id,omitempty"`
	DeviceDetails  *CRemoteClient_DeviceDetails `protobuf:"bytes,3,opt,name=device_details,json=deviceDetails" json:"device_details,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CRemoteClient_Online_Notification) Reset() {
	*x = CRemoteClient_Online_Notification{}
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CRemoteClient_Online_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemoteClient_Online_Notification) ProtoMessage() {}

func (x *CRemoteClient_Online_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemoteClient_Online_Notification.ProtoReflect.Descriptor instead.
func (*CRemoteClient_Online_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{14}
}

func (x *CRemoteClient_Online_Notification) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CRemoteClient_Online_Notification) GetRemoteClientId() uint64 {
	if x != nil && x.RemoteClientId != nil {
		return *x.RemoteClientId
	}
	return 0
}

func (x *CRemoteClient_Online_Notification) GetDeviceDetails() *CRemoteClient_DeviceDetails {
	if x != nil {
		return x.DeviceDetails
	}
	return nil
}

type CRemoteClient_GetRecentClients_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CRemoteClient_GetRecentClients_Request) Reset() {
	*x = CRemoteClient_GetRecentClients_Request{}
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CRemoteClient_GetRecentClients_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemoteClient_GetRecentClients_Request) ProtoMessage() {}

func (x *CRemoteClient_GetRecentClients_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemoteClient_GetRecentClients_Request.ProtoReflect.Descriptor instead.
func (*CRemoteClient_GetRecentClients_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{15}
}

type CRemoteClient_ClientLogin struct {
	state          protoimpl.MessageState       `protogen:"open.v1"`
	RemoteClientId *uint64                      `protobuf:"fixed64,1,opt,name=remote_client_id,json=remoteClientId" json:"remote_client_id,omitempty"`
	TokenId        *uint64                      `protobuf:"fixed64,2,opt,name=token_id,json=tokenId" json:"token_id,omitempty"`
	DeviceDetails  *CRemoteClient_DeviceDetails `protobuf:"bytes,3,opt,name=device_details,json=deviceDetails" json:"device_details,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CRemoteClient_ClientLogin) Reset() {
	*x = CRemoteClient_ClientLogin{}
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CRemoteClient_ClientLogin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemoteClient_ClientLogin) ProtoMessage() {}

func (x *CRemoteClient_ClientLogin) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemoteClient_ClientLogin.ProtoReflect.Descriptor instead.
func (*CRemoteClient_ClientLogin) Descriptor() ([]byte, []int) {
	return file_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{16}
}

func (x *CRemoteClient_ClientLogin) GetRemoteClientId() uint64 {
	if x != nil && x.RemoteClientId != nil {
		return *x.RemoteClientId
	}
	return 0
}

func (x *CRemoteClient_ClientLogin) GetTokenId() uint64 {
	if x != nil && x.TokenId != nil {
		return *x.TokenId
	}
	return 0
}

func (x *CRemoteClient_ClientLogin) GetDeviceDetails() *CRemoteClient_DeviceDetails {
	if x != nil {
		return x.DeviceDetails
	}
	return nil
}

type CRemoteClient_ClientDetails struct {
	state          protoimpl.MessageState       `protogen:"open.v1"`
	RemoteClientId *uint64                      `protobuf:"fixed64,1,opt,name=remote_client_id,json=remoteClientId" json:"remote_client_id,omitempty"`
	DeviceDetails  *CRemoteClient_DeviceDetails `protobuf:"bytes,2,opt,name=device_details,json=deviceDetails" json:"device_details,omitempty"`
	LastSeen       *uint64                      `protobuf:"varint,4,opt,name=last_seen,json=lastSeen" json:"last_seen,omitempty"`
	City           *string                      `protobuf:"bytes,5,opt,name=city" json:"city,omitempty"`
	State          *string                      `protobuf:"bytes,6,opt,name=state" json:"state,omitempty"`
	Country        *string                      `protobuf:"bytes,7,opt,name=country" json:"country,omitempty"`
	IsOnline       *bool                        `protobuf:"varint,8,opt,name=is_online,json=isOnline" json:"is_online,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CRemoteClient_ClientDetails) Reset() {
	*x = CRemoteClient_ClientDetails{}
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CRemoteClient_ClientDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemoteClient_ClientDetails) ProtoMessage() {}

func (x *CRemoteClient_ClientDetails) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemoteClient_ClientDetails.ProtoReflect.Descriptor instead.
func (*CRemoteClient_ClientDetails) Descriptor() ([]byte, []int) {
	return file_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{17}
}

func (x *CRemoteClient_ClientDetails) GetRemoteClientId() uint64 {
	if x != nil && x.RemoteClientId != nil {
		return *x.RemoteClientId
	}
	return 0
}

func (x *CRemoteClient_ClientDetails) GetDeviceDetails() *CRemoteClient_DeviceDetails {
	if x != nil {
		return x.DeviceDetails
	}
	return nil
}

func (x *CRemoteClient_ClientDetails) GetLastSeen() uint64 {
	if x != nil && x.LastSeen != nil {
		return *x.LastSeen
	}
	return 0
}

func (x *CRemoteClient_ClientDetails) GetCity() string {
	if x != nil && x.City != nil {
		return *x.City
	}
	return ""
}

func (x *CRemoteClient_ClientDetails) GetState() string {
	if x != nil && x.State != nil {
		return *x.State
	}
	return ""
}

func (x *CRemoteClient_ClientDetails) GetCountry() string {
	if x != nil && x.Country != nil {
		return *x.Country
	}
	return ""
}

func (x *CRemoteClient_ClientDetails) GetIsOnline() bool {
	if x != nil && x.IsOnline != nil {
		return *x.IsOnline
	}
	return false
}

type CRemoteClient_GetRecentClients_Response struct {
	state         protoimpl.MessageState         `protogen:"open.v1"`
	Clients       []*CRemoteClient_ClientDetails `protobuf:"bytes,1,rep,name=clients" json:"clients,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CRemoteClient_GetRecentClients_Response) Reset() {
	*x = CRemoteClient_GetRecentClients_Response{}
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CRemoteClient_GetRecentClients_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemoteClient_GetRecentClients_Response) ProtoMessage() {}

func (x *CRemoteClient_GetRecentClients_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemoteClient_GetRecentClients_Response.ProtoReflect.Descriptor instead.
func (*CRemoteClient_GetRecentClients_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{18}
}

func (x *CRemoteClient_GetRecentClients_Response) GetClients() []*CRemoteClient_ClientDetails {
	if x != nil {
		return x.Clients
	}
	return nil
}

type CRemoteClient_Task struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          *ECLientTaskListType   `protobuf:"varint,1,opt,name=type,enum=ECLientTaskListType,def=1" json:"type,omitempty"`
	TaskId        *uint64                `protobuf:"fixed64,2,opt,name=task_id,json=taskId" json:"task_id,omitempty"`
	Url           *string                `protobuf:"bytes,3,opt,name=url" json:"url,omitempty"`
	FileId        *int64                 `protobuf:"varint,4,opt,name=file_id,json=fileId" json:"file_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CRemoteClient_Task fields.
const (
	Default_CRemoteClient_Task_Type = ECLientTaskListType_k_EClientTask_DownloadClip
)

func (x *CRemoteClient_Task) Reset() {
	*x = CRemoteClient_Task{}
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CRemoteClient_Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemoteClient_Task) ProtoMessage() {}

func (x *CRemoteClient_Task) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemoteClient_Task.ProtoReflect.Descriptor instead.
func (*CRemoteClient_Task) Descriptor() ([]byte, []int) {
	return file_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{19}
}

func (x *CRemoteClient_Task) GetType() ECLientTaskListType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_CRemoteClient_Task_Type
}

func (x *CRemoteClient_Task) GetTaskId() uint64 {
	if x != nil && x.TaskId != nil {
		return *x.TaskId
	}
	return 0
}

func (x *CRemoteClient_Task) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *CRemoteClient_Task) GetFileId() int64 {
	if x != nil && x.FileId != nil {
		return *x.FileId
	}
	return 0
}

type CRemoteClient_AddClientTask_Request struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	RemoteClientId *uint64                `protobuf:"fixed64,1,opt,name=remote_client_id,json=remoteClientId" json:"remote_client_id,omitempty"`
	Task           *CRemoteClient_Task    `protobuf:"bytes,2,opt,name=task" json:"task,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CRemoteClient_AddClientTask_Request) Reset() {
	*x = CRemoteClient_AddClientTask_Request{}
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CRemoteClient_AddClientTask_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemoteClient_AddClientTask_Request) ProtoMessage() {}

func (x *CRemoteClient_AddClientTask_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemoteClient_AddClientTask_Request.ProtoReflect.Descriptor instead.
func (*CRemoteClient_AddClientTask_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{20}
}

func (x *CRemoteClient_AddClientTask_Request) GetRemoteClientId() uint64 {
	if x != nil && x.RemoteClientId != nil {
		return *x.RemoteClientId
	}
	return 0
}

func (x *CRemoteClient_AddClientTask_Request) GetTask() *CRemoteClient_Task {
	if x != nil {
		return x.Task
	}
	return nil
}

type CRemoteClient_AddClientTask_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CRemoteClient_AddClientTask_Response) Reset() {
	*x = CRemoteClient_AddClientTask_Response{}
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CRemoteClient_AddClientTask_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemoteClient_AddClientTask_Response) ProtoMessage() {}

func (x *CRemoteClient_AddClientTask_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemoteClient_AddClientTask_Response.ProtoReflect.Descriptor instead.
func (*CRemoteClient_AddClientTask_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{21}
}

type CRemoteClient_TaskList_Notification struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	RemoteClientId *uint64                `protobuf:"fixed64,1,opt,name=remote_client_id,json=remoteClientId" json:"remote_client_id,omitempty"`
	Tasklist       []*CRemoteClient_Task  `protobuf:"bytes,2,rep,name=tasklist" json:"tasklist,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CRemoteClient_TaskList_Notification) Reset() {
	*x = CRemoteClient_TaskList_Notification{}
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CRemoteClient_TaskList_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemoteClient_TaskList_Notification) ProtoMessage() {}

func (x *CRemoteClient_TaskList_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemoteClient_TaskList_Notification.ProtoReflect.Descriptor instead.
func (*CRemoteClient_TaskList_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{22}
}

func (x *CRemoteClient_TaskList_Notification) GetRemoteClientId() uint64 {
	if x != nil && x.RemoteClientId != nil {
		return *x.RemoteClientId
	}
	return 0
}

func (x *CRemoteClient_TaskList_Notification) GetTasklist() []*CRemoteClient_Task {
	if x != nil {
		return x.Tasklist
	}
	return nil
}

type CRemoteClient_MarkTaskComplete_Request struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	RemoteClientId *uint64                `protobuf:"fixed64,1,opt,name=remote_client_id,json=remoteClientId" json:"remote_client_id,omitempty"`
	TaskId         *uint64                `protobuf:"fixed64,2,opt,name=task_id,json=taskId" json:"task_id,omitempty"`
	ContentId      *string                `protobuf:"bytes,3,opt,name=content_id,json=contentId" json:"content_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CRemoteClient_MarkTaskComplete_Request) Reset() {
	*x = CRemoteClient_MarkTaskComplete_Request{}
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CRemoteClient_MarkTaskComplete_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemoteClient_MarkTaskComplete_Request) ProtoMessage() {}

func (x *CRemoteClient_MarkTaskComplete_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemoteClient_MarkTaskComplete_Request.ProtoReflect.Descriptor instead.
func (*CRemoteClient_MarkTaskComplete_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{23}
}

func (x *CRemoteClient_MarkTaskComplete_Request) GetRemoteClientId() uint64 {
	if x != nil && x.RemoteClientId != nil {
		return *x.RemoteClientId
	}
	return 0
}

func (x *CRemoteClient_MarkTaskComplete_Request) GetTaskId() uint64 {
	if x != nil && x.TaskId != nil {
		return *x.TaskId
	}
	return 0
}

func (x *CRemoteClient_MarkTaskComplete_Request) GetContentId() string {
	if x != nil && x.ContentId != nil {
		return *x.ContentId
	}
	return ""
}

type CRemoteClient_MarkTaskComplete_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CRemoteClient_MarkTaskComplete_Response) Reset() {
	*x = CRemoteClient_MarkTaskComplete_Response{}
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CRemoteClient_MarkTaskComplete_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemoteClient_MarkTaskComplete_Response) ProtoMessage() {}

func (x *CRemoteClient_MarkTaskComplete_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemoteClient_MarkTaskComplete_Response.ProtoReflect.Descriptor instead.
func (*CRemoteClient_MarkTaskComplete_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{24}
}

type CRemoteClient_RemotePacket_Notification struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SessionId     *uint64                `protobuf:"fixed64,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	Steamid       *uint64                `protobuf:"fixed64,2,opt,name=steamid" json:"steamid,omitempty"`
	Payload       []byte                 `protobuf:"bytes,4,opt,name=payload" json:"payload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CRemoteClient_RemotePacket_Notification) Reset() {
	*x = CRemoteClient_RemotePacket_Notification{}
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CRemoteClient_RemotePacket_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemoteClient_RemotePacket_Notification) ProtoMessage() {}

func (x *CRemoteClient_RemotePacket_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemoteClient_RemotePacket_Notification.ProtoReflect.Descriptor instead.
func (*CRemoteClient_RemotePacket_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{25}
}

func (x *CRemoteClient_RemotePacket_Notification) GetSessionId() uint64 {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return 0
}

func (x *CRemoteClient_RemotePacket_Notification) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CRemoteClient_RemotePacket_Notification) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

type CRemoteClient_ReplyPacket_Notification struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SessionId     *uint64                `protobuf:"fixed64,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	Payload       []byte                 `protobuf:"bytes,2,opt,name=payload" json:"payload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CRemoteClient_ReplyPacket_Notification) Reset() {
	*x = CRemoteClient_ReplyPacket_Notification{}
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CRemoteClient_ReplyPacket_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemoteClient_ReplyPacket_Notification) ProtoMessage() {}

func (x *CRemoteClient_ReplyPacket_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemoteClient_ReplyPacket_Notification.ProtoReflect.Descriptor instead.
func (*CRemoteClient_ReplyPacket_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{26}
}

func (x *CRemoteClient_ReplyPacket_Notification) GetSessionId() uint64 {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return 0
}

func (x *CRemoteClient_ReplyPacket_Notification) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

type CRemoteClient_GetReplies_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SessionId     *uint64                `protobuf:"fixed64,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CRemoteClient_GetReplies_Request) Reset() {
	*x = CRemoteClient_GetReplies_Request{}
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CRemoteClient_GetReplies_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemoteClient_GetReplies_Request) ProtoMessage() {}

func (x *CRemoteClient_GetReplies_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemoteClient_GetReplies_Request.ProtoReflect.Descriptor instead.
func (*CRemoteClient_GetReplies_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{27}
}

func (x *CRemoteClient_GetReplies_Request) GetSessionId() uint64 {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return 0
}

type CRemoteClient_GetReplies_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Payload       [][]byte               `protobuf:"bytes,1,rep,name=payload" json:"payload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CRemoteClient_GetReplies_Response) Reset() {
	*x = CRemoteClient_GetReplies_Response{}
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CRemoteClient_GetReplies_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemoteClient_GetReplies_Response) ProtoMessage() {}

func (x *CRemoteClient_GetReplies_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemoteClient_GetReplies_Response.ProtoReflect.Descriptor instead.
func (*CRemoteClient_GetReplies_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{28}
}

func (x *CRemoteClient_GetReplies_Response) GetPayload() [][]byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

type CRemoteClient_AllocateRelayServer_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Cellid        *uint32                `protobuf:"varint,1,opt,name=cellid" json:"cellid,omitempty"`
	Credentials   *string                `protobuf:"bytes,2,opt,name=credentials" json:"credentials,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CRemoteClient_AllocateRelayServer_Request) Reset() {
	*x = CRemoteClient_AllocateRelayServer_Request{}
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CRemoteClient_AllocateRelayServer_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemoteClient_AllocateRelayServer_Request) ProtoMessage() {}

func (x *CRemoteClient_AllocateRelayServer_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemoteClient_AllocateRelayServer_Request.ProtoReflect.Descriptor instead.
func (*CRemoteClient_AllocateRelayServer_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{29}
}

func (x *CRemoteClient_AllocateRelayServer_Request) GetCellid() uint32 {
	if x != nil && x.Cellid != nil {
		return *x.Cellid
	}
	return 0
}

func (x *CRemoteClient_AllocateRelayServer_Request) GetCredentials() string {
	if x != nil && x.Credentials != nil {
		return *x.Credentials
	}
	return ""
}

type CRemoteClient_AllocateRelayServer_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RelayServer   *string                `protobuf:"bytes,1,opt,name=relay_server,json=relayServer" json:"relay_server,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CRemoteClient_AllocateRelayServer_Response) Reset() {
	*x = CRemoteClient_AllocateRelayServer_Response{}
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CRemoteClient_AllocateRelayServer_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemoteClient_AllocateRelayServer_Response) ProtoMessage() {}

func (x *CRemoteClient_AllocateRelayServer_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemoteClient_AllocateRelayServer_Response.ProtoReflect.Descriptor instead.
func (*CRemoteClient_AllocateRelayServer_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{30}
}

func (x *CRemoteClient_AllocateRelayServer_Response) GetRelayServer() string {
	if x != nil && x.RelayServer != nil {
		return *x.RelayServer
	}
	return ""
}

type CRemoteClient_AllocateSDR_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Appid         *uint32                `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CRemoteClient_AllocateSDR_Request) Reset() {
	*x = CRemoteClient_AllocateSDR_Request{}
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CRemoteClient_AllocateSDR_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemoteClient_AllocateSDR_Request) ProtoMessage() {}

func (x *CRemoteClient_AllocateSDR_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemoteClient_AllocateSDR_Request.ProtoReflect.Descriptor instead.
func (*CRemoteClient_AllocateSDR_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{31}
}

func (x *CRemoteClient_AllocateSDR_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

type CRemoteClient_AllocateSDR_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CRemoteClient_AllocateSDR_Response) Reset() {
	*x = CRemoteClient_AllocateSDR_Response{}
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CRemoteClient_AllocateSDR_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemoteClient_AllocateSDR_Response) ProtoMessage() {}

func (x *CRemoteClient_AllocateSDR_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemoteClient_AllocateSDR_Response.ProtoReflect.Descriptor instead.
func (*CRemoteClient_AllocateSDR_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{32}
}

type CRemoteClient_SteamBroadcast_Notification struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Steamid       *uint64                `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	Clientid      *uint64                `protobuf:"fixed64,2,opt,name=clientid" json:"clientid,omitempty"`
	Payload       []byte                 `protobuf:"bytes,3,opt,name=payload" json:"payload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CRemoteClient_SteamBroadcast_Notification) Reset() {
	*x = CRemoteClient_SteamBroadcast_Notification{}
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CRemoteClient_SteamBroadcast_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemoteClient_SteamBroadcast_Notification) ProtoMessage() {}

func (x *CRemoteClient_SteamBroadcast_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemoteClient_SteamBroadcast_Notification.ProtoReflect.Descriptor instead.
func (*CRemoteClient_SteamBroadcast_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{33}
}

func (x *CRemoteClient_SteamBroadcast_Notification) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CRemoteClient_SteamBroadcast_Notification) GetClientid() uint64 {
	if x != nil && x.Clientid != nil {
		return *x.Clientid
	}
	return 0
}

func (x *CRemoteClient_SteamBroadcast_Notification) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

type CRemoteClient_SteamToSteam_Notification struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Steamid          *uint64                `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	SrcClientid      *uint64                `protobuf:"fixed64,2,opt,name=src_clientid,json=srcClientid" json:"src_clientid,omitempty"`
	DstClientid      *uint64                `protobuf:"fixed64,3,opt,name=dst_clientid,json=dstClientid" json:"dst_clientid,omitempty"`
	Secretid         *uint32                `protobuf:"varint,4,opt,name=secretid" json:"secretid,omitempty"`
	EncryptedPayload []byte                 `protobuf:"bytes,5,opt,name=encrypted_payload,json=encryptedPayload" json:"encrypted_payload,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CRemoteClient_SteamToSteam_Notification) Reset() {
	*x = CRemoteClient_SteamToSteam_Notification{}
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CRemoteClient_SteamToSteam_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemoteClient_SteamToSteam_Notification) ProtoMessage() {}

func (x *CRemoteClient_SteamToSteam_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemoteClient_SteamToSteam_Notification.ProtoReflect.Descriptor instead.
func (*CRemoteClient_SteamToSteam_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{34}
}

func (x *CRemoteClient_SteamToSteam_Notification) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CRemoteClient_SteamToSteam_Notification) GetSrcClientid() uint64 {
	if x != nil && x.SrcClientid != nil {
		return *x.SrcClientid
	}
	return 0
}

func (x *CRemoteClient_SteamToSteam_Notification) GetDstClientid() uint64 {
	if x != nil && x.DstClientid != nil {
		return *x.DstClientid
	}
	return 0
}

func (x *CRemoteClient_SteamToSteam_Notification) GetSecretid() uint32 {
	if x != nil && x.Secretid != nil {
		return *x.Secretid
	}
	return 0
}

func (x *CRemoteClient_SteamToSteam_Notification) GetEncryptedPayload() []byte {
	if x != nil {
		return x.EncryptedPayload
	}
	return nil
}

type CRemotePlay_SessionStarted_Request struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	HostAccountId      *uint32                `protobuf:"varint,1,opt,name=host_account_id,json=hostAccountId" json:"host_account_id,omitempty"`
	ClientAccountId    *uint32                `protobuf:"varint,2,opt,name=client_account_id,json=clientAccountId" json:"client_account_id,omitempty"`
	Appid              *uint32                `protobuf:"varint,3,opt,name=appid" json:"appid,omitempty"`
	DeviceFormFactor   *int32                 `protobuf:"varint,4,opt,name=device_form_factor,json=deviceFormFactor" json:"device_form_factor,omitempty"`
	RemotePlayTogether *bool                  `protobuf:"varint,5,opt,name=remote_play_together,json=remotePlayTogether" json:"remote_play_together,omitempty"`
	GuestSession       *bool                  `protobuf:"varint,6,opt,name=guest_session,json=guestSession" json:"guest_session,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *CRemotePlay_SessionStarted_Request) Reset() {
	*x = CRemotePlay_SessionStarted_Request{}
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CRemotePlay_SessionStarted_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemotePlay_SessionStarted_Request) ProtoMessage() {}

func (x *CRemotePlay_SessionStarted_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemotePlay_SessionStarted_Request.ProtoReflect.Descriptor instead.
func (*CRemotePlay_SessionStarted_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{35}
}

func (x *CRemotePlay_SessionStarted_Request) GetHostAccountId() uint32 {
	if x != nil && x.HostAccountId != nil {
		return *x.HostAccountId
	}
	return 0
}

func (x *CRemotePlay_SessionStarted_Request) GetClientAccountId() uint32 {
	if x != nil && x.ClientAccountId != nil {
		return *x.ClientAccountId
	}
	return 0
}

func (x *CRemotePlay_SessionStarted_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CRemotePlay_SessionStarted_Request) GetDeviceFormFactor() int32 {
	if x != nil && x.DeviceFormFactor != nil {
		return *x.DeviceFormFactor
	}
	return 0
}

func (x *CRemotePlay_SessionStarted_Request) GetRemotePlayTogether() bool {
	if x != nil && x.RemotePlayTogether != nil {
		return *x.RemotePlayTogether
	}
	return false
}

func (x *CRemotePlay_SessionStarted_Request) GetGuestSession() bool {
	if x != nil && x.GuestSession != nil {
		return *x.GuestSession
	}
	return false
}

type CRemotePlay_SessionStarted_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RecordId      *uint64                `protobuf:"fixed64,1,opt,name=record_id,json=recordId" json:"record_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CRemotePlay_SessionStarted_Response) Reset() {
	*x = CRemotePlay_SessionStarted_Response{}
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CRemotePlay_SessionStarted_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemotePlay_SessionStarted_Response) ProtoMessage() {}

func (x *CRemotePlay_SessionStarted_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemotePlay_SessionStarted_Response.ProtoReflect.Descriptor instead.
func (*CRemotePlay_SessionStarted_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{36}
}

func (x *CRemotePlay_SessionStarted_Response) GetRecordId() uint64 {
	if x != nil && x.RecordId != nil {
		return *x.RecordId
	}
	return 0
}

type CRemotePlay_SessionStopped_Notification struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RecordId      *uint64                `protobuf:"fixed64,1,opt,name=record_id,json=recordId" json:"record_id,omitempty"`
	UsedX264      *bool                  `protobuf:"varint,2,opt,name=used_x264,json=usedX264" json:"used_x264,omitempty"`
	UsedH264      *bool                  `protobuf:"varint,3,opt,name=used_h264,json=usedH264" json:"used_h264,omitempty"`
	UsedHevc      *bool                  `protobuf:"varint,4,opt,name=used_hevc,json=usedHevc" json:"used_hevc,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CRemotePlay_SessionStopped_Notification) Reset() {
	*x = CRemotePlay_SessionStopped_Notification{}
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CRemotePlay_SessionStopped_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemotePlay_SessionStopped_Notification) ProtoMessage() {}

func (x *CRemotePlay_SessionStopped_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemotePlay_SessionStopped_Notification.ProtoReflect.Descriptor instead.
func (*CRemotePlay_SessionStopped_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{37}
}

func (x *CRemotePlay_SessionStopped_Notification) GetRecordId() uint64 {
	if x != nil && x.RecordId != nil {
		return *x.RecordId
	}
	return 0
}

func (x *CRemotePlay_SessionStopped_Notification) GetUsedX264() bool {
	if x != nil && x.UsedX264 != nil {
		return *x.UsedX264
	}
	return false
}

func (x *CRemotePlay_SessionStopped_Notification) GetUsedH264() bool {
	if x != nil && x.UsedH264 != nil {
		return *x.UsedH264
	}
	return false
}

func (x *CRemotePlay_SessionStopped_Notification) GetUsedHevc() bool {
	if x != nil && x.UsedHevc != nil {
		return *x.UsedHevc
	}
	return false
}

type CRemotePlayTogether_Notification struct {
	state   protoimpl.MessageState `protogen:"open.v1"`
	Steamid *uint64                `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	// Types that are valid to be assigned to Message:
	//
	//	*CRemotePlayTogether_Notification_GroupUpdated_
	Message       isCRemotePlayTogether_Notification_Message `protobuf_oneof:"Message"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CRemotePlayTogether_Notification) Reset() {
	*x = CRemotePlayTogether_Notification{}
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CRemotePlayTogether_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemotePlayTogether_Notification) ProtoMessage() {}

func (x *CRemotePlayTogether_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemotePlayTogether_Notification.ProtoReflect.Descriptor instead.
func (*CRemotePlayTogether_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{38}
}

func (x *CRemotePlayTogether_Notification) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CRemotePlayTogether_Notification) GetMessage() isCRemotePlayTogether_Notification_Message {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *CRemotePlayTogether_Notification) GetGroupUpdated() *CRemotePlayTogether_Notification_GroupUpdated {
	if x != nil {
		if x, ok := x.Message.(*CRemotePlayTogether_Notification_GroupUpdated_); ok {
			return x.GroupUpdated
		}
	}
	return nil
}

type isCRemotePlayTogether_Notification_Message interface {
	isCRemotePlayTogether_Notification_Message()
}

type CRemotePlayTogether_Notification_GroupUpdated_ struct {
	GroupUpdated *CRemotePlayTogether_Notification_GroupUpdated `protobuf:"bytes,2,opt,name=group_updated,json=groupUpdated,oneof"`
}

func (*CRemotePlayTogether_Notification_GroupUpdated_) isCRemotePlayTogether_Notification_Message() {}

type CRemoteClient_CreateRemotePlayTogetherInvitation_Request struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Appid            *uint32                `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	LaunchParameters *string                `protobuf:"bytes,2,opt,name=launch_parameters,json=launchParameters" json:"launch_parameters,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CRemoteClient_CreateRemotePlayTogetherInvitation_Request) Reset() {
	*x = CRemoteClient_CreateRemotePlayTogetherInvitation_Request{}
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CRemoteClient_CreateRemotePlayTogetherInvitation_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemoteClient_CreateRemotePlayTogetherInvitation_Request) ProtoMessage() {}

func (x *CRemoteClient_CreateRemotePlayTogetherInvitation_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemoteClient_CreateRemotePlayTogetherInvitation_Request.ProtoReflect.Descriptor instead.
func (*CRemoteClient_CreateRemotePlayTogetherInvitation_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{39}
}

func (x *CRemoteClient_CreateRemotePlayTogetherInvitation_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CRemoteClient_CreateRemotePlayTogetherInvitation_Request) GetLaunchParameters() string {
	if x != nil && x.LaunchParameters != nil {
		return *x.LaunchParameters
	}
	return ""
}

type CRemoteClient_CreateRemotePlayTogetherInvitation_Response struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	InvitationCode *string                `protobuf:"bytes,1,opt,name=invitation_code,json=invitationCode" json:"invitation_code,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CRemoteClient_CreateRemotePlayTogetherInvitation_Response) Reset() {
	*x = CRemoteClient_CreateRemotePlayTogetherInvitation_Response{}
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CRemoteClient_CreateRemotePlayTogetherInvitation_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemoteClient_CreateRemotePlayTogetherInvitation_Response) ProtoMessage() {}

func (x *CRemoteClient_CreateRemotePlayTogetherInvitation_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemoteClient_CreateRemotePlayTogetherInvitation_Response.ProtoReflect.Descriptor instead.
func (*CRemoteClient_CreateRemotePlayTogetherInvitation_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{40}
}

func (x *CRemoteClient_CreateRemotePlayTogetherInvitation_Response) GetInvitationCode() string {
	if x != nil && x.InvitationCode != nil {
		return *x.InvitationCode
	}
	return ""
}

type CRemoteClient_DeleteRemotePlayTogetherInvitation_Request struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	InvitationCode *string                `protobuf:"bytes,1,opt,name=invitation_code,json=invitationCode" json:"invitation_code,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CRemoteClient_DeleteRemotePlayTogetherInvitation_Request) Reset() {
	*x = CRemoteClient_DeleteRemotePlayTogetherInvitation_Request{}
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CRemoteClient_DeleteRemotePlayTogetherInvitation_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemoteClient_DeleteRemotePlayTogetherInvitation_Request) ProtoMessage() {}

func (x *CRemoteClient_DeleteRemotePlayTogetherInvitation_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemoteClient_DeleteRemotePlayTogetherInvitation_Request.ProtoReflect.Descriptor instead.
func (*CRemoteClient_DeleteRemotePlayTogetherInvitation_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{41}
}

func (x *CRemoteClient_DeleteRemotePlayTogetherInvitation_Request) GetInvitationCode() string {
	if x != nil && x.InvitationCode != nil {
		return *x.InvitationCode
	}
	return ""
}

type CRemoteClient_DeleteRemotePlayTogetherInvitation_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CRemoteClient_DeleteRemotePlayTogetherInvitation_Response) Reset() {
	*x = CRemoteClient_DeleteRemotePlayTogetherInvitation_Response{}
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CRemoteClient_DeleteRemotePlayTogetherInvitation_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemoteClient_DeleteRemotePlayTogetherInvitation_Response) ProtoMessage() {}

func (x *CRemoteClient_DeleteRemotePlayTogetherInvitation_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemoteClient_DeleteRemotePlayTogetherInvitation_Response.ProtoReflect.Descriptor instead.
func (*CRemoteClient_DeleteRemotePlayTogetherInvitation_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{42}
}

type CRemoteClient_LookupRemotePlayTogetherInvitation_Request struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	InvitationCode *string                `protobuf:"bytes,1,opt,name=invitation_code,json=invitationCode" json:"invitation_code,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CRemoteClient_LookupRemotePlayTogetherInvitation_Request) Reset() {
	*x = CRemoteClient_LookupRemotePlayTogetherInvitation_Request{}
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CRemoteClient_LookupRemotePlayTogetherInvitation_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemoteClient_LookupRemotePlayTogetherInvitation_Request) ProtoMessage() {}

func (x *CRemoteClient_LookupRemotePlayTogetherInvitation_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemoteClient_LookupRemotePlayTogetherInvitation_Request.ProtoReflect.Descriptor instead.
func (*CRemoteClient_LookupRemotePlayTogetherInvitation_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{43}
}

func (x *CRemoteClient_LookupRemotePlayTogetherInvitation_Request) GetInvitationCode() string {
	if x != nil && x.InvitationCode != nil {
		return *x.InvitationCode
	}
	return ""
}

type CRemoteClient_LookupRemotePlayTogetherInvitation_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	InvitationUrl *string                `protobuf:"bytes,1,opt,name=invitation_url,json=invitationUrl" json:"invitation_url,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CRemoteClient_LookupRemotePlayTogetherInvitation_Response) Reset() {
	*x = CRemoteClient_LookupRemotePlayTogetherInvitation_Response{}
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CRemoteClient_LookupRemotePlayTogetherInvitation_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemoteClient_LookupRemotePlayTogetherInvitation_Response) ProtoMessage() {}

func (x *CRemoteClient_LookupRemotePlayTogetherInvitation_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemoteClient_LookupRemotePlayTogetherInvitation_Response.ProtoReflect.Descriptor instead.
func (*CRemoteClient_LookupRemotePlayTogetherInvitation_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{44}
}

func (x *CRemoteClient_LookupRemotePlayTogetherInvitation_Response) GetInvitationUrl() string {
	if x != nil && x.InvitationUrl != nil {
		return *x.InvitationUrl
	}
	return ""
}

type CCMRemoteClient_ClientMessage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Message:
	//
	//	*CCMRemoteClient_ClientMessage_CreateSessionRequest
	//	*CCMRemoteClient_ClientMessage_StartPairingRequest
	//	*CCMRemoteClient_ClientMessage_SetPairingInfoRequest
	//	*CCMRemoteClient_ClientMessage_CancelPairingRequest
	//	*CCMRemoteClient_ClientMessage_RegisterStatusUpdate
	//	*CCMRemoteClient_ClientMessage_UnregisterStatusUpdate
	//	*CCMRemoteClient_ClientMessage_RemotePacket
	Message       isCCMRemoteClient_ClientMessage_Message `protobuf_oneof:"Message"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CCMRemoteClient_ClientMessage) Reset() {
	*x = CCMRemoteClient_ClientMessage{}
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CCMRemoteClient_ClientMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCMRemoteClient_ClientMessage) ProtoMessage() {}

func (x *CCMRemoteClient_ClientMessage) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCMRemoteClient_ClientMessage.ProtoReflect.Descriptor instead.
func (*CCMRemoteClient_ClientMessage) Descriptor() ([]byte, []int) {
	return file_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{45}
}

func (x *CCMRemoteClient_ClientMessage) GetMessage() isCCMRemoteClient_ClientMessage_Message {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *CCMRemoteClient_ClientMessage) GetCreateSessionRequest() *CRemoteClient_CreateSession_Request {
	if x != nil {
		if x, ok := x.Message.(*CCMRemoteClient_ClientMessage_CreateSessionRequest); ok {
			return x.CreateSessionRequest
		}
	}
	return nil
}

func (x *CCMRemoteClient_ClientMessage) GetStartPairingRequest() *CRemoteClient_StartPairing_Request {
	if x != nil {
		if x, ok := x.Message.(*CCMRemoteClient_ClientMessage_StartPairingRequest); ok {
			return x.StartPairingRequest
		}
	}
	return nil
}

func (x *CCMRemoteClient_ClientMessage) GetSetPairingInfoRequest() *CRemoteClient_SetPairingInfo_Request {
	if x != nil {
		if x, ok := x.Message.(*CCMRemoteClient_ClientMessage_SetPairingInfoRequest); ok {
			return x.SetPairingInfoRequest
		}
	}
	return nil
}

func (x *CCMRemoteClient_ClientMessage) GetCancelPairingRequest() *CRemoteClient_CancelPairing_Request {
	if x != nil {
		if x, ok := x.Message.(*CCMRemoteClient_ClientMessage_CancelPairingRequest); ok {
			return x.CancelPairingRequest
		}
	}
	return nil
}

func (x *CCMRemoteClient_ClientMessage) GetRegisterStatusUpdate() *CRemoteClient_RegisterStatusUpdate_Notification {
	if x != nil {
		if x, ok := x.Message.(*CCMRemoteClient_ClientMessage_RegisterStatusUpdate); ok {
			return x.RegisterStatusUpdate
		}
	}
	return nil
}

func (x *CCMRemoteClient_ClientMessage) GetUnregisterStatusUpdate() *CRemoteClient_UnregisterStatusUpdate_Notification {
	if x != nil {
		if x, ok := x.Message.(*CCMRemoteClient_ClientMessage_UnregisterStatusUpdate); ok {
			return x.UnregisterStatusUpdate
		}
	}
	return nil
}

func (x *CCMRemoteClient_ClientMessage) GetRemotePacket() *CRemoteClient_RemotePacket_Notification {
	if x != nil {
		if x, ok := x.Message.(*CCMRemoteClient_ClientMessage_RemotePacket); ok {
			return x.RemotePacket
		}
	}
	return nil
}

type isCCMRemoteClient_ClientMessage_Message interface {
	isCCMRemoteClient_ClientMessage_Message()
}

type CCMRemoteClient_ClientMessage_CreateSessionRequest struct {
	CreateSessionRequest *CRemoteClient_CreateSession_Request `protobuf:"bytes,1,opt,name=create_session_request,json=createSessionRequest,oneof"`
}

type CCMRemoteClient_ClientMessage_StartPairingRequest struct {
	StartPairingRequest *CRemoteClient_StartPairing_Request `protobuf:"bytes,2,opt,name=start_pairing_request,json=startPairingRequest,oneof"`
}

type CCMRemoteClient_ClientMessage_SetPairingInfoRequest struct {
	SetPairingInfoRequest *CRemoteClient_SetPairingInfo_Request `protobuf:"bytes,3,opt,name=set_pairing_info_request,json=setPairingInfoRequest,oneof"`
}

type CCMRemoteClient_ClientMessage_CancelPairingRequest struct {
	CancelPairingRequest *CRemoteClient_CancelPairing_Request `protobuf:"bytes,4,opt,name=cancel_pairing_request,json=cancelPairingRequest,oneof"`
}

type CCMRemoteClient_ClientMessage_RegisterStatusUpdate struct {
	RegisterStatusUpdate *CRemoteClient_RegisterStatusUpdate_Notification `protobuf:"bytes,5,opt,name=register_status_update,json=registerStatusUpdate,oneof"`
}

type CCMRemoteClient_ClientMessage_UnregisterStatusUpdate struct {
	UnregisterStatusUpdate *CRemoteClient_UnregisterStatusUpdate_Notification `protobuf:"bytes,6,opt,name=unregister_status_update,json=unregisterStatusUpdate,oneof"`
}

type CCMRemoteClient_ClientMessage_RemotePacket struct {
	RemotePacket *CRemoteClient_RemotePacket_Notification `protobuf:"bytes,7,opt,name=remote_packet,json=remotePacket,oneof"`
}

func (*CCMRemoteClient_ClientMessage_CreateSessionRequest) isCCMRemoteClient_ClientMessage_Message() {
}

func (*CCMRemoteClient_ClientMessage_StartPairingRequest) isCCMRemoteClient_ClientMessage_Message() {}

func (*CCMRemoteClient_ClientMessage_SetPairingInfoRequest) isCCMRemoteClient_ClientMessage_Message() {
}

func (*CCMRemoteClient_ClientMessage_CancelPairingRequest) isCCMRemoteClient_ClientMessage_Message() {
}

func (*CCMRemoteClient_ClientMessage_RegisterStatusUpdate) isCCMRemoteClient_ClientMessage_Message() {
}

func (*CCMRemoteClient_ClientMessage_UnregisterStatusUpdate) isCCMRemoteClient_ClientMessage_Message() {
}

func (*CCMRemoteClient_ClientMessage_RemotePacket) isCCMRemoteClient_ClientMessage_Message() {}

type CCMRemoteClient_ServerMessage struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	Result *int32                 `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	// Types that are valid to be assigned to Message:
	//
	//	*CCMRemoteClient_ServerMessage_CreateSessionResponse
	//	*CCMRemoteClient_ServerMessage_StartPairingResponse
	//	*CCMRemoteClient_ServerMessage_SetPairingInfoResponse
	//	*CCMRemoteClient_ServerMessage_CancelPairingResponse
	//	*CCMRemoteClient_ServerMessage_ReplyPacket
	Message       isCCMRemoteClient_ServerMessage_Message `protobuf_oneof:"Message"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CCMRemoteClient_ServerMessage) Reset() {
	*x = CCMRemoteClient_ServerMessage{}
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CCMRemoteClient_ServerMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCMRemoteClient_ServerMessage) ProtoMessage() {}

func (x *CCMRemoteClient_ServerMessage) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCMRemoteClient_ServerMessage.ProtoReflect.Descriptor instead.
func (*CCMRemoteClient_ServerMessage) Descriptor() ([]byte, []int) {
	return file_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{46}
}

func (x *CCMRemoteClient_ServerMessage) GetResult() int32 {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return 0
}

func (x *CCMRemoteClient_ServerMessage) GetMessage() isCCMRemoteClient_ServerMessage_Message {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *CCMRemoteClient_ServerMessage) GetCreateSessionResponse() *CRemoteClient_CreateSession_Response {
	if x != nil {
		if x, ok := x.Message.(*CCMRemoteClient_ServerMessage_CreateSessionResponse); ok {
			return x.CreateSessionResponse
		}
	}
	return nil
}

func (x *CCMRemoteClient_ServerMessage) GetStartPairingResponse() *CRemoteClient_StartPairing_Response {
	if x != nil {
		if x, ok := x.Message.(*CCMRemoteClient_ServerMessage_StartPairingResponse); ok {
			return x.StartPairingResponse
		}
	}
	return nil
}

func (x *CCMRemoteClient_ServerMessage) GetSetPairingInfoResponse() *CRemoteClient_SetPairingInfo_Response {
	if x != nil {
		if x, ok := x.Message.(*CCMRemoteClient_ServerMessage_SetPairingInfoResponse); ok {
			return x.SetPairingInfoResponse
		}
	}
	return nil
}

func (x *CCMRemoteClient_ServerMessage) GetCancelPairingResponse() *CRemoteClient_CancelPairing_Response {
	if x != nil {
		if x, ok := x.Message.(*CCMRemoteClient_ServerMessage_CancelPairingResponse); ok {
			return x.CancelPairingResponse
		}
	}
	return nil
}

func (x *CCMRemoteClient_ServerMessage) GetReplyPacket() *CRemoteClient_GetReplies_Response {
	if x != nil {
		if x, ok := x.Message.(*CCMRemoteClient_ServerMessage_ReplyPacket); ok {
			return x.ReplyPacket
		}
	}
	return nil
}

type isCCMRemoteClient_ServerMessage_Message interface {
	isCCMRemoteClient_ServerMessage_Message()
}

type CCMRemoteClient_ServerMessage_CreateSessionResponse struct {
	CreateSessionResponse *CRemoteClient_CreateSession_Response `protobuf:"bytes,2,opt,name=create_session_response,json=createSessionResponse,oneof"`
}

type CCMRemoteClient_ServerMessage_StartPairingResponse struct {
	StartPairingResponse *CRemoteClient_StartPairing_Response `protobuf:"bytes,3,opt,name=start_pairing_response,json=startPairingResponse,oneof"`
}

type CCMRemoteClient_ServerMessage_SetPairingInfoResponse struct {
	SetPairingInfoResponse *CRemoteClient_SetPairingInfo_Response `protobuf:"bytes,4,opt,name=set_pairing_info_response,json=setPairingInfoResponse,oneof"`
}

type CCMRemoteClient_ServerMessage_CancelPairingResponse struct {
	CancelPairingResponse *CRemoteClient_CancelPairing_Response `protobuf:"bytes,5,opt,name=cancel_pairing_response,json=cancelPairingResponse,oneof"`
}

type CCMRemoteClient_ServerMessage_ReplyPacket struct {
	ReplyPacket *CRemoteClient_GetReplies_Response `protobuf:"bytes,6,opt,name=reply_packet,json=replyPacket,oneof"`
}

func (*CCMRemoteClient_ServerMessage_CreateSessionResponse) isCCMRemoteClient_ServerMessage_Message() {
}

func (*CCMRemoteClient_ServerMessage_StartPairingResponse) isCCMRemoteClient_ServerMessage_Message() {
}

func (*CCMRemoteClient_ServerMessage_SetPairingInfoResponse) isCCMRemoteClient_ServerMessage_Message() {
}

func (*CCMRemoteClient_ServerMessage_CancelPairingResponse) isCCMRemoteClient_ServerMessage_Message() {
}

func (*CCMRemoteClient_ServerMessage_ReplyPacket) isCCMRemoteClient_ServerMessage_Message() {}

type CRemotePlayTogether_Notification_Player struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Steamid           *uint64                `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	Guestid           *uint32                `protobuf:"varint,2,opt,name=guestid" json:"guestid,omitempty"`
	AvatarHash        []byte                 `protobuf:"bytes,3,opt,name=avatar_hash,json=avatarHash" json:"avatar_hash,omitempty"`
	KeyboardEnabled   *bool                  `protobuf:"varint,4,opt,name=keyboard_enabled,json=keyboardEnabled" json:"keyboard_enabled,omitempty"`
	MouseEnabled      *bool                  `protobuf:"varint,5,opt,name=mouse_enabled,json=mouseEnabled" json:"mouse_enabled,omitempty"`
	ControllerEnabled *bool                  `protobuf:"varint,6,opt,name=controller_enabled,json=controllerEnabled" json:"controller_enabled,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *CRemotePlayTogether_Notification_Player) Reset() {
	*x = CRemotePlayTogether_Notification_Player{}
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CRemotePlayTogether_Notification_Player) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemotePlayTogether_Notification_Player) ProtoMessage() {}

func (x *CRemotePlayTogether_Notification_Player) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemotePlayTogether_Notification_Player.ProtoReflect.Descriptor instead.
func (*CRemotePlayTogether_Notification_Player) Descriptor() ([]byte, []int) {
	return file_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{38, 0}
}

func (x *CRemotePlayTogether_Notification_Player) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CRemotePlayTogether_Notification_Player) GetGuestid() uint32 {
	if x != nil && x.Guestid != nil {
		return *x.Guestid
	}
	return 0
}

func (x *CRemotePlayTogether_Notification_Player) GetAvatarHash() []byte {
	if x != nil {
		return x.AvatarHash
	}
	return nil
}

func (x *CRemotePlayTogether_Notification_Player) GetKeyboardEnabled() bool {
	if x != nil && x.KeyboardEnabled != nil {
		return *x.KeyboardEnabled
	}
	return false
}

func (x *CRemotePlayTogether_Notification_Player) GetMouseEnabled() bool {
	if x != nil && x.MouseEnabled != nil {
		return *x.MouseEnabled
	}
	return false
}

func (x *CRemotePlayTogether_Notification_Player) GetControllerEnabled() bool {
	if x != nil && x.ControllerEnabled != nil {
		return *x.ControllerEnabled
	}
	return false
}

type CRemotePlayTogether_Notification_ControllerSlotObsolete struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Slotid        *uint32                `protobuf:"varint,1,opt,name=slotid" json:"slotid,omitempty"`
	Steamid       *uint64                `protobuf:"fixed64,2,opt,name=steamid" json:"steamid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CRemotePlayTogether_Notification_ControllerSlotObsolete) Reset() {
	*x = CRemotePlayTogether_Notification_ControllerSlotObsolete{}
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CRemotePlayTogether_Notification_ControllerSlotObsolete) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemotePlayTogether_Notification_ControllerSlotObsolete) ProtoMessage() {}

func (x *CRemotePlayTogether_Notification_ControllerSlotObsolete) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemotePlayTogether_Notification_ControllerSlotObsolete.ProtoReflect.Descriptor instead.
func (*CRemotePlayTogether_Notification_ControllerSlotObsolete) Descriptor() ([]byte, []int) {
	return file_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{38, 1}
}

func (x *CRemotePlayTogether_Notification_ControllerSlotObsolete) GetSlotid() uint32 {
	if x != nil && x.Slotid != nil {
		return *x.Slotid
	}
	return 0
}

func (x *CRemotePlayTogether_Notification_ControllerSlotObsolete) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

type CRemotePlayTogether_Notification_ControllerSlot struct {
	state          protoimpl.MessageState                   `protogen:"open.v1"`
	Slotid         *uint32                                  `protobuf:"varint,1,opt,name=slotid" json:"slotid,omitempty"`
	Player         *CRemotePlayTogether_Notification_Player `protobuf:"bytes,2,opt,name=player" json:"player,omitempty"`
	ControllerType *int32                                   `protobuf:"varint,3,opt,name=controller_type,json=controllerType" json:"controller_type,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CRemotePlayTogether_Notification_ControllerSlot) Reset() {
	*x = CRemotePlayTogether_Notification_ControllerSlot{}
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CRemotePlayTogether_Notification_ControllerSlot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemotePlayTogether_Notification_ControllerSlot) ProtoMessage() {}

func (x *CRemotePlayTogether_Notification_ControllerSlot) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemotePlayTogether_Notification_ControllerSlot.ProtoReflect.Descriptor instead.
func (*CRemotePlayTogether_Notification_ControllerSlot) Descriptor() ([]byte, []int) {
	return file_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{38, 2}
}

func (x *CRemotePlayTogether_Notification_ControllerSlot) GetSlotid() uint32 {
	if x != nil && x.Slotid != nil {
		return *x.Slotid
	}
	return 0
}

func (x *CRemotePlayTogether_Notification_ControllerSlot) GetPlayer() *CRemotePlayTogether_Notification_Player {
	if x != nil {
		return x.Player
	}
	return nil
}

func (x *CRemotePlayTogether_Notification_ControllerSlot) GetControllerType() int32 {
	if x != nil && x.ControllerType != nil {
		return *x.ControllerType
	}
	return 0
}

type CRemotePlayTogether_Notification_GroupUpdated struct {
	state                   protoimpl.MessageState                                     `protogen:"open.v1"`
	HostSteamid             *uint64                                                    `protobuf:"fixed64,1,opt,name=host_steamid,json=hostSteamid" json:"host_steamid,omitempty"`
	HostClientid            *uint64                                                    `protobuf:"fixed64,2,opt,name=host_clientid,json=hostClientid" json:"host_clientid,omitempty"`
	PlayersObsolete         []uint64                                                   `protobuf:"fixed64,3,rep,name=players_obsolete,json=playersObsolete" json:"players_obsolete,omitempty"`
	HostGameid              *uint64                                                    `protobuf:"fixed64,4,opt,name=host_gameid,json=hostGameid" json:"host_gameid,omitempty"`
	ControllerSlotsObsolete []*CRemotePlayTogether_Notification_ControllerSlotObsolete `protobuf:"bytes,5,rep,name=controller_slots_obsolete,json=controllerSlotsObsolete" json:"controller_slots_obsolete,omitempty"`
	HasNewPlayers           *bool                                                      `protobuf:"varint,6,opt,name=has_new_players,json=hasNewPlayers" json:"has_new_players,omitempty"`
	PlayerSlots             []*CRemotePlayTogether_Notification_Player                 `protobuf:"bytes,7,rep,name=player_slots,json=playerSlots" json:"player_slots,omitempty"`
	ControllerSlots         []*CRemotePlayTogether_Notification_ControllerSlot         `protobuf:"bytes,8,rep,name=controller_slots,json=controllerSlots" json:"controller_slots,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *CRemotePlayTogether_Notification_GroupUpdated) Reset() {
	*x = CRemotePlayTogether_Notification_GroupUpdated{}
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CRemotePlayTogether_Notification_GroupUpdated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemotePlayTogether_Notification_GroupUpdated) ProtoMessage() {}

func (x *CRemotePlayTogether_Notification_GroupUpdated) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemotePlayTogether_Notification_GroupUpdated.ProtoReflect.Descriptor instead.
func (*CRemotePlayTogether_Notification_GroupUpdated) Descriptor() ([]byte, []int) {
	return file_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{38, 3}
}

func (x *CRemotePlayTogether_Notification_GroupUpdated) GetHostSteamid() uint64 {
	if x != nil && x.HostSteamid != nil {
		return *x.HostSteamid
	}
	return 0
}

func (x *CRemotePlayTogether_Notification_GroupUpdated) GetHostClientid() uint64 {
	if x != nil && x.HostClientid != nil {
		return *x.HostClientid
	}
	return 0
}

func (x *CRemotePlayTogether_Notification_GroupUpdated) GetPlayersObsolete() []uint64 {
	if x != nil {
		return x.PlayersObsolete
	}
	return nil
}

func (x *CRemotePlayTogether_Notification_GroupUpdated) GetHostGameid() uint64 {
	if x != nil && x.HostGameid != nil {
		return *x.HostGameid
	}
	return 0
}

func (x *CRemotePlayTogether_Notification_GroupUpdated) GetControllerSlotsObsolete() []*CRemotePlayTogether_Notification_ControllerSlotObsolete {
	if x != nil {
		return x.ControllerSlotsObsolete
	}
	return nil
}

func (x *CRemotePlayTogether_Notification_GroupUpdated) GetHasNewPlayers() bool {
	if x != nil && x.HasNewPlayers != nil {
		return *x.HasNewPlayers
	}
	return false
}

func (x *CRemotePlayTogether_Notification_GroupUpdated) GetPlayerSlots() []*CRemotePlayTogether_Notification_Player {
	if x != nil {
		return x.PlayerSlots
	}
	return nil
}

func (x *CRemotePlayTogether_Notification_GroupUpdated) GetControllerSlots() []*CRemotePlayTogether_Notification_ControllerSlot {
	if x != nil {
		return x.ControllerSlots
	}
	return nil
}

var File_steammessages_remoteclient_service_messages_proto protoreflect.FileDescriptor

const file_steammessages_remoteclient_service_messages_proto_rawDesc = "" +
	"\n" +
	"1steammessages_remoteclient_service_messages.proto\"%\n" +
	"#CRemoteClient_CreateSession_Request\"c\n" +
	"$CRemoteClient_CreateSession_Response\x12\x1d\n" +
	"\n" +
	"session_id\x18\x01 \x01(\x06R\tsessionId\x12\x1c\n" +
	"\teuniverse\x18\x02 \x01(\x05R\teuniverse\"I\n" +
	"(CRemoteClient_DeleteSession_Notification\x12\x1d\n" +
	"\n" +
	"session_id\x18\x01 \x01(\x06R\tsessionId\"C\n" +
	"\"CRemoteClient_StartPairing_Request\x12\x1d\n" +
	"\n" +
	"session_id\x18\x01 \x01(\x06R\tsessionId\"7\n" +
	"#CRemoteClient_StartPairing_Response\x12\x10\n" +
	"\x03pin\x18\x01 \x01(\rR\x03pin\"|\n" +
	"$CRemoteClient_SetPairingInfo_Request\x12\x1d\n" +
	"\n" +
	"session_id\x18\x01 \x01(\x06R\tsessionId\x12\x1b\n" +
	"\tdevice_id\x18\x02 \x01(\x06R\bdeviceId\x12\x18\n" +
	"\arequest\x18\x03 \x01(\fR\arequest\"'\n" +
	"%CRemoteClient_SetPairingInfo_Response\"8\n" +
	"$CRemoteClient_GetPairingInfo_Request\x12\x10\n" +
	"\x03pin\x18\x01 \x01(\rR\x03pin\"}\n" +
	"%CRemoteClient_GetPairingInfo_Response\x12\x1d\n" +
	"\n" +
	"session_id\x18\x01 \x01(\x06R\tsessionId\x12\x1b\n" +
	"\tdevice_id\x18\x02 \x01(\x06R\bdeviceId\x12\x18\n" +
	"\arequest\x18\x03 \x01(\fR\arequest\"D\n" +
	"#CRemoteClient_CancelPairing_Request\x12\x1d\n" +
	"\n" +
	"session_id\x18\x01 \x01(\x06R\tsessionId\"&\n" +
	"$CRemoteClient_CancelPairing_Response\"\x87\x01\n" +
	"/CRemoteClient_RegisterStatusUpdate_Notification\x12\x1d\n" +
	"\n" +
	"session_id\x18\x01 \x01(\x06R\tsessionId\x12\x18\n" +
	"\asteamid\x18\x02 \x01(\x06R\asteamid\x12\x1b\n" +
	"\tdevice_id\x18\x03 \x01(\x06R\bdeviceId\"l\n" +
	"1CRemoteClient_UnregisterStatusUpdate_Notification\x12\x1d\n" +
	"\n" +
	"session_id\x18\x01 \x01(\x06R\tsessionId\x12\x18\n" +
	"\asteamid\x18\x02 \x01(\x06R\asteamid\"\x96\x01\n" +
	"\x1bCRemoteClient_DeviceDetails\x120\n" +
	"\x14device_friendly_name\x18\x01 \x01(\tR\x12deviceFriendlyName\x12\x17\n" +
	"\aos_type\x18\x02 \x01(\x05R\x06osType\x12,\n" +
	"\x12gaming_device_type\x18\x03 \x01(\rR\x10gamingDeviceType\"\xac\x01\n" +
	"!CRemoteClient_Online_Notification\x12\x18\n" +
	"\asteamid\x18\x01 \x01(\x06R\asteamid\x12(\n" +
	"\x10remote_client_id\x18\x02 \x01(\x06R\x0eremoteClientId\x12C\n" +
	"\x0edevice_details\x18\x03 \x01(\v2\x1c.CRemoteClient_DeviceDetailsR\rdeviceDetails\"(\n" +
	"&CRemoteClient_GetRecentClients_Request\"\xa5\x01\n" +
	"\x19CRemoteClient_ClientLogin\x12(\n" +
	"\x10remote_client_id\x18\x01 \x01(\x06R\x0eremoteClientId\x12\x19\n" +
	"\btoken_id\x18\x02 \x01(\x06R\atokenId\x12C\n" +
	"\x0edevice_details\x18\x03 \x01(\v2\x1c.CRemoteClient_DeviceDetailsR\rdeviceDetails\"\x8a\x02\n" +
	"\x1bCRemoteClient_ClientDetails\x12(\n" +
	"\x10remote_client_id\x18\x01 \x01(\x06R\x0eremoteClientId\x12C\n" +
	"\x0edevice_details\x18\x02 \x01(\v2\x1c.CRemoteClient_DeviceDetailsR\rdeviceDetails\x12\x1b\n" +
	"\tlast_seen\x18\x04 \x01(\x04R\blastSeen\x12\x12\n" +
	"\x04city\x18\x05 \x01(\tR\x04city\x12\x14\n" +
	"\x05state\x18\x06 \x01(\tR\x05state\x12\x18\n" +
	"\acountry\x18\a \x01(\tR\acountry\x12\x1b\n" +
	"\tis_online\x18\b \x01(\bR\bisOnline\"a\n" +
	"'CRemoteClient_GetRecentClients_Response\x126\n" +
	"\aclients\x18\x01 \x03(\v2\x1c.CRemoteClient_ClientDetailsR\aclients\"\x9e\x01\n" +
	"\x12CRemoteClient_Task\x12D\n" +
	"\x04type\x18\x01 \x01(\x0e2\x14.ECLientTaskListType:\x1ak_EClientTask_DownloadClipR\x04type\x12\x17\n" +
	"\atask_id\x18\x02 \x01(\x06R\x06taskId\x12\x10\n" +
	"\x03url\x18\x03 \x01(\tR\x03url\x12\x17\n" +
	"\afile_id\x18\x04 \x01(\x03R\x06fileId\"x\n" +
	"#CRemoteClient_AddClientTask_Request\x12(\n" +
	"\x10remote_client_id\x18\x01 \x01(\x06R\x0eremoteClientId\x12'\n" +
	"\x04task\x18\x02 \x01(\v2\x13.CRemoteClient_TaskR\x04task\"&\n" +
	"$CRemoteClient_AddClientTask_Response\"\x80\x01\n" +
	"#CRemoteClient_TaskList_Notification\x12(\n" +
	"\x10remote_client_id\x18\x01 \x01(\x06R\x0eremoteClientId\x12/\n" +
	"\btasklist\x18\x02 \x03(\v2\x13.CRemoteClient_TaskR\btasklist\"\x8a\x01\n" +
	"&CRemoteClient_MarkTaskComplete_Request\x12(\n" +
	"\x10remote_client_id\x18\x01 \x01(\x06R\x0eremoteClientId\x12\x17\n" +
	"\atask_id\x18\x02 \x01(\x06R\x06taskId\x12\x1d\n" +
	"\n" +
	"content_id\x18\x03 \x01(\tR\tcontentId\")\n" +
	"'CRemoteClient_MarkTaskComplete_Response\"|\n" +
	"'CRemoteClient_RemotePacket_Notification\x12\x1d\n" +
	"\n" +
	"session_id\x18\x01 \x01(\x06R\tsessionId\x12\x18\n" +
	"\asteamid\x18\x02 \x01(\x06R\asteamid\x12\x18\n" +
	"\apayload\x18\x04 \x01(\fR\apayload\"a\n" +
	"&CRemoteClient_ReplyPacket_Notification\x12\x1d\n" +
	"\n" +
	"session_id\x18\x01 \x01(\x06R\tsessionId\x12\x18\n" +
	"\apayload\x18\x02 \x01(\fR\apayload\"A\n" +
	" CRemoteClient_GetReplies_Request\x12\x1d\n" +
	"\n" +
	"session_id\x18\x01 \x01(\x06R\tsessionId\"=\n" +
	"!CRemoteClient_GetReplies_Response\x12\x18\n" +
	"\apayload\x18\x01 \x03(\fR\apayload\"e\n" +
	")CRemoteClient_AllocateRelayServer_Request\x12\x16\n" +
	"\x06cellid\x18\x01 \x01(\rR\x06cellid\x12 \n" +
	"\vcredentials\x18\x02 \x01(\tR\vcredentials\"O\n" +
	"*CRemoteClient_AllocateRelayServer_Response\x12!\n" +
	"\frelay_server\x18\x01 \x01(\tR\vrelayServer\"9\n" +
	"!CRemoteClient_AllocateSDR_Request\x12\x14\n" +
	"\x05appid\x18\x01 \x01(\rR\x05appid\"$\n" +
	"\"CRemoteClient_AllocateSDR_Response\"{\n" +
	")CRemoteClient_SteamBroadcast_Notification\x12\x18\n" +
	"\asteamid\x18\x01 \x01(\x06R\asteamid\x12\x1a\n" +
	"\bclientid\x18\x02 \x01(\x06R\bclientid\x12\x18\n" +
	"\apayload\x18\x03 \x01(\fR\apayload\"\xd2\x01\n" +
	"'CRemoteClient_SteamToSteam_Notification\x12\x18\n" +
	"\asteamid\x18\x01 \x01(\x06R\asteamid\x12!\n" +
	"\fsrc_clientid\x18\x02 \x01(\x06R\vsrcClientid\x12!\n" +
	"\fdst_clientid\x18\x03 \x01(\x06R\vdstClientid\x12\x1a\n" +
	"\bsecretid\x18\x04 \x01(\rR\bsecretid\x12+\n" +
	"\x11encrypted_payload\x18\x05 \x01(\fR\x10encryptedPayload\"\x93\x02\n" +
	"\"CRemotePlay_SessionStarted_Request\x12&\n" +
	"\x0fhost_account_id\x18\x01 \x01(\rR\rhostAccountId\x12*\n" +
	"\x11client_account_id\x18\x02 \x01(\rR\x0fclientAccountId\x12\x14\n" +
	"\x05appid\x18\x03 \x01(\rR\x05appid\x12,\n" +
	"\x12device_form_factor\x18\x04 \x01(\x05R\x10deviceFormFactor\x120\n" +
	"\x14remote_play_together\x18\x05 \x01(\bR\x12remotePlayTogether\x12#\n" +
	"\rguest_session\x18\x06 \x01(\bR\fguestSession\"B\n" +
	"#CRemotePlay_SessionStarted_Response\x12\x1b\n" +
	"\trecord_id\x18\x01 \x01(\x06R\brecordId\"\x9d\x01\n" +
	"'CRemotePlay_SessionStopped_Notification\x12\x1b\n" +
	"\trecord_id\x18\x01 \x01(\x06R\brecordId\x12\x1b\n" +
	"\tused_x264\x18\x02 \x01(\bR\busedX264\x12\x1b\n" +
	"\tused_h264\x18\x03 \x01(\bR\busedH264\x12\x1b\n" +
	"\tused_hevc\x18\x04 \x01(\bR\busedHevc\"\xce\b\n" +
	" CRemotePlayTogether_Notification\x12\x18\n" +
	"\asteamid\x18\x01 \x01(\x06R\asteamid\x12U\n" +
	"\rgroup_updated\x18\x02 \x01(\v2..CRemotePlayTogether_Notification.GroupUpdatedH\x00R\fgroupUpdated\x1a\xdc\x01\n" +
	"\x06Player\x12\x18\n" +
	"\asteamid\x18\x01 \x01(\x06R\asteamid\x12\x18\n" +
	"\aguestid\x18\x02 \x01(\rR\aguestid\x12\x1f\n" +
	"\vavatar_hash\x18\x03 \x01(\fR\n" +
	"avatarHash\x12)\n" +
	"\x10keyboard_enabled\x18\x04 \x01(\bR\x0fkeyboardEnabled\x12#\n" +
	"\rmouse_enabled\x18\x05 \x01(\bR\fmouseEnabled\x12-\n" +
	"\x12controller_enabled\x18\x06 \x01(\bR\x11controllerEnabled\x1aK\n" +
	"\x17ControllerSlot_obsolete\x12\x16\n" +
	"\x06slotid\x18\x01 \x01(\rR\x06slotid\x12\x18\n" +
	"\asteamid\x18\x02 \x01(\x06R\asteamid\x1a\x93\x01\n" +
	"\x0eControllerSlot\x12\x16\n" +
	"\x06slotid\x18\x01 \x01(\rR\x06slotid\x12@\n" +
	"\x06player\x18\x02 \x01(\v2(.CRemotePlayTogether_Notification.PlayerR\x06player\x12'\n" +
	"\x0fcontroller_type\x18\x03 \x01(\x05R\x0econtrollerType\x1a\xeb\x03\n" +
	"\fGroupUpdated\x12!\n" +
	"\fhost_steamid\x18\x01 \x01(\x06R\vhostSteamid\x12#\n" +
	"\rhost_clientid\x18\x02 \x01(\x06R\fhostClientid\x12)\n" +
	"\x10players_obsolete\x18\x03 \x03(\x06R\x0fplayersObsolete\x12\x1f\n" +
	"\vhost_gameid\x18\x04 \x01(\x06R\n" +
	"hostGameid\x12u\n" +
	"\x19controller_slots_obsolete\x18\x05 \x03(\v29.CRemotePlayTogether_Notification.ControllerSlot_obsoleteR\x17controllerSlotsObsolete\x12&\n" +
	"\x0fhas_new_players\x18\x06 \x01(\bR\rhasNewPlayers\x12K\n" +
	"\fplayer_slots\x18\a \x03(\v2(.CRemotePlayTogether_Notification.PlayerR\vplayerSlots\x12[\n" +
	"\x10controller_slots\x18\b \x03(\v20.CRemotePlayTogether_Notification.ControllerSlotR\x0fcontrollerSlotsB\t\n" +
	"\aMessage\"}\n" +
	"8CRemoteClient_CreateRemotePlayTogetherInvitation_Request\x12\x14\n" +
	"\x05appid\x18\x01 \x01(\rR\x05appid\x12+\n" +
	"\x11launch_parameters\x18\x02 \x01(\tR\x10launchParameters\"d\n" +
	"9CRemoteClient_CreateRemotePlayTogetherInvitation_Response\x12'\n" +
	"\x0finvitation_code\x18\x01 \x01(\tR\x0einvitationCode\"c\n" +
	"8CRemoteClient_DeleteRemotePlayTogetherInvitation_Request\x12'\n" +
	"\x0finvitation_code\x18\x01 \x01(\tR\x0einvitationCode\";\n" +
	"9CRemoteClient_DeleteRemotePlayTogetherInvitation_Response\"c\n" +
	"8CRemoteClient_LookupRemotePlayTogetherInvitation_Request\x12'\n" +
	"\x0finvitation_code\x18\x01 \x01(\tR\x0einvitationCode\"b\n" +
	"9CRemoteClient_LookupRemotePlayTogetherInvitation_Response\x12%\n" +
	"\x0einvitation_url\x18\x01 \x01(\tR\rinvitationUrl\"\xce\x05\n" +
	"\x1dCCMRemoteClient_ClientMessage\x12\\\n" +
	"\x16create_session_request\x18\x01 \x01(\v2$.CRemoteClient_CreateSession_RequestH\x00R\x14createSessionRequest\x12Y\n" +
	"\x15start_pairing_request\x18\x02 \x01(\v2#.CRemoteClient_StartPairing_RequestH\x00R\x13startPairingRequest\x12`\n" +
	"\x18set_pairing_info_request\x18\x03 \x01(\v2%.CRemoteClient_SetPairingInfo_RequestH\x00R\x15setPairingInfoRequest\x12\\\n" +
	"\x16cancel_pairing_request\x18\x04 \x01(\v2$.CRemoteClient_CancelPairing_RequestH\x00R\x14cancelPairingRequest\x12h\n" +
	"\x16register_status_update\x18\x05 \x01(\v20.CRemoteClient_RegisterStatusUpdate_NotificationH\x00R\x14registerStatusUpdate\x12n\n" +
	"\x18unregister_status_update\x18\x06 \x01(\v22.CRemoteClient_UnregisterStatusUpdate_NotificationH\x00R\x16unregisterStatusUpdate\x12O\n" +
	"\rremote_packet\x18\a \x01(\v2(.CRemoteClient_RemotePacket_NotificationH\x00R\fremotePacketB\t\n" +
	"\aMessage\"\x90\x04\n" +
	"\x1dCCMRemoteClient_ServerMessage\x12\x16\n" +
	"\x06result\x18\x01 \x01(\x05R\x06result\x12_\n" +
	"\x17create_session_response\x18\x02 \x01(\v2%.CRemoteClient_CreateSession_ResponseH\x00R\x15createSessionResponse\x12\\\n" +
	"\x16start_pairing_response\x18\x03 \x01(\v2$.CRemoteClient_StartPairing_ResponseH\x00R\x14startPairingResponse\x12c\n" +
	"\x19set_pairing_info_response\x18\x04 \x01(\v2&.CRemoteClient_SetPairingInfo_ResponseH\x00R\x16setPairingInfoResponse\x12_\n" +
	"\x17cancel_pairing_response\x18\x05 \x01(\v2%.CRemoteClient_CancelPairing_ResponseH\x00R\x15cancelPairingResponse\x12G\n" +
	"\freply_packet\x18\x06 \x01(\v2\".CRemoteClient_GetReplies_ResponseH\x00R\vreplyPacketB\t\n" +
	"\aMessage*5\n" +
	"\x13ECLientTaskListType\x12\x1e\n" +
	"\x1ak_EClientTask_DownloadClip\x10\x01"

var (
	file_steammessages_remoteclient_service_messages_proto_rawDescOnce sync.Once
	file_steammessages_remoteclient_service_messages_proto_rawDescData []byte
)

func file_steammessages_remoteclient_service_messages_proto_rawDescGZIP() []byte {
	file_steammessages_remoteclient_service_messages_proto_rawDescOnce.Do(func() {
		file_steammessages_remoteclient_service_messages_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_steammessages_remoteclient_service_messages_proto_rawDesc), len(file_steammessages_remoteclient_service_messages_proto_rawDesc)))
	})
	return file_steammessages_remoteclient_service_messages_proto_rawDescData
}

var file_steammessages_remoteclient_service_messages_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_steammessages_remoteclient_service_messages_proto_msgTypes = make([]protoimpl.MessageInfo, 51)
var file_steammessages_remoteclient_service_messages_proto_goTypes = []any{
	(ECLientTaskListType)(0),                                          // 0: ECLientTaskListType
	(*CRemoteClient_CreateSession_Request)(nil),                       // 1: CRemoteClient_CreateSession_Request
	(*CRemoteClient_CreateSession_Response)(nil),                      // 2: CRemoteClient_CreateSession_Response
	(*CRemoteClient_DeleteSession_Notification)(nil),                  // 3: CRemoteClient_DeleteSession_Notification
	(*CRemoteClient_StartPairing_Request)(nil),                        // 4: CRemoteClient_StartPairing_Request
	(*CRemoteClient_StartPairing_Response)(nil),                       // 5: CRemoteClient_StartPairing_Response
	(*CRemoteClient_SetPairingInfo_Request)(nil),                      // 6: CRemoteClient_SetPairingInfo_Request
	(*CRemoteClient_SetPairingInfo_Response)(nil),                     // 7: CRemoteClient_SetPairingInfo_Response
	(*CRemoteClient_GetPairingInfo_Request)(nil),                      // 8: CRemoteClient_GetPairingInfo_Request
	(*CRemoteClient_GetPairingInfo_Response)(nil),                     // 9: CRemoteClient_GetPairingInfo_Response
	(*CRemoteClient_CancelPairing_Request)(nil),                       // 10: CRemoteClient_CancelPairing_Request
	(*CRemoteClient_CancelPairing_Response)(nil),                      // 11: CRemoteClient_CancelPairing_Response
	(*CRemoteClient_RegisterStatusUpdate_Notification)(nil),           // 12: CRemoteClient_RegisterStatusUpdate_Notification
	(*CRemoteClient_UnregisterStatusUpdate_Notification)(nil),         // 13: CRemoteClient_UnregisterStatusUpdate_Notification
	(*CRemoteClient_DeviceDetails)(nil),                               // 14: CRemoteClient_DeviceDetails
	(*CRemoteClient_Online_Notification)(nil),                         // 15: CRemoteClient_Online_Notification
	(*CRemoteClient_GetRecentClients_Request)(nil),                    // 16: CRemoteClient_GetRecentClients_Request
	(*CRemoteClient_ClientLogin)(nil),                                 // 17: CRemoteClient_ClientLogin
	(*CRemoteClient_ClientDetails)(nil),                               // 18: CRemoteClient_ClientDetails
	(*CRemoteClient_GetRecentClients_Response)(nil),                   // 19: CRemoteClient_GetRecentClients_Response
	(*CRemoteClient_Task)(nil),                                        // 20: CRemoteClient_Task
	(*CRemoteClient_AddClientTask_Request)(nil),                       // 21: CRemoteClient_AddClientTask_Request
	(*CRemoteClient_AddClientTask_Response)(nil),                      // 22: CRemoteClient_AddClientTask_Response
	(*CRemoteClient_TaskList_Notification)(nil),                       // 23: CRemoteClient_TaskList_Notification
	(*CRemoteClient_MarkTaskComplete_Request)(nil),                    // 24: CRemoteClient_MarkTaskComplete_Request
	(*CRemoteClient_MarkTaskComplete_Response)(nil),                   // 25: CRemoteClient_MarkTaskComplete_Response
	(*CRemoteClient_RemotePacket_Notification)(nil),                   // 26: CRemoteClient_RemotePacket_Notification
	(*CRemoteClient_ReplyPacket_Notification)(nil),                    // 27: CRemoteClient_ReplyPacket_Notification
	(*CRemoteClient_GetReplies_Request)(nil),                          // 28: CRemoteClient_GetReplies_Request
	(*CRemoteClient_GetReplies_Response)(nil),                         // 29: CRemoteClient_GetReplies_Response
	(*CRemoteClient_AllocateRelayServer_Request)(nil),                 // 30: CRemoteClient_AllocateRelayServer_Request
	(*CRemoteClient_AllocateRelayServer_Response)(nil),                // 31: CRemoteClient_AllocateRelayServer_Response
	(*CRemoteClient_AllocateSDR_Request)(nil),                         // 32: CRemoteClient_AllocateSDR_Request
	(*CRemoteClient_AllocateSDR_Response)(nil),                        // 33: CRemoteClient_AllocateSDR_Response
	(*CRemoteClient_SteamBroadcast_Notification)(nil),                 // 34: CRemoteClient_SteamBroadcast_Notification
	(*CRemoteClient_SteamToSteam_Notification)(nil),                   // 35: CRemoteClient_SteamToSteam_Notification
	(*CRemotePlay_SessionStarted_Request)(nil),                        // 36: CRemotePlay_SessionStarted_Request
	(*CRemotePlay_SessionStarted_Response)(nil),                       // 37: CRemotePlay_SessionStarted_Response
	(*CRemotePlay_SessionStopped_Notification)(nil),                   // 38: CRemotePlay_SessionStopped_Notification
	(*CRemotePlayTogether_Notification)(nil),                          // 39: CRemotePlayTogether_Notification
	(*CRemoteClient_CreateRemotePlayTogetherInvitation_Request)(nil),  // 40: CRemoteClient_CreateRemotePlayTogetherInvitation_Request
	(*CRemoteClient_CreateRemotePlayTogetherInvitation_Response)(nil), // 41: CRemoteClient_CreateRemotePlayTogetherInvitation_Response
	(*CRemoteClient_DeleteRemotePlayTogetherInvitation_Request)(nil),  // 42: CRemoteClient_DeleteRemotePlayTogetherInvitation_Request
	(*CRemoteClient_DeleteRemotePlayTogetherInvitation_Response)(nil), // 43: CRemoteClient_DeleteRemotePlayTogetherInvitation_Response
	(*CRemoteClient_LookupRemotePlayTogetherInvitation_Request)(nil),  // 44: CRemoteClient_LookupRemotePlayTogetherInvitation_Request
	(*CRemoteClient_LookupRemotePlayTogetherInvitation_Response)(nil), // 45: CRemoteClient_LookupRemotePlayTogetherInvitation_Response
	(*CCMRemoteClient_ClientMessage)(nil),                             // 46: CCMRemoteClient_ClientMessage
	(*CCMRemoteClient_ServerMessage)(nil),                             // 47: CCMRemoteClient_ServerMessage
	(*CRemotePlayTogether_Notification_Player)(nil),                   // 48: CRemotePlayTogether_Notification.Player
	(*CRemotePlayTogether_Notification_ControllerSlotObsolete)(nil),   // 49: CRemotePlayTogether_Notification.ControllerSlot_obsolete
	(*CRemotePlayTogether_Notification_ControllerSlot)(nil),           // 50: CRemotePlayTogether_Notification.ControllerSlot
	(*CRemotePlayTogether_Notification_GroupUpdated)(nil),             // 51: CRemotePlayTogether_Notification.GroupUpdated
}
var file_steammessages_remoteclient_service_messages_proto_depIdxs = []int32{
	14, // 0: CRemoteClient_Online_Notification.device_details:type_name -> CRemoteClient_DeviceDetails
	14, // 1: CRemoteClient_ClientLogin.device_details:type_name -> CRemoteClient_DeviceDetails
	14, // 2: CRemoteClient_ClientDetails.device_details:type_name -> CRemoteClient_DeviceDetails
	18, // 3: CRemoteClient_GetRecentClients_Response.clients:type_name -> CRemoteClient_ClientDetails
	0,  // 4: CRemoteClient_Task.type:type_name -> ECLientTaskListType
	20, // 5: CRemoteClient_AddClientTask_Request.task:type_name -> CRemoteClient_Task
	20, // 6: CRemoteClient_TaskList_Notification.tasklist:type_name -> CRemoteClient_Task
	51, // 7: CRemotePlayTogether_Notification.group_updated:type_name -> CRemotePlayTogether_Notification.GroupUpdated
	1,  // 8: CCMRemoteClient_ClientMessage.create_session_request:type_name -> CRemoteClient_CreateSession_Request
	4,  // 9: CCMRemoteClient_ClientMessage.start_pairing_request:type_name -> CRemoteClient_StartPairing_Request
	6,  // 10: CCMRemoteClient_ClientMessage.set_pairing_info_request:type_name -> CRemoteClient_SetPairingInfo_Request
	10, // 11: CCMRemoteClient_ClientMessage.cancel_pairing_request:type_name -> CRemoteClient_CancelPairing_Request
	12, // 12: CCMRemoteClient_ClientMessage.register_status_update:type_name -> CRemoteClient_RegisterStatusUpdate_Notification
	13, // 13: CCMRemoteClient_ClientMessage.unregister_status_update:type_name -> CRemoteClient_UnregisterStatusUpdate_Notification
	26, // 14: CCMRemoteClient_ClientMessage.remote_packet:type_name -> CRemoteClient_RemotePacket_Notification
	2,  // 15: CCMRemoteClient_ServerMessage.create_session_response:type_name -> CRemoteClient_CreateSession_Response
	5,  // 16: CCMRemoteClient_ServerMessage.start_pairing_response:type_name -> CRemoteClient_StartPairing_Response
	7,  // 17: CCMRemoteClient_ServerMessage.set_pairing_info_response:type_name -> CRemoteClient_SetPairingInfo_Response
	11, // 18: CCMRemoteClient_ServerMessage.cancel_pairing_response:type_name -> CRemoteClient_CancelPairing_Response
	29, // 19: CCMRemoteClient_ServerMessage.reply_packet:type_name -> CRemoteClient_GetReplies_Response
	48, // 20: CRemotePlayTogether_Notification.ControllerSlot.player:type_name -> CRemotePlayTogether_Notification.Player
	49, // 21: CRemotePlayTogether_Notification.GroupUpdated.controller_slots_obsolete:type_name -> CRemotePlayTogether_Notification.ControllerSlot_obsolete
	48, // 22: CRemotePlayTogether_Notification.GroupUpdated.player_slots:type_name -> CRemotePlayTogether_Notification.Player
	50, // 23: CRemotePlayTogether_Notification.GroupUpdated.controller_slots:type_name -> CRemotePlayTogether_Notification.ControllerSlot
	24, // [24:24] is the sub-list for method output_type
	24, // [24:24] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_steammessages_remoteclient_service_messages_proto_init() }
func file_steammessages_remoteclient_service_messages_proto_init() {
	if File_steammessages_remoteclient_service_messages_proto != nil {
		return
	}
	file_steammessages_remoteclient_service_messages_proto_msgTypes[38].OneofWrappers = []any{
		(*CRemotePlayTogether_Notification_GroupUpdated_)(nil),
	}
	file_steammessages_remoteclient_service_messages_proto_msgTypes[45].OneofWrappers = []any{
		(*CCMRemoteClient_ClientMessage_CreateSessionRequest)(nil),
		(*CCMRemoteClient_ClientMessage_StartPairingRequest)(nil),
		(*CCMRemoteClient_ClientMessage_SetPairingInfoRequest)(nil),
		(*CCMRemoteClient_ClientMessage_CancelPairingRequest)(nil),
		(*CCMRemoteClient_ClientMessage_RegisterStatusUpdate)(nil),
		(*CCMRemoteClient_ClientMessage_UnregisterStatusUpdate)(nil),
		(*CCMRemoteClient_ClientMessage_RemotePacket)(nil),
	}
	file_steammessages_remoteclient_service_messages_proto_msgTypes[46].OneofWrappers = []any{
		(*CCMRemoteClient_ServerMessage_CreateSessionResponse)(nil),
		(*CCMRemoteClient_ServerMessage_StartPairingResponse)(nil),
		(*CCMRemoteClient_ServerMessage_SetPairingInfoResponse)(nil),
		(*CCMRemoteClient_ServerMessage_CancelPairingResponse)(nil),
		(*CCMRemoteClient_ServerMessage_ReplyPacket)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_steammessages_remoteclient_service_messages_proto_rawDesc), len(file_steammessages_remoteclient_service_messages_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   51,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_steammessages_remoteclient_service_messages_proto_goTypes,
		DependencyIndexes: file_steammessages_remoteclient_service_messages_proto_depIdxs,
		EnumInfos:         file_steammessages_remoteclient_service_messages_proto_enumTypes,
		MessageInfos:      file_steammessages_remoteclient_service_messages_proto_msgTypes,
	}.Build()
	File_steammessages_remoteclient_service_messages_proto = out.File
	file_steammessages_remoteclient_service_messages_proto_goTypes = nil
	file_steammessages_remoteclient_service_messages_proto_depIdxs = nil
}
