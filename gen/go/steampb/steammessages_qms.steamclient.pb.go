// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v6.32.0
// source: steammessages_qms.steamclient.proto

package steampb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EGameSearchAction int32

const (
	EGameSearchAction_k_EGameSearchAction_None    EGameSearchAction = 0
	EGameSearchAction_k_EGameSearchAction_Accept  EGameSearchAction = 1
	EGameSearchAction_k_EGameSearchAction_Decline EGameSearchAction = 2
	EGameSearchAction_k_EGameSearchAction_Cancel  EGameSearchAction = 3
)

// Enum value maps for EGameSearchAction.
var (
	EGameSearchAction_name = map[int32]string{
		0: "k_EGameSearchAction_None",
		1: "k_EGameSearchAction_Accept",
		2: "k_EGameSearchAction_Decline",
		3: "k_EGameSearchAction_Cancel",
	}
	EGameSearchAction_value = map[string]int32{
		"k_EGameSearchAction_None":    0,
		"k_EGameSearchAction_Accept":  1,
		"k_EGameSearchAction_Decline": 2,
		"k_EGameSearchAction_Cancel":  3,
	}
)

func (x EGameSearchAction) Enum() *EGameSearchAction {
	p := new(EGameSearchAction)
	*p = x
	return p
}

func (x EGameSearchAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EGameSearchAction) Descriptor() protoreflect.EnumDescriptor {
	return file_steammessages_qms_steamclient_proto_enumTypes[0].Descriptor()
}

func (EGameSearchAction) Type() protoreflect.EnumType {
	return &file_steammessages_qms_steamclient_proto_enumTypes[0]
}

func (x EGameSearchAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EGameSearchAction) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EGameSearchAction(num)
	return nil
}

// Deprecated: Use EGameSearchAction.Descriptor instead.
func (EGameSearchAction) EnumDescriptor() ([]byte, []int) {
	return file_steammessages_qms_steamclient_proto_rawDescGZIP(), []int{0}
}

type EGameSearchResult int32

const (
	EGameSearchResult_k_EGameSearchResult_Invalid                EGameSearchResult = 0
	EGameSearchResult_k_EGameSearchResult_SearchInProgress       EGameSearchResult = 1
	EGameSearchResult_k_EGameSearchResult_SearchFailedNoHosts    EGameSearchResult = 2
	EGameSearchResult_k_EGameSearchResult_SearchGameFound        EGameSearchResult = 3
	EGameSearchResult_k_EGameSearchResult_SearchCompleteAccepted EGameSearchResult = 4
	EGameSearchResult_k_EGameSearchResult_SearchCompleteDeclined EGameSearchResult = 5
	EGameSearchResult_k_EGameSearchResult_SearchCanceled         EGameSearchResult = 6
)

// Enum value maps for EGameSearchResult.
var (
	EGameSearchResult_name = map[int32]string{
		0: "k_EGameSearchResult_Invalid",
		1: "k_EGameSearchResult_SearchInProgress",
		2: "k_EGameSearchResult_SearchFailedNoHosts",
		3: "k_EGameSearchResult_SearchGameFound",
		4: "k_EGameSearchResult_SearchCompleteAccepted",
		5: "k_EGameSearchResult_SearchCompleteDeclined",
		6: "k_EGameSearchResult_SearchCanceled",
	}
	EGameSearchResult_value = map[string]int32{
		"k_EGameSearchResult_Invalid":                0,
		"k_EGameSearchResult_SearchInProgress":       1,
		"k_EGameSearchResult_SearchFailedNoHosts":    2,
		"k_EGameSearchResult_SearchGameFound":        3,
		"k_EGameSearchResult_SearchCompleteAccepted": 4,
		"k_EGameSearchResult_SearchCompleteDeclined": 5,
		"k_EGameSearchResult_SearchCanceled":         6,
	}
)

func (x EGameSearchResult) Enum() *EGameSearchResult {
	p := new(EGameSearchResult)
	*p = x
	return p
}

func (x EGameSearchResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EGameSearchResult) Descriptor() protoreflect.EnumDescriptor {
	return file_steammessages_qms_steamclient_proto_enumTypes[1].Descriptor()
}

func (EGameSearchResult) Type() protoreflect.EnumType {
	return &file_steammessages_qms_steamclient_proto_enumTypes[1]
}

func (x EGameSearchResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EGameSearchResult) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EGameSearchResult(num)
	return nil
}

// Deprecated: Use EGameSearchResult.Descriptor instead.
func (EGameSearchResult) EnumDescriptor() ([]byte, []int) {
	return file_steammessages_qms_steamclient_proto_rawDescGZIP(), []int{1}
}

type GameSearchParam struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	KeyName       *string                `protobuf:"bytes,1,opt,name=key_name,json=keyName" json:"key_name,omitempty"`
	Value         []string               `protobuf:"bytes,2,rep,name=value" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GameSearchParam) Reset() {
	*x = GameSearchParam{}
	mi := &file_steammessages_qms_steamclient_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GameSearchParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameSearchParam) ProtoMessage() {}

func (x *GameSearchParam) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_qms_steamclient_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameSearchParam.ProtoReflect.Descriptor instead.
func (*GameSearchParam) Descriptor() ([]byte, []int) {
	return file_steammessages_qms_steamclient_proto_rawDescGZIP(), []int{0}
}

func (x *GameSearchParam) GetKeyName() string {
	if x != nil && x.KeyName != nil {
		return *x.KeyName
	}
	return ""
}

func (x *GameSearchParam) GetValue() []string {
	if x != nil {
		return x.Value
	}
	return nil
}

type CQueuedMatchmaking_SearchForGame_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Appid         *uint32                `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	Action        *EGameSearchAction     `protobuf:"varint,2,opt,name=action,enum=EGameSearchAction,def=0" json:"action,omitempty"`
	Params        []*GameSearchParam     `protobuf:"bytes,3,rep,name=params" json:"params,omitempty"`
	PlayerMin     *uint32                `protobuf:"varint,4,opt,name=player_min,json=playerMin" json:"player_min,omitempty"`
	PlayerMax     *uint32                `protobuf:"varint,5,opt,name=player_max,json=playerMax" json:"player_max,omitempty"`
	Steamidlobby  *uint64                `protobuf:"fixed64,6,opt,name=steamidlobby" json:"steamidlobby,omitempty"`
	Searchid      *uint64                `protobuf:"varint,7,opt,name=searchid" json:"searchid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CQueuedMatchmaking_SearchForGame_Request fields.
const (
	Default_CQueuedMatchmaking_SearchForGame_Request_Action = EGameSearchAction_k_EGameSearchAction_None
)

func (x *CQueuedMatchmaking_SearchForGame_Request) Reset() {
	*x = CQueuedMatchmaking_SearchForGame_Request{}
	mi := &file_steammessages_qms_steamclient_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CQueuedMatchmaking_SearchForGame_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CQueuedMatchmaking_SearchForGame_Request) ProtoMessage() {}

func (x *CQueuedMatchmaking_SearchForGame_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_qms_steamclient_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CQueuedMatchmaking_SearchForGame_Request.ProtoReflect.Descriptor instead.
func (*CQueuedMatchmaking_SearchForGame_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_qms_steamclient_proto_rawDescGZIP(), []int{1}
}

func (x *CQueuedMatchmaking_SearchForGame_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CQueuedMatchmaking_SearchForGame_Request) GetAction() EGameSearchAction {
	if x != nil && x.Action != nil {
		return *x.Action
	}
	return Default_CQueuedMatchmaking_SearchForGame_Request_Action
}

func (x *CQueuedMatchmaking_SearchForGame_Request) GetParams() []*GameSearchParam {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *CQueuedMatchmaking_SearchForGame_Request) GetPlayerMin() uint32 {
	if x != nil && x.PlayerMin != nil {
		return *x.PlayerMin
	}
	return 0
}

func (x *CQueuedMatchmaking_SearchForGame_Request) GetPlayerMax() uint32 {
	if x != nil && x.PlayerMax != nil {
		return *x.PlayerMax
	}
	return 0
}

func (x *CQueuedMatchmaking_SearchForGame_Request) GetSteamidlobby() uint64 {
	if x != nil && x.Steamidlobby != nil {
		return *x.Steamidlobby
	}
	return 0
}

func (x *CQueuedMatchmaking_SearchForGame_Request) GetSearchid() uint64 {
	if x != nil && x.Searchid != nil {
		return *x.Searchid
	}
	return 0
}

type CQueuedMatchmaking_SearchForGame_Response struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	Gamesearchresult      *EGameSearchResult     `protobuf:"varint,1,opt,name=gamesearchresult,enum=EGameSearchResult,def=0" json:"gamesearchresult,omitempty"`
	Searchid              *uint64                `protobuf:"varint,2,opt,name=searchid" json:"searchid,omitempty"`
	SecondsTimeEstimate   *uint32                `protobuf:"varint,3,opt,name=seconds_time_estimate,json=secondsTimeEstimate" json:"seconds_time_estimate,omitempty"`
	PollFrequency         *uint32                `protobuf:"varint,4,opt,name=poll_frequency,json=pollFrequency" json:"poll_frequency,omitempty"`
	CountSearching        *uint32                `protobuf:"varint,5,opt,name=count_searching,json=countSearching" json:"count_searching,omitempty"`
	PlayersInMatch        *uint32                `protobuf:"varint,6,opt,name=players_in_match,json=playersInMatch" json:"players_in_match,omitempty"`
	PlayersAccepted       *uint32                `protobuf:"varint,7,opt,name=players_accepted,json=playersAccepted" json:"players_accepted,omitempty"`
	ConnectString         *string                `protobuf:"bytes,9,opt,name=connect_string,json=connectString" json:"connect_string,omitempty"`
	Steamidhost           *uint64                `protobuf:"fixed64,10,opt,name=steamidhost" json:"steamidhost,omitempty"`
	RtimeMatchMade        *uint32                `protobuf:"varint,11,opt,name=rtime_match_made,json=rtimeMatchMade" json:"rtime_match_made,omitempty"`
	RtimeNow              *uint32                `protobuf:"varint,12,opt,name=rtime_now,json=rtimeNow" json:"rtime_now,omitempty"`
	SteamidCanceledSearch *uint64                `protobuf:"fixed64,13,opt,name=steamid_canceled_search,json=steamidCanceledSearch" json:"steamid_canceled_search,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

// Default values for CQueuedMatchmaking_SearchForGame_Response fields.
const (
	Default_CQueuedMatchmaking_SearchForGame_Response_Gamesearchresult = EGameSearchResult_k_EGameSearchResult_Invalid
)

func (x *CQueuedMatchmaking_SearchForGame_Response) Reset() {
	*x = CQueuedMatchmaking_SearchForGame_Response{}
	mi := &file_steammessages_qms_steamclient_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CQueuedMatchmaking_SearchForGame_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CQueuedMatchmaking_SearchForGame_Response) ProtoMessage() {}

func (x *CQueuedMatchmaking_SearchForGame_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_qms_steamclient_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CQueuedMatchmaking_SearchForGame_Response.ProtoReflect.Descriptor instead.
func (*CQueuedMatchmaking_SearchForGame_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_qms_steamclient_proto_rawDescGZIP(), []int{2}
}

func (x *CQueuedMatchmaking_SearchForGame_Response) GetGamesearchresult() EGameSearchResult {
	if x != nil && x.Gamesearchresult != nil {
		return *x.Gamesearchresult
	}
	return Default_CQueuedMatchmaking_SearchForGame_Response_Gamesearchresult
}

func (x *CQueuedMatchmaking_SearchForGame_Response) GetSearchid() uint64 {
	if x != nil && x.Searchid != nil {
		return *x.Searchid
	}
	return 0
}

func (x *CQueuedMatchmaking_SearchForGame_Response) GetSecondsTimeEstimate() uint32 {
	if x != nil && x.SecondsTimeEstimate != nil {
		return *x.SecondsTimeEstimate
	}
	return 0
}

func (x *CQueuedMatchmaking_SearchForGame_Response) GetPollFrequency() uint32 {
	if x != nil && x.PollFrequency != nil {
		return *x.PollFrequency
	}
	return 0
}

func (x *CQueuedMatchmaking_SearchForGame_Response) GetCountSearching() uint32 {
	if x != nil && x.CountSearching != nil {
		return *x.CountSearching
	}
	return 0
}

func (x *CQueuedMatchmaking_SearchForGame_Response) GetPlayersInMatch() uint32 {
	if x != nil && x.PlayersInMatch != nil {
		return *x.PlayersInMatch
	}
	return 0
}

func (x *CQueuedMatchmaking_SearchForGame_Response) GetPlayersAccepted() uint32 {
	if x != nil && x.PlayersAccepted != nil {
		return *x.PlayersAccepted
	}
	return 0
}

func (x *CQueuedMatchmaking_SearchForGame_Response) GetConnectString() string {
	if x != nil && x.ConnectString != nil {
		return *x.ConnectString
	}
	return ""
}

func (x *CQueuedMatchmaking_SearchForGame_Response) GetSteamidhost() uint64 {
	if x != nil && x.Steamidhost != nil {
		return *x.Steamidhost
	}
	return 0
}

func (x *CQueuedMatchmaking_SearchForGame_Response) GetRtimeMatchMade() uint32 {
	if x != nil && x.RtimeMatchMade != nil {
		return *x.RtimeMatchMade
	}
	return 0
}

func (x *CQueuedMatchmaking_SearchForGame_Response) GetRtimeNow() uint32 {
	if x != nil && x.RtimeNow != nil {
		return *x.RtimeNow
	}
	return 0
}

func (x *CQueuedMatchmaking_SearchForGame_Response) GetSteamidCanceledSearch() uint64 {
	if x != nil && x.SteamidCanceledSearch != nil {
		return *x.SteamidCanceledSearch
	}
	return 0
}

type CQueuedMatchmakingGameHost_SearchForPlayers_Request struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Appid             *uint32                `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	Action            *EGameSearchAction     `protobuf:"varint,2,opt,name=action,enum=EGameSearchAction,def=0" json:"action,omitempty"`
	Params            []*GameSearchParam     `protobuf:"bytes,3,rep,name=params" json:"params,omitempty"`
	PlayerMin         *uint32                `protobuf:"varint,4,opt,name=player_min,json=playerMin" json:"player_min,omitempty"`
	PlayerMax         *uint32                `protobuf:"varint,5,opt,name=player_max,json=playerMax" json:"player_max,omitempty"`
	PlayerMaxTeamSize *uint32                `protobuf:"varint,6,opt,name=player_max_team_size,json=playerMaxTeamSize" json:"player_max_team_size,omitempty"`
	ConnectionString  *string                `protobuf:"bytes,7,opt,name=connection_string,json=connectionString" json:"connection_string,omitempty"`
	Searchid          *uint64                `protobuf:"varint,8,opt,name=searchid" json:"searchid,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

// Default values for CQueuedMatchmakingGameHost_SearchForPlayers_Request fields.
const (
	Default_CQueuedMatchmakingGameHost_SearchForPlayers_Request_Action = EGameSearchAction_k_EGameSearchAction_None
)

func (x *CQueuedMatchmakingGameHost_SearchForPlayers_Request) Reset() {
	*x = CQueuedMatchmakingGameHost_SearchForPlayers_Request{}
	mi := &file_steammessages_qms_steamclient_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CQueuedMatchmakingGameHost_SearchForPlayers_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CQueuedMatchmakingGameHost_SearchForPlayers_Request) ProtoMessage() {}

func (x *CQueuedMatchmakingGameHost_SearchForPlayers_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_qms_steamclient_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CQueuedMatchmakingGameHost_SearchForPlayers_Request.ProtoReflect.Descriptor instead.
func (*CQueuedMatchmakingGameHost_SearchForPlayers_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_qms_steamclient_proto_rawDescGZIP(), []int{3}
}

func (x *CQueuedMatchmakingGameHost_SearchForPlayers_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CQueuedMatchmakingGameHost_SearchForPlayers_Request) GetAction() EGameSearchAction {
	if x != nil && x.Action != nil {
		return *x.Action
	}
	return Default_CQueuedMatchmakingGameHost_SearchForPlayers_Request_Action
}

func (x *CQueuedMatchmakingGameHost_SearchForPlayers_Request) GetParams() []*GameSearchParam {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *CQueuedMatchmakingGameHost_SearchForPlayers_Request) GetPlayerMin() uint32 {
	if x != nil && x.PlayerMin != nil {
		return *x.PlayerMin
	}
	return 0
}

func (x *CQueuedMatchmakingGameHost_SearchForPlayers_Request) GetPlayerMax() uint32 {
	if x != nil && x.PlayerMax != nil {
		return *x.PlayerMax
	}
	return 0
}

func (x *CQueuedMatchmakingGameHost_SearchForPlayers_Request) GetPlayerMaxTeamSize() uint32 {
	if x != nil && x.PlayerMaxTeamSize != nil {
		return *x.PlayerMaxTeamSize
	}
	return 0
}

func (x *CQueuedMatchmakingGameHost_SearchForPlayers_Request) GetConnectionString() string {
	if x != nil && x.ConnectionString != nil {
		return *x.ConnectionString
	}
	return ""
}

func (x *CQueuedMatchmakingGameHost_SearchForPlayers_Request) GetSearchid() uint64 {
	if x != nil && x.Searchid != nil {
		return *x.Searchid
	}
	return 0
}

type PlayerFound struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Steamid       *uint64                `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	Action        *EGameSearchAction     `protobuf:"varint,2,opt,name=action,enum=EGameSearchAction,def=0" json:"action,omitempty"`
	Params        []*GameSearchParam     `protobuf:"bytes,3,rep,name=params" json:"params,omitempty"`
	TeamNumber    *uint32                `protobuf:"varint,4,opt,name=team_number,json=teamNumber" json:"team_number,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for PlayerFound fields.
const (
	Default_PlayerFound_Action = EGameSearchAction_k_EGameSearchAction_None
)

func (x *PlayerFound) Reset() {
	*x = PlayerFound{}
	mi := &file_steammessages_qms_steamclient_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlayerFound) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerFound) ProtoMessage() {}

func (x *PlayerFound) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_qms_steamclient_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerFound.ProtoReflect.Descriptor instead.
func (*PlayerFound) Descriptor() ([]byte, []int) {
	return file_steammessages_qms_steamclient_proto_rawDescGZIP(), []int{4}
}

func (x *PlayerFound) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *PlayerFound) GetAction() EGameSearchAction {
	if x != nil && x.Action != nil {
		return *x.Action
	}
	return Default_PlayerFound_Action
}

func (x *PlayerFound) GetParams() []*GameSearchParam {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *PlayerFound) GetTeamNumber() uint32 {
	if x != nil && x.TeamNumber != nil {
		return *x.TeamNumber
	}
	return 0
}

type CQueuedMatchmakingGameHost_SearchForPlayers_Response struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Gamesearchresult *EGameSearchResult     `protobuf:"varint,1,opt,name=gamesearchresult,enum=EGameSearchResult,def=0" json:"gamesearchresult,omitempty"`
	Searchid         *uint64                `protobuf:"varint,2,opt,name=searchid" json:"searchid,omitempty"`
	PollFrequency    *uint32                `protobuf:"varint,3,opt,name=poll_frequency,json=pollFrequency" json:"poll_frequency,omitempty"`
	Matchid          *uint64                `protobuf:"varint,4,opt,name=matchid" json:"matchid,omitempty"`
	Players          []*PlayerFound         `protobuf:"bytes,5,rep,name=players" json:"players,omitempty"`
	RtimeMatchMade   *uint32                `protobuf:"varint,6,opt,name=rtime_match_made,json=rtimeMatchMade" json:"rtime_match_made,omitempty"`
	RtimeNow         *uint32                `protobuf:"varint,7,opt,name=rtime_now,json=rtimeNow" json:"rtime_now,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

// Default values for CQueuedMatchmakingGameHost_SearchForPlayers_Response fields.
const (
	Default_CQueuedMatchmakingGameHost_SearchForPlayers_Response_Gamesearchresult = EGameSearchResult_k_EGameSearchResult_Invalid
)

func (x *CQueuedMatchmakingGameHost_SearchForPlayers_Response) Reset() {
	*x = CQueuedMatchmakingGameHost_SearchForPlayers_Response{}
	mi := &file_steammessages_qms_steamclient_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CQueuedMatchmakingGameHost_SearchForPlayers_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CQueuedMatchmakingGameHost_SearchForPlayers_Response) ProtoMessage() {}

func (x *CQueuedMatchmakingGameHost_SearchForPlayers_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_qms_steamclient_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CQueuedMatchmakingGameHost_SearchForPlayers_Response.ProtoReflect.Descriptor instead.
func (*CQueuedMatchmakingGameHost_SearchForPlayers_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_qms_steamclient_proto_rawDescGZIP(), []int{5}
}

func (x *CQueuedMatchmakingGameHost_SearchForPlayers_Response) GetGamesearchresult() EGameSearchResult {
	if x != nil && x.Gamesearchresult != nil {
		return *x.Gamesearchresult
	}
	return Default_CQueuedMatchmakingGameHost_SearchForPlayers_Response_Gamesearchresult
}

func (x *CQueuedMatchmakingGameHost_SearchForPlayers_Response) GetSearchid() uint64 {
	if x != nil && x.Searchid != nil {
		return *x.Searchid
	}
	return 0
}

func (x *CQueuedMatchmakingGameHost_SearchForPlayers_Response) GetPollFrequency() uint32 {
	if x != nil && x.PollFrequency != nil {
		return *x.PollFrequency
	}
	return 0
}

func (x *CQueuedMatchmakingGameHost_SearchForPlayers_Response) GetMatchid() uint64 {
	if x != nil && x.Matchid != nil {
		return *x.Matchid
	}
	return 0
}

func (x *CQueuedMatchmakingGameHost_SearchForPlayers_Response) GetPlayers() []*PlayerFound {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *CQueuedMatchmakingGameHost_SearchForPlayers_Response) GetRtimeMatchMade() uint32 {
	if x != nil && x.RtimeMatchMade != nil {
		return *x.RtimeMatchMade
	}
	return 0
}

func (x *CQueuedMatchmakingGameHost_SearchForPlayers_Response) GetRtimeNow() uint32 {
	if x != nil && x.RtimeNow != nil {
		return *x.RtimeNow
	}
	return 0
}

type PlayerResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Steamid       *uint64                `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	Value         *uint32                `protobuf:"varint,2,opt,name=value" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PlayerResult) Reset() {
	*x = PlayerResult{}
	mi := &file_steammessages_qms_steamclient_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlayerResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerResult) ProtoMessage() {}

func (x *PlayerResult) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_qms_steamclient_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerResult.ProtoReflect.Descriptor instead.
func (*PlayerResult) Descriptor() ([]byte, []int) {
	return file_steammessages_qms_steamclient_proto_rawDescGZIP(), []int{6}
}

func (x *PlayerResult) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *PlayerResult) GetValue() uint32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

type CQueuedMatchmakingGameHost_SubmitPlayerResult_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Appid         *uint32                `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	Matchid       *uint64                `protobuf:"varint,2,opt,name=matchid" json:"matchid,omitempty"`
	PlayerResults []*PlayerResult        `protobuf:"bytes,3,rep,name=player_results,json=playerResults" json:"player_results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CQueuedMatchmakingGameHost_SubmitPlayerResult_Request) Reset() {
	*x = CQueuedMatchmakingGameHost_SubmitPlayerResult_Request{}
	mi := &file_steammessages_qms_steamclient_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CQueuedMatchmakingGameHost_SubmitPlayerResult_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CQueuedMatchmakingGameHost_SubmitPlayerResult_Request) ProtoMessage() {}

func (x *CQueuedMatchmakingGameHost_SubmitPlayerResult_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_qms_steamclient_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CQueuedMatchmakingGameHost_SubmitPlayerResult_Request.ProtoReflect.Descriptor instead.
func (*CQueuedMatchmakingGameHost_SubmitPlayerResult_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_qms_steamclient_proto_rawDescGZIP(), []int{7}
}

func (x *CQueuedMatchmakingGameHost_SubmitPlayerResult_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CQueuedMatchmakingGameHost_SubmitPlayerResult_Request) GetMatchid() uint64 {
	if x != nil && x.Matchid != nil {
		return *x.Matchid
	}
	return 0
}

func (x *CQueuedMatchmakingGameHost_SubmitPlayerResult_Request) GetPlayerResults() []*PlayerResult {
	if x != nil {
		return x.PlayerResults
	}
	return nil
}

type CQueuedMatchmakingGameHost_SubmitPlayerResult_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CQueuedMatchmakingGameHost_SubmitPlayerResult_Response) Reset() {
	*x = CQueuedMatchmakingGameHost_SubmitPlayerResult_Response{}
	mi := &file_steammessages_qms_steamclient_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CQueuedMatchmakingGameHost_SubmitPlayerResult_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CQueuedMatchmakingGameHost_SubmitPlayerResult_Response) ProtoMessage() {}

func (x *CQueuedMatchmakingGameHost_SubmitPlayerResult_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_qms_steamclient_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CQueuedMatchmakingGameHost_SubmitPlayerResult_Response.ProtoReflect.Descriptor instead.
func (*CQueuedMatchmakingGameHost_SubmitPlayerResult_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_qms_steamclient_proto_rawDescGZIP(), []int{8}
}

type CQueuedMatchmakingGameHost_EndGame_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Appid         *uint32                `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	Matchid       *uint64                `protobuf:"varint,2,opt,name=matchid" json:"matchid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CQueuedMatchmakingGameHost_EndGame_Request) Reset() {
	*x = CQueuedMatchmakingGameHost_EndGame_Request{}
	mi := &file_steammessages_qms_steamclient_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CQueuedMatchmakingGameHost_EndGame_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CQueuedMatchmakingGameHost_EndGame_Request) ProtoMessage() {}

func (x *CQueuedMatchmakingGameHost_EndGame_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_qms_steamclient_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CQueuedMatchmakingGameHost_EndGame_Request.ProtoReflect.Descriptor instead.
func (*CQueuedMatchmakingGameHost_EndGame_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_qms_steamclient_proto_rawDescGZIP(), []int{9}
}

func (x *CQueuedMatchmakingGameHost_EndGame_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CQueuedMatchmakingGameHost_EndGame_Request) GetMatchid() uint64 {
	if x != nil && x.Matchid != nil {
		return *x.Matchid
	}
	return 0
}

type CQueuedMatchmakingGameHost_EndGame_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CQueuedMatchmakingGameHost_EndGame_Response) Reset() {
	*x = CQueuedMatchmakingGameHost_EndGame_Response{}
	mi := &file_steammessages_qms_steamclient_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CQueuedMatchmakingGameHost_EndGame_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CQueuedMatchmakingGameHost_EndGame_Response) ProtoMessage() {}

func (x *CQueuedMatchmakingGameHost_EndGame_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_qms_steamclient_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CQueuedMatchmakingGameHost_EndGame_Response.ProtoReflect.Descriptor instead.
func (*CQueuedMatchmakingGameHost_EndGame_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_qms_steamclient_proto_rawDescGZIP(), []int{10}
}

var File_steammessages_qms_steamclient_proto protoreflect.FileDescriptor

const file_steammessages_qms_steamclient_proto_rawDesc = "" +
	"\n" +
	"#steammessages_qms.steamclient.proto\x1a\x18steammessages_base.proto\x1a,steammessages_unified_base.steamclient.proto\"B\n" +
	"\x0fGameSearchParam\x12\x19\n" +
	"\bkey_name\x18\x01 \x01(\tR\akeyName\x12\x14\n" +
	"\x05value\x18\x02 \x03(\tR\x05value\"\xae\x02\n" +
	"(CQueuedMatchmaking_SearchForGame_Request\x12\x14\n" +
	"\x05appid\x18\x01 \x01(\rR\x05appid\x12D\n" +
	"\x06action\x18\x02 \x01(\x0e2\x12.EGameSearchAction:\x18k_EGameSearchAction_NoneR\x06action\x12(\n" +
	"\x06params\x18\x03 \x03(\v2\x10.GameSearchParamR\x06params\x12\x1d\n" +
	"\n" +
	"player_min\x18\x04 \x01(\rR\tplayerMin\x12\x1d\n" +
	"\n" +
	"player_max\x18\x05 \x01(\rR\tplayerMax\x12\"\n" +
	"\fsteamidlobby\x18\x06 \x01(\x06R\fsteamidlobby\x12\x1a\n" +
	"\bsearchid\x18\a \x01(\x04R\bsearchid\"\xc5\x04\n" +
	")CQueuedMatchmaking_SearchForGame_Response\x12[\n" +
	"\x10gamesearchresult\x18\x01 \x01(\x0e2\x12.EGameSearchResult:\x1bk_EGameSearchResult_InvalidR\x10gamesearchresult\x12\x1a\n" +
	"\bsearchid\x18\x02 \x01(\x04R\bsearchid\x122\n" +
	"\x15seconds_time_estimate\x18\x03 \x01(\rR\x13secondsTimeEstimate\x12%\n" +
	"\x0epoll_frequency\x18\x04 \x01(\rR\rpollFrequency\x12'\n" +
	"\x0fcount_searching\x18\x05 \x01(\rR\x0ecountSearching\x12(\n" +
	"\x10players_in_match\x18\x06 \x01(\rR\x0eplayersInMatch\x12)\n" +
	"\x10players_accepted\x18\a \x01(\rR\x0fplayersAccepted\x12%\n" +
	"\x0econnect_string\x18\t \x01(\tR\rconnectString\x12 \n" +
	"\vsteamidhost\x18\n" +
	" \x01(\x06R\vsteamidhost\x12(\n" +
	"\x10rtime_match_made\x18\v \x01(\rR\x0ertimeMatchMade\x12\x1b\n" +
	"\trtime_now\x18\f \x01(\rR\brtimeNow\x126\n" +
	"\x17steamid_canceled_search\x18\r \x01(\x06R\x15steamidCanceledSearch\"\xf3\x02\n" +
	"3CQueuedMatchmakingGameHost_SearchForPlayers_Request\x12\x14\n" +
	"\x05appid\x18\x01 \x01(\rR\x05appid\x12D\n" +
	"\x06action\x18\x02 \x01(\x0e2\x12.EGameSearchAction:\x18k_EGameSearchAction_NoneR\x06action\x12(\n" +
	"\x06params\x18\x03 \x03(\v2\x10.GameSearchParamR\x06params\x12\x1d\n" +
	"\n" +
	"player_min\x18\x04 \x01(\rR\tplayerMin\x12\x1d\n" +
	"\n" +
	"player_max\x18\x05 \x01(\rR\tplayerMax\x12/\n" +
	"\x14player_max_team_size\x18\x06 \x01(\rR\x11playerMaxTeamSize\x12+\n" +
	"\x11connection_string\x18\a \x01(\tR\x10connectionString\x12\x1a\n" +
	"\bsearchid\x18\b \x01(\x04R\bsearchid\"\xb8\x01\n" +
	"\vPlayerFound\x12\x18\n" +
	"\asteamid\x18\x01 \x01(\x06R\asteamid\x12D\n" +
	"\x06action\x18\x02 \x01(\x0e2\x12.EGameSearchAction:\x18k_EGameSearchAction_NoneR\x06action\x12(\n" +
	"\x06params\x18\x03 \x03(\v2\x10.GameSearchParamR\x06params\x12\x1f\n" +
	"\vteam_number\x18\x04 \x01(\rR\n" +
	"teamNumber\"\xdf\x02\n" +
	"4CQueuedMatchmakingGameHost_SearchForPlayers_Response\x12[\n" +
	"\x10gamesearchresult\x18\x01 \x01(\x0e2\x12.EGameSearchResult:\x1bk_EGameSearchResult_InvalidR\x10gamesearchresult\x12\x1a\n" +
	"\bsearchid\x18\x02 \x01(\x04R\bsearchid\x12%\n" +
	"\x0epoll_frequency\x18\x03 \x01(\rR\rpollFrequency\x12\x18\n" +
	"\amatchid\x18\x04 \x01(\x04R\amatchid\x12&\n" +
	"\aplayers\x18\x05 \x03(\v2\f.PlayerFoundR\aplayers\x12(\n" +
	"\x10rtime_match_made\x18\x06 \x01(\rR\x0ertimeMatchMade\x12\x1b\n" +
	"\trtime_now\x18\a \x01(\rR\brtimeNow\">\n" +
	"\fPlayerResult\x12\x18\n" +
	"\asteamid\x18\x01 \x01(\x06R\asteamid\x12\x14\n" +
	"\x05value\x18\x02 \x01(\rR\x05value\"\x9d\x01\n" +
	"5CQueuedMatchmakingGameHost_SubmitPlayerResult_Request\x12\x14\n" +
	"\x05appid\x18\x01 \x01(\rR\x05appid\x12\x18\n" +
	"\amatchid\x18\x02 \x01(\x04R\amatchid\x124\n" +
	"\x0eplayer_results\x18\x03 \x03(\v2\r.PlayerResultR\rplayerResults\"8\n" +
	"6CQueuedMatchmakingGameHost_SubmitPlayerResult_Response\"\\\n" +
	"*CQueuedMatchmakingGameHost_EndGame_Request\x12\x14\n" +
	"\x05appid\x18\x01 \x01(\rR\x05appid\x12\x18\n" +
	"\amatchid\x18\x02 \x01(\x04R\amatchid\"-\n" +
	"+CQueuedMatchmakingGameHost_EndGame_Response*\x92\x01\n" +
	"\x11EGameSearchAction\x12\x1c\n" +
	"\x18k_EGameSearchAction_None\x10\x00\x12\x1e\n" +
	"\x1ak_EGameSearchAction_Accept\x10\x01\x12\x1f\n" +
	"\x1bk_EGameSearchAction_Decline\x10\x02\x12\x1e\n" +
	"\x1ak_EGameSearchAction_Cancel\x10\x03*\xbc\x02\n" +
	"\x11EGameSearchResult\x12\x1f\n" +
	"\x1bk_EGameSearchResult_Invalid\x10\x00\x12(\n" +
	"$k_EGameSearchResult_SearchInProgress\x10\x01\x12+\n" +
	"'k_EGameSearchResult_SearchFailedNoHosts\x10\x02\x12'\n" +
	"#k_EGameSearchResult_SearchGameFound\x10\x03\x12.\n" +
	"*k_EGameSearchResult_SearchCompleteAccepted\x10\x04\x12.\n" +
	"*k_EGameSearchResult_SearchCompleteDeclined\x10\x05\x12&\n" +
	"\"k_EGameSearchResult_SearchCanceled\x10\x062{\n" +
	"\x11QueuedMatchmaking\x12f\n" +
	"\rSearchForGame\x12).CQueuedMatchmaking_SearchForGame_Request\x1a*.CQueuedMatchmaking_SearchForGame_Response2\x8a\x03\n" +
	"\x19QueuedMatchmakingGameHost\x12\x7f\n" +
	"\x10SearchForPlayers\x124.CQueuedMatchmakingGameHost_SearchForPlayers_Request\x1a5.CQueuedMatchmakingGameHost_SearchForPlayers_Response\x12\x85\x01\n" +
	"\x12SubmitPlayerResult\x126.CQueuedMatchmakingGameHost_SubmitPlayerResult_Request\x1a7.CQueuedMatchmakingGameHost_SubmitPlayerResult_Response\x12d\n" +
	"\aEndGame\x12+.CQueuedMatchmakingGameHost_EndGame_Request\x1a,.CQueuedMatchmakingGameHost_EndGame_ResponseB\x03\x80\x01\x01"

var (
	file_steammessages_qms_steamclient_proto_rawDescOnce sync.Once
	file_steammessages_qms_steamclient_proto_rawDescData []byte
)

func file_steammessages_qms_steamclient_proto_rawDescGZIP() []byte {
	file_steammessages_qms_steamclient_proto_rawDescOnce.Do(func() {
		file_steammessages_qms_steamclient_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_steammessages_qms_steamclient_proto_rawDesc), len(file_steammessages_qms_steamclient_proto_rawDesc)))
	})
	return file_steammessages_qms_steamclient_proto_rawDescData
}

var file_steammessages_qms_steamclient_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_steammessages_qms_steamclient_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_steammessages_qms_steamclient_proto_goTypes = []any{
	(EGameSearchAction)(0),                                         // 0: EGameSearchAction
	(EGameSearchResult)(0),                                         // 1: EGameSearchResult
	(*GameSearchParam)(nil),                                        // 2: GameSearchParam
	(*CQueuedMatchmaking_SearchForGame_Request)(nil),               // 3: CQueuedMatchmaking_SearchForGame_Request
	(*CQueuedMatchmaking_SearchForGame_Response)(nil),              // 4: CQueuedMatchmaking_SearchForGame_Response
	(*CQueuedMatchmakingGameHost_SearchForPlayers_Request)(nil),    // 5: CQueuedMatchmakingGameHost_SearchForPlayers_Request
	(*PlayerFound)(nil),                                            // 6: PlayerFound
	(*CQueuedMatchmakingGameHost_SearchForPlayers_Response)(nil),   // 7: CQueuedMatchmakingGameHost_SearchForPlayers_Response
	(*PlayerResult)(nil),                                           // 8: PlayerResult
	(*CQueuedMatchmakingGameHost_SubmitPlayerResult_Request)(nil),  // 9: CQueuedMatchmakingGameHost_SubmitPlayerResult_Request
	(*CQueuedMatchmakingGameHost_SubmitPlayerResult_Response)(nil), // 10: CQueuedMatchmakingGameHost_SubmitPlayerResult_Response
	(*CQueuedMatchmakingGameHost_EndGame_Request)(nil),             // 11: CQueuedMatchmakingGameHost_EndGame_Request
	(*CQueuedMatchmakingGameHost_EndGame_Response)(nil),            // 12: CQueuedMatchmakingGameHost_EndGame_Response
}
var file_steammessages_qms_steamclient_proto_depIdxs = []int32{
	0,  // 0: CQueuedMatchmaking_SearchForGame_Request.action:type_name -> EGameSearchAction
	2,  // 1: CQueuedMatchmaking_SearchForGame_Request.params:type_name -> GameSearchParam
	1,  // 2: CQueuedMatchmaking_SearchForGame_Response.gamesearchresult:type_name -> EGameSearchResult
	0,  // 3: CQueuedMatchmakingGameHost_SearchForPlayers_Request.action:type_name -> EGameSearchAction
	2,  // 4: CQueuedMatchmakingGameHost_SearchForPlayers_Request.params:type_name -> GameSearchParam
	0,  // 5: PlayerFound.action:type_name -> EGameSearchAction
	2,  // 6: PlayerFound.params:type_name -> GameSearchParam
	1,  // 7: CQueuedMatchmakingGameHost_SearchForPlayers_Response.gamesearchresult:type_name -> EGameSearchResult
	6,  // 8: CQueuedMatchmakingGameHost_SearchForPlayers_Response.players:type_name -> PlayerFound
	8,  // 9: CQueuedMatchmakingGameHost_SubmitPlayerResult_Request.player_results:type_name -> PlayerResult
	3,  // 10: QueuedMatchmaking.SearchForGame:input_type -> CQueuedMatchmaking_SearchForGame_Request
	5,  // 11: QueuedMatchmakingGameHost.SearchForPlayers:input_type -> CQueuedMatchmakingGameHost_SearchForPlayers_Request
	9,  // 12: QueuedMatchmakingGameHost.SubmitPlayerResult:input_type -> CQueuedMatchmakingGameHost_SubmitPlayerResult_Request
	11, // 13: QueuedMatchmakingGameHost.EndGame:input_type -> CQueuedMatchmakingGameHost_EndGame_Request
	4,  // 14: QueuedMatchmaking.SearchForGame:output_type -> CQueuedMatchmaking_SearchForGame_Response
	7,  // 15: QueuedMatchmakingGameHost.SearchForPlayers:output_type -> CQueuedMatchmakingGameHost_SearchForPlayers_Response
	10, // 16: QueuedMatchmakingGameHost.SubmitPlayerResult:output_type -> CQueuedMatchmakingGameHost_SubmitPlayerResult_Response
	12, // 17: QueuedMatchmakingGameHost.EndGame:output_type -> CQueuedMatchmakingGameHost_EndGame_Response
	14, // [14:18] is the sub-list for method output_type
	10, // [10:14] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_steammessages_qms_steamclient_proto_init() }
func file_steammessages_qms_steamclient_proto_init() {
	if File_steammessages_qms_steamclient_proto != nil {
		return
	}
	file_steammessages_base_proto_init()
	file_steammessages_unified_base_steamclient_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_steammessages_qms_steamclient_proto_rawDesc), len(file_steammessages_qms_steamclient_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_steammessages_qms_steamclient_proto_goTypes,
		DependencyIndexes: file_steammessages_qms_steamclient_proto_depIdxs,
		EnumInfos:         file_steammessages_qms_steamclient_proto_enumTypes,
		MessageInfos:      file_steammessages_qms_steamclient_proto_msgTypes,
	}.Build()
	File_steammessages_qms_steamclient_proto = out.File
	file_steammessages_qms_steamclient_proto_goTypes = nil
	file_steammessages_qms_steamclient_proto_depIdxs = nil
}
