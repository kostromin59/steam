// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v6.32.0
// source: steammessages_virtualcontroller.proto

package steampb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EInputMode int32

const (
	EInputMode_k_EInputModeUnknown            EInputMode = 0
	EInputMode_k_EInputModeMouse              EInputMode = 1
	EInputMode_k_EInputModeController         EInputMode = 2
	EInputMode_k_EInputModeMouseAndController EInputMode = 3
)

// Enum value maps for EInputMode.
var (
	EInputMode_name = map[int32]string{
		0: "k_EInputModeUnknown",
		1: "k_EInputModeMouse",
		2: "k_EInputModeController",
		3: "k_EInputModeMouseAndController",
	}
	EInputMode_value = map[string]int32{
		"k_EInputModeUnknown":            0,
		"k_EInputModeMouse":              1,
		"k_EInputModeController":         2,
		"k_EInputModeMouseAndController": 3,
	}
)

func (x EInputMode) Enum() *EInputMode {
	p := new(EInputMode)
	*p = x
	return p
}

func (x EInputMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EInputMode) Descriptor() protoreflect.EnumDescriptor {
	return file_steammessages_virtualcontroller_proto_enumTypes[0].Descriptor()
}

func (EInputMode) Type() protoreflect.EnumType {
	return &file_steammessages_virtualcontroller_proto_enumTypes[0]
}

func (x EInputMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EInputMode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EInputMode(num)
	return nil
}

// Deprecated: Use EInputMode.Descriptor instead.
func (EInputMode) EnumDescriptor() ([]byte, []int) {
	return file_steammessages_virtualcontroller_proto_rawDescGZIP(), []int{0}
}

type EMouseMode int32

const (
	EMouseMode_k_EMouseModeUnknown        EMouseMode = 0
	EMouseMode_k_EMouseModeRelativeCursor EMouseMode = 1
	EMouseMode_k_EMouseModeAbsoluteCursor EMouseMode = 2
	EMouseMode_k_EMouseModeTouch          EMouseMode = 3
	EMouseMode_k_EMouseModeRelative       EMouseMode = 4
)

// Enum value maps for EMouseMode.
var (
	EMouseMode_name = map[int32]string{
		0: "k_EMouseModeUnknown",
		1: "k_EMouseModeRelativeCursor",
		2: "k_EMouseModeAbsoluteCursor",
		3: "k_EMouseModeTouch",
		4: "k_EMouseModeRelative",
	}
	EMouseMode_value = map[string]int32{
		"k_EMouseModeUnknown":        0,
		"k_EMouseModeRelativeCursor": 1,
		"k_EMouseModeAbsoluteCursor": 2,
		"k_EMouseModeTouch":          3,
		"k_EMouseModeRelative":       4,
	}
)

func (x EMouseMode) Enum() *EMouseMode {
	p := new(EMouseMode)
	*p = x
	return p
}

func (x EMouseMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EMouseMode) Descriptor() protoreflect.EnumDescriptor {
	return file_steammessages_virtualcontroller_proto_enumTypes[1].Descriptor()
}

func (EMouseMode) Type() protoreflect.EnumType {
	return &file_steammessages_virtualcontroller_proto_enumTypes[1]
}

func (x EMouseMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EMouseMode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EMouseMode(num)
	return nil
}

// Deprecated: Use EMouseMode.Descriptor instead.
func (EMouseMode) EnumDescriptor() ([]byte, []int) {
	return file_steammessages_virtualcontroller_proto_rawDescGZIP(), []int{1}
}

type EControllerElementType int32

const (
	EControllerElementType_k_EControllerElementTypeNone                EControllerElementType = -1
	EControllerElementType_k_EControllerElementTypeThumb               EControllerElementType = 0
	EControllerElementType_k_EControllerElementTypeButtonSteam         EControllerElementType = 1
	EControllerElementType_k_EControllerElementTypeJoystickLeft        EControllerElementType = 2
	EControllerElementType_k_EControllerElementTypeButtonJoystickLeft  EControllerElementType = 3
	EControllerElementType_k_EControllerElementTypeJoystickRight       EControllerElementType = 4
	EControllerElementType_k_EControllerElementTypeButtonJoystickRight EControllerElementType = 5
	EControllerElementType_k_EControllerElementTypeDPad                EControllerElementType = 6
	EControllerElementType_k_EControllerElementTypeButtonA             EControllerElementType = 7
	EControllerElementType_k_EControllerElementTypeButtonB             EControllerElementType = 8
	EControllerElementType_k_EControllerElementTypeButtonX             EControllerElementType = 9
	EControllerElementType_k_EControllerElementTypeButtonY             EControllerElementType = 10
	EControllerElementType_k_EControllerElementTypeButtonSelect        EControllerElementType = 11
	EControllerElementType_k_EControllerElementTypeButtonStart         EControllerElementType = 12
	EControllerElementType_k_EControllerElementTypeButtonTriggerLeft   EControllerElementType = 13
	EControllerElementType_k_EControllerElementTypeButtonTriggerRight  EControllerElementType = 14
	EControllerElementType_k_EControllerElementTypeButtonBumperLeft    EControllerElementType = 15
	EControllerElementType_k_EControllerElementTypeButtonBumperRight   EControllerElementType = 16
	EControllerElementType_k_EControllerElementTypeButtonMacro0        EControllerElementType = 17
	EControllerElementType_k_EControllerElementTypeButtonMacro1        EControllerElementType = 18
	EControllerElementType_k_EControllerElementTypeButtonMacro2        EControllerElementType = 19
	EControllerElementType_k_EControllerElementTypeButtonMacro3        EControllerElementType = 20
	EControllerElementType_k_EControllerElementTypeButtonMacro4        EControllerElementType = 21
	EControllerElementType_k_EControllerElementTypeButtonMacro5        EControllerElementType = 22
	EControllerElementType_k_EControllerElementTypeButtonMacro6        EControllerElementType = 23
	EControllerElementType_k_EControllerElementTypeButtonMacro7        EControllerElementType = 24
	EControllerElementType_k_EControllerElementTypeTrackpadCenter      EControllerElementType = 25
	EControllerElementType_k_EControllerElementTypeTrackpadLeft        EControllerElementType = 26
	EControllerElementType_k_EControllerElementTypeTrackpadRight       EControllerElementType = 27
	EControllerElementType_k_EControllerElementTypeKeyboard            EControllerElementType = 28
	EControllerElementType_k_EControllerElementTypeMagnifyingGlass     EControllerElementType = 29
	EControllerElementType_k_EControllerElementTypeButtonMacro1Finger  EControllerElementType = 30
	EControllerElementType_k_EControllerElementTypeButtonMacro2Finger  EControllerElementType = 31
	EControllerElementType_k_EControllerElementTypeRecordInput         EControllerElementType = 32
	EControllerElementType_k_EControllerElementTypePlaybackInput       EControllerElementType = 33
	EControllerElementType_k_EControllerElementTypePaste               EControllerElementType = 34
	EControllerElementType_k_EControllerElementTypeMax                 EControllerElementType = 35
)

// Enum value maps for EControllerElementType.
var (
	EControllerElementType_name = map[int32]string{
		-1: "k_EControllerElementTypeNone",
		0:  "k_EControllerElementTypeThumb",
		1:  "k_EControllerElementTypeButtonSteam",
		2:  "k_EControllerElementTypeJoystickLeft",
		3:  "k_EControllerElementTypeButtonJoystickLeft",
		4:  "k_EControllerElementTypeJoystickRight",
		5:  "k_EControllerElementTypeButtonJoystickRight",
		6:  "k_EControllerElementTypeDPad",
		7:  "k_EControllerElementTypeButtonA",
		8:  "k_EControllerElementTypeButtonB",
		9:  "k_EControllerElementTypeButtonX",
		10: "k_EControllerElementTypeButtonY",
		11: "k_EControllerElementTypeButtonSelect",
		12: "k_EControllerElementTypeButtonStart",
		13: "k_EControllerElementTypeButtonTriggerLeft",
		14: "k_EControllerElementTypeButtonTriggerRight",
		15: "k_EControllerElementTypeButtonBumperLeft",
		16: "k_EControllerElementTypeButtonBumperRight",
		17: "k_EControllerElementTypeButtonMacro0",
		18: "k_EControllerElementTypeButtonMacro1",
		19: "k_EControllerElementTypeButtonMacro2",
		20: "k_EControllerElementTypeButtonMacro3",
		21: "k_EControllerElementTypeButtonMacro4",
		22: "k_EControllerElementTypeButtonMacro5",
		23: "k_EControllerElementTypeButtonMacro6",
		24: "k_EControllerElementTypeButtonMacro7",
		25: "k_EControllerElementTypeTrackpadCenter",
		26: "k_EControllerElementTypeTrackpadLeft",
		27: "k_EControllerElementTypeTrackpadRight",
		28: "k_EControllerElementTypeKeyboard",
		29: "k_EControllerElementTypeMagnifyingGlass",
		30: "k_EControllerElementTypeButtonMacro1Finger",
		31: "k_EControllerElementTypeButtonMacro2Finger",
		32: "k_EControllerElementTypeRecordInput",
		33: "k_EControllerElementTypePlaybackInput",
		34: "k_EControllerElementTypePaste",
		35: "k_EControllerElementTypeMax",
	}
	EControllerElementType_value = map[string]int32{
		"k_EControllerElementTypeNone":                -1,
		"k_EControllerElementTypeThumb":               0,
		"k_EControllerElementTypeButtonSteam":         1,
		"k_EControllerElementTypeJoystickLeft":        2,
		"k_EControllerElementTypeButtonJoystickLeft":  3,
		"k_EControllerElementTypeJoystickRight":       4,
		"k_EControllerElementTypeButtonJoystickRight": 5,
		"k_EControllerElementTypeDPad":                6,
		"k_EControllerElementTypeButtonA":             7,
		"k_EControllerElementTypeButtonB":             8,
		"k_EControllerElementTypeButtonX":             9,
		"k_EControllerElementTypeButtonY":             10,
		"k_EControllerElementTypeButtonSelect":        11,
		"k_EControllerElementTypeButtonStart":         12,
		"k_EControllerElementTypeButtonTriggerLeft":   13,
		"k_EControllerElementTypeButtonTriggerRight":  14,
		"k_EControllerElementTypeButtonBumperLeft":    15,
		"k_EControllerElementTypeButtonBumperRight":   16,
		"k_EControllerElementTypeButtonMacro0":        17,
		"k_EControllerElementTypeButtonMacro1":        18,
		"k_EControllerElementTypeButtonMacro2":        19,
		"k_EControllerElementTypeButtonMacro3":        20,
		"k_EControllerElementTypeButtonMacro4":        21,
		"k_EControllerElementTypeButtonMacro5":        22,
		"k_EControllerElementTypeButtonMacro6":        23,
		"k_EControllerElementTypeButtonMacro7":        24,
		"k_EControllerElementTypeTrackpadCenter":      25,
		"k_EControllerElementTypeTrackpadLeft":        26,
		"k_EControllerElementTypeTrackpadRight":       27,
		"k_EControllerElementTypeKeyboard":            28,
		"k_EControllerElementTypeMagnifyingGlass":     29,
		"k_EControllerElementTypeButtonMacro1Finger":  30,
		"k_EControllerElementTypeButtonMacro2Finger":  31,
		"k_EControllerElementTypeRecordInput":         32,
		"k_EControllerElementTypePlaybackInput":       33,
		"k_EControllerElementTypePaste":               34,
		"k_EControllerElementTypeMax":                 35,
	}
)

func (x EControllerElementType) Enum() *EControllerElementType {
	p := new(EControllerElementType)
	*p = x
	return p
}

func (x EControllerElementType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EControllerElementType) Descriptor() protoreflect.EnumDescriptor {
	return file_steammessages_virtualcontroller_proto_enumTypes[2].Descriptor()
}

func (EControllerElementType) Type() protoreflect.EnumType {
	return &file_steammessages_virtualcontroller_proto_enumTypes[2]
}

func (x EControllerElementType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EControllerElementType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EControllerElementType(num)
	return nil
}

// Deprecated: Use EControllerElementType.Descriptor instead.
func (EControllerElementType) EnumDescriptor() ([]byte, []int) {
	return file_steammessages_virtualcontroller_proto_rawDescGZIP(), []int{2}
}

type CVirtualControllerElement struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Type          *EControllerElementType `protobuf:"varint,1,opt,name=type,enum=EControllerElementType,def=-1" json:"type,omitempty"`
	Visible       *bool                   `protobuf:"varint,2,opt,name=visible" json:"visible,omitempty"`
	XPosition     *float32                `protobuf:"fixed32,3,opt,name=x_position,json=xPosition" json:"x_position,omitempty"`
	YPosition     *float32                `protobuf:"fixed32,4,opt,name=y_position,json=yPosition" json:"y_position,omitempty"`
	XScale        *float32                `protobuf:"fixed32,5,opt,name=x_scale,json=xScale,def=1" json:"x_scale,omitempty"`
	YScale        *float32                `protobuf:"fixed32,6,opt,name=y_scale,json=yScale,def=1" json:"y_scale,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CVirtualControllerElement fields.
const (
	Default_CVirtualControllerElement_Type   = EControllerElementType_k_EControllerElementTypeNone
	Default_CVirtualControllerElement_XScale = float32(1)
	Default_CVirtualControllerElement_YScale = float32(1)
)

func (x *CVirtualControllerElement) Reset() {
	*x = CVirtualControllerElement{}
	mi := &file_steammessages_virtualcontroller_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CVirtualControllerElement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVirtualControllerElement) ProtoMessage() {}

func (x *CVirtualControllerElement) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_virtualcontroller_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVirtualControllerElement.ProtoReflect.Descriptor instead.
func (*CVirtualControllerElement) Descriptor() ([]byte, []int) {
	return file_steammessages_virtualcontroller_proto_rawDescGZIP(), []int{0}
}

func (x *CVirtualControllerElement) GetType() EControllerElementType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_CVirtualControllerElement_Type
}

func (x *CVirtualControllerElement) GetVisible() bool {
	if x != nil && x.Visible != nil {
		return *x.Visible
	}
	return false
}

func (x *CVirtualControllerElement) GetXPosition() float32 {
	if x != nil && x.XPosition != nil {
		return *x.XPosition
	}
	return 0
}

func (x *CVirtualControllerElement) GetYPosition() float32 {
	if x != nil && x.YPosition != nil {
		return *x.YPosition
	}
	return 0
}

func (x *CVirtualControllerElement) GetXScale() float32 {
	if x != nil && x.XScale != nil {
		return *x.XScale
	}
	return Default_CVirtualControllerElement_XScale
}

func (x *CVirtualControllerElement) GetYScale() float32 {
	if x != nil && x.YScale != nil {
		return *x.YScale
	}
	return Default_CVirtualControllerElement_YScale
}

type CVirtualControllerColor struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	R             *float32               `protobuf:"fixed32,1,opt,name=r,def=1" json:"r,omitempty"`
	G             *float32               `protobuf:"fixed32,2,opt,name=g,def=1" json:"g,omitempty"`
	B             *float32               `protobuf:"fixed32,3,opt,name=b,def=1" json:"b,omitempty"`
	A             *float32               `protobuf:"fixed32,4,opt,name=a,def=1" json:"a,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CVirtualControllerColor fields.
const (
	Default_CVirtualControllerColor_R = float32(1)
	Default_CVirtualControllerColor_G = float32(1)
	Default_CVirtualControllerColor_B = float32(1)
	Default_CVirtualControllerColor_A = float32(1)
)

func (x *CVirtualControllerColor) Reset() {
	*x = CVirtualControllerColor{}
	mi := &file_steammessages_virtualcontroller_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CVirtualControllerColor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVirtualControllerColor) ProtoMessage() {}

func (x *CVirtualControllerColor) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_virtualcontroller_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVirtualControllerColor.ProtoReflect.Descriptor instead.
func (*CVirtualControllerColor) Descriptor() ([]byte, []int) {
	return file_steammessages_virtualcontroller_proto_rawDescGZIP(), []int{1}
}

func (x *CVirtualControllerColor) GetR() float32 {
	if x != nil && x.R != nil {
		return *x.R
	}
	return Default_CVirtualControllerColor_R
}

func (x *CVirtualControllerColor) GetG() float32 {
	if x != nil && x.G != nil {
		return *x.G
	}
	return Default_CVirtualControllerColor_G
}

func (x *CVirtualControllerColor) GetB() float32 {
	if x != nil && x.B != nil {
		return *x.B
	}
	return Default_CVirtualControllerColor_B
}

func (x *CVirtualControllerColor) GetA() float32 {
	if x != nil && x.A != nil {
		return *x.A
	}
	return Default_CVirtualControllerColor_A
}

type CVirtualControllerLayout struct {
	state         protoimpl.MessageState       `protogen:"open.v1"`
	LayoutVersion *int32                       `protobuf:"varint,1,opt,name=layout_version,json=layoutVersion" json:"layout_version,omitempty"`
	ActionsetId   *int32                       `protobuf:"varint,2,opt,name=actionset_id,json=actionsetId" json:"actionset_id,omitempty"`
	Elements      []*CVirtualControllerElement `protobuf:"bytes,4,rep,name=elements" json:"elements,omitempty"`
	Color         *CVirtualControllerColor     `protobuf:"bytes,5,opt,name=color" json:"color,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CVirtualControllerLayout) Reset() {
	*x = CVirtualControllerLayout{}
	mi := &file_steammessages_virtualcontroller_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CVirtualControllerLayout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVirtualControllerLayout) ProtoMessage() {}

func (x *CVirtualControllerLayout) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_virtualcontroller_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVirtualControllerLayout.ProtoReflect.Descriptor instead.
func (*CVirtualControllerLayout) Descriptor() ([]byte, []int) {
	return file_steammessages_virtualcontroller_proto_rawDescGZIP(), []int{2}
}

func (x *CVirtualControllerLayout) GetLayoutVersion() int32 {
	if x != nil && x.LayoutVersion != nil {
		return *x.LayoutVersion
	}
	return 0
}

func (x *CVirtualControllerLayout) GetActionsetId() int32 {
	if x != nil && x.ActionsetId != nil {
		return *x.ActionsetId
	}
	return 0
}

func (x *CVirtualControllerLayout) GetElements() []*CVirtualControllerElement {
	if x != nil {
		return x.Elements
	}
	return nil
}

func (x *CVirtualControllerLayout) GetColor() *CVirtualControllerColor {
	if x != nil {
		return x.Color
	}
	return nil
}

type CVirtualControllerLayouts struct {
	state               protoimpl.MessageState      `protogen:"open.v1"`
	Layouts             []*CVirtualControllerLayout `protobuf:"bytes,1,rep,name=layouts" json:"layouts,omitempty"`
	InputMode           *EInputMode                 `protobuf:"varint,2,opt,name=input_mode,json=inputMode,enum=EInputMode,def=2" json:"input_mode,omitempty"`
	MouseMode           *EMouseMode                 `protobuf:"varint,3,opt,name=mouse_mode,json=mouseMode,enum=EMouseMode,def=0" json:"mouse_mode,omitempty"`
	TrackpadSensitivity *float32                    `protobuf:"fixed32,4,opt,name=trackpad_sensitivity,json=trackpadSensitivity,def=1" json:"trackpad_sensitivity,omitempty"`
	PinchZoomEnabled    *bool                       `protobuf:"varint,5,opt,name=pinch_zoom_enabled,json=pinchZoomEnabled,def=0" json:"pinch_zoom_enabled,omitempty"`
	PinchZoomX          *float32                    `protobuf:"fixed32,6,opt,name=pinch_zoom_x,json=pinchZoomX,def=0" json:"pinch_zoom_x,omitempty"`
	PinchZoomY          *float32                    `protobuf:"fixed32,7,opt,name=pinch_zoom_y,json=pinchZoomY,def=0" json:"pinch_zoom_y,omitempty"`
	PinchZoomScale      *float32                    `protobuf:"fixed32,8,opt,name=pinch_zoom_scale,json=pinchZoomScale,def=1" json:"pinch_zoom_scale,omitempty"`
	Shaken              *bool                       `protobuf:"varint,9,opt,name=shaken" json:"shaken,omitempty"`
	MouseOffscreen      *bool                       `protobuf:"varint,10,opt,name=mouse_offscreen,json=mouseOffscreen" json:"mouse_offscreen,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

// Default values for CVirtualControllerLayouts fields.
const (
	Default_CVirtualControllerLayouts_InputMode           = EInputMode_k_EInputModeController
	Default_CVirtualControllerLayouts_MouseMode           = EMouseMode_k_EMouseModeUnknown
	Default_CVirtualControllerLayouts_TrackpadSensitivity = float32(1)
	Default_CVirtualControllerLayouts_PinchZoomEnabled    = bool(false)
	Default_CVirtualControllerLayouts_PinchZoomX          = float32(0)
	Default_CVirtualControllerLayouts_PinchZoomY          = float32(0)
	Default_CVirtualControllerLayouts_PinchZoomScale      = float32(1)
)

func (x *CVirtualControllerLayouts) Reset() {
	*x = CVirtualControllerLayouts{}
	mi := &file_steammessages_virtualcontroller_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CVirtualControllerLayouts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVirtualControllerLayouts) ProtoMessage() {}

func (x *CVirtualControllerLayouts) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_virtualcontroller_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVirtualControllerLayouts.ProtoReflect.Descriptor instead.
func (*CVirtualControllerLayouts) Descriptor() ([]byte, []int) {
	return file_steammessages_virtualcontroller_proto_rawDescGZIP(), []int{3}
}

func (x *CVirtualControllerLayouts) GetLayouts() []*CVirtualControllerLayout {
	if x != nil {
		return x.Layouts
	}
	return nil
}

func (x *CVirtualControllerLayouts) GetInputMode() EInputMode {
	if x != nil && x.InputMode != nil {
		return *x.InputMode
	}
	return Default_CVirtualControllerLayouts_InputMode
}

func (x *CVirtualControllerLayouts) GetMouseMode() EMouseMode {
	if x != nil && x.MouseMode != nil {
		return *x.MouseMode
	}
	return Default_CVirtualControllerLayouts_MouseMode
}

func (x *CVirtualControllerLayouts) GetTrackpadSensitivity() float32 {
	if x != nil && x.TrackpadSensitivity != nil {
		return *x.TrackpadSensitivity
	}
	return Default_CVirtualControllerLayouts_TrackpadSensitivity
}

func (x *CVirtualControllerLayouts) GetPinchZoomEnabled() bool {
	if x != nil && x.PinchZoomEnabled != nil {
		return *x.PinchZoomEnabled
	}
	return Default_CVirtualControllerLayouts_PinchZoomEnabled
}

func (x *CVirtualControllerLayouts) GetPinchZoomX() float32 {
	if x != nil && x.PinchZoomX != nil {
		return *x.PinchZoomX
	}
	return Default_CVirtualControllerLayouts_PinchZoomX
}

func (x *CVirtualControllerLayouts) GetPinchZoomY() float32 {
	if x != nil && x.PinchZoomY != nil {
		return *x.PinchZoomY
	}
	return Default_CVirtualControllerLayouts_PinchZoomY
}

func (x *CVirtualControllerLayouts) GetPinchZoomScale() float32 {
	if x != nil && x.PinchZoomScale != nil {
		return *x.PinchZoomScale
	}
	return Default_CVirtualControllerLayouts_PinchZoomScale
}

func (x *CVirtualControllerLayouts) GetShaken() bool {
	if x != nil && x.Shaken != nil {
		return *x.Shaken
	}
	return false
}

func (x *CVirtualControllerLayouts) GetMouseOffscreen() bool {
	if x != nil && x.MouseOffscreen != nil {
		return *x.MouseOffscreen
	}
	return false
}

type CVirtualControllerConfig struct {
	state            protoimpl.MessageState                `protogen:"open.v1"`
	Name             *string                               `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Actionsets       []*CVirtualControllerConfig_ActionSet `protobuf:"bytes,2,rep,name=actionsets" json:"actionsets,omitempty"`
	DefaultMouseMode *EMouseMode                           `protobuf:"varint,3,opt,name=default_mouse_mode,json=defaultMouseMode,enum=EMouseMode,def=2" json:"default_mouse_mode,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

// Default values for CVirtualControllerConfig fields.
const (
	Default_CVirtualControllerConfig_DefaultMouseMode = EMouseMode_k_EMouseModeAbsoluteCursor
)

func (x *CVirtualControllerConfig) Reset() {
	*x = CVirtualControllerConfig{}
	mi := &file_steammessages_virtualcontroller_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CVirtualControllerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVirtualControllerConfig) ProtoMessage() {}

func (x *CVirtualControllerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_virtualcontroller_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVirtualControllerConfig.ProtoReflect.Descriptor instead.
func (*CVirtualControllerConfig) Descriptor() ([]byte, []int) {
	return file_steammessages_virtualcontroller_proto_rawDescGZIP(), []int{4}
}

func (x *CVirtualControllerConfig) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CVirtualControllerConfig) GetActionsets() []*CVirtualControllerConfig_ActionSet {
	if x != nil {
		return x.Actionsets
	}
	return nil
}

func (x *CVirtualControllerConfig) GetDefaultMouseMode() EMouseMode {
	if x != nil && x.DefaultMouseMode != nil {
		return *x.DefaultMouseMode
	}
	return Default_CVirtualControllerConfig_DefaultMouseMode
}

type CVirtualControllerLayoutPackage struct {
	state           protoimpl.MessageState     `protogen:"open.v1"`
	Appid           *uint32                    `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	Creator         *uint64                    `protobuf:"varint,2,opt,name=creator" json:"creator,omitempty"`
	InitialRevision *uint32                    `protobuf:"varint,3,opt,name=initial_revision,json=initialRevision" json:"initial_revision,omitempty"`
	SavedRevision   *uint32                    `protobuf:"varint,4,opt,name=saved_revision,json=savedRevision" json:"saved_revision,omitempty"`
	Config          *CVirtualControllerConfig  `protobuf:"bytes,5,opt,name=config" json:"config,omitempty"`
	Layouts         *CVirtualControllerLayouts `protobuf:"bytes,6,opt,name=layouts" json:"layouts,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CVirtualControllerLayoutPackage) Reset() {
	*x = CVirtualControllerLayoutPackage{}
	mi := &file_steammessages_virtualcontroller_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CVirtualControllerLayoutPackage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVirtualControllerLayoutPackage) ProtoMessage() {}

func (x *CVirtualControllerLayoutPackage) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_virtualcontroller_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVirtualControllerLayoutPackage.ProtoReflect.Descriptor instead.
func (*CVirtualControllerLayoutPackage) Descriptor() ([]byte, []int) {
	return file_steammessages_virtualcontroller_proto_rawDescGZIP(), []int{5}
}

func (x *CVirtualControllerLayoutPackage) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CVirtualControllerLayoutPackage) GetCreator() uint64 {
	if x != nil && x.Creator != nil {
		return *x.Creator
	}
	return 0
}

func (x *CVirtualControllerLayoutPackage) GetInitialRevision() uint32 {
	if x != nil && x.InitialRevision != nil {
		return *x.InitialRevision
	}
	return 0
}

func (x *CVirtualControllerLayoutPackage) GetSavedRevision() uint32 {
	if x != nil && x.SavedRevision != nil {
		return *x.SavedRevision
	}
	return 0
}

func (x *CVirtualControllerLayoutPackage) GetConfig() *CVirtualControllerConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *CVirtualControllerLayoutPackage) GetLayouts() *CVirtualControllerLayouts {
	if x != nil {
		return x.Layouts
	}
	return nil
}

type CVirtualControllerGlobalConfig struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	FeedbackEnabled  *bool                  `protobuf:"varint,1,opt,name=feedback_enabled,json=feedbackEnabled" json:"feedback_enabled,omitempty"`
	GyroscopeEnabled *bool                  `protobuf:"varint,2,opt,name=gyroscope_enabled,json=gyroscopeEnabled,def=1" json:"gyroscope_enabled,omitempty"`
	AutoFadeEnabled  *bool                  `protobuf:"varint,3,opt,name=auto_fade_enabled,json=autoFadeEnabled,def=1" json:"auto_fade_enabled,omitempty"`
	RumbleEnabled    *bool                  `protobuf:"varint,4,opt,name=rumble_enabled,json=rumbleEnabled,def=1" json:"rumble_enabled,omitempty"`
	ShakeFadeEnabled *bool                  `protobuf:"varint,5,opt,name=shake_fade_enabled,json=shakeFadeEnabled" json:"shake_fade_enabled,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

// Default values for CVirtualControllerGlobalConfig fields.
const (
	Default_CVirtualControllerGlobalConfig_GyroscopeEnabled = bool(true)
	Default_CVirtualControllerGlobalConfig_AutoFadeEnabled  = bool(true)
	Default_CVirtualControllerGlobalConfig_RumbleEnabled    = bool(true)
)

func (x *CVirtualControllerGlobalConfig) Reset() {
	*x = CVirtualControllerGlobalConfig{}
	mi := &file_steammessages_virtualcontroller_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CVirtualControllerGlobalConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVirtualControllerGlobalConfig) ProtoMessage() {}

func (x *CVirtualControllerGlobalConfig) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_virtualcontroller_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVirtualControllerGlobalConfig.ProtoReflect.Descriptor instead.
func (*CVirtualControllerGlobalConfig) Descriptor() ([]byte, []int) {
	return file_steammessages_virtualcontroller_proto_rawDescGZIP(), []int{6}
}

func (x *CVirtualControllerGlobalConfig) GetFeedbackEnabled() bool {
	if x != nil && x.FeedbackEnabled != nil {
		return *x.FeedbackEnabled
	}
	return false
}

func (x *CVirtualControllerGlobalConfig) GetGyroscopeEnabled() bool {
	if x != nil && x.GyroscopeEnabled != nil {
		return *x.GyroscopeEnabled
	}
	return Default_CVirtualControllerGlobalConfig_GyroscopeEnabled
}

func (x *CVirtualControllerGlobalConfig) GetAutoFadeEnabled() bool {
	if x != nil && x.AutoFadeEnabled != nil {
		return *x.AutoFadeEnabled
	}
	return Default_CVirtualControllerGlobalConfig_AutoFadeEnabled
}

func (x *CVirtualControllerGlobalConfig) GetRumbleEnabled() bool {
	if x != nil && x.RumbleEnabled != nil {
		return *x.RumbleEnabled
	}
	return Default_CVirtualControllerGlobalConfig_RumbleEnabled
}

func (x *CVirtualControllerGlobalConfig) GetShakeFadeEnabled() bool {
	if x != nil && x.ShakeFadeEnabled != nil {
		return *x.ShakeFadeEnabled
	}
	return false
}

type CVirtualControllerConfig_Control struct {
	state                        protoimpl.MessageState `protogen:"open.v1"`
	Name                         *string                `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Icon                         *string                `protobuf:"bytes,2,opt,name=icon" json:"icon,omitempty"`
	InputSource                  *int32                 `protobuf:"varint,3,opt,name=input_source,json=inputSource" json:"input_source,omitempty"`
	InputMode                    *int32                 `protobuf:"varint,4,opt,name=input_mode,json=inputMode" json:"input_mode,omitempty"`
	InputElement                 *int32                 `protobuf:"varint,5,opt,name=input_element,json=inputElement" json:"input_element,omitempty"`
	OutputGamepad                *int32                 `protobuf:"varint,6,opt,name=output_gamepad,json=outputGamepad" json:"output_gamepad,omitempty"`
	OutputKeyboard               *int32                 `protobuf:"varint,7,opt,name=output_keyboard,json=outputKeyboard" json:"output_keyboard,omitempty"`
	OutputMouse                  *int32                 `protobuf:"varint,8,opt,name=output_mouse,json=outputMouse" json:"output_mouse,omitempty"`
	IconForeground               *string                `protobuf:"bytes,9,opt,name=icon_foreground,json=iconForeground" json:"icon_foreground,omitempty"`
	IconBackground               *string                `protobuf:"bytes,10,opt,name=icon_background,json=iconBackground" json:"icon_background,omitempty"`
	InputToggle                  *bool                  `protobuf:"varint,11,opt,name=input_toggle,json=inputToggle" json:"input_toggle,omitempty"`
	InputActivateStickOrTrackpad *int32                 `protobuf:"varint,12,opt,name=input_activate_stick_or_trackpad,json=inputActivateStickOrTrackpad" json:"input_activate_stick_or_trackpad,omitempty"`
	ActivationType               *int32                 `protobuf:"varint,13,opt,name=activation_type,json=activationType" json:"activation_type,omitempty"`
	LongPressMs                  *int32                 `protobuf:"varint,14,opt,name=long_press_ms,json=longPressMs" json:"long_press_ms,omitempty"`
	DoublePressMs                *int32                 `protobuf:"varint,15,opt,name=double_press_ms,json=doublePressMs" json:"double_press_ms,omitempty"`
	unknownFields                protoimpl.UnknownFields
	sizeCache                    protoimpl.SizeCache
}

func (x *CVirtualControllerConfig_Control) Reset() {
	*x = CVirtualControllerConfig_Control{}
	mi := &file_steammessages_virtualcontroller_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CVirtualControllerConfig_Control) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVirtualControllerConfig_Control) ProtoMessage() {}

func (x *CVirtualControllerConfig_Control) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_virtualcontroller_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVirtualControllerConfig_Control.ProtoReflect.Descriptor instead.
func (*CVirtualControllerConfig_Control) Descriptor() ([]byte, []int) {
	return file_steammessages_virtualcontroller_proto_rawDescGZIP(), []int{4, 0}
}

func (x *CVirtualControllerConfig_Control) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CVirtualControllerConfig_Control) GetIcon() string {
	if x != nil && x.Icon != nil {
		return *x.Icon
	}
	return ""
}

func (x *CVirtualControllerConfig_Control) GetInputSource() int32 {
	if x != nil && x.InputSource != nil {
		return *x.InputSource
	}
	return 0
}

func (x *CVirtualControllerConfig_Control) GetInputMode() int32 {
	if x != nil && x.InputMode != nil {
		return *x.InputMode
	}
	return 0
}

func (x *CVirtualControllerConfig_Control) GetInputElement() int32 {
	if x != nil && x.InputElement != nil {
		return *x.InputElement
	}
	return 0
}

func (x *CVirtualControllerConfig_Control) GetOutputGamepad() int32 {
	if x != nil && x.OutputGamepad != nil {
		return *x.OutputGamepad
	}
	return 0
}

func (x *CVirtualControllerConfig_Control) GetOutputKeyboard() int32 {
	if x != nil && x.OutputKeyboard != nil {
		return *x.OutputKeyboard
	}
	return 0
}

func (x *CVirtualControllerConfig_Control) GetOutputMouse() int32 {
	if x != nil && x.OutputMouse != nil {
		return *x.OutputMouse
	}
	return 0
}

func (x *CVirtualControllerConfig_Control) GetIconForeground() string {
	if x != nil && x.IconForeground != nil {
		return *x.IconForeground
	}
	return ""
}

func (x *CVirtualControllerConfig_Control) GetIconBackground() string {
	if x != nil && x.IconBackground != nil {
		return *x.IconBackground
	}
	return ""
}

func (x *CVirtualControllerConfig_Control) GetInputToggle() bool {
	if x != nil && x.InputToggle != nil {
		return *x.InputToggle
	}
	return false
}

func (x *CVirtualControllerConfig_Control) GetInputActivateStickOrTrackpad() int32 {
	if x != nil && x.InputActivateStickOrTrackpad != nil {
		return *x.InputActivateStickOrTrackpad
	}
	return 0
}

func (x *CVirtualControllerConfig_Control) GetActivationType() int32 {
	if x != nil && x.ActivationType != nil {
		return *x.ActivationType
	}
	return 0
}

func (x *CVirtualControllerConfig_Control) GetLongPressMs() int32 {
	if x != nil && x.LongPressMs != nil {
		return *x.LongPressMs
	}
	return 0
}

func (x *CVirtualControllerConfig_Control) GetDoublePressMs() int32 {
	if x != nil && x.DoublePressMs != nil {
		return *x.DoublePressMs
	}
	return 0
}

type CVirtualControllerConfig_ActionSet struct {
	state         protoimpl.MessageState              `protogen:"open.v1"`
	Id            *int32                              `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	ParentId      *int32                              `protobuf:"varint,2,opt,name=parent_id,json=parentId" json:"parent_id,omitempty"`
	Name          *string                             `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Controls      []*CVirtualControllerConfig_Control `protobuf:"bytes,4,rep,name=controls" json:"controls,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CVirtualControllerConfig_ActionSet) Reset() {
	*x = CVirtualControllerConfig_ActionSet{}
	mi := &file_steammessages_virtualcontroller_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CVirtualControllerConfig_ActionSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVirtualControllerConfig_ActionSet) ProtoMessage() {}

func (x *CVirtualControllerConfig_ActionSet) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_virtualcontroller_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVirtualControllerConfig_ActionSet.ProtoReflect.Descriptor instead.
func (*CVirtualControllerConfig_ActionSet) Descriptor() ([]byte, []int) {
	return file_steammessages_virtualcontroller_proto_rawDescGZIP(), []int{4, 1}
}

func (x *CVirtualControllerConfig_ActionSet) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *CVirtualControllerConfig_ActionSet) GetParentId() int32 {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return 0
}

func (x *CVirtualControllerConfig_ActionSet) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CVirtualControllerConfig_ActionSet) GetControls() []*CVirtualControllerConfig_Control {
	if x != nil {
		return x.Controls
	}
	return nil
}

var File_steammessages_virtualcontroller_proto protoreflect.FileDescriptor

const file_steammessages_virtualcontroller_proto_rawDesc = "" +
	"\n" +
	"%steammessages_virtualcontroller.proto\"\xf6\x01\n" +
	"\x19CVirtualControllerElement\x12I\n" +
	"\x04type\x18\x01 \x01(\x0e2\x17.EControllerElementType:\x1ck_EControllerElementTypeNoneR\x04type\x12\x18\n" +
	"\avisible\x18\x02 \x01(\bR\avisible\x12\x1d\n" +
	"\n" +
	"x_position\x18\x03 \x01(\x02R\txPosition\x12\x1d\n" +
	"\n" +
	"y_position\x18\x04 \x01(\x02R\tyPosition\x12\x1a\n" +
	"\ax_scale\x18\x05 \x01(\x02:\x011R\x06xScale\x12\x1a\n" +
	"\ay_scale\x18\x06 \x01(\x02:\x011R\x06yScale\"]\n" +
	"\x17CVirtualControllerColor\x12\x0f\n" +
	"\x01r\x18\x01 \x01(\x02:\x011R\x01r\x12\x0f\n" +
	"\x01g\x18\x02 \x01(\x02:\x011R\x01g\x12\x0f\n" +
	"\x01b\x18\x03 \x01(\x02:\x011R\x01b\x12\x0f\n" +
	"\x01a\x18\x04 \x01(\x02:\x011R\x01a\"\xcc\x01\n" +
	"\x18CVirtualControllerLayout\x12%\n" +
	"\x0elayout_version\x18\x01 \x01(\x05R\rlayoutVersion\x12!\n" +
	"\factionset_id\x18\x02 \x01(\x05R\vactionsetId\x126\n" +
	"\belements\x18\x04 \x03(\v2\x1a.CVirtualControllerElementR\belements\x12.\n" +
	"\x05color\x18\x05 \x01(\v2\x18.CVirtualControllerColorR\x05color\"\xf8\x03\n" +
	"\x19CVirtualControllerLayouts\x123\n" +
	"\alayouts\x18\x01 \x03(\v2\x19.CVirtualControllerLayoutR\alayouts\x12B\n" +
	"\n" +
	"input_mode\x18\x02 \x01(\x0e2\v.EInputMode:\x16k_EInputModeControllerR\tinputMode\x12?\n" +
	"\n" +
	"mouse_mode\x18\x03 \x01(\x0e2\v.EMouseMode:\x13k_EMouseModeUnknownR\tmouseMode\x124\n" +
	"\x14trackpad_sensitivity\x18\x04 \x01(\x02:\x011R\x13trackpadSensitivity\x123\n" +
	"\x12pinch_zoom_enabled\x18\x05 \x01(\b:\x05falseR\x10pinchZoomEnabled\x12#\n" +
	"\fpinch_zoom_x\x18\x06 \x01(\x02:\x010R\n" +
	"pinchZoomX\x12#\n" +
	"\fpinch_zoom_y\x18\a \x01(\x02:\x010R\n" +
	"pinchZoomY\x12+\n" +
	"\x10pinch_zoom_scale\x18\b \x01(\x02:\x011R\x0epinchZoomScale\x12\x16\n" +
	"\x06shaken\x18\t \x01(\bR\x06shaken\x12'\n" +
	"\x0fmouse_offscreen\x18\n" +
	" \x01(\bR\x0emouseOffscreen\"\x98\a\n" +
	"\x18CVirtualControllerConfig\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12C\n" +
	"\n" +
	"actionsets\x18\x02 \x03(\v2#.CVirtualControllerConfig.ActionSetR\n" +
	"actionsets\x12U\n" +
	"\x12default_mouse_mode\x18\x03 \x01(\x0e2\v.EMouseMode:\x1ak_EMouseModeAbsoluteCursorR\x10defaultMouseMode\x1a\xbd\x04\n" +
	"\aControl\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x12\n" +
	"\x04icon\x18\x02 \x01(\tR\x04icon\x12!\n" +
	"\finput_source\x18\x03 \x01(\x05R\vinputSource\x12\x1d\n" +
	"\n" +
	"input_mode\x18\x04 \x01(\x05R\tinputMode\x12#\n" +
	"\rinput_element\x18\x05 \x01(\x05R\finputElement\x12%\n" +
	"\x0eoutput_gamepad\x18\x06 \x01(\x05R\routputGamepad\x12'\n" +
	"\x0foutput_keyboard\x18\a \x01(\x05R\x0eoutputKeyboard\x12!\n" +
	"\foutput_mouse\x18\b \x01(\x05R\voutputMouse\x12'\n" +
	"\x0ficon_foreground\x18\t \x01(\tR\x0eiconForeground\x12'\n" +
	"\x0ficon_background\x18\n" +
	" \x01(\tR\x0eiconBackground\x12!\n" +
	"\finput_toggle\x18\v \x01(\bR\vinputToggle\x12F\n" +
	" input_activate_stick_or_trackpad\x18\f \x01(\x05R\x1cinputActivateStickOrTrackpad\x12'\n" +
	"\x0factivation_type\x18\r \x01(\x05R\x0eactivationType\x12\"\n" +
	"\rlong_press_ms\x18\x0e \x01(\x05R\vlongPressMs\x12&\n" +
	"\x0fdouble_press_ms\x18\x0f \x01(\x05R\rdoublePressMs\x1a\x8b\x01\n" +
	"\tActionSet\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x05R\x02id\x12\x1b\n" +
	"\tparent_id\x18\x02 \x01(\x05R\bparentId\x12\x12\n" +
	"\x04name\x18\x03 \x01(\tR\x04name\x12=\n" +
	"\bcontrols\x18\x04 \x03(\v2!.CVirtualControllerConfig.ControlR\bcontrols\"\x8c\x02\n" +
	"\x1fCVirtualControllerLayoutPackage\x12\x14\n" +
	"\x05appid\x18\x01 \x01(\rR\x05appid\x12\x18\n" +
	"\acreator\x18\x02 \x01(\x04R\acreator\x12)\n" +
	"\x10initial_revision\x18\x03 \x01(\rR\x0finitialRevision\x12%\n" +
	"\x0esaved_revision\x18\x04 \x01(\rR\rsavedRevision\x121\n" +
	"\x06config\x18\x05 \x01(\v2\x19.CVirtualControllerConfigR\x06config\x124\n" +
	"\alayouts\x18\x06 \x01(\v2\x1a.CVirtualControllerLayoutsR\alayouts\"\x8b\x02\n" +
	"\x1eCVirtualControllerGlobalConfig\x12)\n" +
	"\x10feedback_enabled\x18\x01 \x01(\bR\x0ffeedbackEnabled\x121\n" +
	"\x11gyroscope_enabled\x18\x02 \x01(\b:\x04trueR\x10gyroscopeEnabled\x120\n" +
	"\x11auto_fade_enabled\x18\x03 \x01(\b:\x04trueR\x0fautoFadeEnabled\x12+\n" +
	"\x0erumble_enabled\x18\x04 \x01(\b:\x04trueR\rrumbleEnabled\x12,\n" +
	"\x12shake_fade_enabled\x18\x05 \x01(\bR\x10shakeFadeEnabled*|\n" +
	"\n" +
	"EInputMode\x12\x17\n" +
	"\x13k_EInputModeUnknown\x10\x00\x12\x15\n" +
	"\x11k_EInputModeMouse\x10\x01\x12\x1a\n" +
	"\x16k_EInputModeController\x10\x02\x12\"\n" +
	"\x1ek_EInputModeMouseAndController\x10\x03*\x96\x01\n" +
	"\n" +
	"EMouseMode\x12\x17\n" +
	"\x13k_EMouseModeUnknown\x10\x00\x12\x1e\n" +
	"\x1ak_EMouseModeRelativeCursor\x10\x01\x12\x1e\n" +
	"\x1ak_EMouseModeAbsoluteCursor\x10\x02\x12\x15\n" +
	"\x11k_EMouseModeTouch\x10\x03\x12\x18\n" +
	"\x14k_EMouseModeRelative\x10\x04*\xa6\f\n" +
	"\x16EControllerElementType\x12)\n" +
	"\x1ck_EControllerElementTypeNone\x10\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01\x12!\n" +
	"\x1dk_EControllerElementTypeThumb\x10\x00\x12'\n" +
	"#k_EControllerElementTypeButtonSteam\x10\x01\x12(\n" +
	"$k_EControllerElementTypeJoystickLeft\x10\x02\x12.\n" +
	"*k_EControllerElementTypeButtonJoystickLeft\x10\x03\x12)\n" +
	"%k_EControllerElementTypeJoystickRight\x10\x04\x12/\n" +
	"+k_EControllerElementTypeButtonJoystickRight\x10\x05\x12 \n" +
	"\x1ck_EControllerElementTypeDPad\x10\x06\x12#\n" +
	"\x1fk_EControllerElementTypeButtonA\x10\a\x12#\n" +
	"\x1fk_EControllerElementTypeButtonB\x10\b\x12#\n" +
	"\x1fk_EControllerElementTypeButtonX\x10\t\x12#\n" +
	"\x1fk_EControllerElementTypeButtonY\x10\n" +
	"\x12(\n" +
	"$k_EControllerElementTypeButtonSelect\x10\v\x12'\n" +
	"#k_EControllerElementTypeButtonStart\x10\f\x12-\n" +
	")k_EControllerElementTypeButtonTriggerLeft\x10\r\x12.\n" +
	"*k_EControllerElementTypeButtonTriggerRight\x10\x0e\x12,\n" +
	"(k_EControllerElementTypeButtonBumperLeft\x10\x0f\x12-\n" +
	")k_EControllerElementTypeButtonBumperRight\x10\x10\x12(\n" +
	"$k_EControllerElementTypeButtonMacro0\x10\x11\x12(\n" +
	"$k_EControllerElementTypeButtonMacro1\x10\x12\x12(\n" +
	"$k_EControllerElementTypeButtonMacro2\x10\x13\x12(\n" +
	"$k_EControllerElementTypeButtonMacro3\x10\x14\x12(\n" +
	"$k_EControllerElementTypeButtonMacro4\x10\x15\x12(\n" +
	"$k_EControllerElementTypeButtonMacro5\x10\x16\x12(\n" +
	"$k_EControllerElementTypeButtonMacro6\x10\x17\x12(\n" +
	"$k_EControllerElementTypeButtonMacro7\x10\x18\x12*\n" +
	"&k_EControllerElementTypeTrackpadCenter\x10\x19\x12(\n" +
	"$k_EControllerElementTypeTrackpadLeft\x10\x1a\x12)\n" +
	"%k_EControllerElementTypeTrackpadRight\x10\x1b\x12$\n" +
	" k_EControllerElementTypeKeyboard\x10\x1c\x12+\n" +
	"'k_EControllerElementTypeMagnifyingGlass\x10\x1d\x12.\n" +
	"*k_EControllerElementTypeButtonMacro1Finger\x10\x1e\x12.\n" +
	"*k_EControllerElementTypeButtonMacro2Finger\x10\x1f\x12'\n" +
	"#k_EControllerElementTypeRecordInput\x10 \x12)\n" +
	"%k_EControllerElementTypePlaybackInput\x10!\x12!\n" +
	"\x1dk_EControllerElementTypePaste\x10\"\x12\x1f\n" +
	"\x1bk_EControllerElementTypeMax\x10#"

var (
	file_steammessages_virtualcontroller_proto_rawDescOnce sync.Once
	file_steammessages_virtualcontroller_proto_rawDescData []byte
)

func file_steammessages_virtualcontroller_proto_rawDescGZIP() []byte {
	file_steammessages_virtualcontroller_proto_rawDescOnce.Do(func() {
		file_steammessages_virtualcontroller_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_steammessages_virtualcontroller_proto_rawDesc), len(file_steammessages_virtualcontroller_proto_rawDesc)))
	})
	return file_steammessages_virtualcontroller_proto_rawDescData
}

var file_steammessages_virtualcontroller_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_steammessages_virtualcontroller_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_steammessages_virtualcontroller_proto_goTypes = []any{
	(EInputMode)(0),                            // 0: EInputMode
	(EMouseMode)(0),                            // 1: EMouseMode
	(EControllerElementType)(0),                // 2: EControllerElementType
	(*CVirtualControllerElement)(nil),          // 3: CVirtualControllerElement
	(*CVirtualControllerColor)(nil),            // 4: CVirtualControllerColor
	(*CVirtualControllerLayout)(nil),           // 5: CVirtualControllerLayout
	(*CVirtualControllerLayouts)(nil),          // 6: CVirtualControllerLayouts
	(*CVirtualControllerConfig)(nil),           // 7: CVirtualControllerConfig
	(*CVirtualControllerLayoutPackage)(nil),    // 8: CVirtualControllerLayoutPackage
	(*CVirtualControllerGlobalConfig)(nil),     // 9: CVirtualControllerGlobalConfig
	(*CVirtualControllerConfig_Control)(nil),   // 10: CVirtualControllerConfig.Control
	(*CVirtualControllerConfig_ActionSet)(nil), // 11: CVirtualControllerConfig.ActionSet
}
var file_steammessages_virtualcontroller_proto_depIdxs = []int32{
	2,  // 0: CVirtualControllerElement.type:type_name -> EControllerElementType
	3,  // 1: CVirtualControllerLayout.elements:type_name -> CVirtualControllerElement
	4,  // 2: CVirtualControllerLayout.color:type_name -> CVirtualControllerColor
	5,  // 3: CVirtualControllerLayouts.layouts:type_name -> CVirtualControllerLayout
	0,  // 4: CVirtualControllerLayouts.input_mode:type_name -> EInputMode
	1,  // 5: CVirtualControllerLayouts.mouse_mode:type_name -> EMouseMode
	11, // 6: CVirtualControllerConfig.actionsets:type_name -> CVirtualControllerConfig.ActionSet
	1,  // 7: CVirtualControllerConfig.default_mouse_mode:type_name -> EMouseMode
	7,  // 8: CVirtualControllerLayoutPackage.config:type_name -> CVirtualControllerConfig
	6,  // 9: CVirtualControllerLayoutPackage.layouts:type_name -> CVirtualControllerLayouts
	10, // 10: CVirtualControllerConfig.ActionSet.controls:type_name -> CVirtualControllerConfig.Control
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_steammessages_virtualcontroller_proto_init() }
func file_steammessages_virtualcontroller_proto_init() {
	if File_steammessages_virtualcontroller_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_steammessages_virtualcontroller_proto_rawDesc), len(file_steammessages_virtualcontroller_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_steammessages_virtualcontroller_proto_goTypes,
		DependencyIndexes: file_steammessages_virtualcontroller_proto_depIdxs,
		EnumInfos:         file_steammessages_virtualcontroller_proto_enumTypes,
		MessageInfos:      file_steammessages_virtualcontroller_proto_msgTypes,
	}.Build()
	File_steammessages_virtualcontroller_proto = out.File
	file_steammessages_virtualcontroller_proto_goTypes = nil
	file_steammessages_virtualcontroller_proto_depIdxs = nil
}
