// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v6.32.0
// source: steammessages_contentsystem.steamclient.proto

package steampb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EAppContentDetectionType int32

const (
	EAppContentDetectionType_k_EAppContentDetectionType_None       EAppContentDetectionType = 0
	EAppContentDetectionType_k_EAppContentDetectionType_AntiCheat  EAppContentDetectionType = 1
	EAppContentDetectionType_k_EAppContentDetectionType_GameEngine EAppContentDetectionType = 2
)

// Enum value maps for EAppContentDetectionType.
var (
	EAppContentDetectionType_name = map[int32]string{
		0: "k_EAppContentDetectionType_None",
		1: "k_EAppContentDetectionType_AntiCheat",
		2: "k_EAppContentDetectionType_GameEngine",
	}
	EAppContentDetectionType_value = map[string]int32{
		"k_EAppContentDetectionType_None":       0,
		"k_EAppContentDetectionType_AntiCheat":  1,
		"k_EAppContentDetectionType_GameEngine": 2,
	}
)

func (x EAppContentDetectionType) Enum() *EAppContentDetectionType {
	p := new(EAppContentDetectionType)
	*p = x
	return p
}

func (x EAppContentDetectionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EAppContentDetectionType) Descriptor() protoreflect.EnumDescriptor {
	return file_steammessages_contentsystem_steamclient_proto_enumTypes[0].Descriptor()
}

func (EAppContentDetectionType) Type() protoreflect.EnumType {
	return &file_steammessages_contentsystem_steamclient_proto_enumTypes[0]
}

func (x EAppContentDetectionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EAppContentDetectionType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EAppContentDetectionType(num)
	return nil
}

// Deprecated: Use EAppContentDetectionType.Descriptor instead.
func (EAppContentDetectionType) EnumDescriptor() ([]byte, []int) {
	return file_steammessages_contentsystem_steamclient_proto_rawDescGZIP(), []int{0}
}

type EAppAntiCheatType int32

const (
	EAppAntiCheatType_k_EAppAntiCheatTypeNone            EAppAntiCheatType = 0
	EAppAntiCheatType_k_EAppAntiCheatTypeEasyAC          EAppAntiCheatType = 1
	EAppAntiCheatType_k_EAppAntiCheatTypeDenuvo          EAppAntiCheatType = 2
	EAppAntiCheatType_k_EAppAntiCheatTypeBattlEye        EAppAntiCheatType = 3
	EAppAntiCheatType_k_EAppAntiCheatTypeXignCode        EAppAntiCheatType = 4
	EAppAntiCheatType_k_EAppAntiCheatTypePunkBuster      EAppAntiCheatType = 5
	EAppAntiCheatType_k_EAppAntiCheatTypeVAC             EAppAntiCheatType = 6
	EAppAntiCheatType_k_EAppAntiCheatTypeGameGuard       EAppAntiCheatType = 7
	EAppAntiCheatType_k_EAppAntiCheatTypeHackShield      EAppAntiCheatType = 8
	EAppAntiCheatType_k_EAppAntiCheatTypeAntiCheatExpert EAppAntiCheatType = 9
	EAppAntiCheatType_k_EAppAntiCheatTypeOther           EAppAntiCheatType = 10
)

// Enum value maps for EAppAntiCheatType.
var (
	EAppAntiCheatType_name = map[int32]string{
		0:  "k_EAppAntiCheatTypeNone",
		1:  "k_EAppAntiCheatTypeEasyAC",
		2:  "k_EAppAntiCheatTypeDenuvo",
		3:  "k_EAppAntiCheatTypeBattlEye",
		4:  "k_EAppAntiCheatTypeXignCode",
		5:  "k_EAppAntiCheatTypePunkBuster",
		6:  "k_EAppAntiCheatTypeVAC",
		7:  "k_EAppAntiCheatTypeGameGuard",
		8:  "k_EAppAntiCheatTypeHackShield",
		9:  "k_EAppAntiCheatTypeAntiCheatExpert",
		10: "k_EAppAntiCheatTypeOther",
	}
	EAppAntiCheatType_value = map[string]int32{
		"k_EAppAntiCheatTypeNone":            0,
		"k_EAppAntiCheatTypeEasyAC":          1,
		"k_EAppAntiCheatTypeDenuvo":          2,
		"k_EAppAntiCheatTypeBattlEye":        3,
		"k_EAppAntiCheatTypeXignCode":        4,
		"k_EAppAntiCheatTypePunkBuster":      5,
		"k_EAppAntiCheatTypeVAC":             6,
		"k_EAppAntiCheatTypeGameGuard":       7,
		"k_EAppAntiCheatTypeHackShield":      8,
		"k_EAppAntiCheatTypeAntiCheatExpert": 9,
		"k_EAppAntiCheatTypeOther":           10,
	}
)

func (x EAppAntiCheatType) Enum() *EAppAntiCheatType {
	p := new(EAppAntiCheatType)
	*p = x
	return p
}

func (x EAppAntiCheatType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EAppAntiCheatType) Descriptor() protoreflect.EnumDescriptor {
	return file_steammessages_contentsystem_steamclient_proto_enumTypes[1].Descriptor()
}

func (EAppAntiCheatType) Type() protoreflect.EnumType {
	return &file_steammessages_contentsystem_steamclient_proto_enumTypes[1]
}

func (x EAppAntiCheatType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EAppAntiCheatType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EAppAntiCheatType(num)
	return nil
}

// Deprecated: Use EAppAntiCheatType.Descriptor instead.
func (EAppAntiCheatType) EnumDescriptor() ([]byte, []int) {
	return file_steammessages_contentsystem_steamclient_proto_rawDescGZIP(), []int{1}
}

type EAppGameEngineType int32

const (
	EAppGameEngineType_k_EAppGameEngineTypeNone   EAppGameEngineType = 0
	EAppGameEngineType_k_EAppGameEngineTypeUnreal EAppGameEngineType = 1
)

// Enum value maps for EAppGameEngineType.
var (
	EAppGameEngineType_name = map[int32]string{
		0: "k_EAppGameEngineTypeNone",
		1: "k_EAppGameEngineTypeUnreal",
	}
	EAppGameEngineType_value = map[string]int32{
		"k_EAppGameEngineTypeNone":   0,
		"k_EAppGameEngineTypeUnreal": 1,
	}
)

func (x EAppGameEngineType) Enum() *EAppGameEngineType {
	p := new(EAppGameEngineType)
	*p = x
	return p
}

func (x EAppGameEngineType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EAppGameEngineType) Descriptor() protoreflect.EnumDescriptor {
	return file_steammessages_contentsystem_steamclient_proto_enumTypes[2].Descriptor()
}

func (EAppGameEngineType) Type() protoreflect.EnumType {
	return &file_steammessages_contentsystem_steamclient_proto_enumTypes[2]
}

func (x EAppGameEngineType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EAppGameEngineType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EAppGameEngineType(num)
	return nil
}

// Deprecated: Use EAppGameEngineType.Descriptor instead.
func (EAppGameEngineType) EnumDescriptor() ([]byte, []int) {
	return file_steammessages_contentsystem_steamclient_proto_rawDescGZIP(), []int{2}
}

type CContentServerDirectory_ConnectedSteamPipeServerInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          *string                `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	SourceId      *int32                 `protobuf:"varint,2,opt,name=source_id,json=sourceId" json:"source_id,omitempty"`
	Hostname      *string                `protobuf:"bytes,3,opt,name=hostname" json:"hostname,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CContentServerDirectory_ConnectedSteamPipeServerInfo) Reset() {
	*x = CContentServerDirectory_ConnectedSteamPipeServerInfo{}
	mi := &file_steammessages_contentsystem_steamclient_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CContentServerDirectory_ConnectedSteamPipeServerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CContentServerDirectory_ConnectedSteamPipeServerInfo) ProtoMessage() {}

func (x *CContentServerDirectory_ConnectedSteamPipeServerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_contentsystem_steamclient_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CContentServerDirectory_ConnectedSteamPipeServerInfo.ProtoReflect.Descriptor instead.
func (*CContentServerDirectory_ConnectedSteamPipeServerInfo) Descriptor() ([]byte, []int) {
	return file_steammessages_contentsystem_steamclient_proto_rawDescGZIP(), []int{0}
}

func (x *CContentServerDirectory_ConnectedSteamPipeServerInfo) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *CContentServerDirectory_ConnectedSteamPipeServerInfo) GetSourceId() int32 {
	if x != nil && x.SourceId != nil {
		return *x.SourceId
	}
	return 0
}

func (x *CContentServerDirectory_ConnectedSteamPipeServerInfo) GetHostname() string {
	if x != nil && x.Hostname != nil {
		return *x.Hostname
	}
	return ""
}

type CContentServerDirectory_GetServersForSteamPipe_Request struct {
	state              protoimpl.MessageState                                  `protogen:"open.v1"`
	CellId             *uint32                                                 `protobuf:"varint,1,opt,name=cell_id,json=cellId" json:"cell_id,omitempty"`
	MaxServers         *uint32                                                 `protobuf:"varint,2,opt,name=max_servers,json=maxServers,def=20" json:"max_servers,omitempty"`
	IpOverride         *string                                                 `protobuf:"bytes,3,opt,name=ip_override,json=ipOverride" json:"ip_override,omitempty"`
	LauncherType       *int32                                                  `protobuf:"varint,4,opt,name=launcher_type,json=launcherType,def=0" json:"launcher_type,omitempty"`
	Ipv6Public         *string                                                 `protobuf:"bytes,5,opt,name=ipv6_public,json=ipv6Public" json:"ipv6_public,omitempty"`
	CurrentConnections []*CContentServerDirectory_ConnectedSteamPipeServerInfo `protobuf:"bytes,6,rep,name=current_connections,json=currentConnections" json:"current_connections,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

// Default values for CContentServerDirectory_GetServersForSteamPipe_Request fields.
const (
	Default_CContentServerDirectory_GetServersForSteamPipe_Request_MaxServers   = uint32(20)
	Default_CContentServerDirectory_GetServersForSteamPipe_Request_LauncherType = int32(0)
)

func (x *CContentServerDirectory_GetServersForSteamPipe_Request) Reset() {
	*x = CContentServerDirectory_GetServersForSteamPipe_Request{}
	mi := &file_steammessages_contentsystem_steamclient_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CContentServerDirectory_GetServersForSteamPipe_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CContentServerDirectory_GetServersForSteamPipe_Request) ProtoMessage() {}

func (x *CContentServerDirectory_GetServersForSteamPipe_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_contentsystem_steamclient_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CContentServerDirectory_GetServersForSteamPipe_Request.ProtoReflect.Descriptor instead.
func (*CContentServerDirectory_GetServersForSteamPipe_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_contentsystem_steamclient_proto_rawDescGZIP(), []int{1}
}

func (x *CContentServerDirectory_GetServersForSteamPipe_Request) GetCellId() uint32 {
	if x != nil && x.CellId != nil {
		return *x.CellId
	}
	return 0
}

func (x *CContentServerDirectory_GetServersForSteamPipe_Request) GetMaxServers() uint32 {
	if x != nil && x.MaxServers != nil {
		return *x.MaxServers
	}
	return Default_CContentServerDirectory_GetServersForSteamPipe_Request_MaxServers
}

func (x *CContentServerDirectory_GetServersForSteamPipe_Request) GetIpOverride() string {
	if x != nil && x.IpOverride != nil {
		return *x.IpOverride
	}
	return ""
}

func (x *CContentServerDirectory_GetServersForSteamPipe_Request) GetLauncherType() int32 {
	if x != nil && x.LauncherType != nil {
		return *x.LauncherType
	}
	return Default_CContentServerDirectory_GetServersForSteamPipe_Request_LauncherType
}

func (x *CContentServerDirectory_GetServersForSteamPipe_Request) GetIpv6Public() string {
	if x != nil && x.Ipv6Public != nil {
		return *x.Ipv6Public
	}
	return ""
}

func (x *CContentServerDirectory_GetServersForSteamPipe_Request) GetCurrentConnections() []*CContentServerDirectory_ConnectedSteamPipeServerInfo {
	if x != nil {
		return x.CurrentConnections
	}
	return nil
}

type CContentServerDirectory_ServerInfo struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	Type                     *string                `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	SourceId                 *int32                 `protobuf:"varint,2,opt,name=source_id,json=sourceId" json:"source_id,omitempty"`
	CellId                   *int32                 `protobuf:"varint,3,opt,name=cell_id,json=cellId" json:"cell_id,omitempty"`
	Load                     *int32                 `protobuf:"varint,4,opt,name=load" json:"load,omitempty"`
	WeightedLoad             *float32               `protobuf:"fixed32,5,opt,name=weighted_load,json=weightedLoad" json:"weighted_load,omitempty"`
	NumEntriesInClientList   *int32                 `protobuf:"varint,6,opt,name=num_entries_in_client_list,json=numEntriesInClientList" json:"num_entries_in_client_list,omitempty"`
	SteamChinaOnly           *bool                  `protobuf:"varint,7,opt,name=steam_china_only,json=steamChinaOnly" json:"steam_china_only,omitempty"`
	Host                     *string                `protobuf:"bytes,8,opt,name=host" json:"host,omitempty"`
	Vhost                    *string                `protobuf:"bytes,9,opt,name=vhost" json:"vhost,omitempty"`
	UseAsProxy               *bool                  `protobuf:"varint,10,opt,name=use_as_proxy,json=useAsProxy" json:"use_as_proxy,omitempty"`
	ProxyRequestPathTemplate *string                `protobuf:"bytes,11,opt,name=proxy_request_path_template,json=proxyRequestPathTemplate" json:"proxy_request_path_template,omitempty"`
	HttpsSupport             *string                `protobuf:"bytes,12,opt,name=https_support,json=httpsSupport" json:"https_support,omitempty"`
	AllowedAppIds            []uint32               `protobuf:"varint,13,rep,name=allowed_app_ids,json=allowedAppIds" json:"allowed_app_ids,omitempty"`
	PriorityClass            *uint32                `protobuf:"varint,15,opt,name=priority_class,json=priorityClass" json:"priority_class,omitempty"`
	BypassProxiesOfType      []string               `protobuf:"bytes,16,rep,name=bypass_proxies_of_type,json=bypassProxiesOfType" json:"bypass_proxies_of_type,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *CContentServerDirectory_ServerInfo) Reset() {
	*x = CContentServerDirectory_ServerInfo{}
	mi := &file_steammessages_contentsystem_steamclient_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CContentServerDirectory_ServerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CContentServerDirectory_ServerInfo) ProtoMessage() {}

func (x *CContentServerDirectory_ServerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_contentsystem_steamclient_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CContentServerDirectory_ServerInfo.ProtoReflect.Descriptor instead.
func (*CContentServerDirectory_ServerInfo) Descriptor() ([]byte, []int) {
	return file_steammessages_contentsystem_steamclient_proto_rawDescGZIP(), []int{2}
}

func (x *CContentServerDirectory_ServerInfo) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *CContentServerDirectory_ServerInfo) GetSourceId() int32 {
	if x != nil && x.SourceId != nil {
		return *x.SourceId
	}
	return 0
}

func (x *CContentServerDirectory_ServerInfo) GetCellId() int32 {
	if x != nil && x.CellId != nil {
		return *x.CellId
	}
	return 0
}

func (x *CContentServerDirectory_ServerInfo) GetLoad() int32 {
	if x != nil && x.Load != nil {
		return *x.Load
	}
	return 0
}

func (x *CContentServerDirectory_ServerInfo) GetWeightedLoad() float32 {
	if x != nil && x.WeightedLoad != nil {
		return *x.WeightedLoad
	}
	return 0
}

func (x *CContentServerDirectory_ServerInfo) GetNumEntriesInClientList() int32 {
	if x != nil && x.NumEntriesInClientList != nil {
		return *x.NumEntriesInClientList
	}
	return 0
}

func (x *CContentServerDirectory_ServerInfo) GetSteamChinaOnly() bool {
	if x != nil && x.SteamChinaOnly != nil {
		return *x.SteamChinaOnly
	}
	return false
}

func (x *CContentServerDirectory_ServerInfo) GetHost() string {
	if x != nil && x.Host != nil {
		return *x.Host
	}
	return ""
}

func (x *CContentServerDirectory_ServerInfo) GetVhost() string {
	if x != nil && x.Vhost != nil {
		return *x.Vhost
	}
	return ""
}

func (x *CContentServerDirectory_ServerInfo) GetUseAsProxy() bool {
	if x != nil && x.UseAsProxy != nil {
		return *x.UseAsProxy
	}
	return false
}

func (x *CContentServerDirectory_ServerInfo) GetProxyRequestPathTemplate() string {
	if x != nil && x.ProxyRequestPathTemplate != nil {
		return *x.ProxyRequestPathTemplate
	}
	return ""
}

func (x *CContentServerDirectory_ServerInfo) GetHttpsSupport() string {
	if x != nil && x.HttpsSupport != nil {
		return *x.HttpsSupport
	}
	return ""
}

func (x *CContentServerDirectory_ServerInfo) GetAllowedAppIds() []uint32 {
	if x != nil {
		return x.AllowedAppIds
	}
	return nil
}

func (x *CContentServerDirectory_ServerInfo) GetPriorityClass() uint32 {
	if x != nil && x.PriorityClass != nil {
		return *x.PriorityClass
	}
	return 0
}

func (x *CContentServerDirectory_ServerInfo) GetBypassProxiesOfType() []string {
	if x != nil {
		return x.BypassProxiesOfType
	}
	return nil
}

type CContentServerDirectory_GetServersForSteamPipe_Response struct {
	state         protoimpl.MessageState                `protogen:"open.v1"`
	Servers       []*CContentServerDirectory_ServerInfo `protobuf:"bytes,1,rep,name=servers" json:"servers,omitempty"`
	NoChange      *bool                                 `protobuf:"varint,2,opt,name=no_change,json=noChange" json:"no_change,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CContentServerDirectory_GetServersForSteamPipe_Response) Reset() {
	*x = CContentServerDirectory_GetServersForSteamPipe_Response{}
	mi := &file_steammessages_contentsystem_steamclient_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CContentServerDirectory_GetServersForSteamPipe_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CContentServerDirectory_GetServersForSteamPipe_Response) ProtoMessage() {}

func (x *CContentServerDirectory_GetServersForSteamPipe_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_contentsystem_steamclient_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CContentServerDirectory_GetServersForSteamPipe_Response.ProtoReflect.Descriptor instead.
func (*CContentServerDirectory_GetServersForSteamPipe_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_contentsystem_steamclient_proto_rawDescGZIP(), []int{3}
}

func (x *CContentServerDirectory_GetServersForSteamPipe_Response) GetServers() []*CContentServerDirectory_ServerInfo {
	if x != nil {
		return x.Servers
	}
	return nil
}

func (x *CContentServerDirectory_GetServersForSteamPipe_Response) GetNoChange() bool {
	if x != nil && x.NoChange != nil {
		return *x.NoChange
	}
	return false
}

type CContentServerDirectory_GetDepotPatchInfo_Request struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Appid            *uint32                `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	Depotid          *uint32                `protobuf:"varint,2,opt,name=depotid" json:"depotid,omitempty"`
	SourceManifestid *uint64                `protobuf:"varint,3,opt,name=source_manifestid,json=sourceManifestid" json:"source_manifestid,omitempty"`
	TargetManifestid *uint64                `protobuf:"varint,4,opt,name=target_manifestid,json=targetManifestid" json:"target_manifestid,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CContentServerDirectory_GetDepotPatchInfo_Request) Reset() {
	*x = CContentServerDirectory_GetDepotPatchInfo_Request{}
	mi := &file_steammessages_contentsystem_steamclient_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CContentServerDirectory_GetDepotPatchInfo_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CContentServerDirectory_GetDepotPatchInfo_Request) ProtoMessage() {}

func (x *CContentServerDirectory_GetDepotPatchInfo_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_contentsystem_steamclient_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CContentServerDirectory_GetDepotPatchInfo_Request.ProtoReflect.Descriptor instead.
func (*CContentServerDirectory_GetDepotPatchInfo_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_contentsystem_steamclient_proto_rawDescGZIP(), []int{4}
}

func (x *CContentServerDirectory_GetDepotPatchInfo_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CContentServerDirectory_GetDepotPatchInfo_Request) GetDepotid() uint32 {
	if x != nil && x.Depotid != nil {
		return *x.Depotid
	}
	return 0
}

func (x *CContentServerDirectory_GetDepotPatchInfo_Request) GetSourceManifestid() uint64 {
	if x != nil && x.SourceManifestid != nil {
		return *x.SourceManifestid
	}
	return 0
}

func (x *CContentServerDirectory_GetDepotPatchInfo_Request) GetTargetManifestid() uint64 {
	if x != nil && x.TargetManifestid != nil {
		return *x.TargetManifestid
	}
	return 0
}

type CContentServerDirectory_GetDepotPatchInfo_Response struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	IsAvailable       *bool                  `protobuf:"varint,1,opt,name=is_available,json=isAvailable" json:"is_available,omitempty"`
	PatchSize         *uint64                `protobuf:"varint,2,opt,name=patch_size,json=patchSize" json:"patch_size,omitempty"`
	PatchedChunksSize *uint64                `protobuf:"varint,3,opt,name=patched_chunks_size,json=patchedChunksSize" json:"patched_chunks_size,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *CContentServerDirectory_GetDepotPatchInfo_Response) Reset() {
	*x = CContentServerDirectory_GetDepotPatchInfo_Response{}
	mi := &file_steammessages_contentsystem_steamclient_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CContentServerDirectory_GetDepotPatchInfo_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CContentServerDirectory_GetDepotPatchInfo_Response) ProtoMessage() {}

func (x *CContentServerDirectory_GetDepotPatchInfo_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_contentsystem_steamclient_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CContentServerDirectory_GetDepotPatchInfo_Response.ProtoReflect.Descriptor instead.
func (*CContentServerDirectory_GetDepotPatchInfo_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_contentsystem_steamclient_proto_rawDescGZIP(), []int{5}
}

func (x *CContentServerDirectory_GetDepotPatchInfo_Response) GetIsAvailable() bool {
	if x != nil && x.IsAvailable != nil {
		return *x.IsAvailable
	}
	return false
}

func (x *CContentServerDirectory_GetDepotPatchInfo_Response) GetPatchSize() uint64 {
	if x != nil && x.PatchSize != nil {
		return *x.PatchSize
	}
	return 0
}

func (x *CContentServerDirectory_GetDepotPatchInfo_Response) GetPatchedChunksSize() uint64 {
	if x != nil && x.PatchedChunksSize != nil {
		return *x.PatchedChunksSize
	}
	return 0
}

type CContentServerDirectory_GetClientUpdateHosts_Request struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	CachedSignature *string                `protobuf:"bytes,1,opt,name=cached_signature,json=cachedSignature" json:"cached_signature,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CContentServerDirectory_GetClientUpdateHosts_Request) Reset() {
	*x = CContentServerDirectory_GetClientUpdateHosts_Request{}
	mi := &file_steammessages_contentsystem_steamclient_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CContentServerDirectory_GetClientUpdateHosts_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CContentServerDirectory_GetClientUpdateHosts_Request) ProtoMessage() {}

func (x *CContentServerDirectory_GetClientUpdateHosts_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_contentsystem_steamclient_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CContentServerDirectory_GetClientUpdateHosts_Request.ProtoReflect.Descriptor instead.
func (*CContentServerDirectory_GetClientUpdateHosts_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_contentsystem_steamclient_proto_rawDescGZIP(), []int{6}
}

func (x *CContentServerDirectory_GetClientUpdateHosts_Request) GetCachedSignature() string {
	if x != nil && x.CachedSignature != nil {
		return *x.CachedSignature
	}
	return ""
}

type CContentServerDirectory_GetClientUpdateHosts_Response struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	HostsKv        *string                `protobuf:"bytes,1,opt,name=hosts_kv,json=hostsKv" json:"hosts_kv,omitempty"`
	ValidUntilTime *uint64                `protobuf:"varint,2,opt,name=valid_until_time,json=validUntilTime" json:"valid_until_time,omitempty"`
	IpCountry      *string                `protobuf:"bytes,3,opt,name=ip_country,json=ipCountry" json:"ip_country,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CContentServerDirectory_GetClientUpdateHosts_Response) Reset() {
	*x = CContentServerDirectory_GetClientUpdateHosts_Response{}
	mi := &file_steammessages_contentsystem_steamclient_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CContentServerDirectory_GetClientUpdateHosts_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CContentServerDirectory_GetClientUpdateHosts_Response) ProtoMessage() {}

func (x *CContentServerDirectory_GetClientUpdateHosts_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_contentsystem_steamclient_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CContentServerDirectory_GetClientUpdateHosts_Response.ProtoReflect.Descriptor instead.
func (*CContentServerDirectory_GetClientUpdateHosts_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_contentsystem_steamclient_proto_rawDescGZIP(), []int{7}
}

func (x *CContentServerDirectory_GetClientUpdateHosts_Response) GetHostsKv() string {
	if x != nil && x.HostsKv != nil {
		return *x.HostsKv
	}
	return ""
}

func (x *CContentServerDirectory_GetClientUpdateHosts_Response) GetValidUntilTime() uint64 {
	if x != nil && x.ValidUntilTime != nil {
		return *x.ValidUntilTime
	}
	return 0
}

func (x *CContentServerDirectory_GetClientUpdateHosts_Response) GetIpCountry() string {
	if x != nil && x.IpCountry != nil {
		return *x.IpCountry
	}
	return ""
}

type CContentServerDirectory_GetManifestRequestCode_Request struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	AppId              *uint32                `protobuf:"varint,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	DepotId            *uint32                `protobuf:"varint,2,opt,name=depot_id,json=depotId" json:"depot_id,omitempty"`
	ManifestId         *uint64                `protobuf:"varint,3,opt,name=manifest_id,json=manifestId" json:"manifest_id,omitempty"`
	AppBranch          *string                `protobuf:"bytes,4,opt,name=app_branch,json=appBranch" json:"app_branch,omitempty"`
	BranchPasswordHash *string                `protobuf:"bytes,5,opt,name=branch_password_hash,json=branchPasswordHash" json:"branch_password_hash,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *CContentServerDirectory_GetManifestRequestCode_Request) Reset() {
	*x = CContentServerDirectory_GetManifestRequestCode_Request{}
	mi := &file_steammessages_contentsystem_steamclient_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CContentServerDirectory_GetManifestRequestCode_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CContentServerDirectory_GetManifestRequestCode_Request) ProtoMessage() {}

func (x *CContentServerDirectory_GetManifestRequestCode_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_contentsystem_steamclient_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CContentServerDirectory_GetManifestRequestCode_Request.ProtoReflect.Descriptor instead.
func (*CContentServerDirectory_GetManifestRequestCode_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_contentsystem_steamclient_proto_rawDescGZIP(), []int{8}
}

func (x *CContentServerDirectory_GetManifestRequestCode_Request) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CContentServerDirectory_GetManifestRequestCode_Request) GetDepotId() uint32 {
	if x != nil && x.DepotId != nil {
		return *x.DepotId
	}
	return 0
}

func (x *CContentServerDirectory_GetManifestRequestCode_Request) GetManifestId() uint64 {
	if x != nil && x.ManifestId != nil {
		return *x.ManifestId
	}
	return 0
}

func (x *CContentServerDirectory_GetManifestRequestCode_Request) GetAppBranch() string {
	if x != nil && x.AppBranch != nil {
		return *x.AppBranch
	}
	return ""
}

func (x *CContentServerDirectory_GetManifestRequestCode_Request) GetBranchPasswordHash() string {
	if x != nil && x.BranchPasswordHash != nil {
		return *x.BranchPasswordHash
	}
	return ""
}

type CContentServerDirectory_GetManifestRequestCode_Response struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	ManifestRequestCode *uint64                `protobuf:"varint,1,opt,name=manifest_request_code,json=manifestRequestCode" json:"manifest_request_code,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *CContentServerDirectory_GetManifestRequestCode_Response) Reset() {
	*x = CContentServerDirectory_GetManifestRequestCode_Response{}
	mi := &file_steammessages_contentsystem_steamclient_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CContentServerDirectory_GetManifestRequestCode_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CContentServerDirectory_GetManifestRequestCode_Response) ProtoMessage() {}

func (x *CContentServerDirectory_GetManifestRequestCode_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_contentsystem_steamclient_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CContentServerDirectory_GetManifestRequestCode_Response.ProtoReflect.Descriptor instead.
func (*CContentServerDirectory_GetManifestRequestCode_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_contentsystem_steamclient_proto_rawDescGZIP(), []int{9}
}

func (x *CContentServerDirectory_GetManifestRequestCode_Response) GetManifestRequestCode() uint64 {
	if x != nil && x.ManifestRequestCode != nil {
		return *x.ManifestRequestCode
	}
	return 0
}

type CContentServerDirectory_GetCDNAuthToken_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DepotId       *uint32                `protobuf:"varint,1,opt,name=depot_id,json=depotId" json:"depot_id,omitempty"`
	HostName      *string                `protobuf:"bytes,2,opt,name=host_name,json=hostName" json:"host_name,omitempty"`
	AppId         *uint32                `protobuf:"varint,3,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CContentServerDirectory_GetCDNAuthToken_Request) Reset() {
	*x = CContentServerDirectory_GetCDNAuthToken_Request{}
	mi := &file_steammessages_contentsystem_steamclient_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CContentServerDirectory_GetCDNAuthToken_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CContentServerDirectory_GetCDNAuthToken_Request) ProtoMessage() {}

func (x *CContentServerDirectory_GetCDNAuthToken_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_contentsystem_steamclient_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CContentServerDirectory_GetCDNAuthToken_Request.ProtoReflect.Descriptor instead.
func (*CContentServerDirectory_GetCDNAuthToken_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_contentsystem_steamclient_proto_rawDescGZIP(), []int{10}
}

func (x *CContentServerDirectory_GetCDNAuthToken_Request) GetDepotId() uint32 {
	if x != nil && x.DepotId != nil {
		return *x.DepotId
	}
	return 0
}

func (x *CContentServerDirectory_GetCDNAuthToken_Request) GetHostName() string {
	if x != nil && x.HostName != nil {
		return *x.HostName
	}
	return ""
}

func (x *CContentServerDirectory_GetCDNAuthToken_Request) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

type CContentServerDirectory_GetCDNAuthToken_Response struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Token          *string                `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
	ExpirationTime *uint32                `protobuf:"varint,2,opt,name=expiration_time,json=expirationTime" json:"expiration_time,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CContentServerDirectory_GetCDNAuthToken_Response) Reset() {
	*x = CContentServerDirectory_GetCDNAuthToken_Response{}
	mi := &file_steammessages_contentsystem_steamclient_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CContentServerDirectory_GetCDNAuthToken_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CContentServerDirectory_GetCDNAuthToken_Response) ProtoMessage() {}

func (x *CContentServerDirectory_GetCDNAuthToken_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_contentsystem_steamclient_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CContentServerDirectory_GetCDNAuthToken_Response.ProtoReflect.Descriptor instead.
func (*CContentServerDirectory_GetCDNAuthToken_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_contentsystem_steamclient_proto_rawDescGZIP(), []int{11}
}

func (x *CContentServerDirectory_GetCDNAuthToken_Response) GetToken() string {
	if x != nil && x.Token != nil {
		return *x.Token
	}
	return ""
}

func (x *CContentServerDirectory_GetCDNAuthToken_Response) GetExpirationTime() uint32 {
	if x != nil && x.ExpirationTime != nil {
		return *x.ExpirationTime
	}
	return 0
}

type CContentServerDirectory_RequestPeerContentServer_Request struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	RemoteClientId       *uint64                `protobuf:"varint,1,opt,name=remote_client_id,json=remoteClientId" json:"remote_client_id,omitempty"`
	Steamid              *uint64                `protobuf:"varint,2,opt,name=steamid" json:"steamid,omitempty"`
	ServerRemoteClientId *uint64                `protobuf:"varint,3,opt,name=server_remote_client_id,json=serverRemoteClientId" json:"server_remote_client_id,omitempty"`
	AppId                *uint32                `protobuf:"varint,4,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	CurrentBuildId       *uint32                `protobuf:"varint,5,opt,name=current_build_id,json=currentBuildId" json:"current_build_id,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *CContentServerDirectory_RequestPeerContentServer_Request) Reset() {
	*x = CContentServerDirectory_RequestPeerContentServer_Request{}
	mi := &file_steammessages_contentsystem_steamclient_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CContentServerDirectory_RequestPeerContentServer_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CContentServerDirectory_RequestPeerContentServer_Request) ProtoMessage() {}

func (x *CContentServerDirectory_RequestPeerContentServer_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_contentsystem_steamclient_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CContentServerDirectory_RequestPeerContentServer_Request.ProtoReflect.Descriptor instead.
func (*CContentServerDirectory_RequestPeerContentServer_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_contentsystem_steamclient_proto_rawDescGZIP(), []int{12}
}

func (x *CContentServerDirectory_RequestPeerContentServer_Request) GetRemoteClientId() uint64 {
	if x != nil && x.RemoteClientId != nil {
		return *x.RemoteClientId
	}
	return 0
}

func (x *CContentServerDirectory_RequestPeerContentServer_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CContentServerDirectory_RequestPeerContentServer_Request) GetServerRemoteClientId() uint64 {
	if x != nil && x.ServerRemoteClientId != nil {
		return *x.ServerRemoteClientId
	}
	return 0
}

func (x *CContentServerDirectory_RequestPeerContentServer_Request) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CContentServerDirectory_RequestPeerContentServer_Request) GetCurrentBuildId() uint32 {
	if x != nil && x.CurrentBuildId != nil {
		return *x.CurrentBuildId
	}
	return 0
}

type CContentServerDirectory_RequestPeerContentServer_Response struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	ServerPort      *uint32                `protobuf:"varint,1,opt,name=server_port,json=serverPort" json:"server_port,omitempty"`
	InstalledDepots []uint32               `protobuf:"varint,2,rep,name=installed_depots,json=installedDepots" json:"installed_depots,omitempty"`
	AccessToken     *uint64                `protobuf:"varint,3,opt,name=access_token,json=accessToken" json:"access_token,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CContentServerDirectory_RequestPeerContentServer_Response) Reset() {
	*x = CContentServerDirectory_RequestPeerContentServer_Response{}
	mi := &file_steammessages_contentsystem_steamclient_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CContentServerDirectory_RequestPeerContentServer_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CContentServerDirectory_RequestPeerContentServer_Response) ProtoMessage() {}

func (x *CContentServerDirectory_RequestPeerContentServer_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_contentsystem_steamclient_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CContentServerDirectory_RequestPeerContentServer_Response.ProtoReflect.Descriptor instead.
func (*CContentServerDirectory_RequestPeerContentServer_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_contentsystem_steamclient_proto_rawDescGZIP(), []int{13}
}

func (x *CContentServerDirectory_RequestPeerContentServer_Response) GetServerPort() uint32 {
	if x != nil && x.ServerPort != nil {
		return *x.ServerPort
	}
	return 0
}

func (x *CContentServerDirectory_RequestPeerContentServer_Response) GetInstalledDepots() []uint32 {
	if x != nil {
		return x.InstalledDepots
	}
	return nil
}

func (x *CContentServerDirectory_RequestPeerContentServer_Response) GetAccessToken() uint64 {
	if x != nil && x.AccessToken != nil {
		return *x.AccessToken
	}
	return 0
}

type CContentServerDirectory_GetPeerContentInfo_Request struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	RemoteClientId       *uint64                `protobuf:"varint,1,opt,name=remote_client_id,json=remoteClientId" json:"remote_client_id,omitempty"`
	Steamid              *uint64                `protobuf:"varint,2,opt,name=steamid" json:"steamid,omitempty"`
	ServerRemoteClientId *uint64                `protobuf:"varint,3,opt,name=server_remote_client_id,json=serverRemoteClientId" json:"server_remote_client_id,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *CContentServerDirectory_GetPeerContentInfo_Request) Reset() {
	*x = CContentServerDirectory_GetPeerContentInfo_Request{}
	mi := &file_steammessages_contentsystem_steamclient_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CContentServerDirectory_GetPeerContentInfo_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CContentServerDirectory_GetPeerContentInfo_Request) ProtoMessage() {}

func (x *CContentServerDirectory_GetPeerContentInfo_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_contentsystem_steamclient_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CContentServerDirectory_GetPeerContentInfo_Request.ProtoReflect.Descriptor instead.
func (*CContentServerDirectory_GetPeerContentInfo_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_contentsystem_steamclient_proto_rawDescGZIP(), []int{14}
}

func (x *CContentServerDirectory_GetPeerContentInfo_Request) GetRemoteClientId() uint64 {
	if x != nil && x.RemoteClientId != nil {
		return *x.RemoteClientId
	}
	return 0
}

func (x *CContentServerDirectory_GetPeerContentInfo_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CContentServerDirectory_GetPeerContentInfo_Request) GetServerRemoteClientId() uint64 {
	if x != nil && x.ServerRemoteClientId != nil {
		return *x.ServerRemoteClientId
	}
	return 0
}

type CContentServerDirectory_GetPeerContentInfo_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Appids        []uint32               `protobuf:"varint,1,rep,name=appids" json:"appids,omitempty"`
	IpPublic      *string                `protobuf:"bytes,2,opt,name=ip_public,json=ipPublic" json:"ip_public,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CContentServerDirectory_GetPeerContentInfo_Response) Reset() {
	*x = CContentServerDirectory_GetPeerContentInfo_Response{}
	mi := &file_steammessages_contentsystem_steamclient_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CContentServerDirectory_GetPeerContentInfo_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CContentServerDirectory_GetPeerContentInfo_Response) ProtoMessage() {}

func (x *CContentServerDirectory_GetPeerContentInfo_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_contentsystem_steamclient_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CContentServerDirectory_GetPeerContentInfo_Response.ProtoReflect.Descriptor instead.
func (*CContentServerDirectory_GetPeerContentInfo_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_contentsystem_steamclient_proto_rawDescGZIP(), []int{15}
}

func (x *CContentServerDirectory_GetPeerContentInfo_Response) GetAppids() []uint32 {
	if x != nil {
		return x.Appids
	}
	return nil
}

func (x *CContentServerDirectory_GetPeerContentInfo_Response) GetIpPublic() string {
	if x != nil && x.IpPublic != nil {
		return *x.IpPublic
	}
	return ""
}

type CDepotContentDetection_GetAllDetectedAppContent_Request struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	DetectionType *EAppContentDetectionType `protobuf:"varint,1,opt,name=detection_type,json=detectionType,enum=EAppContentDetectionType,def=0" json:"detection_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CDepotContentDetection_GetAllDetectedAppContent_Request fields.
const (
	Default_CDepotContentDetection_GetAllDetectedAppContent_Request_DetectionType = EAppContentDetectionType_k_EAppContentDetectionType_None
)

func (x *CDepotContentDetection_GetAllDetectedAppContent_Request) Reset() {
	*x = CDepotContentDetection_GetAllDetectedAppContent_Request{}
	mi := &file_steammessages_contentsystem_steamclient_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CDepotContentDetection_GetAllDetectedAppContent_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDepotContentDetection_GetAllDetectedAppContent_Request) ProtoMessage() {}

func (x *CDepotContentDetection_GetAllDetectedAppContent_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_contentsystem_steamclient_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDepotContentDetection_GetAllDetectedAppContent_Request.ProtoReflect.Descriptor instead.
func (*CDepotContentDetection_GetAllDetectedAppContent_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_contentsystem_steamclient_proto_rawDescGZIP(), []int{16}
}

func (x *CDepotContentDetection_GetAllDetectedAppContent_Request) GetDetectionType() EAppContentDetectionType {
	if x != nil && x.DetectionType != nil {
		return *x.DetectionType
	}
	return Default_CDepotContentDetection_GetAllDetectedAppContent_Request_DetectionType
}

type DetectedAppContent struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	AppId           *uint32                `protobuf:"varint,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	DepotId         *uint32                `protobuf:"varint,2,opt,name=depot_id,json=depotId" json:"depot_id,omitempty"`
	DetectedContent *int32                 `protobuf:"varint,3,opt,name=detected_content,json=detectedContent" json:"detected_content,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *DetectedAppContent) Reset() {
	*x = DetectedAppContent{}
	mi := &file_steammessages_contentsystem_steamclient_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DetectedAppContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetectedAppContent) ProtoMessage() {}

func (x *DetectedAppContent) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_contentsystem_steamclient_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetectedAppContent.ProtoReflect.Descriptor instead.
func (*DetectedAppContent) Descriptor() ([]byte, []int) {
	return file_steammessages_contentsystem_steamclient_proto_rawDescGZIP(), []int{17}
}

func (x *DetectedAppContent) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *DetectedAppContent) GetDepotId() uint32 {
	if x != nil && x.DepotId != nil {
		return *x.DepotId
	}
	return 0
}

func (x *DetectedAppContent) GetDetectedContent() int32 {
	if x != nil && x.DetectedContent != nil {
		return *x.DetectedContent
	}
	return 0
}

type CDepotContentDetection_GetAllDetectedAppContent_Response struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	DetectedAppContent []*DetectedAppContent  `protobuf:"bytes,1,rep,name=detected_app_content,json=detectedAppContent" json:"detected_app_content,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *CDepotContentDetection_GetAllDetectedAppContent_Response) Reset() {
	*x = CDepotContentDetection_GetAllDetectedAppContent_Response{}
	mi := &file_steammessages_contentsystem_steamclient_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CDepotContentDetection_GetAllDetectedAppContent_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDepotContentDetection_GetAllDetectedAppContent_Response) ProtoMessage() {}

func (x *CDepotContentDetection_GetAllDetectedAppContent_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_contentsystem_steamclient_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDepotContentDetection_GetAllDetectedAppContent_Response.ProtoReflect.Descriptor instead.
func (*CDepotContentDetection_GetAllDetectedAppContent_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_contentsystem_steamclient_proto_rawDescGZIP(), []int{18}
}

func (x *CDepotContentDetection_GetAllDetectedAppContent_Response) GetDetectedAppContent() []*DetectedAppContent {
	if x != nil {
		return x.DetectedAppContent
	}
	return nil
}

type CDepotContentDetection_GetDetectedContentSingleApp_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Appid         *uint32                `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CDepotContentDetection_GetDetectedContentSingleApp_Request) Reset() {
	*x = CDepotContentDetection_GetDetectedContentSingleApp_Request{}
	mi := &file_steammessages_contentsystem_steamclient_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CDepotContentDetection_GetDetectedContentSingleApp_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDepotContentDetection_GetDetectedContentSingleApp_Request) ProtoMessage() {}

func (x *CDepotContentDetection_GetDetectedContentSingleApp_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_contentsystem_steamclient_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDepotContentDetection_GetDetectedContentSingleApp_Request.ProtoReflect.Descriptor instead.
func (*CDepotContentDetection_GetDetectedContentSingleApp_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_contentsystem_steamclient_proto_rawDescGZIP(), []int{19}
}

func (x *CDepotContentDetection_GetDetectedContentSingleApp_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

type CDepotContentDetection_GetDetectedContentSingleApp_Response struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	DetectedAnticheat  *EAppAntiCheatType     `protobuf:"varint,1,opt,name=detected_anticheat,json=detectedAnticheat,enum=EAppAntiCheatType,def=0" json:"detected_anticheat,omitempty"`
	DetectedGameengine *EAppGameEngineType    `protobuf:"varint,2,opt,name=detected_gameengine,json=detectedGameengine,enum=EAppGameEngineType,def=0" json:"detected_gameengine,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

// Default values for CDepotContentDetection_GetDetectedContentSingleApp_Response fields.
const (
	Default_CDepotContentDetection_GetDetectedContentSingleApp_Response_DetectedAnticheat  = EAppAntiCheatType_k_EAppAntiCheatTypeNone
	Default_CDepotContentDetection_GetDetectedContentSingleApp_Response_DetectedGameengine = EAppGameEngineType_k_EAppGameEngineTypeNone
)

func (x *CDepotContentDetection_GetDetectedContentSingleApp_Response) Reset() {
	*x = CDepotContentDetection_GetDetectedContentSingleApp_Response{}
	mi := &file_steammessages_contentsystem_steamclient_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CDepotContentDetection_GetDetectedContentSingleApp_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDepotContentDetection_GetDetectedContentSingleApp_Response) ProtoMessage() {}

func (x *CDepotContentDetection_GetDetectedContentSingleApp_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_contentsystem_steamclient_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDepotContentDetection_GetDetectedContentSingleApp_Response.ProtoReflect.Descriptor instead.
func (*CDepotContentDetection_GetDetectedContentSingleApp_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_contentsystem_steamclient_proto_rawDescGZIP(), []int{20}
}

func (x *CDepotContentDetection_GetDetectedContentSingleApp_Response) GetDetectedAnticheat() EAppAntiCheatType {
	if x != nil && x.DetectedAnticheat != nil {
		return *x.DetectedAnticheat
	}
	return Default_CDepotContentDetection_GetDetectedContentSingleApp_Response_DetectedAnticheat
}

func (x *CDepotContentDetection_GetDetectedContentSingleApp_Response) GetDetectedGameengine() EAppGameEngineType {
	if x != nil && x.DetectedGameengine != nil {
		return *x.DetectedGameengine
	}
	return Default_CDepotContentDetection_GetDetectedContentSingleApp_Response_DetectedGameengine
}

var File_steammessages_contentsystem_steamclient_proto protoreflect.FileDescriptor

const file_steammessages_contentsystem_steamclient_proto_rawDesc = "" +
	"\n" +
	"-steammessages_contentsystem.steamclient.proto\x1a\x18steammessages_base.proto\x1a,steammessages_unified_base.steamclient.proto\"\x83\x01\n" +
	"4CContentServerDirectory_ConnectedSteamPipeServerInfo\x12\x12\n" +
	"\x04type\x18\x01 \x01(\tR\x04type\x12\x1b\n" +
	"\tsource_id\x18\x02 \x01(\x05R\bsourceId\x12\x1a\n" +
	"\bhostname\x18\x03 \x01(\tR\bhostname\"\xc8\x02\n" +
	"6CContentServerDirectory_GetServersForSteamPipe_Request\x12\x17\n" +
	"\acell_id\x18\x01 \x01(\rR\x06cellId\x12#\n" +
	"\vmax_servers\x18\x02 \x01(\r:\x0220R\n" +
	"maxServers\x12\x1f\n" +
	"\vip_override\x18\x03 \x01(\tR\n" +
	"ipOverride\x12&\n" +
	"\rlauncher_type\x18\x04 \x01(\x05:\x010R\flauncherType\x12\x1f\n" +
	"\vipv6_public\x18\x05 \x01(\tR\n" +
	"ipv6Public\x12f\n" +
	"\x13current_connections\x18\x06 \x03(\v25.CContentServerDirectory_ConnectedSteamPipeServerInfoR\x12currentConnections\"\xc1\x04\n" +
	"\"CContentServerDirectory_ServerInfo\x12\x12\n" +
	"\x04type\x18\x01 \x01(\tR\x04type\x12\x1b\n" +
	"\tsource_id\x18\x02 \x01(\x05R\bsourceId\x12\x17\n" +
	"\acell_id\x18\x03 \x01(\x05R\x06cellId\x12\x12\n" +
	"\x04load\x18\x04 \x01(\x05R\x04load\x12#\n" +
	"\rweighted_load\x18\x05 \x01(\x02R\fweightedLoad\x12:\n" +
	"\x1anum_entries_in_client_list\x18\x06 \x01(\x05R\x16numEntriesInClientList\x12(\n" +
	"\x10steam_china_only\x18\a \x01(\bR\x0esteamChinaOnly\x12\x12\n" +
	"\x04host\x18\b \x01(\tR\x04host\x12\x14\n" +
	"\x05vhost\x18\t \x01(\tR\x05vhost\x12 \n" +
	"\fuse_as_proxy\x18\n" +
	" \x01(\bR\n" +
	"useAsProxy\x12=\n" +
	"\x1bproxy_request_path_template\x18\v \x01(\tR\x18proxyRequestPathTemplate\x12#\n" +
	"\rhttps_support\x18\f \x01(\tR\fhttpsSupport\x12&\n" +
	"\x0fallowed_app_ids\x18\r \x03(\rR\rallowedAppIds\x12%\n" +
	"\x0epriority_class\x18\x0f \x01(\rR\rpriorityClass\x123\n" +
	"\x16bypass_proxies_of_type\x18\x10 \x03(\tR\x13bypassProxiesOfType\"\x95\x01\n" +
	"7CContentServerDirectory_GetServersForSteamPipe_Response\x12=\n" +
	"\aservers\x18\x01 \x03(\v2#.CContentServerDirectory_ServerInfoR\aservers\x12\x1b\n" +
	"\tno_change\x18\x02 \x01(\bR\bnoChange\"\xbd\x01\n" +
	"1CContentServerDirectory_GetDepotPatchInfo_Request\x12\x14\n" +
	"\x05appid\x18\x01 \x01(\rR\x05appid\x12\x18\n" +
	"\adepotid\x18\x02 \x01(\rR\adepotid\x12+\n" +
	"\x11source_manifestid\x18\x03 \x01(\x04R\x10sourceManifestid\x12+\n" +
	"\x11target_manifestid\x18\x04 \x01(\x04R\x10targetManifestid\"\xa6\x01\n" +
	"2CContentServerDirectory_GetDepotPatchInfo_Response\x12!\n" +
	"\fis_available\x18\x01 \x01(\bR\visAvailable\x12\x1d\n" +
	"\n" +
	"patch_size\x18\x02 \x01(\x04R\tpatchSize\x12.\n" +
	"\x13patched_chunks_size\x18\x03 \x01(\x04R\x11patchedChunksSize\"a\n" +
	"4CContentServerDirectory_GetClientUpdateHosts_Request\x12)\n" +
	"\x10cached_signature\x18\x01 \x01(\tR\x0fcachedSignature\"\x9b\x01\n" +
	"5CContentServerDirectory_GetClientUpdateHosts_Response\x12\x19\n" +
	"\bhosts_kv\x18\x01 \x01(\tR\ahostsKv\x12(\n" +
	"\x10valid_until_time\x18\x02 \x01(\x04R\x0evalidUntilTime\x12\x1d\n" +
	"\n" +
	"ip_country\x18\x03 \x01(\tR\tipCountry\"\xdc\x01\n" +
	"6CContentServerDirectory_GetManifestRequestCode_Request\x12\x15\n" +
	"\x06app_id\x18\x01 \x01(\rR\x05appId\x12\x19\n" +
	"\bdepot_id\x18\x02 \x01(\rR\adepotId\x12\x1f\n" +
	"\vmanifest_id\x18\x03 \x01(\x04R\n" +
	"manifestId\x12\x1d\n" +
	"\n" +
	"app_branch\x18\x04 \x01(\tR\tappBranch\x120\n" +
	"\x14branch_password_hash\x18\x05 \x01(\tR\x12branchPasswordHash\"m\n" +
	"7CContentServerDirectory_GetManifestRequestCode_Response\x122\n" +
	"\x15manifest_request_code\x18\x01 \x01(\x04R\x13manifestRequestCode\"\x80\x01\n" +
	"/CContentServerDirectory_GetCDNAuthToken_Request\x12\x19\n" +
	"\bdepot_id\x18\x01 \x01(\rR\adepotId\x12\x1b\n" +
	"\thost_name\x18\x02 \x01(\tR\bhostName\x12\x15\n" +
	"\x06app_id\x18\x03 \x01(\rR\x05appId\"q\n" +
	"0CContentServerDirectory_GetCDNAuthToken_Response\x12\x14\n" +
	"\x05token\x18\x01 \x01(\tR\x05token\x12'\n" +
	"\x0fexpiration_time\x18\x02 \x01(\rR\x0eexpirationTime\"\xf6\x01\n" +
	"8CContentServerDirectory_RequestPeerContentServer_Request\x12(\n" +
	"\x10remote_client_id\x18\x01 \x01(\x04R\x0eremoteClientId\x12\x18\n" +
	"\asteamid\x18\x02 \x01(\x04R\asteamid\x125\n" +
	"\x17server_remote_client_id\x18\x03 \x01(\x04R\x14serverRemoteClientId\x12\x15\n" +
	"\x06app_id\x18\x04 \x01(\rR\x05appId\x12(\n" +
	"\x10current_build_id\x18\x05 \x01(\rR\x0ecurrentBuildId\"\xaa\x01\n" +
	"9CContentServerDirectory_RequestPeerContentServer_Response\x12\x1f\n" +
	"\vserver_port\x18\x01 \x01(\rR\n" +
	"serverPort\x12)\n" +
	"\x10installed_depots\x18\x02 \x03(\rR\x0finstalledDepots\x12!\n" +
	"\faccess_token\x18\x03 \x01(\x04R\vaccessToken\"\xaf\x01\n" +
	"2CContentServerDirectory_GetPeerContentInfo_Request\x12(\n" +
	"\x10remote_client_id\x18\x01 \x01(\x04R\x0eremoteClientId\x12\x18\n" +
	"\asteamid\x18\x02 \x01(\x04R\asteamid\x125\n" +
	"\x17server_remote_client_id\x18\x03 \x01(\x04R\x14serverRemoteClientId\"j\n" +
	"3CContentServerDirectory_GetPeerContentInfo_Response\x12\x16\n" +
	"\x06appids\x18\x01 \x03(\rR\x06appids\x12\x1b\n" +
	"\tip_public\x18\x02 \x01(\tR\bipPublic\"\x9c\x01\n" +
	"7CDepotContentDetection_GetAllDetectedAppContent_Request\x12a\n" +
	"\x0edetection_type\x18\x01 \x01(\x0e2\x19.EAppContentDetectionType:\x1fk_EAppContentDetectionType_NoneR\rdetectionType\"q\n" +
	"\x12DetectedAppContent\x12\x15\n" +
	"\x06app_id\x18\x01 \x01(\rR\x05appId\x12\x19\n" +
	"\bdepot_id\x18\x02 \x01(\rR\adepotId\x12)\n" +
	"\x10detected_content\x18\x03 \x01(\x05R\x0fdetectedContent\"\x81\x01\n" +
	"8CDepotContentDetection_GetAllDetectedAppContent_Response\x12E\n" +
	"\x14detected_app_content\x18\x01 \x03(\v2\x13.DetectedAppContentR\x12detectedAppContent\"R\n" +
	":CDepotContentDetection_GetDetectedContentSingleApp_Request\x12\x14\n" +
	"\x05appid\x18\x01 \x01(\rR\x05appid\"\xf9\x01\n" +
	";CDepotContentDetection_GetDetectedContentSingleApp_Response\x12Z\n" +
	"\x12detected_anticheat\x18\x01 \x01(\x0e2\x12.EAppAntiCheatType:\x17k_EAppAntiCheatTypeNoneR\x11detectedAnticheat\x12^\n" +
	"\x13detected_gameengine\x18\x02 \x01(\x0e2\x13.EAppGameEngineType:\x18k_EAppGameEngineTypeNoneR\x12detectedGameengine*\x94\x01\n" +
	"\x18EAppContentDetectionType\x12#\n" +
	"\x1fk_EAppContentDetectionType_None\x10\x00\x12(\n" +
	"$k_EAppContentDetectionType_AntiCheat\x10\x01\x12)\n" +
	"%k_EAppContentDetectionType_GameEngine\x10\x02*\xfa\x02\n" +
	"\x11EAppAntiCheatType\x12\x1b\n" +
	"\x17k_EAppAntiCheatTypeNone\x10\x00\x12\x1d\n" +
	"\x19k_EAppAntiCheatTypeEasyAC\x10\x01\x12\x1d\n" +
	"\x19k_EAppAntiCheatTypeDenuvo\x10\x02\x12\x1f\n" +
	"\x1bk_EAppAntiCheatTypeBattlEye\x10\x03\x12\x1f\n" +
	"\x1bk_EAppAntiCheatTypeXignCode\x10\x04\x12!\n" +
	"\x1dk_EAppAntiCheatTypePunkBuster\x10\x05\x12\x1a\n" +
	"\x16k_EAppAntiCheatTypeVAC\x10\x06\x12 \n" +
	"\x1ck_EAppAntiCheatTypeGameGuard\x10\a\x12!\n" +
	"\x1dk_EAppAntiCheatTypeHackShield\x10\b\x12&\n" +
	"\"k_EAppAntiCheatTypeAntiCheatExpert\x10\t\x12\x1c\n" +
	"\x18k_EAppAntiCheatTypeOther\x10\n" +
	"*R\n" +
	"\x12EAppGameEngineType\x12\x1c\n" +
	"\x18k_EAppGameEngineTypeNone\x10\x00\x12\x1e\n" +
	"\x1ak_EAppGameEngineTypeUnreal\x10\x012\xc7\a\n" +
	"\x16ContentServerDirectory\x12\x8b\x01\n" +
	"\x16GetServersForSteamPipe\x127.CContentServerDirectory_GetServersForSteamPipe_Request\x1a8.CContentServerDirectory_GetServersForSteamPipe_Response\x12|\n" +
	"\x11GetDepotPatchInfo\x122.CContentServerDirectory_GetDepotPatchInfo_Request\x1a3.CContentServerDirectory_GetDepotPatchInfo_Response\x12\x85\x01\n" +
	"\x14GetClientUpdateHosts\x125.CContentServerDirectory_GetClientUpdateHosts_Request\x1a6.CContentServerDirectory_GetClientUpdateHosts_Response\x12\x8b\x01\n" +
	"\x16GetManifestRequestCode\x127.CContentServerDirectory_GetManifestRequestCode_Request\x1a8.CContentServerDirectory_GetManifestRequestCode_Response\x12v\n" +
	"\x0fGetCDNAuthToken\x120.CContentServerDirectory_GetCDNAuthToken_Request\x1a1.CContentServerDirectory_GetCDNAuthToken_Response\x12\x91\x01\n" +
	"\x18RequestPeerContentServer\x129.CContentServerDirectory_RequestPeerContentServer_Request\x1a:.CContentServerDirectory_RequestPeerContentServer_Response\x12\x7f\n" +
	"\x12GetPeerContentInfo\x123.CContentServerDirectory_GetPeerContentInfo_Request\x1a4.CContentServerDirectory_GetPeerContentInfo_Response2\xc4\x02\n" +
	"\x15DepotContentDetection\x12\x8f\x01\n" +
	"\x18GetAllDetectedAppContent\x128.CDepotContentDetection_GetAllDetectedAppContent_Request\x1a9.CDepotContentDetection_GetAllDetectedAppContent_Response\x12\x98\x01\n" +
	"\x1bGetDetectedContentSingleApp\x12;.CDepotContentDetection_GetDetectedContentSingleApp_Request\x1a<.CDepotContentDetection_GetDetectedContentSingleApp_ResponseB\x03\x80\x01\x01"

var (
	file_steammessages_contentsystem_steamclient_proto_rawDescOnce sync.Once
	file_steammessages_contentsystem_steamclient_proto_rawDescData []byte
)

func file_steammessages_contentsystem_steamclient_proto_rawDescGZIP() []byte {
	file_steammessages_contentsystem_steamclient_proto_rawDescOnce.Do(func() {
		file_steammessages_contentsystem_steamclient_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_steammessages_contentsystem_steamclient_proto_rawDesc), len(file_steammessages_contentsystem_steamclient_proto_rawDesc)))
	})
	return file_steammessages_contentsystem_steamclient_proto_rawDescData
}

var file_steammessages_contentsystem_steamclient_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_steammessages_contentsystem_steamclient_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_steammessages_contentsystem_steamclient_proto_goTypes = []any{
	(EAppContentDetectionType)(0),                                       // 0: EAppContentDetectionType
	(EAppAntiCheatType)(0),                                              // 1: EAppAntiCheatType
	(EAppGameEngineType)(0),                                             // 2: EAppGameEngineType
	(*CContentServerDirectory_ConnectedSteamPipeServerInfo)(nil),        // 3: CContentServerDirectory_ConnectedSteamPipeServerInfo
	(*CContentServerDirectory_GetServersForSteamPipe_Request)(nil),      // 4: CContentServerDirectory_GetServersForSteamPipe_Request
	(*CContentServerDirectory_ServerInfo)(nil),                          // 5: CContentServerDirectory_ServerInfo
	(*CContentServerDirectory_GetServersForSteamPipe_Response)(nil),     // 6: CContentServerDirectory_GetServersForSteamPipe_Response
	(*CContentServerDirectory_GetDepotPatchInfo_Request)(nil),           // 7: CContentServerDirectory_GetDepotPatchInfo_Request
	(*CContentServerDirectory_GetDepotPatchInfo_Response)(nil),          // 8: CContentServerDirectory_GetDepotPatchInfo_Response
	(*CContentServerDirectory_GetClientUpdateHosts_Request)(nil),        // 9: CContentServerDirectory_GetClientUpdateHosts_Request
	(*CContentServerDirectory_GetClientUpdateHosts_Response)(nil),       // 10: CContentServerDirectory_GetClientUpdateHosts_Response
	(*CContentServerDirectory_GetManifestRequestCode_Request)(nil),      // 11: CContentServerDirectory_GetManifestRequestCode_Request
	(*CContentServerDirectory_GetManifestRequestCode_Response)(nil),     // 12: CContentServerDirectory_GetManifestRequestCode_Response
	(*CContentServerDirectory_GetCDNAuthToken_Request)(nil),             // 13: CContentServerDirectory_GetCDNAuthToken_Request
	(*CContentServerDirectory_GetCDNAuthToken_Response)(nil),            // 14: CContentServerDirectory_GetCDNAuthToken_Response
	(*CContentServerDirectory_RequestPeerContentServer_Request)(nil),    // 15: CContentServerDirectory_RequestPeerContentServer_Request
	(*CContentServerDirectory_RequestPeerContentServer_Response)(nil),   // 16: CContentServerDirectory_RequestPeerContentServer_Response
	(*CContentServerDirectory_GetPeerContentInfo_Request)(nil),          // 17: CContentServerDirectory_GetPeerContentInfo_Request
	(*CContentServerDirectory_GetPeerContentInfo_Response)(nil),         // 18: CContentServerDirectory_GetPeerContentInfo_Response
	(*CDepotContentDetection_GetAllDetectedAppContent_Request)(nil),     // 19: CDepotContentDetection_GetAllDetectedAppContent_Request
	(*DetectedAppContent)(nil),                                          // 20: DetectedAppContent
	(*CDepotContentDetection_GetAllDetectedAppContent_Response)(nil),    // 21: CDepotContentDetection_GetAllDetectedAppContent_Response
	(*CDepotContentDetection_GetDetectedContentSingleApp_Request)(nil),  // 22: CDepotContentDetection_GetDetectedContentSingleApp_Request
	(*CDepotContentDetection_GetDetectedContentSingleApp_Response)(nil), // 23: CDepotContentDetection_GetDetectedContentSingleApp_Response
}
var file_steammessages_contentsystem_steamclient_proto_depIdxs = []int32{
	3,  // 0: CContentServerDirectory_GetServersForSteamPipe_Request.current_connections:type_name -> CContentServerDirectory_ConnectedSteamPipeServerInfo
	5,  // 1: CContentServerDirectory_GetServersForSteamPipe_Response.servers:type_name -> CContentServerDirectory_ServerInfo
	0,  // 2: CDepotContentDetection_GetAllDetectedAppContent_Request.detection_type:type_name -> EAppContentDetectionType
	20, // 3: CDepotContentDetection_GetAllDetectedAppContent_Response.detected_app_content:type_name -> DetectedAppContent
	1,  // 4: CDepotContentDetection_GetDetectedContentSingleApp_Response.detected_anticheat:type_name -> EAppAntiCheatType
	2,  // 5: CDepotContentDetection_GetDetectedContentSingleApp_Response.detected_gameengine:type_name -> EAppGameEngineType
	4,  // 6: ContentServerDirectory.GetServersForSteamPipe:input_type -> CContentServerDirectory_GetServersForSteamPipe_Request
	7,  // 7: ContentServerDirectory.GetDepotPatchInfo:input_type -> CContentServerDirectory_GetDepotPatchInfo_Request
	9,  // 8: ContentServerDirectory.GetClientUpdateHosts:input_type -> CContentServerDirectory_GetClientUpdateHosts_Request
	11, // 9: ContentServerDirectory.GetManifestRequestCode:input_type -> CContentServerDirectory_GetManifestRequestCode_Request
	13, // 10: ContentServerDirectory.GetCDNAuthToken:input_type -> CContentServerDirectory_GetCDNAuthToken_Request
	15, // 11: ContentServerDirectory.RequestPeerContentServer:input_type -> CContentServerDirectory_RequestPeerContentServer_Request
	17, // 12: ContentServerDirectory.GetPeerContentInfo:input_type -> CContentServerDirectory_GetPeerContentInfo_Request
	19, // 13: DepotContentDetection.GetAllDetectedAppContent:input_type -> CDepotContentDetection_GetAllDetectedAppContent_Request
	22, // 14: DepotContentDetection.GetDetectedContentSingleApp:input_type -> CDepotContentDetection_GetDetectedContentSingleApp_Request
	6,  // 15: ContentServerDirectory.GetServersForSteamPipe:output_type -> CContentServerDirectory_GetServersForSteamPipe_Response
	8,  // 16: ContentServerDirectory.GetDepotPatchInfo:output_type -> CContentServerDirectory_GetDepotPatchInfo_Response
	10, // 17: ContentServerDirectory.GetClientUpdateHosts:output_type -> CContentServerDirectory_GetClientUpdateHosts_Response
	12, // 18: ContentServerDirectory.GetManifestRequestCode:output_type -> CContentServerDirectory_GetManifestRequestCode_Response
	14, // 19: ContentServerDirectory.GetCDNAuthToken:output_type -> CContentServerDirectory_GetCDNAuthToken_Response
	16, // 20: ContentServerDirectory.RequestPeerContentServer:output_type -> CContentServerDirectory_RequestPeerContentServer_Response
	18, // 21: ContentServerDirectory.GetPeerContentInfo:output_type -> CContentServerDirectory_GetPeerContentInfo_Response
	21, // 22: DepotContentDetection.GetAllDetectedAppContent:output_type -> CDepotContentDetection_GetAllDetectedAppContent_Response
	23, // 23: DepotContentDetection.GetDetectedContentSingleApp:output_type -> CDepotContentDetection_GetDetectedContentSingleApp_Response
	15, // [15:24] is the sub-list for method output_type
	6,  // [6:15] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_steammessages_contentsystem_steamclient_proto_init() }
func file_steammessages_contentsystem_steamclient_proto_init() {
	if File_steammessages_contentsystem_steamclient_proto != nil {
		return
	}
	file_steammessages_base_proto_init()
	file_steammessages_unified_base_steamclient_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_steammessages_contentsystem_steamclient_proto_rawDesc), len(file_steammessages_contentsystem_steamclient_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_steammessages_contentsystem_steamclient_proto_goTypes,
		DependencyIndexes: file_steammessages_contentsystem_steamclient_proto_depIdxs,
		EnumInfos:         file_steammessages_contentsystem_steamclient_proto_enumTypes,
		MessageInfos:      file_steammessages_contentsystem_steamclient_proto_msgTypes,
	}.Build()
	File_steammessages_contentsystem_steamclient_proto = out.File
	file_steammessages_contentsystem_steamclient_proto_goTypes = nil
	file_steammessages_contentsystem_steamclient_proto_depIdxs = nil
}
