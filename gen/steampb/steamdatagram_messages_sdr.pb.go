// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v6.32.0
// source: steamdatagram_messages_sdr.proto

package steampb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ESteamDatagramMsgID int32

const (
	ESteamDatagramMsgID_k_ESteamDatagramMsg_Invalid                       ESteamDatagramMsgID = 0
	ESteamDatagramMsgID_k_ESteamDatagramMsg_RouterPingRequest             ESteamDatagramMsgID = 1
	ESteamDatagramMsgID_k_ESteamDatagramMsg_RouterPingReply               ESteamDatagramMsgID = 2
	ESteamDatagramMsgID_k_ESteamDatagramMsg_GameserverPingRequest         ESteamDatagramMsgID = 3
	ESteamDatagramMsgID_k_ESteamDatagramMsg_GameserverSessionRequest      ESteamDatagramMsgID = 5
	ESteamDatagramMsgID_k_ESteamDatagramMsg_GameserverSessionEstablished  ESteamDatagramMsgID = 6
	ESteamDatagramMsgID_k_ESteamDatagramMsg_NoSession                     ESteamDatagramMsgID = 7
	ESteamDatagramMsgID_k_ESteamDatagramMsg_Diagnostic                    ESteamDatagramMsgID = 8
	ESteamDatagramMsgID_k_ESteamDatagramMsg_DataClientToRouter            ESteamDatagramMsgID = 9
	ESteamDatagramMsgID_k_ESteamDatagramMsg_DataRouterToServer            ESteamDatagramMsgID = 10
	ESteamDatagramMsgID_k_ESteamDatagramMsg_DataServerToRouter            ESteamDatagramMsgID = 11
	ESteamDatagramMsgID_k_ESteamDatagramMsg_DataRouterToClient            ESteamDatagramMsgID = 12
	ESteamDatagramMsgID_k_ESteamDatagramMsg_Stats                         ESteamDatagramMsgID = 13
	ESteamDatagramMsgID_k_ESteamDatagramMsg_ClientPingSampleRequest       ESteamDatagramMsgID = 14
	ESteamDatagramMsgID_k_ESteamDatagramMsg_ClientPingSampleReply         ESteamDatagramMsgID = 15
	ESteamDatagramMsgID_k_ESteamDatagramMsg_ClientToRouterSwitchedPrimary ESteamDatagramMsgID = 16
	ESteamDatagramMsgID_k_ESteamDatagramMsg_RelayHealth                   ESteamDatagramMsgID = 17
	ESteamDatagramMsgID_k_ESteamDatagramMsg_ConnectRequest                ESteamDatagramMsgID = 18
	ESteamDatagramMsgID_k_ESteamDatagramMsg_ConnectOK                     ESteamDatagramMsgID = 19
	ESteamDatagramMsgID_k_ESteamDatagramMsg_ConnectionClosed              ESteamDatagramMsgID = 20
	ESteamDatagramMsgID_k_ESteamDatagramMsg_NoConnection                  ESteamDatagramMsgID = 21
	ESteamDatagramMsgID_k_ESteamDatagramMsg_TicketDecryptRequest          ESteamDatagramMsgID = 22
	ESteamDatagramMsgID_k_ESteamDatagramMsg_TicketDecryptReply            ESteamDatagramMsgID = 23
	ESteamDatagramMsgID_k_ESteamDatagramMsg_P2PSessionRequest             ESteamDatagramMsgID = 24
	ESteamDatagramMsgID_k_ESteamDatagramMsg_P2PSessionEstablished         ESteamDatagramMsgID = 25
	ESteamDatagramMsgID_k_ESteamDatagramMsg_P2PStatsClient                ESteamDatagramMsgID = 26
	ESteamDatagramMsgID_k_ESteamDatagramMsg_P2PStatsRelay                 ESteamDatagramMsgID = 27
	ESteamDatagramMsgID_k_ESteamDatagramMsg_P2PBadRoute                   ESteamDatagramMsgID = 28
	ESteamDatagramMsgID_k_ESteamDatagramMsg_GameserverPingReply           ESteamDatagramMsgID = 29
	ESteamDatagramMsgID_k_ESteamDatagramMsg_LegacyGameserverRegistration  ESteamDatagramMsgID = 30
	ESteamDatagramMsgID_k_ESteamDatagramMsg_SetSecondaryAddressRequest    ESteamDatagramMsgID = 31
	ESteamDatagramMsgID_k_ESteamDatagramMsg_SetSecondaryAddressResult     ESteamDatagramMsgID = 32
	ESteamDatagramMsgID_k_ESteamDatagramMsg_RelayToRelayPingRequest       ESteamDatagramMsgID = 33
	ESteamDatagramMsgID_k_ESteamDatagramMsg_RelayToRelayPingReply         ESteamDatagramMsgID = 34
)

// Enum value maps for ESteamDatagramMsgID.
var (
	ESteamDatagramMsgID_name = map[int32]string{
		0:  "k_ESteamDatagramMsg_Invalid",
		1:  "k_ESteamDatagramMsg_RouterPingRequest",
		2:  "k_ESteamDatagramMsg_RouterPingReply",
		3:  "k_ESteamDatagramMsg_GameserverPingRequest",
		5:  "k_ESteamDatagramMsg_GameserverSessionRequest",
		6:  "k_ESteamDatagramMsg_GameserverSessionEstablished",
		7:  "k_ESteamDatagramMsg_NoSession",
		8:  "k_ESteamDatagramMsg_Diagnostic",
		9:  "k_ESteamDatagramMsg_DataClientToRouter",
		10: "k_ESteamDatagramMsg_DataRouterToServer",
		11: "k_ESteamDatagramMsg_DataServerToRouter",
		12: "k_ESteamDatagramMsg_DataRouterToClient",
		13: "k_ESteamDatagramMsg_Stats",
		14: "k_ESteamDatagramMsg_ClientPingSampleRequest",
		15: "k_ESteamDatagramMsg_ClientPingSampleReply",
		16: "k_ESteamDatagramMsg_ClientToRouterSwitchedPrimary",
		17: "k_ESteamDatagramMsg_RelayHealth",
		18: "k_ESteamDatagramMsg_ConnectRequest",
		19: "k_ESteamDatagramMsg_ConnectOK",
		20: "k_ESteamDatagramMsg_ConnectionClosed",
		21: "k_ESteamDatagramMsg_NoConnection",
		22: "k_ESteamDatagramMsg_TicketDecryptRequest",
		23: "k_ESteamDatagramMsg_TicketDecryptReply",
		24: "k_ESteamDatagramMsg_P2PSessionRequest",
		25: "k_ESteamDatagramMsg_P2PSessionEstablished",
		26: "k_ESteamDatagramMsg_P2PStatsClient",
		27: "k_ESteamDatagramMsg_P2PStatsRelay",
		28: "k_ESteamDatagramMsg_P2PBadRoute",
		29: "k_ESteamDatagramMsg_GameserverPingReply",
		30: "k_ESteamDatagramMsg_LegacyGameserverRegistration",
		31: "k_ESteamDatagramMsg_SetSecondaryAddressRequest",
		32: "k_ESteamDatagramMsg_SetSecondaryAddressResult",
		33: "k_ESteamDatagramMsg_RelayToRelayPingRequest",
		34: "k_ESteamDatagramMsg_RelayToRelayPingReply",
	}
	ESteamDatagramMsgID_value = map[string]int32{
		"k_ESteamDatagramMsg_Invalid":                       0,
		"k_ESteamDatagramMsg_RouterPingRequest":             1,
		"k_ESteamDatagramMsg_RouterPingReply":               2,
		"k_ESteamDatagramMsg_GameserverPingRequest":         3,
		"k_ESteamDatagramMsg_GameserverSessionRequest":      5,
		"k_ESteamDatagramMsg_GameserverSessionEstablished":  6,
		"k_ESteamDatagramMsg_NoSession":                     7,
		"k_ESteamDatagramMsg_Diagnostic":                    8,
		"k_ESteamDatagramMsg_DataClientToRouter":            9,
		"k_ESteamDatagramMsg_DataRouterToServer":            10,
		"k_ESteamDatagramMsg_DataServerToRouter":            11,
		"k_ESteamDatagramMsg_DataRouterToClient":            12,
		"k_ESteamDatagramMsg_Stats":                         13,
		"k_ESteamDatagramMsg_ClientPingSampleRequest":       14,
		"k_ESteamDatagramMsg_ClientPingSampleReply":         15,
		"k_ESteamDatagramMsg_ClientToRouterSwitchedPrimary": 16,
		"k_ESteamDatagramMsg_RelayHealth":                   17,
		"k_ESteamDatagramMsg_ConnectRequest":                18,
		"k_ESteamDatagramMsg_ConnectOK":                     19,
		"k_ESteamDatagramMsg_ConnectionClosed":              20,
		"k_ESteamDatagramMsg_NoConnection":                  21,
		"k_ESteamDatagramMsg_TicketDecryptRequest":          22,
		"k_ESteamDatagramMsg_TicketDecryptReply":            23,
		"k_ESteamDatagramMsg_P2PSessionRequest":             24,
		"k_ESteamDatagramMsg_P2PSessionEstablished":         25,
		"k_ESteamDatagramMsg_P2PStatsClient":                26,
		"k_ESteamDatagramMsg_P2PStatsRelay":                 27,
		"k_ESteamDatagramMsg_P2PBadRoute":                   28,
		"k_ESteamDatagramMsg_GameserverPingReply":           29,
		"k_ESteamDatagramMsg_LegacyGameserverRegistration":  30,
		"k_ESteamDatagramMsg_SetSecondaryAddressRequest":    31,
		"k_ESteamDatagramMsg_SetSecondaryAddressResult":     32,
		"k_ESteamDatagramMsg_RelayToRelayPingRequest":       33,
		"k_ESteamDatagramMsg_RelayToRelayPingReply":         34,
	}
)

func (x ESteamDatagramMsgID) Enum() *ESteamDatagramMsgID {
	p := new(ESteamDatagramMsgID)
	*p = x
	return p
}

func (x ESteamDatagramMsgID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ESteamDatagramMsgID) Descriptor() protoreflect.EnumDescriptor {
	return file_steamdatagram_messages_sdr_proto_enumTypes[0].Descriptor()
}

func (ESteamDatagramMsgID) Type() protoreflect.EnumType {
	return &file_steamdatagram_messages_sdr_proto_enumTypes[0]
}

func (x ESteamDatagramMsgID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ESteamDatagramMsgID) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ESteamDatagramMsgID(num)
	return nil
}

// Deprecated: Use ESteamDatagramMsgID.Descriptor instead.
func (ESteamDatagramMsgID) EnumDescriptor() ([]byte, []int) {
	return file_steamdatagram_messages_sdr_proto_rawDescGZIP(), []int{0}
}

type CMsgSteamDatagramRouterPingReply_Flags int32

const (
	CMsgSteamDatagramRouterPingReply_FLAG_MAYBE_MORE_DATA_CENTERS  CMsgSteamDatagramRouterPingReply_Flags = 1
	CMsgSteamDatagramRouterPingReply_FLAG_MAYBE_MORE_ALT_ADDRESSES CMsgSteamDatagramRouterPingReply_Flags = 2
)

// Enum value maps for CMsgSteamDatagramRouterPingReply_Flags.
var (
	CMsgSteamDatagramRouterPingReply_Flags_name = map[int32]string{
		1: "FLAG_MAYBE_MORE_DATA_CENTERS",
		2: "FLAG_MAYBE_MORE_ALT_ADDRESSES",
	}
	CMsgSteamDatagramRouterPingReply_Flags_value = map[string]int32{
		"FLAG_MAYBE_MORE_DATA_CENTERS":  1,
		"FLAG_MAYBE_MORE_ALT_ADDRESSES": 2,
	}
)

func (x CMsgSteamDatagramRouterPingReply_Flags) Enum() *CMsgSteamDatagramRouterPingReply_Flags {
	p := new(CMsgSteamDatagramRouterPingReply_Flags)
	*p = x
	return p
}

func (x CMsgSteamDatagramRouterPingReply_Flags) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgSteamDatagramRouterPingReply_Flags) Descriptor() protoreflect.EnumDescriptor {
	return file_steamdatagram_messages_sdr_proto_enumTypes[1].Descriptor()
}

func (CMsgSteamDatagramRouterPingReply_Flags) Type() protoreflect.EnumType {
	return &file_steamdatagram_messages_sdr_proto_enumTypes[1]
}

func (x CMsgSteamDatagramRouterPingReply_Flags) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgSteamDatagramRouterPingReply_Flags) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgSteamDatagramRouterPingReply_Flags(num)
	return nil
}

// Deprecated: Use CMsgSteamDatagramRouterPingReply_Flags.Descriptor instead.
func (CMsgSteamDatagramRouterPingReply_Flags) EnumDescriptor() ([]byte, []int) {
	return file_steamdatagram_messages_sdr_proto_rawDescGZIP(), []int{2, 0}
}

type CMsgSteamDatagramRouterPingReply_AltAddress_Protocol int32

const (
	CMsgSteamDatagramRouterPingReply_AltAddress_DefaultProtocol CMsgSteamDatagramRouterPingReply_AltAddress_Protocol = 0
)

// Enum value maps for CMsgSteamDatagramRouterPingReply_AltAddress_Protocol.
var (
	CMsgSteamDatagramRouterPingReply_AltAddress_Protocol_name = map[int32]string{
		0: "DefaultProtocol",
	}
	CMsgSteamDatagramRouterPingReply_AltAddress_Protocol_value = map[string]int32{
		"DefaultProtocol": 0,
	}
)

func (x CMsgSteamDatagramRouterPingReply_AltAddress_Protocol) Enum() *CMsgSteamDatagramRouterPingReply_AltAddress_Protocol {
	p := new(CMsgSteamDatagramRouterPingReply_AltAddress_Protocol)
	*p = x
	return p
}

func (x CMsgSteamDatagramRouterPingReply_AltAddress_Protocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgSteamDatagramRouterPingReply_AltAddress_Protocol) Descriptor() protoreflect.EnumDescriptor {
	return file_steamdatagram_messages_sdr_proto_enumTypes[2].Descriptor()
}

func (CMsgSteamDatagramRouterPingReply_AltAddress_Protocol) Type() protoreflect.EnumType {
	return &file_steamdatagram_messages_sdr_proto_enumTypes[2]
}

func (x CMsgSteamDatagramRouterPingReply_AltAddress_Protocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgSteamDatagramRouterPingReply_AltAddress_Protocol) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgSteamDatagramRouterPingReply_AltAddress_Protocol(num)
	return nil
}

// Deprecated: Use CMsgSteamDatagramRouterPingReply_AltAddress_Protocol.Descriptor instead.
func (CMsgSteamDatagramRouterPingReply_AltAddress_Protocol) EnumDescriptor() ([]byte, []int) {
	return file_steamdatagram_messages_sdr_proto_rawDescGZIP(), []int{2, 1, 0}
}

type CMsgSteamDatagramConnectionClosed_ERelayMode int32

const (
	CMsgSteamDatagramConnectionClosed_None         CMsgSteamDatagramConnectionClosed_ERelayMode = 0
	CMsgSteamDatagramConnectionClosed_EndToEnd     CMsgSteamDatagramConnectionClosed_ERelayMode = 1
	CMsgSteamDatagramConnectionClosed_ClosedByPeer CMsgSteamDatagramConnectionClosed_ERelayMode = 2
)

// Enum value maps for CMsgSteamDatagramConnectionClosed_ERelayMode.
var (
	CMsgSteamDatagramConnectionClosed_ERelayMode_name = map[int32]string{
		0: "None",
		1: "EndToEnd",
		2: "ClosedByPeer",
	}
	CMsgSteamDatagramConnectionClosed_ERelayMode_value = map[string]int32{
		"None":         0,
		"EndToEnd":     1,
		"ClosedByPeer": 2,
	}
)

func (x CMsgSteamDatagramConnectionClosed_ERelayMode) Enum() *CMsgSteamDatagramConnectionClosed_ERelayMode {
	p := new(CMsgSteamDatagramConnectionClosed_ERelayMode)
	*p = x
	return p
}

func (x CMsgSteamDatagramConnectionClosed_ERelayMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgSteamDatagramConnectionClosed_ERelayMode) Descriptor() protoreflect.EnumDescriptor {
	return file_steamdatagram_messages_sdr_proto_enumTypes[3].Descriptor()
}

func (CMsgSteamDatagramConnectionClosed_ERelayMode) Type() protoreflect.EnumType {
	return &file_steamdatagram_messages_sdr_proto_enumTypes[3]
}

func (x CMsgSteamDatagramConnectionClosed_ERelayMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgSteamDatagramConnectionClosed_ERelayMode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgSteamDatagramConnectionClosed_ERelayMode(num)
	return nil
}

// Deprecated: Use CMsgSteamDatagramConnectionClosed_ERelayMode.Descriptor instead.
func (CMsgSteamDatagramConnectionClosed_ERelayMode) EnumDescriptor() ([]byte, []int) {
	return file_steamdatagram_messages_sdr_proto_rawDescGZIP(), []int{16, 0}
}

type CMsgSteamDatagramConnectionStatsClientToRouter_Flags int32

const (
	CMsgSteamDatagramConnectionStatsClientToRouter_ACK_REQUEST_RELAY     CMsgSteamDatagramConnectionStatsClientToRouter_Flags = 1
	CMsgSteamDatagramConnectionStatsClientToRouter_ACK_REQUEST_E2E       CMsgSteamDatagramConnectionStatsClientToRouter_Flags = 2
	CMsgSteamDatagramConnectionStatsClientToRouter_ACK_REQUEST_IMMEDIATE CMsgSteamDatagramConnectionStatsClientToRouter_Flags = 4
	CMsgSteamDatagramConnectionStatsClientToRouter_NOT_PRIMARY_SESSION   CMsgSteamDatagramConnectionStatsClientToRouter_Flags = 8
	CMsgSteamDatagramConnectionStatsClientToRouter_CLIENT_RELAY_OVERRIDE CMsgSteamDatagramConnectionStatsClientToRouter_Flags = 32
)

// Enum value maps for CMsgSteamDatagramConnectionStatsClientToRouter_Flags.
var (
	CMsgSteamDatagramConnectionStatsClientToRouter_Flags_name = map[int32]string{
		1:  "ACK_REQUEST_RELAY",
		2:  "ACK_REQUEST_E2E",
		4:  "ACK_REQUEST_IMMEDIATE",
		8:  "NOT_PRIMARY_SESSION",
		32: "CLIENT_RELAY_OVERRIDE",
	}
	CMsgSteamDatagramConnectionStatsClientToRouter_Flags_value = map[string]int32{
		"ACK_REQUEST_RELAY":     1,
		"ACK_REQUEST_E2E":       2,
		"ACK_REQUEST_IMMEDIATE": 4,
		"NOT_PRIMARY_SESSION":   8,
		"CLIENT_RELAY_OVERRIDE": 32,
	}
)

func (x CMsgSteamDatagramConnectionStatsClientToRouter_Flags) Enum() *CMsgSteamDatagramConnectionStatsClientToRouter_Flags {
	p := new(CMsgSteamDatagramConnectionStatsClientToRouter_Flags)
	*p = x
	return p
}

func (x CMsgSteamDatagramConnectionStatsClientToRouter_Flags) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgSteamDatagramConnectionStatsClientToRouter_Flags) Descriptor() protoreflect.EnumDescriptor {
	return file_steamdatagram_messages_sdr_proto_enumTypes[4].Descriptor()
}

func (CMsgSteamDatagramConnectionStatsClientToRouter_Flags) Type() protoreflect.EnumType {
	return &file_steamdatagram_messages_sdr_proto_enumTypes[4]
}

func (x CMsgSteamDatagramConnectionStatsClientToRouter_Flags) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgSteamDatagramConnectionStatsClientToRouter_Flags) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgSteamDatagramConnectionStatsClientToRouter_Flags(num)
	return nil
}

// Deprecated: Use CMsgSteamDatagramConnectionStatsClientToRouter_Flags.Descriptor instead.
func (CMsgSteamDatagramConnectionStatsClientToRouter_Flags) EnumDescriptor() ([]byte, []int) {
	return file_steamdatagram_messages_sdr_proto_rawDescGZIP(), []int{20, 0}
}

type CMsgSteamDatagramConnectionStatsRouterToClient_Flags int32

const (
	CMsgSteamDatagramConnectionStatsRouterToClient_ACK_REQUEST_RELAY     CMsgSteamDatagramConnectionStatsRouterToClient_Flags = 1
	CMsgSteamDatagramConnectionStatsRouterToClient_ACK_REQUEST_E2E       CMsgSteamDatagramConnectionStatsRouterToClient_Flags = 2
	CMsgSteamDatagramConnectionStatsRouterToClient_ACK_REQUEST_IMMEDIATE CMsgSteamDatagramConnectionStatsRouterToClient_Flags = 4
)

// Enum value maps for CMsgSteamDatagramConnectionStatsRouterToClient_Flags.
var (
	CMsgSteamDatagramConnectionStatsRouterToClient_Flags_name = map[int32]string{
		1: "ACK_REQUEST_RELAY",
		2: "ACK_REQUEST_E2E",
		4: "ACK_REQUEST_IMMEDIATE",
	}
	CMsgSteamDatagramConnectionStatsRouterToClient_Flags_value = map[string]int32{
		"ACK_REQUEST_RELAY":     1,
		"ACK_REQUEST_E2E":       2,
		"ACK_REQUEST_IMMEDIATE": 4,
	}
)

func (x CMsgSteamDatagramConnectionStatsRouterToClient_Flags) Enum() *CMsgSteamDatagramConnectionStatsRouterToClient_Flags {
	p := new(CMsgSteamDatagramConnectionStatsRouterToClient_Flags)
	*p = x
	return p
}

func (x CMsgSteamDatagramConnectionStatsRouterToClient_Flags) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgSteamDatagramConnectionStatsRouterToClient_Flags) Descriptor() protoreflect.EnumDescriptor {
	return file_steamdatagram_messages_sdr_proto_enumTypes[5].Descriptor()
}

func (CMsgSteamDatagramConnectionStatsRouterToClient_Flags) Type() protoreflect.EnumType {
	return &file_steamdatagram_messages_sdr_proto_enumTypes[5]
}

func (x CMsgSteamDatagramConnectionStatsRouterToClient_Flags) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgSteamDatagramConnectionStatsRouterToClient_Flags) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgSteamDatagramConnectionStatsRouterToClient_Flags(num)
	return nil
}

// Deprecated: Use CMsgSteamDatagramConnectionStatsRouterToClient_Flags.Descriptor instead.
func (CMsgSteamDatagramConnectionStatsRouterToClient_Flags) EnumDescriptor() ([]byte, []int) {
	return file_steamdatagram_messages_sdr_proto_rawDescGZIP(), []int{21, 0}
}

type CMsgSteamDatagramConnectionStatsRouterToServer_Flags int32

const (
	CMsgSteamDatagramConnectionStatsRouterToServer_ACK_REQUEST_RELAY     CMsgSteamDatagramConnectionStatsRouterToServer_Flags = 1
	CMsgSteamDatagramConnectionStatsRouterToServer_ACK_REQUEST_E2E       CMsgSteamDatagramConnectionStatsRouterToServer_Flags = 2
	CMsgSteamDatagramConnectionStatsRouterToServer_ACK_REQUEST_IMMEDIATE CMsgSteamDatagramConnectionStatsRouterToServer_Flags = 4
)

// Enum value maps for CMsgSteamDatagramConnectionStatsRouterToServer_Flags.
var (
	CMsgSteamDatagramConnectionStatsRouterToServer_Flags_name = map[int32]string{
		1: "ACK_REQUEST_RELAY",
		2: "ACK_REQUEST_E2E",
		4: "ACK_REQUEST_IMMEDIATE",
	}
	CMsgSteamDatagramConnectionStatsRouterToServer_Flags_value = map[string]int32{
		"ACK_REQUEST_RELAY":     1,
		"ACK_REQUEST_E2E":       2,
		"ACK_REQUEST_IMMEDIATE": 4,
	}
)

func (x CMsgSteamDatagramConnectionStatsRouterToServer_Flags) Enum() *CMsgSteamDatagramConnectionStatsRouterToServer_Flags {
	p := new(CMsgSteamDatagramConnectionStatsRouterToServer_Flags)
	*p = x
	return p
}

func (x CMsgSteamDatagramConnectionStatsRouterToServer_Flags) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgSteamDatagramConnectionStatsRouterToServer_Flags) Descriptor() protoreflect.EnumDescriptor {
	return file_steamdatagram_messages_sdr_proto_enumTypes[6].Descriptor()
}

func (CMsgSteamDatagramConnectionStatsRouterToServer_Flags) Type() protoreflect.EnumType {
	return &file_steamdatagram_messages_sdr_proto_enumTypes[6]
}

func (x CMsgSteamDatagramConnectionStatsRouterToServer_Flags) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgSteamDatagramConnectionStatsRouterToServer_Flags) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgSteamDatagramConnectionStatsRouterToServer_Flags(num)
	return nil
}

// Deprecated: Use CMsgSteamDatagramConnectionStatsRouterToServer_Flags.Descriptor instead.
func (CMsgSteamDatagramConnectionStatsRouterToServer_Flags) EnumDescriptor() ([]byte, []int) {
	return file_steamdatagram_messages_sdr_proto_rawDescGZIP(), []int{22, 0}
}

type CMsgSteamDatagramConnectionStatsServerToRouter_Flags int32

const (
	CMsgSteamDatagramConnectionStatsServerToRouter_ACK_REQUEST_RELAY     CMsgSteamDatagramConnectionStatsServerToRouter_Flags = 1
	CMsgSteamDatagramConnectionStatsServerToRouter_ACK_REQUEST_E2E       CMsgSteamDatagramConnectionStatsServerToRouter_Flags = 2
	CMsgSteamDatagramConnectionStatsServerToRouter_ACK_REQUEST_IMMEDIATE CMsgSteamDatagramConnectionStatsServerToRouter_Flags = 4
)

// Enum value maps for CMsgSteamDatagramConnectionStatsServerToRouter_Flags.
var (
	CMsgSteamDatagramConnectionStatsServerToRouter_Flags_name = map[int32]string{
		1: "ACK_REQUEST_RELAY",
		2: "ACK_REQUEST_E2E",
		4: "ACK_REQUEST_IMMEDIATE",
	}
	CMsgSteamDatagramConnectionStatsServerToRouter_Flags_value = map[string]int32{
		"ACK_REQUEST_RELAY":     1,
		"ACK_REQUEST_E2E":       2,
		"ACK_REQUEST_IMMEDIATE": 4,
	}
)

func (x CMsgSteamDatagramConnectionStatsServerToRouter_Flags) Enum() *CMsgSteamDatagramConnectionStatsServerToRouter_Flags {
	p := new(CMsgSteamDatagramConnectionStatsServerToRouter_Flags)
	*p = x
	return p
}

func (x CMsgSteamDatagramConnectionStatsServerToRouter_Flags) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgSteamDatagramConnectionStatsServerToRouter_Flags) Descriptor() protoreflect.EnumDescriptor {
	return file_steamdatagram_messages_sdr_proto_enumTypes[7].Descriptor()
}

func (CMsgSteamDatagramConnectionStatsServerToRouter_Flags) Type() protoreflect.EnumType {
	return &file_steamdatagram_messages_sdr_proto_enumTypes[7]
}

func (x CMsgSteamDatagramConnectionStatsServerToRouter_Flags) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgSteamDatagramConnectionStatsServerToRouter_Flags) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgSteamDatagramConnectionStatsServerToRouter_Flags(num)
	return nil
}

// Deprecated: Use CMsgSteamDatagramConnectionStatsServerToRouter_Flags.Descriptor instead.
func (CMsgSteamDatagramConnectionStatsServerToRouter_Flags) EnumDescriptor() ([]byte, []int) {
	return file_steamdatagram_messages_sdr_proto_rawDescGZIP(), []int{23, 0}
}

type CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags int32

const (
	CMsgSteamDatagramConnectionStatsP2PClientToRouter_ACK_REQUEST_RELAY         CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags = 1
	CMsgSteamDatagramConnectionStatsP2PClientToRouter_ACK_REQUEST_E2E           CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags = 2
	CMsgSteamDatagramConnectionStatsP2PClientToRouter_ACK_REQUEST_IMMEDIATE     CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags = 4
	CMsgSteamDatagramConnectionStatsP2PClientToRouter_NOT_PRIMARY_SESSION       CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags = 8
	CMsgSteamDatagramConnectionStatsP2PClientToRouter_NOT_PRIMARY_TRANSPORT_E2E CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags = 16
	CMsgSteamDatagramConnectionStatsP2PClientToRouter_CLIENT_RELAY_OVERRIDE     CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags = 32
)

// Enum value maps for CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags.
var (
	CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags_name = map[int32]string{
		1:  "ACK_REQUEST_RELAY",
		2:  "ACK_REQUEST_E2E",
		4:  "ACK_REQUEST_IMMEDIATE",
		8:  "NOT_PRIMARY_SESSION",
		16: "NOT_PRIMARY_TRANSPORT_E2E",
		32: "CLIENT_RELAY_OVERRIDE",
	}
	CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags_value = map[string]int32{
		"ACK_REQUEST_RELAY":         1,
		"ACK_REQUEST_E2E":           2,
		"ACK_REQUEST_IMMEDIATE":     4,
		"NOT_PRIMARY_SESSION":       8,
		"NOT_PRIMARY_TRANSPORT_E2E": 16,
		"CLIENT_RELAY_OVERRIDE":     32,
	}
)

func (x CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags) Enum() *CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags {
	p := new(CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags)
	*p = x
	return p
}

func (x CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags) Descriptor() protoreflect.EnumDescriptor {
	return file_steamdatagram_messages_sdr_proto_enumTypes[8].Descriptor()
}

func (CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags) Type() protoreflect.EnumType {
	return &file_steamdatagram_messages_sdr_proto_enumTypes[8]
}

func (x CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags(num)
	return nil
}

// Deprecated: Use CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags.Descriptor instead.
func (CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags) EnumDescriptor() ([]byte, []int) {
	return file_steamdatagram_messages_sdr_proto_rawDescGZIP(), []int{27, 0}
}

type CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags int32

const (
	CMsgSteamDatagramConnectionStatsP2PRouterToClient_ACK_REQUEST_RELAY         CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags = 1
	CMsgSteamDatagramConnectionStatsP2PRouterToClient_ACK_REQUEST_E2E           CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags = 2
	CMsgSteamDatagramConnectionStatsP2PRouterToClient_ACK_REQUEST_IMMEDIATE     CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags = 4
	CMsgSteamDatagramConnectionStatsP2PRouterToClient_NOT_PRIMARY_TRANSPORT_E2E CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags = 16
)

// Enum value maps for CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags.
var (
	CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags_name = map[int32]string{
		1:  "ACK_REQUEST_RELAY",
		2:  "ACK_REQUEST_E2E",
		4:  "ACK_REQUEST_IMMEDIATE",
		16: "NOT_PRIMARY_TRANSPORT_E2E",
	}
	CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags_value = map[string]int32{
		"ACK_REQUEST_RELAY":         1,
		"ACK_REQUEST_E2E":           2,
		"ACK_REQUEST_IMMEDIATE":     4,
		"NOT_PRIMARY_TRANSPORT_E2E": 16,
	}
)

func (x CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags) Enum() *CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags {
	p := new(CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags)
	*p = x
	return p
}

func (x CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags) Descriptor() protoreflect.EnumDescriptor {
	return file_steamdatagram_messages_sdr_proto_enumTypes[9].Descriptor()
}

func (CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags) Type() protoreflect.EnumType {
	return &file_steamdatagram_messages_sdr_proto_enumTypes[9]
}

func (x CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags(num)
	return nil
}

// Deprecated: Use CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags.Descriptor instead.
func (CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags) EnumDescriptor() ([]byte, []int) {
	return file_steamdatagram_messages_sdr_proto_rawDescGZIP(), []int{28, 0}
}

type CMsgSteamNetworkingIPAddress struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	V4            *uint32                `protobuf:"fixed32,1,opt,name=v4" json:"v4,omitempty"`
	V6            []byte                 `protobuf:"bytes,2,opt,name=v6" json:"v6,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgSteamNetworkingIPAddress) Reset() {
	*x = CMsgSteamNetworkingIPAddress{}
	mi := &file_steamdatagram_messages_sdr_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSteamNetworkingIPAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamNetworkingIPAddress) ProtoMessage() {}

func (x *CMsgSteamNetworkingIPAddress) ProtoReflect() protoreflect.Message {
	mi := &file_steamdatagram_messages_sdr_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamNetworkingIPAddress.ProtoReflect.Descriptor instead.
func (*CMsgSteamNetworkingIPAddress) Descriptor() ([]byte, []int) {
	return file_steamdatagram_messages_sdr_proto_rawDescGZIP(), []int{0}
}

func (x *CMsgSteamNetworkingIPAddress) GetV4() uint32 {
	if x != nil && x.V4 != nil {
		return *x.V4
	}
	return 0
}

func (x *CMsgSteamNetworkingIPAddress) GetV6() []byte {
	if x != nil {
		return x.V6
	}
	return nil
}

type CMsgSteamDatagramSignedMessageGeneric struct {
	state         protoimpl.MessageState              `protogen:"open.v1"`
	Cert          *CMsgSteamDatagramCertificateSigned `protobuf:"bytes,1,opt,name=cert" json:"cert,omitempty"`
	SignedData    []byte                              `protobuf:"bytes,2,opt,name=signed_data,json=signedData" json:"signed_data,omitempty"`
	Signature     []byte                              `protobuf:"bytes,3,opt,name=signature" json:"signature,omitempty"`
	DummyPad      []byte                              `protobuf:"bytes,1023,opt,name=dummy_pad,json=dummyPad" json:"dummy_pad,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgSteamDatagramSignedMessageGeneric) Reset() {
	*x = CMsgSteamDatagramSignedMessageGeneric{}
	mi := &file_steamdatagram_messages_sdr_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSteamDatagramSignedMessageGeneric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramSignedMessageGeneric) ProtoMessage() {}

func (x *CMsgSteamDatagramSignedMessageGeneric) ProtoReflect() protoreflect.Message {
	mi := &file_steamdatagram_messages_sdr_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramSignedMessageGeneric.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramSignedMessageGeneric) Descriptor() ([]byte, []int) {
	return file_steamdatagram_messages_sdr_proto_rawDescGZIP(), []int{1}
}

func (x *CMsgSteamDatagramSignedMessageGeneric) GetCert() *CMsgSteamDatagramCertificateSigned {
	if x != nil {
		return x.Cert
	}
	return nil
}

func (x *CMsgSteamDatagramSignedMessageGeneric) GetSignedData() []byte {
	if x != nil {
		return x.SignedData
	}
	return nil
}

func (x *CMsgSteamDatagramSignedMessageGeneric) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *CMsgSteamDatagramSignedMessageGeneric) GetDummyPad() []byte {
	if x != nil {
		return x.DummyPad
	}
	return nil
}

type CMsgSteamDatagramRouterPingReply struct {
	state                      protoimpl.MessageState                             `protogen:"open.v1"`
	ClientTimestamp            *uint32                                            `protobuf:"fixed32,1,opt,name=client_timestamp,json=clientTimestamp" json:"client_timestamp,omitempty"`
	LatencyDatacenterIds       []uint32                                           `protobuf:"fixed32,2,rep,packed,name=latency_datacenter_ids,json=latencyDatacenterIds" json:"latency_datacenter_ids,omitempty"`
	LatencyPingMs              []uint32                                           `protobuf:"varint,3,rep,packed,name=latency_ping_ms,json=latencyPingMs" json:"latency_ping_ms,omitempty"`
	LatencyDatacenterIdsP2P    []uint32                                           `protobuf:"fixed32,14,rep,packed,name=latency_datacenter_ids_p2p,json=latencyDatacenterIdsP2p" json:"latency_datacenter_ids_p2p,omitempty"`
	LatencyPingMsP2P           []uint32                                           `protobuf:"varint,15,rep,packed,name=latency_ping_ms_p2p,json=latencyPingMsP2p" json:"latency_ping_ms_p2p,omitempty"`
	YourPublicIp               *uint32                                            `protobuf:"fixed32,4,opt,name=your_public_ip,json=yourPublicIp" json:"your_public_ip,omitempty"`
	YourPublicPort             *uint32                                            `protobuf:"fixed32,11,opt,name=your_public_port,json=yourPublicPort" json:"your_public_port,omitempty"`
	ServerTime                 *uint32                                            `protobuf:"fixed32,5,opt,name=server_time,json=serverTime" json:"server_time,omitempty"`
	Challenge                  *uint64                                            `protobuf:"fixed64,6,opt,name=challenge" json:"challenge,omitempty"`
	SecondsUntilShutdown       *uint32                                            `protobuf:"varint,7,opt,name=seconds_until_shutdown,json=secondsUntilShutdown" json:"seconds_until_shutdown,omitempty"`
	ClientCookie               *uint32                                            `protobuf:"fixed32,8,opt,name=client_cookie,json=clientCookie" json:"client_cookie,omitempty"`
	RecvTos                    *uint32                                            `protobuf:"varint,16,opt,name=recv_tos,json=recvTos" json:"recv_tos,omitempty"`
	EchoSentTos                *uint32                                            `protobuf:"varint,17,opt,name=echo_sent_tos,json=echoSentTos" json:"echo_sent_tos,omitempty"`
	SentTos                    *uint32                                            `protobuf:"varint,18,opt,name=sent_tos,json=sentTos" json:"sent_tos,omitempty"`
	EchoRequestReplyTos        *uint32                                            `protobuf:"varint,19,opt,name=echo_request_reply_tos,json=echoRequestReplyTos" json:"echo_request_reply_tos,omitempty"`
	ScoringPenaltyRelayCluster *uint32                                            `protobuf:"varint,9,opt,name=scoring_penalty_relay_cluster,json=scoringPenaltyRelayCluster" json:"scoring_penalty_relay_cluster,omitempty"`
	Flags                      *uint32                                            `protobuf:"varint,12,opt,name=flags" json:"flags,omitempty"`
	RouteExceptions            []*CMsgSteamDatagramRouterPingReply_RouteException `protobuf:"bytes,10,rep,name=route_exceptions,json=routeExceptions" json:"route_exceptions,omitempty"`
	AltAddresses               []*CMsgSteamDatagramRouterPingReply_AltAddress     `protobuf:"bytes,13,rep,name=alt_addresses,json=altAddresses" json:"alt_addresses,omitempty"`
	DummyPad                   []byte                                             `protobuf:"bytes,99,opt,name=dummy_pad,json=dummyPad" json:"dummy_pad,omitempty"`
	DummyVarint                *uint64                                            `protobuf:"varint,100,opt,name=dummy_varint,json=dummyVarint" json:"dummy_varint,omitempty"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *CMsgSteamDatagramRouterPingReply) Reset() {
	*x = CMsgSteamDatagramRouterPingReply{}
	mi := &file_steamdatagram_messages_sdr_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSteamDatagramRouterPingReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramRouterPingReply) ProtoMessage() {}

func (x *CMsgSteamDatagramRouterPingReply) ProtoReflect() protoreflect.Message {
	mi := &file_steamdatagram_messages_sdr_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramRouterPingReply.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramRouterPingReply) Descriptor() ([]byte, []int) {
	return file_steamdatagram_messages_sdr_proto_rawDescGZIP(), []int{2}
}

func (x *CMsgSteamDatagramRouterPingReply) GetClientTimestamp() uint32 {
	if x != nil && x.ClientTimestamp != nil {
		return *x.ClientTimestamp
	}
	return 0
}

func (x *CMsgSteamDatagramRouterPingReply) GetLatencyDatacenterIds() []uint32 {
	if x != nil {
		return x.LatencyDatacenterIds
	}
	return nil
}

func (x *CMsgSteamDatagramRouterPingReply) GetLatencyPingMs() []uint32 {
	if x != nil {
		return x.LatencyPingMs
	}
	return nil
}

func (x *CMsgSteamDatagramRouterPingReply) GetLatencyDatacenterIdsP2P() []uint32 {
	if x != nil {
		return x.LatencyDatacenterIdsP2P
	}
	return nil
}

func (x *CMsgSteamDatagramRouterPingReply) GetLatencyPingMsP2P() []uint32 {
	if x != nil {
		return x.LatencyPingMsP2P
	}
	return nil
}

func (x *CMsgSteamDatagramRouterPingReply) GetYourPublicIp() uint32 {
	if x != nil && x.YourPublicIp != nil {
		return *x.YourPublicIp
	}
	return 0
}

func (x *CMsgSteamDatagramRouterPingReply) GetYourPublicPort() uint32 {
	if x != nil && x.YourPublicPort != nil {
		return *x.YourPublicPort
	}
	return 0
}

func (x *CMsgSteamDatagramRouterPingReply) GetServerTime() uint32 {
	if x != nil && x.ServerTime != nil {
		return *x.ServerTime
	}
	return 0
}

func (x *CMsgSteamDatagramRouterPingReply) GetChallenge() uint64 {
	if x != nil && x.Challenge != nil {
		return *x.Challenge
	}
	return 0
}

func (x *CMsgSteamDatagramRouterPingReply) GetSecondsUntilShutdown() uint32 {
	if x != nil && x.SecondsUntilShutdown != nil {
		return *x.SecondsUntilShutdown
	}
	return 0
}

func (x *CMsgSteamDatagramRouterPingReply) GetClientCookie() uint32 {
	if x != nil && x.ClientCookie != nil {
		return *x.ClientCookie
	}
	return 0
}

func (x *CMsgSteamDatagramRouterPingReply) GetRecvTos() uint32 {
	if x != nil && x.RecvTos != nil {
		return *x.RecvTos
	}
	return 0
}

func (x *CMsgSteamDatagramRouterPingReply) GetEchoSentTos() uint32 {
	if x != nil && x.EchoSentTos != nil {
		return *x.EchoSentTos
	}
	return 0
}

func (x *CMsgSteamDatagramRouterPingReply) GetSentTos() uint32 {
	if x != nil && x.SentTos != nil {
		return *x.SentTos
	}
	return 0
}

func (x *CMsgSteamDatagramRouterPingReply) GetEchoRequestReplyTos() uint32 {
	if x != nil && x.EchoRequestReplyTos != nil {
		return *x.EchoRequestReplyTos
	}
	return 0
}

func (x *CMsgSteamDatagramRouterPingReply) GetScoringPenaltyRelayCluster() uint32 {
	if x != nil && x.ScoringPenaltyRelayCluster != nil {
		return *x.ScoringPenaltyRelayCluster
	}
	return 0
}

func (x *CMsgSteamDatagramRouterPingReply) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

func (x *CMsgSteamDatagramRouterPingReply) GetRouteExceptions() []*CMsgSteamDatagramRouterPingReply_RouteException {
	if x != nil {
		return x.RouteExceptions
	}
	return nil
}

func (x *CMsgSteamDatagramRouterPingReply) GetAltAddresses() []*CMsgSteamDatagramRouterPingReply_AltAddress {
	if x != nil {
		return x.AltAddresses
	}
	return nil
}

func (x *CMsgSteamDatagramRouterPingReply) GetDummyPad() []byte {
	if x != nil {
		return x.DummyPad
	}
	return nil
}

func (x *CMsgSteamDatagramRouterPingReply) GetDummyVarint() uint64 {
	if x != nil && x.DummyVarint != nil {
		return *x.DummyVarint
	}
	return 0
}

type CMsgSteamDatagramGameserverPingRequestBody struct {
	state          protoimpl.MessageState          `protogen:"open.v1"`
	RelayPopid     *uint32                         `protobuf:"fixed32,1,opt,name=relay_popid,json=relayPopid" json:"relay_popid,omitempty"`
	YourPublicIp   *CMsgSteamNetworkingIPAddress   `protobuf:"bytes,2,opt,name=your_public_ip,json=yourPublicIp" json:"your_public_ip,omitempty"`
	YourPublicPort *uint32                         `protobuf:"varint,3,opt,name=your_public_port,json=yourPublicPort" json:"your_public_port,omitempty"`
	RelayUnixTime  *uint64                         `protobuf:"varint,4,opt,name=relay_unix_time,json=relayUnixTime" json:"relay_unix_time,omitempty"`
	RoutingSecret  *uint64                         `protobuf:"fixed64,5,opt,name=routing_secret,json=routingSecret" json:"routing_secret,omitempty"`
	MyIps          []*CMsgSteamNetworkingIPAddress `protobuf:"bytes,6,rep,name=my_ips,json=myIps" json:"my_ips,omitempty"`
	Echo           []byte                          `protobuf:"bytes,8,opt,name=echo" json:"echo,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CMsgSteamDatagramGameserverPingRequestBody) Reset() {
	*x = CMsgSteamDatagramGameserverPingRequestBody{}
	mi := &file_steamdatagram_messages_sdr_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSteamDatagramGameserverPingRequestBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramGameserverPingRequestBody) ProtoMessage() {}

func (x *CMsgSteamDatagramGameserverPingRequestBody) ProtoReflect() protoreflect.Message {
	mi := &file_steamdatagram_messages_sdr_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramGameserverPingRequestBody.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramGameserverPingRequestBody) Descriptor() ([]byte, []int) {
	return file_steamdatagram_messages_sdr_proto_rawDescGZIP(), []int{3}
}

func (x *CMsgSteamDatagramGameserverPingRequestBody) GetRelayPopid() uint32 {
	if x != nil && x.RelayPopid != nil {
		return *x.RelayPopid
	}
	return 0
}

func (x *CMsgSteamDatagramGameserverPingRequestBody) GetYourPublicIp() *CMsgSteamNetworkingIPAddress {
	if x != nil {
		return x.YourPublicIp
	}
	return nil
}

func (x *CMsgSteamDatagramGameserverPingRequestBody) GetYourPublicPort() uint32 {
	if x != nil && x.YourPublicPort != nil {
		return *x.YourPublicPort
	}
	return 0
}

func (x *CMsgSteamDatagramGameserverPingRequestBody) GetRelayUnixTime() uint64 {
	if x != nil && x.RelayUnixTime != nil {
		return *x.RelayUnixTime
	}
	return 0
}

func (x *CMsgSteamDatagramGameserverPingRequestBody) GetRoutingSecret() uint64 {
	if x != nil && x.RoutingSecret != nil {
		return *x.RoutingSecret
	}
	return 0
}

func (x *CMsgSteamDatagramGameserverPingRequestBody) GetMyIps() []*CMsgSteamNetworkingIPAddress {
	if x != nil {
		return x.MyIps
	}
	return nil
}

func (x *CMsgSteamDatagramGameserverPingRequestBody) GetEcho() []byte {
	if x != nil {
		return x.Echo
	}
	return nil
}

type CMsgSteamDatagramGameserverPingRequestEnvelope struct {
	state                 protoimpl.MessageState              `protogen:"open.v1"`
	Cert                  *CMsgSteamDatagramCertificateSigned `protobuf:"bytes,6,opt,name=cert" json:"cert,omitempty"`
	SignedData            []byte                              `protobuf:"bytes,7,opt,name=signed_data,json=signedData" json:"signed_data,omitempty"`
	Signature             []byte                              `protobuf:"bytes,8,opt,name=signature" json:"signature,omitempty"`
	LegacyYourPublicIp    *uint32                             `protobuf:"fixed32,1,opt,name=legacy_your_public_ip,json=legacyYourPublicIp" json:"legacy_your_public_ip,omitempty"`
	LegacyYourPublicPort  *uint32                             `protobuf:"fixed32,5,opt,name=legacy_your_public_port,json=legacyYourPublicPort" json:"legacy_your_public_port,omitempty"`
	LegacyRelayUnixTime   *uint32                             `protobuf:"fixed32,2,opt,name=legacy_relay_unix_time,json=legacyRelayUnixTime" json:"legacy_relay_unix_time,omitempty"`
	LegacyChallenge       *uint64                             `protobuf:"fixed64,3,opt,name=legacy_challenge,json=legacyChallenge" json:"legacy_challenge,omitempty"`
	LegacyRouterTimestamp *uint32                             `protobuf:"fixed32,4,opt,name=legacy_router_timestamp,json=legacyRouterTimestamp" json:"legacy_router_timestamp,omitempty"`
	DummyPad              []byte                              `protobuf:"bytes,1023,opt,name=dummy_pad,json=dummyPad" json:"dummy_pad,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *CMsgSteamDatagramGameserverPingRequestEnvelope) Reset() {
	*x = CMsgSteamDatagramGameserverPingRequestEnvelope{}
	mi := &file_steamdatagram_messages_sdr_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSteamDatagramGameserverPingRequestEnvelope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramGameserverPingRequestEnvelope) ProtoMessage() {}

func (x *CMsgSteamDatagramGameserverPingRequestEnvelope) ProtoReflect() protoreflect.Message {
	mi := &file_steamdatagram_messages_sdr_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramGameserverPingRequestEnvelope.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramGameserverPingRequestEnvelope) Descriptor() ([]byte, []int) {
	return file_steamdatagram_messages_sdr_proto_rawDescGZIP(), []int{4}
}

func (x *CMsgSteamDatagramGameserverPingRequestEnvelope) GetCert() *CMsgSteamDatagramCertificateSigned {
	if x != nil {
		return x.Cert
	}
	return nil
}

func (x *CMsgSteamDatagramGameserverPingRequestEnvelope) GetSignedData() []byte {
	if x != nil {
		return x.SignedData
	}
	return nil
}

func (x *CMsgSteamDatagramGameserverPingRequestEnvelope) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *CMsgSteamDatagramGameserverPingRequestEnvelope) GetLegacyYourPublicIp() uint32 {
	if x != nil && x.LegacyYourPublicIp != nil {
		return *x.LegacyYourPublicIp
	}
	return 0
}

func (x *CMsgSteamDatagramGameserverPingRequestEnvelope) GetLegacyYourPublicPort() uint32 {
	if x != nil && x.LegacyYourPublicPort != nil {
		return *x.LegacyYourPublicPort
	}
	return 0
}

func (x *CMsgSteamDatagramGameserverPingRequestEnvelope) GetLegacyRelayUnixTime() uint32 {
	if x != nil && x.LegacyRelayUnixTime != nil {
		return *x.LegacyRelayUnixTime
	}
	return 0
}

func (x *CMsgSteamDatagramGameserverPingRequestEnvelope) GetLegacyChallenge() uint64 {
	if x != nil && x.LegacyChallenge != nil {
		return *x.LegacyChallenge
	}
	return 0
}

func (x *CMsgSteamDatagramGameserverPingRequestEnvelope) GetLegacyRouterTimestamp() uint32 {
	if x != nil && x.LegacyRouterTimestamp != nil {
		return *x.LegacyRouterTimestamp
	}
	return 0
}

func (x *CMsgSteamDatagramGameserverPingRequestEnvelope) GetDummyPad() []byte {
	if x != nil {
		return x.DummyPad
	}
	return nil
}

type CMsgSteamDatagramGameserverPingReplyData struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	EchoRelayUnixTime     *uint32                `protobuf:"fixed32,2,opt,name=echo_relay_unix_time,json=echoRelayUnixTime" json:"echo_relay_unix_time,omitempty"`
	Echo                  []byte                 `protobuf:"bytes,8,opt,name=echo" json:"echo,omitempty"`
	LegacyChallenge       *uint64                `protobuf:"fixed64,3,opt,name=legacy_challenge,json=legacyChallenge" json:"legacy_challenge,omitempty"`
	LegacyRouterTimestamp *uint32                `protobuf:"fixed32,4,opt,name=legacy_router_timestamp,json=legacyRouterTimestamp" json:"legacy_router_timestamp,omitempty"`
	DataCenterId          *uint32                `protobuf:"fixed32,5,opt,name=data_center_id,json=dataCenterId" json:"data_center_id,omitempty"`
	Appid                 *uint32                `protobuf:"varint,6,opt,name=appid" json:"appid,omitempty"`
	ProtocolVersion       *uint32                `protobuf:"varint,7,opt,name=protocol_version,json=protocolVersion" json:"protocol_version,omitempty"`
	Build                 *string                `protobuf:"bytes,9,opt,name=build" json:"build,omitempty"`
	NetworkConfigVersion  *uint64                `protobuf:"varint,10,opt,name=network_config_version,json=networkConfigVersion" json:"network_config_version,omitempty"`
	MyUnixTime            *uint32                `protobuf:"fixed32,11,opt,name=my_unix_time,json=myUnixTime" json:"my_unix_time,omitempty"`
	RoutingBlob           []byte                 `protobuf:"bytes,12,opt,name=routing_blob,json=routingBlob" json:"routing_blob,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *CMsgSteamDatagramGameserverPingReplyData) Reset() {
	*x = CMsgSteamDatagramGameserverPingReplyData{}
	mi := &file_steamdatagram_messages_sdr_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSteamDatagramGameserverPingReplyData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramGameserverPingReplyData) ProtoMessage() {}

func (x *CMsgSteamDatagramGameserverPingReplyData) ProtoReflect() protoreflect.Message {
	mi := &file_steamdatagram_messages_sdr_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramGameserverPingReplyData.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramGameserverPingReplyData) Descriptor() ([]byte, []int) {
	return file_steamdatagram_messages_sdr_proto_rawDescGZIP(), []int{5}
}

func (x *CMsgSteamDatagramGameserverPingReplyData) GetEchoRelayUnixTime() uint32 {
	if x != nil && x.EchoRelayUnixTime != nil {
		return *x.EchoRelayUnixTime
	}
	return 0
}

func (x *CMsgSteamDatagramGameserverPingReplyData) GetEcho() []byte {
	if x != nil {
		return x.Echo
	}
	return nil
}

func (x *CMsgSteamDatagramGameserverPingReplyData) GetLegacyChallenge() uint64 {
	if x != nil && x.LegacyChallenge != nil {
		return *x.LegacyChallenge
	}
	return 0
}

func (x *CMsgSteamDatagramGameserverPingReplyData) GetLegacyRouterTimestamp() uint32 {
	if x != nil && x.LegacyRouterTimestamp != nil {
		return *x.LegacyRouterTimestamp
	}
	return 0
}

func (x *CMsgSteamDatagramGameserverPingReplyData) GetDataCenterId() uint32 {
	if x != nil && x.DataCenterId != nil {
		return *x.DataCenterId
	}
	return 0
}

func (x *CMsgSteamDatagramGameserverPingReplyData) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CMsgSteamDatagramGameserverPingReplyData) GetProtocolVersion() uint32 {
	if x != nil && x.ProtocolVersion != nil {
		return *x.ProtocolVersion
	}
	return 0
}

func (x *CMsgSteamDatagramGameserverPingReplyData) GetBuild() string {
	if x != nil && x.Build != nil {
		return *x.Build
	}
	return ""
}

func (x *CMsgSteamDatagramGameserverPingReplyData) GetNetworkConfigVersion() uint64 {
	if x != nil && x.NetworkConfigVersion != nil {
		return *x.NetworkConfigVersion
	}
	return 0
}

func (x *CMsgSteamDatagramGameserverPingReplyData) GetMyUnixTime() uint32 {
	if x != nil && x.MyUnixTime != nil {
		return *x.MyUnixTime
	}
	return 0
}

func (x *CMsgSteamDatagramGameserverPingReplyData) GetRoutingBlob() []byte {
	if x != nil {
		return x.RoutingBlob
	}
	return nil
}

type CMsgSteamDatagramNoSessionRelayToClient struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	ConnectionId         *uint32                `protobuf:"fixed32,7,opt,name=connection_id,json=connectionId" json:"connection_id,omitempty"`
	YourPublicIp         *uint32                `protobuf:"fixed32,2,opt,name=your_public_ip,json=yourPublicIp" json:"your_public_ip,omitempty"`
	YourPublicPort       *uint32                `protobuf:"fixed32,6,opt,name=your_public_port,json=yourPublicPort" json:"your_public_port,omitempty"`
	ServerTime           *uint32                `protobuf:"fixed32,3,opt,name=server_time,json=serverTime" json:"server_time,omitempty"`
	Challenge            *uint64                `protobuf:"fixed64,4,opt,name=challenge" json:"challenge,omitempty"`
	SecondsUntilShutdown *uint32                `protobuf:"varint,5,opt,name=seconds_until_shutdown,json=secondsUntilShutdown" json:"seconds_until_shutdown,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *CMsgSteamDatagramNoSessionRelayToClient) Reset() {
	*x = CMsgSteamDatagramNoSessionRelayToClient{}
	mi := &file_steamdatagram_messages_sdr_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSteamDatagramNoSessionRelayToClient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramNoSessionRelayToClient) ProtoMessage() {}

func (x *CMsgSteamDatagramNoSessionRelayToClient) ProtoReflect() protoreflect.Message {
	mi := &file_steamdatagram_messages_sdr_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramNoSessionRelayToClient.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramNoSessionRelayToClient) Descriptor() ([]byte, []int) {
	return file_steamdatagram_messages_sdr_proto_rawDescGZIP(), []int{6}
}

func (x *CMsgSteamDatagramNoSessionRelayToClient) GetConnectionId() uint32 {
	if x != nil && x.ConnectionId != nil {
		return *x.ConnectionId
	}
	return 0
}

func (x *CMsgSteamDatagramNoSessionRelayToClient) GetYourPublicIp() uint32 {
	if x != nil && x.YourPublicIp != nil {
		return *x.YourPublicIp
	}
	return 0
}

func (x *CMsgSteamDatagramNoSessionRelayToClient) GetYourPublicPort() uint32 {
	if x != nil && x.YourPublicPort != nil {
		return *x.YourPublicPort
	}
	return 0
}

func (x *CMsgSteamDatagramNoSessionRelayToClient) GetServerTime() uint32 {
	if x != nil && x.ServerTime != nil {
		return *x.ServerTime
	}
	return 0
}

func (x *CMsgSteamDatagramNoSessionRelayToClient) GetChallenge() uint64 {
	if x != nil && x.Challenge != nil {
		return *x.Challenge
	}
	return 0
}

func (x *CMsgSteamDatagramNoSessionRelayToClient) GetSecondsUntilShutdown() uint32 {
	if x != nil && x.SecondsUntilShutdown != nil {
		return *x.SecondsUntilShutdown
	}
	return 0
}

type CMsgSteamDatagramNoSessionRelayToPeer struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	LegacyRelaySessionId *uint32                `protobuf:"varint,1,opt,name=legacy_relay_session_id,json=legacyRelaySessionId" json:"legacy_relay_session_id,omitempty"`
	FromRelaySessionId   *uint32                `protobuf:"fixed32,2,opt,name=from_relay_session_id,json=fromRelaySessionId" json:"from_relay_session_id,omitempty"`
	FromConnectionId     *uint32                `protobuf:"fixed32,7,opt,name=from_connection_id,json=fromConnectionId" json:"from_connection_id,omitempty"`
	KludgePad            *uint64                `protobuf:"fixed64,99,opt,name=kludge_pad,json=kludgePad" json:"kludge_pad,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *CMsgSteamDatagramNoSessionRelayToPeer) Reset() {
	*x = CMsgSteamDatagramNoSessionRelayToPeer{}
	mi := &file_steamdatagram_messages_sdr_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSteamDatagramNoSessionRelayToPeer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramNoSessionRelayToPeer) ProtoMessage() {}

func (x *CMsgSteamDatagramNoSessionRelayToPeer) ProtoReflect() protoreflect.Message {
	mi := &file_steamdatagram_messages_sdr_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramNoSessionRelayToPeer.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramNoSessionRelayToPeer) Descriptor() ([]byte, []int) {
	return file_steamdatagram_messages_sdr_proto_rawDescGZIP(), []int{7}
}

func (x *CMsgSteamDatagramNoSessionRelayToPeer) GetLegacyRelaySessionId() uint32 {
	if x != nil && x.LegacyRelaySessionId != nil {
		return *x.LegacyRelaySessionId
	}
	return 0
}

func (x *CMsgSteamDatagramNoSessionRelayToPeer) GetFromRelaySessionId() uint32 {
	if x != nil && x.FromRelaySessionId != nil {
		return *x.FromRelaySessionId
	}
	return 0
}

func (x *CMsgSteamDatagramNoSessionRelayToPeer) GetFromConnectionId() uint32 {
	if x != nil && x.FromConnectionId != nil {
		return *x.FromConnectionId
	}
	return 0
}

func (x *CMsgSteamDatagramNoSessionRelayToPeer) GetKludgePad() uint64 {
	if x != nil && x.KludgePad != nil {
		return *x.KludgePad
	}
	return 0
}

type CMsgTOSTreatment struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	L4SDetect     *string                `protobuf:"bytes,1,opt,name=l4s_detect,json=l4sDetect" json:"l4s_detect,omitempty"`
	UpEcn1        *string                `protobuf:"bytes,2,opt,name=up_ecn1,json=upEcn1" json:"up_ecn1,omitempty"`
	DownDscp45    *string                `protobuf:"bytes,3,opt,name=down_dscp45,json=downDscp45" json:"down_dscp45,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgTOSTreatment) Reset() {
	*x = CMsgTOSTreatment{}
	mi := &file_steamdatagram_messages_sdr_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgTOSTreatment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgTOSTreatment) ProtoMessage() {}

func (x *CMsgTOSTreatment) ProtoReflect() protoreflect.Message {
	mi := &file_steamdatagram_messages_sdr_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgTOSTreatment.ProtoReflect.Descriptor instead.
func (*CMsgTOSTreatment) Descriptor() ([]byte, []int) {
	return file_steamdatagram_messages_sdr_proto_rawDescGZIP(), []int{8}
}

func (x *CMsgTOSTreatment) GetL4SDetect() string {
	if x != nil && x.L4SDetect != nil {
		return *x.L4SDetect
	}
	return ""
}

func (x *CMsgTOSTreatment) GetUpEcn1() string {
	if x != nil && x.UpEcn1 != nil {
		return *x.UpEcn1
	}
	return ""
}

func (x *CMsgTOSTreatment) GetDownDscp45() string {
	if x != nil && x.DownDscp45 != nil {
		return *x.DownDscp45
	}
	return ""
}

type CMsgSteamDatagramClientPingSampleRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ConnectionId  *uint32                `protobuf:"fixed32,1,opt,name=connection_id,json=connectionId" json:"connection_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgSteamDatagramClientPingSampleRequest) Reset() {
	*x = CMsgSteamDatagramClientPingSampleRequest{}
	mi := &file_steamdatagram_messages_sdr_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSteamDatagramClientPingSampleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramClientPingSampleRequest) ProtoMessage() {}

func (x *CMsgSteamDatagramClientPingSampleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_steamdatagram_messages_sdr_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramClientPingSampleRequest.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramClientPingSampleRequest) Descriptor() ([]byte, []int) {
	return file_steamdatagram_messages_sdr_proto_rawDescGZIP(), []int{9}
}

func (x *CMsgSteamDatagramClientPingSampleRequest) GetConnectionId() uint32 {
	if x != nil && x.ConnectionId != nil {
		return *x.ConnectionId
	}
	return 0
}

type CMsgSteamDatagramClientPingSampleReply struct {
	state               protoimpl.MessageState                                     `protogen:"open.v1"`
	ConnectionId        *uint32                                                    `protobuf:"fixed32,1,opt,name=connection_id,json=connectionId" json:"connection_id,omitempty"`
	RelayOverrideActive *bool                                                      `protobuf:"varint,5,opt,name=relay_override_active,json=relayOverrideActive" json:"relay_override_active,omitempty"`
	Tos                 *CMsgTOSTreatment                                          `protobuf:"bytes,6,opt,name=tos" json:"tos,omitempty"`
	Pops                []*CMsgSteamDatagramClientPingSampleReply_POP              `protobuf:"bytes,2,rep,name=pops" json:"pops,omitempty"`
	LegacyDataCenters   []*CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter `protobuf:"bytes,3,rep,name=legacy_data_centers,json=legacyDataCenters" json:"legacy_data_centers,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *CMsgSteamDatagramClientPingSampleReply) Reset() {
	*x = CMsgSteamDatagramClientPingSampleReply{}
	mi := &file_steamdatagram_messages_sdr_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSteamDatagramClientPingSampleReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramClientPingSampleReply) ProtoMessage() {}

func (x *CMsgSteamDatagramClientPingSampleReply) ProtoReflect() protoreflect.Message {
	mi := &file_steamdatagram_messages_sdr_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramClientPingSampleReply.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramClientPingSampleReply) Descriptor() ([]byte, []int) {
	return file_steamdatagram_messages_sdr_proto_rawDescGZIP(), []int{10}
}

func (x *CMsgSteamDatagramClientPingSampleReply) GetConnectionId() uint32 {
	if x != nil && x.ConnectionId != nil {
		return *x.ConnectionId
	}
	return 0
}

func (x *CMsgSteamDatagramClientPingSampleReply) GetRelayOverrideActive() bool {
	if x != nil && x.RelayOverrideActive != nil {
		return *x.RelayOverrideActive
	}
	return false
}

func (x *CMsgSteamDatagramClientPingSampleReply) GetTos() *CMsgTOSTreatment {
	if x != nil {
		return x.Tos
	}
	return nil
}

func (x *CMsgSteamDatagramClientPingSampleReply) GetPops() []*CMsgSteamDatagramClientPingSampleReply_POP {
	if x != nil {
		return x.Pops
	}
	return nil
}

func (x *CMsgSteamDatagramClientPingSampleReply) GetLegacyDataCenters() []*CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter {
	if x != nil {
		return x.LegacyDataCenters
	}
	return nil
}

type CMsgSteamDatagramClientSwitchedPrimary struct {
	state                 protoimpl.MessageState                                `protogen:"open.v1"`
	ConnectionId          *uint32                                               `protobuf:"fixed32,1,opt,name=connection_id,json=connectionId" json:"connection_id,omitempty"`
	FromIp                *uint32                                               `protobuf:"fixed32,2,opt,name=from_ip,json=fromIp" json:"from_ip,omitempty"`
	FromPort              *uint32                                               `protobuf:"varint,3,opt,name=from_port,json=fromPort" json:"from_port,omitempty"`
	FromRouterCluster     *uint32                                               `protobuf:"fixed32,4,opt,name=from_router_cluster,json=fromRouterCluster" json:"from_router_cluster,omitempty"`
	FromActiveTime        *uint32                                               `protobuf:"varint,5,opt,name=from_active_time,json=fromActiveTime" json:"from_active_time,omitempty"`
	FromActivePacketsRecv *uint32                                               `protobuf:"varint,6,opt,name=from_active_packets_recv,json=fromActivePacketsRecv" json:"from_active_packets_recv,omitempty"`
	FromDroppedReason     *string                                               `protobuf:"bytes,7,opt,name=from_dropped_reason,json=fromDroppedReason" json:"from_dropped_reason,omitempty"`
	GapMs                 *uint32                                               `protobuf:"varint,8,opt,name=gap_ms,json=gapMs" json:"gap_ms,omitempty"`
	FromQualityNow        *CMsgSteamDatagramClientSwitchedPrimary_RouterQuality `protobuf:"bytes,9,opt,name=from_quality_now,json=fromQualityNow" json:"from_quality_now,omitempty"`
	ToQualityNow          *CMsgSteamDatagramClientSwitchedPrimary_RouterQuality `protobuf:"bytes,10,opt,name=to_quality_now,json=toQualityNow" json:"to_quality_now,omitempty"`
	FromQualityThen       *CMsgSteamDatagramClientSwitchedPrimary_RouterQuality `protobuf:"bytes,11,opt,name=from_quality_then,json=fromQualityThen" json:"from_quality_then,omitempty"`
	ToQualityThen         *CMsgSteamDatagramClientSwitchedPrimary_RouterQuality `protobuf:"bytes,12,opt,name=to_quality_then,json=toQualityThen" json:"to_quality_then,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *CMsgSteamDatagramClientSwitchedPrimary) Reset() {
	*x = CMsgSteamDatagramClientSwitchedPrimary{}
	mi := &file_steamdatagram_messages_sdr_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSteamDatagramClientSwitchedPrimary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramClientSwitchedPrimary) ProtoMessage() {}

func (x *CMsgSteamDatagramClientSwitchedPrimary) ProtoReflect() protoreflect.Message {
	mi := &file_steamdatagram_messages_sdr_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramClientSwitchedPrimary.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramClientSwitchedPrimary) Descriptor() ([]byte, []int) {
	return file_steamdatagram_messages_sdr_proto_rawDescGZIP(), []int{11}
}

func (x *CMsgSteamDatagramClientSwitchedPrimary) GetConnectionId() uint32 {
	if x != nil && x.ConnectionId != nil {
		return *x.ConnectionId
	}
	return 0
}

func (x *CMsgSteamDatagramClientSwitchedPrimary) GetFromIp() uint32 {
	if x != nil && x.FromIp != nil {
		return *x.FromIp
	}
	return 0
}

func (x *CMsgSteamDatagramClientSwitchedPrimary) GetFromPort() uint32 {
	if x != nil && x.FromPort != nil {
		return *x.FromPort
	}
	return 0
}

func (x *CMsgSteamDatagramClientSwitchedPrimary) GetFromRouterCluster() uint32 {
	if x != nil && x.FromRouterCluster != nil {
		return *x.FromRouterCluster
	}
	return 0
}

func (x *CMsgSteamDatagramClientSwitchedPrimary) GetFromActiveTime() uint32 {
	if x != nil && x.FromActiveTime != nil {
		return *x.FromActiveTime
	}
	return 0
}

func (x *CMsgSteamDatagramClientSwitchedPrimary) GetFromActivePacketsRecv() uint32 {
	if x != nil && x.FromActivePacketsRecv != nil {
		return *x.FromActivePacketsRecv
	}
	return 0
}

func (x *CMsgSteamDatagramClientSwitchedPrimary) GetFromDroppedReason() string {
	if x != nil && x.FromDroppedReason != nil {
		return *x.FromDroppedReason
	}
	return ""
}

func (x *CMsgSteamDatagramClientSwitchedPrimary) GetGapMs() uint32 {
	if x != nil && x.GapMs != nil {
		return *x.GapMs
	}
	return 0
}

func (x *CMsgSteamDatagramClientSwitchedPrimary) GetFromQualityNow() *CMsgSteamDatagramClientSwitchedPrimary_RouterQuality {
	if x != nil {
		return x.FromQualityNow
	}
	return nil
}

func (x *CMsgSteamDatagramClientSwitchedPrimary) GetToQualityNow() *CMsgSteamDatagramClientSwitchedPrimary_RouterQuality {
	if x != nil {
		return x.ToQualityNow
	}
	return nil
}

func (x *CMsgSteamDatagramClientSwitchedPrimary) GetFromQualityThen() *CMsgSteamDatagramClientSwitchedPrimary_RouterQuality {
	if x != nil {
		return x.FromQualityThen
	}
	return nil
}

func (x *CMsgSteamDatagramClientSwitchedPrimary) GetToQualityThen() *CMsgSteamDatagramClientSwitchedPrimary_RouterQuality {
	if x != nil {
		return x.ToQualityThen
	}
	return nil
}

type CMsgSteamDatagramConnectRequest struct {
	state                    protoimpl.MessageState                   `protogen:"open.v1"`
	ConnectionId             *uint32                                  `protobuf:"fixed32,1,opt,name=connection_id,json=connectionId" json:"connection_id,omitempty"`
	MyTimestamp              *uint64                                  `protobuf:"fixed64,4,opt,name=my_timestamp,json=myTimestamp" json:"my_timestamp,omitempty"`
	PingEstMs                *uint32                                  `protobuf:"varint,5,opt,name=ping_est_ms,json=pingEstMs" json:"ping_est_ms,omitempty"`
	VirtualPort              *uint32                                  `protobuf:"varint,9,opt,name=virtual_port,json=virtualPort" json:"virtual_port,omitempty"`
	GameserverRelaySessionId *uint32                                  `protobuf:"varint,2,opt,name=gameserver_relay_session_id,json=gameserverRelaySessionId" json:"gameserver_relay_session_id,omitempty"`
	Crypt                    *CMsgSteamDatagramSessionCryptInfoSigned `protobuf:"bytes,6,opt,name=crypt" json:"crypt,omitempty"`
	Cert                     *CMsgSteamDatagramCertificateSigned      `protobuf:"bytes,7,opt,name=cert" json:"cert,omitempty"`
	RoutingSecret            *uint64                                  `protobuf:"fixed64,10,opt,name=routing_secret,json=routingSecret" json:"routing_secret,omitempty"`
	LegacyClientSteamId      *uint64                                  `protobuf:"fixed64,3,opt,name=legacy_client_steam_id,json=legacyClientSteamId" json:"legacy_client_steam_id,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *CMsgSteamDatagramConnectRequest) Reset() {
	*x = CMsgSteamDatagramConnectRequest{}
	mi := &file_steamdatagram_messages_sdr_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSteamDatagramConnectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramConnectRequest) ProtoMessage() {}

func (x *CMsgSteamDatagramConnectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_steamdatagram_messages_sdr_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramConnectRequest.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramConnectRequest) Descriptor() ([]byte, []int) {
	return file_steamdatagram_messages_sdr_proto_rawDescGZIP(), []int{12}
}

func (x *CMsgSteamDatagramConnectRequest) GetConnectionId() uint32 {
	if x != nil && x.ConnectionId != nil {
		return *x.ConnectionId
	}
	return 0
}

func (x *CMsgSteamDatagramConnectRequest) GetMyTimestamp() uint64 {
	if x != nil && x.MyTimestamp != nil {
		return *x.MyTimestamp
	}
	return 0
}

func (x *CMsgSteamDatagramConnectRequest) GetPingEstMs() uint32 {
	if x != nil && x.PingEstMs != nil {
		return *x.PingEstMs
	}
	return 0
}

func (x *CMsgSteamDatagramConnectRequest) GetVirtualPort() uint32 {
	if x != nil && x.VirtualPort != nil {
		return *x.VirtualPort
	}
	return 0
}

func (x *CMsgSteamDatagramConnectRequest) GetGameserverRelaySessionId() uint32 {
	if x != nil && x.GameserverRelaySessionId != nil {
		return *x.GameserverRelaySessionId
	}
	return 0
}

func (x *CMsgSteamDatagramConnectRequest) GetCrypt() *CMsgSteamDatagramSessionCryptInfoSigned {
	if x != nil {
		return x.Crypt
	}
	return nil
}

func (x *CMsgSteamDatagramConnectRequest) GetCert() *CMsgSteamDatagramCertificateSigned {
	if x != nil {
		return x.Cert
	}
	return nil
}

func (x *CMsgSteamDatagramConnectRequest) GetRoutingSecret() uint64 {
	if x != nil && x.RoutingSecret != nil {
		return *x.RoutingSecret
	}
	return 0
}

func (x *CMsgSteamDatagramConnectRequest) GetLegacyClientSteamId() uint64 {
	if x != nil && x.LegacyClientSteamId != nil {
		return *x.LegacyClientSteamId
	}
	return 0
}

type CMsgSteamDatagramConnectOK struct {
	state                    protoimpl.MessageState                   `protogen:"open.v1"`
	ClientConnectionId       *uint32                                  `protobuf:"fixed32,1,opt,name=client_connection_id,json=clientConnectionId" json:"client_connection_id,omitempty"`
	ServerConnectionId       *uint32                                  `protobuf:"fixed32,7,opt,name=server_connection_id,json=serverConnectionId" json:"server_connection_id,omitempty"`
	YourTimestamp            *uint64                                  `protobuf:"fixed64,3,opt,name=your_timestamp,json=yourTimestamp" json:"your_timestamp,omitempty"`
	DelayTimeUsec            *uint32                                  `protobuf:"varint,4,opt,name=delay_time_usec,json=delayTimeUsec" json:"delay_time_usec,omitempty"`
	GameserverRelaySessionId *uint32                                  `protobuf:"varint,2,opt,name=gameserver_relay_session_id,json=gameserverRelaySessionId" json:"gameserver_relay_session_id,omitempty"`
	Crypt                    *CMsgSteamDatagramSessionCryptInfoSigned `protobuf:"bytes,5,opt,name=crypt" json:"crypt,omitempty"`
	Cert                     *CMsgSteamDatagramCertificateSigned      `protobuf:"bytes,6,opt,name=cert" json:"cert,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *CMsgSteamDatagramConnectOK) Reset() {
	*x = CMsgSteamDatagramConnectOK{}
	mi := &file_steamdatagram_messages_sdr_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSteamDatagramConnectOK) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramConnectOK) ProtoMessage() {}

func (x *CMsgSteamDatagramConnectOK) ProtoReflect() protoreflect.Message {
	mi := &file_steamdatagram_messages_sdr_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramConnectOK.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramConnectOK) Descriptor() ([]byte, []int) {
	return file_steamdatagram_messages_sdr_proto_rawDescGZIP(), []int{13}
}

func (x *CMsgSteamDatagramConnectOK) GetClientConnectionId() uint32 {
	if x != nil && x.ClientConnectionId != nil {
		return *x.ClientConnectionId
	}
	return 0
}

func (x *CMsgSteamDatagramConnectOK) GetServerConnectionId() uint32 {
	if x != nil && x.ServerConnectionId != nil {
		return *x.ServerConnectionId
	}
	return 0
}

func (x *CMsgSteamDatagramConnectOK) GetYourTimestamp() uint64 {
	if x != nil && x.YourTimestamp != nil {
		return *x.YourTimestamp
	}
	return 0
}

func (x *CMsgSteamDatagramConnectOK) GetDelayTimeUsec() uint32 {
	if x != nil && x.DelayTimeUsec != nil {
		return *x.DelayTimeUsec
	}
	return 0
}

func (x *CMsgSteamDatagramConnectOK) GetGameserverRelaySessionId() uint32 {
	if x != nil && x.GameserverRelaySessionId != nil {
		return *x.GameserverRelaySessionId
	}
	return 0
}

func (x *CMsgSteamDatagramConnectOK) GetCrypt() *CMsgSteamDatagramSessionCryptInfoSigned {
	if x != nil {
		return x.Crypt
	}
	return nil
}

func (x *CMsgSteamDatagramConnectOK) GetCert() *CMsgSteamDatagramCertificateSigned {
	if x != nil {
		return x.Cert
	}
	return nil
}

type CMsgSteamNetworkingP2PSDRRoutingSummary struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	InitialPing            *uint32                `protobuf:"varint,1,opt,name=initial_ping,json=initialPing" json:"initial_ping,omitempty"`
	InitialPingFrontLocal  *uint32                `protobuf:"varint,2,opt,name=initial_ping_front_local,json=initialPingFrontLocal" json:"initial_ping_front_local,omitempty"`
	InitialPingFrontRemote *uint32                `protobuf:"varint,3,opt,name=initial_ping_front_remote,json=initialPingFrontRemote" json:"initial_ping_front_remote,omitempty"`
	InitialScore           *uint32                `protobuf:"varint,4,opt,name=initial_score,json=initialScore" json:"initial_score,omitempty"`
	InitialPopLocal        *uint32                `protobuf:"fixed32,5,opt,name=initial_pop_local,json=initialPopLocal" json:"initial_pop_local,omitempty"`
	InitialPopRemote       *uint32                `protobuf:"fixed32,6,opt,name=initial_pop_remote,json=initialPopRemote" json:"initial_pop_remote,omitempty"`
	BestPing               *uint32                `protobuf:"varint,11,opt,name=best_ping,json=bestPing" json:"best_ping,omitempty"`
	BestPingFrontLocal     *uint32                `protobuf:"varint,12,opt,name=best_ping_front_local,json=bestPingFrontLocal" json:"best_ping_front_local,omitempty"`
	BestPingFrontRemote    *uint32                `protobuf:"varint,13,opt,name=best_ping_front_remote,json=bestPingFrontRemote" json:"best_ping_front_remote,omitempty"`
	BestScore              *uint32                `protobuf:"varint,14,opt,name=best_score,json=bestScore" json:"best_score,omitempty"`
	BestPopLocal           *uint32                `protobuf:"fixed32,15,opt,name=best_pop_local,json=bestPopLocal" json:"best_pop_local,omitempty"`
	BestPopRemote          *uint32                `protobuf:"fixed32,16,opt,name=best_pop_remote,json=bestPopRemote" json:"best_pop_remote,omitempty"`
	BestTime               *uint32                `protobuf:"varint,17,opt,name=best_time,json=bestTime" json:"best_time,omitempty"`
	NegotiationMs          *uint32                `protobuf:"varint,7,opt,name=negotiation_ms,json=negotiationMs" json:"negotiation_ms,omitempty"`
	SelectedSeconds        *uint32                `protobuf:"varint,8,opt,name=selected_seconds,json=selectedSeconds" json:"selected_seconds,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *CMsgSteamNetworkingP2PSDRRoutingSummary) Reset() {
	*x = CMsgSteamNetworkingP2PSDRRoutingSummary{}
	mi := &file_steamdatagram_messages_sdr_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSteamNetworkingP2PSDRRoutingSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamNetworkingP2PSDRRoutingSummary) ProtoMessage() {}

func (x *CMsgSteamNetworkingP2PSDRRoutingSummary) ProtoReflect() protoreflect.Message {
	mi := &file_steamdatagram_messages_sdr_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamNetworkingP2PSDRRoutingSummary.ProtoReflect.Descriptor instead.
func (*CMsgSteamNetworkingP2PSDRRoutingSummary) Descriptor() ([]byte, []int) {
	return file_steamdatagram_messages_sdr_proto_rawDescGZIP(), []int{14}
}

func (x *CMsgSteamNetworkingP2PSDRRoutingSummary) GetInitialPing() uint32 {
	if x != nil && x.InitialPing != nil {
		return *x.InitialPing
	}
	return 0
}

func (x *CMsgSteamNetworkingP2PSDRRoutingSummary) GetInitialPingFrontLocal() uint32 {
	if x != nil && x.InitialPingFrontLocal != nil {
		return *x.InitialPingFrontLocal
	}
	return 0
}

func (x *CMsgSteamNetworkingP2PSDRRoutingSummary) GetInitialPingFrontRemote() uint32 {
	if x != nil && x.InitialPingFrontRemote != nil {
		return *x.InitialPingFrontRemote
	}
	return 0
}

func (x *CMsgSteamNetworkingP2PSDRRoutingSummary) GetInitialScore() uint32 {
	if x != nil && x.InitialScore != nil {
		return *x.InitialScore
	}
	return 0
}

func (x *CMsgSteamNetworkingP2PSDRRoutingSummary) GetInitialPopLocal() uint32 {
	if x != nil && x.InitialPopLocal != nil {
		return *x.InitialPopLocal
	}
	return 0
}

func (x *CMsgSteamNetworkingP2PSDRRoutingSummary) GetInitialPopRemote() uint32 {
	if x != nil && x.InitialPopRemote != nil {
		return *x.InitialPopRemote
	}
	return 0
}

func (x *CMsgSteamNetworkingP2PSDRRoutingSummary) GetBestPing() uint32 {
	if x != nil && x.BestPing != nil {
		return *x.BestPing
	}
	return 0
}

func (x *CMsgSteamNetworkingP2PSDRRoutingSummary) GetBestPingFrontLocal() uint32 {
	if x != nil && x.BestPingFrontLocal != nil {
		return *x.BestPingFrontLocal
	}
	return 0
}

func (x *CMsgSteamNetworkingP2PSDRRoutingSummary) GetBestPingFrontRemote() uint32 {
	if x != nil && x.BestPingFrontRemote != nil {
		return *x.BestPingFrontRemote
	}
	return 0
}

func (x *CMsgSteamNetworkingP2PSDRRoutingSummary) GetBestScore() uint32 {
	if x != nil && x.BestScore != nil {
		return *x.BestScore
	}
	return 0
}

func (x *CMsgSteamNetworkingP2PSDRRoutingSummary) GetBestPopLocal() uint32 {
	if x != nil && x.BestPopLocal != nil {
		return *x.BestPopLocal
	}
	return 0
}

func (x *CMsgSteamNetworkingP2PSDRRoutingSummary) GetBestPopRemote() uint32 {
	if x != nil && x.BestPopRemote != nil {
		return *x.BestPopRemote
	}
	return 0
}

func (x *CMsgSteamNetworkingP2PSDRRoutingSummary) GetBestTime() uint32 {
	if x != nil && x.BestTime != nil {
		return *x.BestTime
	}
	return 0
}

func (x *CMsgSteamNetworkingP2PSDRRoutingSummary) GetNegotiationMs() uint32 {
	if x != nil && x.NegotiationMs != nil {
		return *x.NegotiationMs
	}
	return 0
}

func (x *CMsgSteamNetworkingP2PSDRRoutingSummary) GetSelectedSeconds() uint32 {
	if x != nil && x.SelectedSeconds != nil {
		return *x.SelectedSeconds
	}
	return 0
}

type CMsgSteamDatagramP2PRoutingSummary struct {
	state         protoimpl.MessageState                   `protogen:"open.v1"`
	Ice           *CMsgSteamNetworkingICESessionSummary    `protobuf:"bytes,2,opt,name=ice" json:"ice,omitempty"`
	Sdr           *CMsgSteamNetworkingP2PSDRRoutingSummary `protobuf:"bytes,3,opt,name=sdr" json:"sdr,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgSteamDatagramP2PRoutingSummary) Reset() {
	*x = CMsgSteamDatagramP2PRoutingSummary{}
	mi := &file_steamdatagram_messages_sdr_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSteamDatagramP2PRoutingSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramP2PRoutingSummary) ProtoMessage() {}

func (x *CMsgSteamDatagramP2PRoutingSummary) ProtoReflect() protoreflect.Message {
	mi := &file_steamdatagram_messages_sdr_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramP2PRoutingSummary.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramP2PRoutingSummary) Descriptor() ([]byte, []int) {
	return file_steamdatagram_messages_sdr_proto_rawDescGZIP(), []int{15}
}

func (x *CMsgSteamDatagramP2PRoutingSummary) GetIce() *CMsgSteamNetworkingICESessionSummary {
	if x != nil {
		return x.Ice
	}
	return nil
}

func (x *CMsgSteamDatagramP2PRoutingSummary) GetSdr() *CMsgSteamNetworkingP2PSDRRoutingSummary {
	if x != nil {
		return x.Sdr
	}
	return nil
}

type CMsgSteamDatagramConnectionClosed struct {
	state                          protoimpl.MessageState                        `protogen:"open.v1"`
	ToConnectionId                 *uint32                                       `protobuf:"fixed32,7,opt,name=to_connection_id,json=toConnectionId" json:"to_connection_id,omitempty"`
	FromConnectionId               *uint32                                       `protobuf:"fixed32,8,opt,name=from_connection_id,json=fromConnectionId" json:"from_connection_id,omitempty"`
	FromIdentityString             *string                                       `protobuf:"bytes,15,opt,name=from_identity_string,json=fromIdentityString" json:"from_identity_string,omitempty"`
	LegacyFromIdentityBinary       *CMsgSteamNetworkingIdentityLegacyBinary      `protobuf:"bytes,13,opt,name=legacy_from_identity_binary,json=legacyFromIdentityBinary" json:"legacy_from_identity_binary,omitempty"`
	LegacyFromSteamId              *uint64                                       `protobuf:"fixed64,3,opt,name=legacy_from_steam_id,json=legacyFromSteamId" json:"legacy_from_steam_id,omitempty"`
	LegacyGameserverRelaySessionId *uint32                                       `protobuf:"varint,2,opt,name=legacy_gameserver_relay_session_id,json=legacyGameserverRelaySessionId" json:"legacy_gameserver_relay_session_id,omitempty"`
	ToRelaySessionId               *uint32                                       `protobuf:"fixed32,9,opt,name=to_relay_session_id,json=toRelaySessionId" json:"to_relay_session_id,omitempty"`
	FromRelaySessionId             *uint32                                       `protobuf:"fixed32,10,opt,name=from_relay_session_id,json=fromRelaySessionId" json:"from_relay_session_id,omitempty"`
	ForwardTargetRelayRoutingToken []byte                                        `protobuf:"bytes,11,opt,name=forward_target_relay_routing_token,json=forwardTargetRelayRoutingToken" json:"forward_target_relay_routing_token,omitempty"`
	ForwardTargetRevision          *uint32                                       `protobuf:"varint,12,opt,name=forward_target_revision,json=forwardTargetRevision" json:"forward_target_revision,omitempty"`
	RelayMode                      *CMsgSteamDatagramConnectionClosed_ERelayMode `protobuf:"varint,4,opt,name=relay_mode,json=relayMode,enum=CMsgSteamDatagramConnectionClosed_ERelayMode,def=0" json:"relay_mode,omitempty"`
	Debug                          *string                                       `protobuf:"bytes,5,opt,name=debug" json:"debug,omitempty"`
	ReasonCode                     *uint32                                       `protobuf:"varint,6,opt,name=reason_code,json=reasonCode" json:"reason_code,omitempty"`
	RoutingSecret                  *uint64                                       `protobuf:"fixed64,14,opt,name=routing_secret,json=routingSecret" json:"routing_secret,omitempty"`
	NotPrimarySession              *bool                                         `protobuf:"varint,16,opt,name=not_primary_session,json=notPrimarySession" json:"not_primary_session,omitempty"`
	NotPrimaryTransport            *bool                                         `protobuf:"varint,19,opt,name=not_primary_transport,json=notPrimaryTransport" json:"not_primary_transport,omitempty"`
	RelayOverrideActive            *bool                                         `protobuf:"varint,22,opt,name=relay_override_active,json=relayOverrideActive" json:"relay_override_active,omitempty"`
	QualityRelay                   *CMsgSteamDatagramConnectionQuality           `protobuf:"bytes,17,opt,name=quality_relay,json=qualityRelay" json:"quality_relay,omitempty"`
	QualityE2E                     *CMsgSteamDatagramConnectionQuality           `protobuf:"bytes,18,opt,name=quality_e2e,json=qualityE2e" json:"quality_e2e,omitempty"`
	P2PRoutingSummary              *CMsgSteamDatagramP2PRoutingSummary           `protobuf:"bytes,21,opt,name=p2p_routing_summary,json=p2pRoutingSummary" json:"p2p_routing_summary,omitempty"`
	unknownFields                  protoimpl.UnknownFields
	sizeCache                      protoimpl.SizeCache
}

// Default values for CMsgSteamDatagramConnectionClosed fields.
const (
	Default_CMsgSteamDatagramConnectionClosed_RelayMode = CMsgSteamDatagramConnectionClosed_None
)

func (x *CMsgSteamDatagramConnectionClosed) Reset() {
	*x = CMsgSteamDatagramConnectionClosed{}
	mi := &file_steamdatagram_messages_sdr_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSteamDatagramConnectionClosed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramConnectionClosed) ProtoMessage() {}

func (x *CMsgSteamDatagramConnectionClosed) ProtoReflect() protoreflect.Message {
	mi := &file_steamdatagram_messages_sdr_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramConnectionClosed.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramConnectionClosed) Descriptor() ([]byte, []int) {
	return file_steamdatagram_messages_sdr_proto_rawDescGZIP(), []int{16}
}

func (x *CMsgSteamDatagramConnectionClosed) GetToConnectionId() uint32 {
	if x != nil && x.ToConnectionId != nil {
		return *x.ToConnectionId
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionClosed) GetFromConnectionId() uint32 {
	if x != nil && x.FromConnectionId != nil {
		return *x.FromConnectionId
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionClosed) GetFromIdentityString() string {
	if x != nil && x.FromIdentityString != nil {
		return *x.FromIdentityString
	}
	return ""
}

func (x *CMsgSteamDatagramConnectionClosed) GetLegacyFromIdentityBinary() *CMsgSteamNetworkingIdentityLegacyBinary {
	if x != nil {
		return x.LegacyFromIdentityBinary
	}
	return nil
}

func (x *CMsgSteamDatagramConnectionClosed) GetLegacyFromSteamId() uint64 {
	if x != nil && x.LegacyFromSteamId != nil {
		return *x.LegacyFromSteamId
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionClosed) GetLegacyGameserverRelaySessionId() uint32 {
	if x != nil && x.LegacyGameserverRelaySessionId != nil {
		return *x.LegacyGameserverRelaySessionId
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionClosed) GetToRelaySessionId() uint32 {
	if x != nil && x.ToRelaySessionId != nil {
		return *x.ToRelaySessionId
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionClosed) GetFromRelaySessionId() uint32 {
	if x != nil && x.FromRelaySessionId != nil {
		return *x.FromRelaySessionId
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionClosed) GetForwardTargetRelayRoutingToken() []byte {
	if x != nil {
		return x.ForwardTargetRelayRoutingToken
	}
	return nil
}

func (x *CMsgSteamDatagramConnectionClosed) GetForwardTargetRevision() uint32 {
	if x != nil && x.ForwardTargetRevision != nil {
		return *x.ForwardTargetRevision
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionClosed) GetRelayMode() CMsgSteamDatagramConnectionClosed_ERelayMode {
	if x != nil && x.RelayMode != nil {
		return *x.RelayMode
	}
	return Default_CMsgSteamDatagramConnectionClosed_RelayMode
}

func (x *CMsgSteamDatagramConnectionClosed) GetDebug() string {
	if x != nil && x.Debug != nil {
		return *x.Debug
	}
	return ""
}

func (x *CMsgSteamDatagramConnectionClosed) GetReasonCode() uint32 {
	if x != nil && x.ReasonCode != nil {
		return *x.ReasonCode
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionClosed) GetRoutingSecret() uint64 {
	if x != nil && x.RoutingSecret != nil {
		return *x.RoutingSecret
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionClosed) GetNotPrimarySession() bool {
	if x != nil && x.NotPrimarySession != nil {
		return *x.NotPrimarySession
	}
	return false
}

func (x *CMsgSteamDatagramConnectionClosed) GetNotPrimaryTransport() bool {
	if x != nil && x.NotPrimaryTransport != nil {
		return *x.NotPrimaryTransport
	}
	return false
}

func (x *CMsgSteamDatagramConnectionClosed) GetRelayOverrideActive() bool {
	if x != nil && x.RelayOverrideActive != nil {
		return *x.RelayOverrideActive
	}
	return false
}

func (x *CMsgSteamDatagramConnectionClosed) GetQualityRelay() *CMsgSteamDatagramConnectionQuality {
	if x != nil {
		return x.QualityRelay
	}
	return nil
}

func (x *CMsgSteamDatagramConnectionClosed) GetQualityE2E() *CMsgSteamDatagramConnectionQuality {
	if x != nil {
		return x.QualityE2E
	}
	return nil
}

func (x *CMsgSteamDatagramConnectionClosed) GetP2PRoutingSummary() *CMsgSteamDatagramP2PRoutingSummary {
	if x != nil {
		return x.P2PRoutingSummary
	}
	return nil
}

type CMsgSteamDatagramNoConnection struct {
	state                          protoimpl.MessageState              `protogen:"open.v1"`
	ToConnectionId                 *uint32                             `protobuf:"fixed32,5,opt,name=to_connection_id,json=toConnectionId" json:"to_connection_id,omitempty"`
	FromConnectionId               *uint32                             `protobuf:"fixed32,6,opt,name=from_connection_id,json=fromConnectionId" json:"from_connection_id,omitempty"`
	LegacyGameserverRelaySessionId *uint32                             `protobuf:"varint,2,opt,name=legacy_gameserver_relay_session_id,json=legacyGameserverRelaySessionId" json:"legacy_gameserver_relay_session_id,omitempty"`
	ToRelaySessionId               *uint32                             `protobuf:"fixed32,9,opt,name=to_relay_session_id,json=toRelaySessionId" json:"to_relay_session_id,omitempty"`
	FromRelaySessionId             *uint32                             `protobuf:"fixed32,10,opt,name=from_relay_session_id,json=fromRelaySessionId" json:"from_relay_session_id,omitempty"`
	FromIdentityString             *string                             `protobuf:"bytes,7,opt,name=from_identity_string,json=fromIdentityString" json:"from_identity_string,omitempty"`
	LegacyFromSteamId              *uint64                             `protobuf:"fixed64,3,opt,name=legacy_from_steam_id,json=legacyFromSteamId" json:"legacy_from_steam_id,omitempty"`
	EndToEnd                       *bool                               `protobuf:"varint,4,opt,name=end_to_end,json=endToEnd" json:"end_to_end,omitempty"`
	NotPrimarySession              *bool                               `protobuf:"varint,12,opt,name=not_primary_session,json=notPrimarySession" json:"not_primary_session,omitempty"`
	NotPrimaryTransport            *bool                               `protobuf:"varint,15,opt,name=not_primary_transport,json=notPrimaryTransport" json:"not_primary_transport,omitempty"`
	RelayOverrideActive            *bool                               `protobuf:"varint,17,opt,name=relay_override_active,json=relayOverrideActive" json:"relay_override_active,omitempty"`
	QualityRelay                   *CMsgSteamDatagramConnectionQuality `protobuf:"bytes,13,opt,name=quality_relay,json=qualityRelay" json:"quality_relay,omitempty"`
	QualityE2E                     *CMsgSteamDatagramConnectionQuality `protobuf:"bytes,14,opt,name=quality_e2e,json=qualityE2e" json:"quality_e2e,omitempty"`
	P2PRoutingSummary              *CMsgSteamDatagramP2PRoutingSummary `protobuf:"bytes,16,opt,name=p2p_routing_summary,json=p2pRoutingSummary" json:"p2p_routing_summary,omitempty"`
	RoutingSecret                  *uint64                             `protobuf:"fixed64,11,opt,name=routing_secret,json=routingSecret" json:"routing_secret,omitempty"`
	DummyPad                       *uint32                             `protobuf:"fixed32,1023,opt,name=dummy_pad,json=dummyPad" json:"dummy_pad,omitempty"`
	unknownFields                  protoimpl.UnknownFields
	sizeCache                      protoimpl.SizeCache
}

func (x *CMsgSteamDatagramNoConnection) Reset() {
	*x = CMsgSteamDatagramNoConnection{}
	mi := &file_steamdatagram_messages_sdr_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSteamDatagramNoConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramNoConnection) ProtoMessage() {}

func (x *CMsgSteamDatagramNoConnection) ProtoReflect() protoreflect.Message {
	mi := &file_steamdatagram_messages_sdr_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramNoConnection.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramNoConnection) Descriptor() ([]byte, []int) {
	return file_steamdatagram_messages_sdr_proto_rawDescGZIP(), []int{17}
}

func (x *CMsgSteamDatagramNoConnection) GetToConnectionId() uint32 {
	if x != nil && x.ToConnectionId != nil {
		return *x.ToConnectionId
	}
	return 0
}

func (x *CMsgSteamDatagramNoConnection) GetFromConnectionId() uint32 {
	if x != nil && x.FromConnectionId != nil {
		return *x.FromConnectionId
	}
	return 0
}

func (x *CMsgSteamDatagramNoConnection) GetLegacyGameserverRelaySessionId() uint32 {
	if x != nil && x.LegacyGameserverRelaySessionId != nil {
		return *x.LegacyGameserverRelaySessionId
	}
	return 0
}

func (x *CMsgSteamDatagramNoConnection) GetToRelaySessionId() uint32 {
	if x != nil && x.ToRelaySessionId != nil {
		return *x.ToRelaySessionId
	}
	return 0
}

func (x *CMsgSteamDatagramNoConnection) GetFromRelaySessionId() uint32 {
	if x != nil && x.FromRelaySessionId != nil {
		return *x.FromRelaySessionId
	}
	return 0
}

func (x *CMsgSteamDatagramNoConnection) GetFromIdentityString() string {
	if x != nil && x.FromIdentityString != nil {
		return *x.FromIdentityString
	}
	return ""
}

func (x *CMsgSteamDatagramNoConnection) GetLegacyFromSteamId() uint64 {
	if x != nil && x.LegacyFromSteamId != nil {
		return *x.LegacyFromSteamId
	}
	return 0
}

func (x *CMsgSteamDatagramNoConnection) GetEndToEnd() bool {
	if x != nil && x.EndToEnd != nil {
		return *x.EndToEnd
	}
	return false
}

func (x *CMsgSteamDatagramNoConnection) GetNotPrimarySession() bool {
	if x != nil && x.NotPrimarySession != nil {
		return *x.NotPrimarySession
	}
	return false
}

func (x *CMsgSteamDatagramNoConnection) GetNotPrimaryTransport() bool {
	if x != nil && x.NotPrimaryTransport != nil {
		return *x.NotPrimaryTransport
	}
	return false
}

func (x *CMsgSteamDatagramNoConnection) GetRelayOverrideActive() bool {
	if x != nil && x.RelayOverrideActive != nil {
		return *x.RelayOverrideActive
	}
	return false
}

func (x *CMsgSteamDatagramNoConnection) GetQualityRelay() *CMsgSteamDatagramConnectionQuality {
	if x != nil {
		return x.QualityRelay
	}
	return nil
}

func (x *CMsgSteamDatagramNoConnection) GetQualityE2E() *CMsgSteamDatagramConnectionQuality {
	if x != nil {
		return x.QualityE2E
	}
	return nil
}

func (x *CMsgSteamDatagramNoConnection) GetP2PRoutingSummary() *CMsgSteamDatagramP2PRoutingSummary {
	if x != nil {
		return x.P2PRoutingSummary
	}
	return nil
}

func (x *CMsgSteamDatagramNoConnection) GetRoutingSecret() uint64 {
	if x != nil && x.RoutingSecret != nil {
		return *x.RoutingSecret
	}
	return 0
}

func (x *CMsgSteamDatagramNoConnection) GetDummyPad() uint32 {
	if x != nil && x.DummyPad != nil {
		return *x.DummyPad
	}
	return 0
}

type CMsgSteamDatagramGameserverSessionRequest struct {
	state                 protoimpl.MessageState              `protogen:"open.v1"`
	Ticket                []byte                              `protobuf:"bytes,1,opt,name=ticket" json:"ticket,omitempty"`
	ChallengeTime         *uint32                             `protobuf:"fixed32,3,opt,name=challenge_time,json=challengeTime" json:"challenge_time,omitempty"`
	Challenge             *uint64                             `protobuf:"fixed64,4,opt,name=challenge" json:"challenge,omitempty"`
	ClientConnectionId    *uint32                             `protobuf:"fixed32,5,opt,name=client_connection_id,json=clientConnectionId" json:"client_connection_id,omitempty"`
	ServerConnectionId    *uint32                             `protobuf:"fixed32,8,opt,name=server_connection_id,json=serverConnectionId" json:"server_connection_id,omitempty"`
	NetworkConfigVersion  *uint64                             `protobuf:"varint,6,opt,name=network_config_version,json=networkConfigVersion" json:"network_config_version,omitempty"`
	ProtocolVersion       *uint32                             `protobuf:"varint,7,opt,name=protocol_version,json=protocolVersion" json:"protocol_version,omitempty"`
	Platform              *string                             `protobuf:"bytes,9,opt,name=platform" json:"platform,omitempty"`
	Build                 *string                             `protobuf:"bytes,10,opt,name=build" json:"build,omitempty"`
	DevGameserverIdentity *string                             `protobuf:"bytes,100,opt,name=dev_gameserver_identity,json=devGameserverIdentity" json:"dev_gameserver_identity,omitempty"`
	DevClientCert         *CMsgSteamDatagramCertificateSigned `protobuf:"bytes,101,opt,name=dev_client_cert,json=devClientCert" json:"dev_client_cert,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *CMsgSteamDatagramGameserverSessionRequest) Reset() {
	*x = CMsgSteamDatagramGameserverSessionRequest{}
	mi := &file_steamdatagram_messages_sdr_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSteamDatagramGameserverSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramGameserverSessionRequest) ProtoMessage() {}

func (x *CMsgSteamDatagramGameserverSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_steamdatagram_messages_sdr_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramGameserverSessionRequest.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramGameserverSessionRequest) Descriptor() ([]byte, []int) {
	return file_steamdatagram_messages_sdr_proto_rawDescGZIP(), []int{18}
}

func (x *CMsgSteamDatagramGameserverSessionRequest) GetTicket() []byte {
	if x != nil {
		return x.Ticket
	}
	return nil
}

func (x *CMsgSteamDatagramGameserverSessionRequest) GetChallengeTime() uint32 {
	if x != nil && x.ChallengeTime != nil {
		return *x.ChallengeTime
	}
	return 0
}

func (x *CMsgSteamDatagramGameserverSessionRequest) GetChallenge() uint64 {
	if x != nil && x.Challenge != nil {
		return *x.Challenge
	}
	return 0
}

func (x *CMsgSteamDatagramGameserverSessionRequest) GetClientConnectionId() uint32 {
	if x != nil && x.ClientConnectionId != nil {
		return *x.ClientConnectionId
	}
	return 0
}

func (x *CMsgSteamDatagramGameserverSessionRequest) GetServerConnectionId() uint32 {
	if x != nil && x.ServerConnectionId != nil {
		return *x.ServerConnectionId
	}
	return 0
}

func (x *CMsgSteamDatagramGameserverSessionRequest) GetNetworkConfigVersion() uint64 {
	if x != nil && x.NetworkConfigVersion != nil {
		return *x.NetworkConfigVersion
	}
	return 0
}

func (x *CMsgSteamDatagramGameserverSessionRequest) GetProtocolVersion() uint32 {
	if x != nil && x.ProtocolVersion != nil {
		return *x.ProtocolVersion
	}
	return 0
}

func (x *CMsgSteamDatagramGameserverSessionRequest) GetPlatform() string {
	if x != nil && x.Platform != nil {
		return *x.Platform
	}
	return ""
}

func (x *CMsgSteamDatagramGameserverSessionRequest) GetBuild() string {
	if x != nil && x.Build != nil {
		return *x.Build
	}
	return ""
}

func (x *CMsgSteamDatagramGameserverSessionRequest) GetDevGameserverIdentity() string {
	if x != nil && x.DevGameserverIdentity != nil {
		return *x.DevGameserverIdentity
	}
	return ""
}

func (x *CMsgSteamDatagramGameserverSessionRequest) GetDevClientCert() *CMsgSteamDatagramCertificateSigned {
	if x != nil {
		return x.DevClientCert
	}
	return nil
}

type CMsgSteamDatagramGameserverSessionEstablished struct {
	state                     protoimpl.MessageState `protogen:"open.v1"`
	ConnectionId              *uint32                `protobuf:"fixed32,1,opt,name=connection_id,json=connectionId" json:"connection_id,omitempty"`
	GameserverIdentityString  *string                `protobuf:"bytes,2,opt,name=gameserver_identity_string,json=gameserverIdentityString" json:"gameserver_identity_string,omitempty"`
	SecondsUntilShutdown      *uint32                `protobuf:"varint,4,opt,name=seconds_until_shutdown,json=secondsUntilShutdown" json:"seconds_until_shutdown,omitempty"`
	SeqNumR2C                 *uint32                `protobuf:"varint,6,opt,name=seq_num_r2c,json=seqNumR2c" json:"seq_num_r2c,omitempty"`
	DummyLegacyIdentityBinary []byte                 `protobuf:"bytes,7,opt,name=dummy_legacy_identity_binary,json=dummyLegacyIdentityBinary" json:"dummy_legacy_identity_binary,omitempty"`
	LegacyGameserverSteamid   *uint64                `protobuf:"fixed64,3,opt,name=legacy_gameserver_steamid,json=legacyGameserverSteamid" json:"legacy_gameserver_steamid,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *CMsgSteamDatagramGameserverSessionEstablished) Reset() {
	*x = CMsgSteamDatagramGameserverSessionEstablished{}
	mi := &file_steamdatagram_messages_sdr_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSteamDatagramGameserverSessionEstablished) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramGameserverSessionEstablished) ProtoMessage() {}

func (x *CMsgSteamDatagramGameserverSessionEstablished) ProtoReflect() protoreflect.Message {
	mi := &file_steamdatagram_messages_sdr_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramGameserverSessionEstablished.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramGameserverSessionEstablished) Descriptor() ([]byte, []int) {
	return file_steamdatagram_messages_sdr_proto_rawDescGZIP(), []int{19}
}

func (x *CMsgSteamDatagramGameserverSessionEstablished) GetConnectionId() uint32 {
	if x != nil && x.ConnectionId != nil {
		return *x.ConnectionId
	}
	return 0
}

func (x *CMsgSteamDatagramGameserverSessionEstablished) GetGameserverIdentityString() string {
	if x != nil && x.GameserverIdentityString != nil {
		return *x.GameserverIdentityString
	}
	return ""
}

func (x *CMsgSteamDatagramGameserverSessionEstablished) GetSecondsUntilShutdown() uint32 {
	if x != nil && x.SecondsUntilShutdown != nil {
		return *x.SecondsUntilShutdown
	}
	return 0
}

func (x *CMsgSteamDatagramGameserverSessionEstablished) GetSeqNumR2C() uint32 {
	if x != nil && x.SeqNumR2C != nil {
		return *x.SeqNumR2C
	}
	return 0
}

func (x *CMsgSteamDatagramGameserverSessionEstablished) GetDummyLegacyIdentityBinary() []byte {
	if x != nil {
		return x.DummyLegacyIdentityBinary
	}
	return nil
}

func (x *CMsgSteamDatagramGameserverSessionEstablished) GetLegacyGameserverSteamid() uint64 {
	if x != nil && x.LegacyGameserverSteamid != nil {
		return *x.LegacyGameserverSteamid
	}
	return 0
}

type CMsgSteamDatagramConnectionStatsClientToRouter struct {
	state              protoimpl.MessageState              `protogen:"open.v1"`
	QualityRelay       *CMsgSteamDatagramConnectionQuality `protobuf:"bytes,1,opt,name=quality_relay,json=qualityRelay" json:"quality_relay,omitempty"`
	QualityE2E         *CMsgSteamDatagramConnectionQuality `protobuf:"bytes,2,opt,name=quality_e2e,json=qualityE2e" json:"quality_e2e,omitempty"`
	AckRelay           []uint32                            `protobuf:"fixed32,4,rep,name=ack_relay,json=ackRelay" json:"ack_relay,omitempty"`
	LegacyAckE2E       []uint32                            `protobuf:"fixed32,5,rep,name=legacy_ack_e2e,json=legacyAckE2e" json:"legacy_ack_e2e,omitempty"`
	Flags              *uint32                             `protobuf:"varint,6,opt,name=flags" json:"flags,omitempty"`
	ClientConnectionId *uint32                             `protobuf:"fixed32,8,opt,name=client_connection_id,json=clientConnectionId" json:"client_connection_id,omitempty"`
	SeqNumC2R          *uint32                             `protobuf:"varint,9,opt,name=seq_num_c2r,json=seqNumC2r" json:"seq_num_c2r,omitempty"`
	SeqNumE2E          *uint32                             `protobuf:"varint,10,opt,name=seq_num_e2e,json=seqNumE2e" json:"seq_num_e2e,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *CMsgSteamDatagramConnectionStatsClientToRouter) Reset() {
	*x = CMsgSteamDatagramConnectionStatsClientToRouter{}
	mi := &file_steamdatagram_messages_sdr_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSteamDatagramConnectionStatsClientToRouter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramConnectionStatsClientToRouter) ProtoMessage() {}

func (x *CMsgSteamDatagramConnectionStatsClientToRouter) ProtoReflect() protoreflect.Message {
	mi := &file_steamdatagram_messages_sdr_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramConnectionStatsClientToRouter.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramConnectionStatsClientToRouter) Descriptor() ([]byte, []int) {
	return file_steamdatagram_messages_sdr_proto_rawDescGZIP(), []int{20}
}

func (x *CMsgSteamDatagramConnectionStatsClientToRouter) GetQualityRelay() *CMsgSteamDatagramConnectionQuality {
	if x != nil {
		return x.QualityRelay
	}
	return nil
}

func (x *CMsgSteamDatagramConnectionStatsClientToRouter) GetQualityE2E() *CMsgSteamDatagramConnectionQuality {
	if x != nil {
		return x.QualityE2E
	}
	return nil
}

func (x *CMsgSteamDatagramConnectionStatsClientToRouter) GetAckRelay() []uint32 {
	if x != nil {
		return x.AckRelay
	}
	return nil
}

func (x *CMsgSteamDatagramConnectionStatsClientToRouter) GetLegacyAckE2E() []uint32 {
	if x != nil {
		return x.LegacyAckE2E
	}
	return nil
}

func (x *CMsgSteamDatagramConnectionStatsClientToRouter) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsClientToRouter) GetClientConnectionId() uint32 {
	if x != nil && x.ClientConnectionId != nil {
		return *x.ClientConnectionId
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsClientToRouter) GetSeqNumC2R() uint32 {
	if x != nil && x.SeqNumC2R != nil {
		return *x.SeqNumC2R
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsClientToRouter) GetSeqNumE2E() uint32 {
	if x != nil && x.SeqNumE2E != nil {
		return *x.SeqNumE2E
	}
	return 0
}

type CMsgSteamDatagramConnectionStatsRouterToClient struct {
	state                      protoimpl.MessageState              `protogen:"open.v1"`
	QualityRelay               *CMsgSteamDatagramConnectionQuality `protobuf:"bytes,1,opt,name=quality_relay,json=qualityRelay" json:"quality_relay,omitempty"`
	QualityE2E                 *CMsgSteamDatagramConnectionQuality `protobuf:"bytes,2,opt,name=quality_e2e,json=qualityE2e" json:"quality_e2e,omitempty"`
	SecondsUntilShutdown       *uint32                             `protobuf:"varint,6,opt,name=seconds_until_shutdown,json=secondsUntilShutdown" json:"seconds_until_shutdown,omitempty"`
	MigrateRequestIp           *uint32                             `protobuf:"fixed32,10,opt,name=migrate_request_ip,json=migrateRequestIp" json:"migrate_request_ip,omitempty"`
	MigrateRequestPort         *uint32                             `protobuf:"varint,11,opt,name=migrate_request_port,json=migrateRequestPort" json:"migrate_request_port,omitempty"`
	ScoringPenaltyRelayCluster *uint32                             `protobuf:"varint,12,opt,name=scoring_penalty_relay_cluster,json=scoringPenaltyRelayCluster" json:"scoring_penalty_relay_cluster,omitempty"`
	AckRelay                   []uint32                            `protobuf:"fixed32,13,rep,name=ack_relay,json=ackRelay" json:"ack_relay,omitempty"`
	LegacyAckE2E               []uint32                            `protobuf:"fixed32,14,rep,name=legacy_ack_e2e,json=legacyAckE2e" json:"legacy_ack_e2e,omitempty"`
	Flags                      *uint32                             `protobuf:"varint,15,opt,name=flags" json:"flags,omitempty"`
	ClientConnectionId         *uint32                             `protobuf:"fixed32,7,opt,name=client_connection_id,json=clientConnectionId" json:"client_connection_id,omitempty"`
	SeqNumR2C                  *uint32                             `protobuf:"varint,8,opt,name=seq_num_r2c,json=seqNumR2c" json:"seq_num_r2c,omitempty"`
	SeqNumE2E                  *uint32                             `protobuf:"varint,9,opt,name=seq_num_e2e,json=seqNumE2e" json:"seq_num_e2e,omitempty"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *CMsgSteamDatagramConnectionStatsRouterToClient) Reset() {
	*x = CMsgSteamDatagramConnectionStatsRouterToClient{}
	mi := &file_steamdatagram_messages_sdr_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSteamDatagramConnectionStatsRouterToClient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramConnectionStatsRouterToClient) ProtoMessage() {}

func (x *CMsgSteamDatagramConnectionStatsRouterToClient) ProtoReflect() protoreflect.Message {
	mi := &file_steamdatagram_messages_sdr_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramConnectionStatsRouterToClient.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramConnectionStatsRouterToClient) Descriptor() ([]byte, []int) {
	return file_steamdatagram_messages_sdr_proto_rawDescGZIP(), []int{21}
}

func (x *CMsgSteamDatagramConnectionStatsRouterToClient) GetQualityRelay() *CMsgSteamDatagramConnectionQuality {
	if x != nil {
		return x.QualityRelay
	}
	return nil
}

func (x *CMsgSteamDatagramConnectionStatsRouterToClient) GetQualityE2E() *CMsgSteamDatagramConnectionQuality {
	if x != nil {
		return x.QualityE2E
	}
	return nil
}

func (x *CMsgSteamDatagramConnectionStatsRouterToClient) GetSecondsUntilShutdown() uint32 {
	if x != nil && x.SecondsUntilShutdown != nil {
		return *x.SecondsUntilShutdown
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsRouterToClient) GetMigrateRequestIp() uint32 {
	if x != nil && x.MigrateRequestIp != nil {
		return *x.MigrateRequestIp
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsRouterToClient) GetMigrateRequestPort() uint32 {
	if x != nil && x.MigrateRequestPort != nil {
		return *x.MigrateRequestPort
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsRouterToClient) GetScoringPenaltyRelayCluster() uint32 {
	if x != nil && x.ScoringPenaltyRelayCluster != nil {
		return *x.ScoringPenaltyRelayCluster
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsRouterToClient) GetAckRelay() []uint32 {
	if x != nil {
		return x.AckRelay
	}
	return nil
}

func (x *CMsgSteamDatagramConnectionStatsRouterToClient) GetLegacyAckE2E() []uint32 {
	if x != nil {
		return x.LegacyAckE2E
	}
	return nil
}

func (x *CMsgSteamDatagramConnectionStatsRouterToClient) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsRouterToClient) GetClientConnectionId() uint32 {
	if x != nil && x.ClientConnectionId != nil {
		return *x.ClientConnectionId
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsRouterToClient) GetSeqNumR2C() uint32 {
	if x != nil && x.SeqNumR2C != nil {
		return *x.SeqNumR2C
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsRouterToClient) GetSeqNumE2E() uint32 {
	if x != nil && x.SeqNumE2E != nil {
		return *x.SeqNumE2E
	}
	return 0
}

type CMsgSteamDatagramConnectionStatsRouterToServer struct {
	state                protoimpl.MessageState              `protogen:"open.v1"`
	QualityRelay         *CMsgSteamDatagramConnectionQuality `protobuf:"bytes,1,opt,name=quality_relay,json=qualityRelay" json:"quality_relay,omitempty"`
	QualityE2E           *CMsgSteamDatagramConnectionQuality `protobuf:"bytes,2,opt,name=quality_e2e,json=qualityE2e" json:"quality_e2e,omitempty"`
	AckRelay             []uint32                            `protobuf:"fixed32,10,rep,name=ack_relay,json=ackRelay" json:"ack_relay,omitempty"`
	LegacyAckE2E         []uint32                            `protobuf:"fixed32,11,rep,name=legacy_ack_e2e,json=legacyAckE2e" json:"legacy_ack_e2e,omitempty"`
	Flags                *uint32                             `protobuf:"varint,12,opt,name=flags" json:"flags,omitempty"`
	SeqNumR2S            *uint32                             `protobuf:"varint,5,opt,name=seq_num_r2s,json=seqNumR2s" json:"seq_num_r2s,omitempty"`
	SeqNumE2E            *uint32                             `protobuf:"varint,6,opt,name=seq_num_e2e,json=seqNumE2e" json:"seq_num_e2e,omitempty"`
	ClientIdentityString *string                             `protobuf:"bytes,15,opt,name=client_identity_string,json=clientIdentityString" json:"client_identity_string,omitempty"`
	LegacyClientSteamId  *uint64                             `protobuf:"fixed64,7,opt,name=legacy_client_steam_id,json=legacyClientSteamId" json:"legacy_client_steam_id,omitempty"`
	RelaySessionId       *uint32                             `protobuf:"varint,8,opt,name=relay_session_id,json=relaySessionId" json:"relay_session_id,omitempty"`
	ClientConnectionId   *uint32                             `protobuf:"fixed32,9,opt,name=client_connection_id,json=clientConnectionId" json:"client_connection_id,omitempty"`
	ServerConnectionId   *uint32                             `protobuf:"fixed32,13,opt,name=server_connection_id,json=serverConnectionId" json:"server_connection_id,omitempty"`
	RoutingSecret        *uint64                             `protobuf:"fixed64,14,opt,name=routing_secret,json=routingSecret" json:"routing_secret,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *CMsgSteamDatagramConnectionStatsRouterToServer) Reset() {
	*x = CMsgSteamDatagramConnectionStatsRouterToServer{}
	mi := &file_steamdatagram_messages_sdr_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSteamDatagramConnectionStatsRouterToServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramConnectionStatsRouterToServer) ProtoMessage() {}

func (x *CMsgSteamDatagramConnectionStatsRouterToServer) ProtoReflect() protoreflect.Message {
	mi := &file_steamdatagram_messages_sdr_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramConnectionStatsRouterToServer.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramConnectionStatsRouterToServer) Descriptor() ([]byte, []int) {
	return file_steamdatagram_messages_sdr_proto_rawDescGZIP(), []int{22}
}

func (x *CMsgSteamDatagramConnectionStatsRouterToServer) GetQualityRelay() *CMsgSteamDatagramConnectionQuality {
	if x != nil {
		return x.QualityRelay
	}
	return nil
}

func (x *CMsgSteamDatagramConnectionStatsRouterToServer) GetQualityE2E() *CMsgSteamDatagramConnectionQuality {
	if x != nil {
		return x.QualityE2E
	}
	return nil
}

func (x *CMsgSteamDatagramConnectionStatsRouterToServer) GetAckRelay() []uint32 {
	if x != nil {
		return x.AckRelay
	}
	return nil
}

func (x *CMsgSteamDatagramConnectionStatsRouterToServer) GetLegacyAckE2E() []uint32 {
	if x != nil {
		return x.LegacyAckE2E
	}
	return nil
}

func (x *CMsgSteamDatagramConnectionStatsRouterToServer) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsRouterToServer) GetSeqNumR2S() uint32 {
	if x != nil && x.SeqNumR2S != nil {
		return *x.SeqNumR2S
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsRouterToServer) GetSeqNumE2E() uint32 {
	if x != nil && x.SeqNumE2E != nil {
		return *x.SeqNumE2E
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsRouterToServer) GetClientIdentityString() string {
	if x != nil && x.ClientIdentityString != nil {
		return *x.ClientIdentityString
	}
	return ""
}

func (x *CMsgSteamDatagramConnectionStatsRouterToServer) GetLegacyClientSteamId() uint64 {
	if x != nil && x.LegacyClientSteamId != nil {
		return *x.LegacyClientSteamId
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsRouterToServer) GetRelaySessionId() uint32 {
	if x != nil && x.RelaySessionId != nil {
		return *x.RelaySessionId
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsRouterToServer) GetClientConnectionId() uint32 {
	if x != nil && x.ClientConnectionId != nil {
		return *x.ClientConnectionId
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsRouterToServer) GetServerConnectionId() uint32 {
	if x != nil && x.ServerConnectionId != nil {
		return *x.ServerConnectionId
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsRouterToServer) GetRoutingSecret() uint64 {
	if x != nil && x.RoutingSecret != nil {
		return *x.RoutingSecret
	}
	return 0
}

type CMsgSteamDatagramConnectionStatsServerToRouter struct {
	state              protoimpl.MessageState              `protogen:"open.v1"`
	QualityRelay       *CMsgSteamDatagramConnectionQuality `protobuf:"bytes,1,opt,name=quality_relay,json=qualityRelay" json:"quality_relay,omitempty"`
	QualityE2E         *CMsgSteamDatagramConnectionQuality `protobuf:"bytes,2,opt,name=quality_e2e,json=qualityE2e" json:"quality_e2e,omitempty"`
	AckRelay           []uint32                            `protobuf:"fixed32,8,rep,name=ack_relay,json=ackRelay" json:"ack_relay,omitempty"`
	LegacyAckE2E       []uint32                            `protobuf:"fixed32,9,rep,name=legacy_ack_e2e,json=legacyAckE2e" json:"legacy_ack_e2e,omitempty"`
	Flags              *uint32                             `protobuf:"varint,10,opt,name=flags" json:"flags,omitempty"`
	SeqNumS2R          *uint32                             `protobuf:"varint,3,opt,name=seq_num_s2r,json=seqNumS2r" json:"seq_num_s2r,omitempty"`
	SeqNumE2E          *uint32                             `protobuf:"varint,4,opt,name=seq_num_e2e,json=seqNumE2e" json:"seq_num_e2e,omitempty"`
	RelaySessionId     *uint32                             `protobuf:"varint,6,opt,name=relay_session_id,json=relaySessionId" json:"relay_session_id,omitempty"`
	ClientConnectionId *uint32                             `protobuf:"fixed32,7,opt,name=client_connection_id,json=clientConnectionId" json:"client_connection_id,omitempty"`
	ServerConnectionId *uint32                             `protobuf:"fixed32,11,opt,name=server_connection_id,json=serverConnectionId" json:"server_connection_id,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *CMsgSteamDatagramConnectionStatsServerToRouter) Reset() {
	*x = CMsgSteamDatagramConnectionStatsServerToRouter{}
	mi := &file_steamdatagram_messages_sdr_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSteamDatagramConnectionStatsServerToRouter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramConnectionStatsServerToRouter) ProtoMessage() {}

func (x *CMsgSteamDatagramConnectionStatsServerToRouter) ProtoReflect() protoreflect.Message {
	mi := &file_steamdatagram_messages_sdr_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramConnectionStatsServerToRouter.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramConnectionStatsServerToRouter) Descriptor() ([]byte, []int) {
	return file_steamdatagram_messages_sdr_proto_rawDescGZIP(), []int{23}
}

func (x *CMsgSteamDatagramConnectionStatsServerToRouter) GetQualityRelay() *CMsgSteamDatagramConnectionQuality {
	if x != nil {
		return x.QualityRelay
	}
	return nil
}

func (x *CMsgSteamDatagramConnectionStatsServerToRouter) GetQualityE2E() *CMsgSteamDatagramConnectionQuality {
	if x != nil {
		return x.QualityE2E
	}
	return nil
}

func (x *CMsgSteamDatagramConnectionStatsServerToRouter) GetAckRelay() []uint32 {
	if x != nil {
		return x.AckRelay
	}
	return nil
}

func (x *CMsgSteamDatagramConnectionStatsServerToRouter) GetLegacyAckE2E() []uint32 {
	if x != nil {
		return x.LegacyAckE2E
	}
	return nil
}

func (x *CMsgSteamDatagramConnectionStatsServerToRouter) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsServerToRouter) GetSeqNumS2R() uint32 {
	if x != nil && x.SeqNumS2R != nil {
		return *x.SeqNumS2R
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsServerToRouter) GetSeqNumE2E() uint32 {
	if x != nil && x.SeqNumE2E != nil {
		return *x.SeqNumE2E
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsServerToRouter) GetRelaySessionId() uint32 {
	if x != nil && x.RelaySessionId != nil {
		return *x.RelaySessionId
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsServerToRouter) GetClientConnectionId() uint32 {
	if x != nil && x.ClientConnectionId != nil {
		return *x.ClientConnectionId
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsServerToRouter) GetServerConnectionId() uint32 {
	if x != nil && x.ServerConnectionId != nil {
		return *x.ServerConnectionId
	}
	return 0
}

type CMsgSteamDatagramP2PSessionRequestBody struct {
	state                           protoimpl.MessageState `protogen:"open.v1"`
	ChallengeTime                   *uint32                `protobuf:"fixed32,1,opt,name=challenge_time,json=challengeTime" json:"challenge_time,omitempty"`
	Challenge                       *uint64                `protobuf:"fixed64,2,opt,name=challenge" json:"challenge,omitempty"`
	ClientConnectionId              *uint32                `protobuf:"fixed32,3,opt,name=client_connection_id,json=clientConnectionId" json:"client_connection_id,omitempty"`
	LegacyPeerSteamId               *uint64                `protobuf:"fixed64,4,opt,name=legacy_peer_steam_id,json=legacyPeerSteamId" json:"legacy_peer_steam_id,omitempty"`
	PeerIdentityString              *string                `protobuf:"bytes,11,opt,name=peer_identity_string,json=peerIdentityString" json:"peer_identity_string,omitempty"`
	PeerConnectionId                *uint32                `protobuf:"fixed32,5,opt,name=peer_connection_id,json=peerConnectionId" json:"peer_connection_id,omitempty"`
	EncryptedData                   []byte                 `protobuf:"bytes,14,opt,name=encrypted_data,json=encryptedData" json:"encrypted_data,omitempty"`
	EncryptionYourPublicKeyLeadByte *uint32                `protobuf:"varint,15,opt,name=encryption_your_public_key_lead_byte,json=encryptionYourPublicKeyLeadByte" json:"encryption_your_public_key_lead_byte,omitempty"`
	EncryptionMyEphemeralPublicKey  []byte                 `protobuf:"bytes,16,opt,name=encryption_my_ephemeral_public_key,json=encryptionMyEphemeralPublicKey" json:"encryption_my_ephemeral_public_key,omitempty"`
	ProtocolVersion                 *uint32                `protobuf:"varint,8,opt,name=protocol_version,json=protocolVersion" json:"protocol_version,omitempty"`
	NetworkConfigVersion            *uint64                `protobuf:"varint,9,opt,name=network_config_version,json=networkConfigVersion" json:"network_config_version,omitempty"`
	Platform                        *string                `protobuf:"bytes,12,opt,name=platform" json:"platform,omitempty"`
	Build                           *string                `protobuf:"bytes,13,opt,name=build" json:"build,omitempty"`
	unknownFields                   protoimpl.UnknownFields
	sizeCache                       protoimpl.SizeCache
}

func (x *CMsgSteamDatagramP2PSessionRequestBody) Reset() {
	*x = CMsgSteamDatagramP2PSessionRequestBody{}
	mi := &file_steamdatagram_messages_sdr_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSteamDatagramP2PSessionRequestBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramP2PSessionRequestBody) ProtoMessage() {}

func (x *CMsgSteamDatagramP2PSessionRequestBody) ProtoReflect() protoreflect.Message {
	mi := &file_steamdatagram_messages_sdr_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramP2PSessionRequestBody.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramP2PSessionRequestBody) Descriptor() ([]byte, []int) {
	return file_steamdatagram_messages_sdr_proto_rawDescGZIP(), []int{24}
}

func (x *CMsgSteamDatagramP2PSessionRequestBody) GetChallengeTime() uint32 {
	if x != nil && x.ChallengeTime != nil {
		return *x.ChallengeTime
	}
	return 0
}

func (x *CMsgSteamDatagramP2PSessionRequestBody) GetChallenge() uint64 {
	if x != nil && x.Challenge != nil {
		return *x.Challenge
	}
	return 0
}

func (x *CMsgSteamDatagramP2PSessionRequestBody) GetClientConnectionId() uint32 {
	if x != nil && x.ClientConnectionId != nil {
		return *x.ClientConnectionId
	}
	return 0
}

func (x *CMsgSteamDatagramP2PSessionRequestBody) GetLegacyPeerSteamId() uint64 {
	if x != nil && x.LegacyPeerSteamId != nil {
		return *x.LegacyPeerSteamId
	}
	return 0
}

func (x *CMsgSteamDatagramP2PSessionRequestBody) GetPeerIdentityString() string {
	if x != nil && x.PeerIdentityString != nil {
		return *x.PeerIdentityString
	}
	return ""
}

func (x *CMsgSteamDatagramP2PSessionRequestBody) GetPeerConnectionId() uint32 {
	if x != nil && x.PeerConnectionId != nil {
		return *x.PeerConnectionId
	}
	return 0
}

func (x *CMsgSteamDatagramP2PSessionRequestBody) GetEncryptedData() []byte {
	if x != nil {
		return x.EncryptedData
	}
	return nil
}

func (x *CMsgSteamDatagramP2PSessionRequestBody) GetEncryptionYourPublicKeyLeadByte() uint32 {
	if x != nil && x.EncryptionYourPublicKeyLeadByte != nil {
		return *x.EncryptionYourPublicKeyLeadByte
	}
	return 0
}

func (x *CMsgSteamDatagramP2PSessionRequestBody) GetEncryptionMyEphemeralPublicKey() []byte {
	if x != nil {
		return x.EncryptionMyEphemeralPublicKey
	}
	return nil
}

func (x *CMsgSteamDatagramP2PSessionRequestBody) GetProtocolVersion() uint32 {
	if x != nil && x.ProtocolVersion != nil {
		return *x.ProtocolVersion
	}
	return 0
}

func (x *CMsgSteamDatagramP2PSessionRequestBody) GetNetworkConfigVersion() uint64 {
	if x != nil && x.NetworkConfigVersion != nil {
		return *x.NetworkConfigVersion
	}
	return 0
}

func (x *CMsgSteamDatagramP2PSessionRequestBody) GetPlatform() string {
	if x != nil && x.Platform != nil {
		return *x.Platform
	}
	return ""
}

func (x *CMsgSteamDatagramP2PSessionRequestBody) GetBuild() string {
	if x != nil && x.Build != nil {
		return *x.Build
	}
	return ""
}

type CMsgSteamDatagramP2PSessionRequest struct {
	state         protoimpl.MessageState              `protogen:"open.v1"`
	Cert          *CMsgSteamDatagramCertificateSigned `protobuf:"bytes,1,opt,name=cert" json:"cert,omitempty"`
	Body          []byte                              `protobuf:"bytes,2,opt,name=body" json:"body,omitempty"`
	Signature     []byte                              `protobuf:"bytes,3,opt,name=signature" json:"signature,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgSteamDatagramP2PSessionRequest) Reset() {
	*x = CMsgSteamDatagramP2PSessionRequest{}
	mi := &file_steamdatagram_messages_sdr_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSteamDatagramP2PSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramP2PSessionRequest) ProtoMessage() {}

func (x *CMsgSteamDatagramP2PSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_steamdatagram_messages_sdr_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramP2PSessionRequest.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramP2PSessionRequest) Descriptor() ([]byte, []int) {
	return file_steamdatagram_messages_sdr_proto_rawDescGZIP(), []int{25}
}

func (x *CMsgSteamDatagramP2PSessionRequest) GetCert() *CMsgSteamDatagramCertificateSigned {
	if x != nil {
		return x.Cert
	}
	return nil
}

func (x *CMsgSteamDatagramP2PSessionRequest) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *CMsgSteamDatagramP2PSessionRequest) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type CMsgSteamDatagramP2PSessionEstablished struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	ConnectionId         *uint32                `protobuf:"fixed32,1,opt,name=connection_id,json=connectionId" json:"connection_id,omitempty"`
	SecondsUntilShutdown *uint32                `protobuf:"varint,3,opt,name=seconds_until_shutdown,json=secondsUntilShutdown" json:"seconds_until_shutdown,omitempty"`
	RelayRoutingToken    []byte                 `protobuf:"bytes,4,opt,name=relay_routing_token,json=relayRoutingToken" json:"relay_routing_token,omitempty"`
	SeqNumR2C            *uint32                `protobuf:"varint,5,opt,name=seq_num_r2c,json=seqNumR2c" json:"seq_num_r2c,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *CMsgSteamDatagramP2PSessionEstablished) Reset() {
	*x = CMsgSteamDatagramP2PSessionEstablished{}
	mi := &file_steamdatagram_messages_sdr_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSteamDatagramP2PSessionEstablished) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramP2PSessionEstablished) ProtoMessage() {}

func (x *CMsgSteamDatagramP2PSessionEstablished) ProtoReflect() protoreflect.Message {
	mi := &file_steamdatagram_messages_sdr_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramP2PSessionEstablished.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramP2PSessionEstablished) Descriptor() ([]byte, []int) {
	return file_steamdatagram_messages_sdr_proto_rawDescGZIP(), []int{26}
}

func (x *CMsgSteamDatagramP2PSessionEstablished) GetConnectionId() uint32 {
	if x != nil && x.ConnectionId != nil {
		return *x.ConnectionId
	}
	return 0
}

func (x *CMsgSteamDatagramP2PSessionEstablished) GetSecondsUntilShutdown() uint32 {
	if x != nil && x.SecondsUntilShutdown != nil {
		return *x.SecondsUntilShutdown
	}
	return 0
}

func (x *CMsgSteamDatagramP2PSessionEstablished) GetRelayRoutingToken() []byte {
	if x != nil {
		return x.RelayRoutingToken
	}
	return nil
}

func (x *CMsgSteamDatagramP2PSessionEstablished) GetSeqNumR2C() uint32 {
	if x != nil && x.SeqNumR2C != nil {
		return *x.SeqNumR2C
	}
	return 0
}

type CMsgSteamDatagramConnectionStatsP2PClientToRouter struct {
	state                          protoimpl.MessageState              `protogen:"open.v1"`
	QualityRelay                   *CMsgSteamDatagramConnectionQuality `protobuf:"bytes,1,opt,name=quality_relay,json=qualityRelay" json:"quality_relay,omitempty"`
	QualityE2E                     *CMsgSteamDatagramConnectionQuality `protobuf:"bytes,2,opt,name=quality_e2e,json=qualityE2e" json:"quality_e2e,omitempty"`
	P2PRoutingSummary              *CMsgSteamDatagramP2PRoutingSummary `protobuf:"bytes,14,opt,name=p2p_routing_summary,json=p2pRoutingSummary" json:"p2p_routing_summary,omitempty"`
	AckRelay                       []uint32                            `protobuf:"fixed32,3,rep,name=ack_relay,json=ackRelay" json:"ack_relay,omitempty"`
	LegacyAckE2E                   []uint32                            `protobuf:"fixed32,4,rep,name=legacy_ack_e2e,json=legacyAckE2e" json:"legacy_ack_e2e,omitempty"`
	Flags                          *uint32                             `protobuf:"varint,5,opt,name=flags" json:"flags,omitempty"`
	ForwardTargetRelayRoutingToken []byte                              `protobuf:"bytes,6,opt,name=forward_target_relay_routing_token,json=forwardTargetRelayRoutingToken" json:"forward_target_relay_routing_token,omitempty"`
	ForwardTargetRevision          *uint32                             `protobuf:"varint,7,opt,name=forward_target_revision,json=forwardTargetRevision" json:"forward_target_revision,omitempty"`
	Routes                         []byte                              `protobuf:"bytes,8,opt,name=routes" json:"routes,omitempty"`
	AckPeerRoutesRevision          *uint32                             `protobuf:"varint,9,opt,name=ack_peer_routes_revision,json=ackPeerRoutesRevision" json:"ack_peer_routes_revision,omitempty"`
	ConnectionId                   *uint32                             `protobuf:"fixed32,10,opt,name=connection_id,json=connectionId" json:"connection_id,omitempty"`
	SeqNumC2R                      *uint32                             `protobuf:"varint,11,opt,name=seq_num_c2r,json=seqNumC2r" json:"seq_num_c2r,omitempty"`
	SeqNumE2E                      *uint32                             `protobuf:"varint,12,opt,name=seq_num_e2e,json=seqNumE2e" json:"seq_num_e2e,omitempty"`
	unknownFields                  protoimpl.UnknownFields
	sizeCache                      protoimpl.SizeCache
}

func (x *CMsgSteamDatagramConnectionStatsP2PClientToRouter) Reset() {
	*x = CMsgSteamDatagramConnectionStatsP2PClientToRouter{}
	mi := &file_steamdatagram_messages_sdr_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSteamDatagramConnectionStatsP2PClientToRouter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramConnectionStatsP2PClientToRouter) ProtoMessage() {}

func (x *CMsgSteamDatagramConnectionStatsP2PClientToRouter) ProtoReflect() protoreflect.Message {
	mi := &file_steamdatagram_messages_sdr_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramConnectionStatsP2PClientToRouter.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramConnectionStatsP2PClientToRouter) Descriptor() ([]byte, []int) {
	return file_steamdatagram_messages_sdr_proto_rawDescGZIP(), []int{27}
}

func (x *CMsgSteamDatagramConnectionStatsP2PClientToRouter) GetQualityRelay() *CMsgSteamDatagramConnectionQuality {
	if x != nil {
		return x.QualityRelay
	}
	return nil
}

func (x *CMsgSteamDatagramConnectionStatsP2PClientToRouter) GetQualityE2E() *CMsgSteamDatagramConnectionQuality {
	if x != nil {
		return x.QualityE2E
	}
	return nil
}

func (x *CMsgSteamDatagramConnectionStatsP2PClientToRouter) GetP2PRoutingSummary() *CMsgSteamDatagramP2PRoutingSummary {
	if x != nil {
		return x.P2PRoutingSummary
	}
	return nil
}

func (x *CMsgSteamDatagramConnectionStatsP2PClientToRouter) GetAckRelay() []uint32 {
	if x != nil {
		return x.AckRelay
	}
	return nil
}

func (x *CMsgSteamDatagramConnectionStatsP2PClientToRouter) GetLegacyAckE2E() []uint32 {
	if x != nil {
		return x.LegacyAckE2E
	}
	return nil
}

func (x *CMsgSteamDatagramConnectionStatsP2PClientToRouter) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsP2PClientToRouter) GetForwardTargetRelayRoutingToken() []byte {
	if x != nil {
		return x.ForwardTargetRelayRoutingToken
	}
	return nil
}

func (x *CMsgSteamDatagramConnectionStatsP2PClientToRouter) GetForwardTargetRevision() uint32 {
	if x != nil && x.ForwardTargetRevision != nil {
		return *x.ForwardTargetRevision
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsP2PClientToRouter) GetRoutes() []byte {
	if x != nil {
		return x.Routes
	}
	return nil
}

func (x *CMsgSteamDatagramConnectionStatsP2PClientToRouter) GetAckPeerRoutesRevision() uint32 {
	if x != nil && x.AckPeerRoutesRevision != nil {
		return *x.AckPeerRoutesRevision
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsP2PClientToRouter) GetConnectionId() uint32 {
	if x != nil && x.ConnectionId != nil {
		return *x.ConnectionId
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsP2PClientToRouter) GetSeqNumC2R() uint32 {
	if x != nil && x.SeqNumC2R != nil {
		return *x.SeqNumC2R
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsP2PClientToRouter) GetSeqNumE2E() uint32 {
	if x != nil && x.SeqNumE2E != nil {
		return *x.SeqNumE2E
	}
	return 0
}

type CMsgSteamDatagramConnectionStatsP2PRouterToClient struct {
	state                      protoimpl.MessageState              `protogen:"open.v1"`
	QualityRelay               *CMsgSteamDatagramConnectionQuality `protobuf:"bytes,1,opt,name=quality_relay,json=qualityRelay" json:"quality_relay,omitempty"`
	QualityE2E                 *CMsgSteamDatagramConnectionQuality `protobuf:"bytes,2,opt,name=quality_e2e,json=qualityE2e" json:"quality_e2e,omitempty"`
	SecondsUntilShutdown       *uint32                             `protobuf:"varint,3,opt,name=seconds_until_shutdown,json=secondsUntilShutdown" json:"seconds_until_shutdown,omitempty"`
	MigrateRequestIp           *uint32                             `protobuf:"fixed32,4,opt,name=migrate_request_ip,json=migrateRequestIp" json:"migrate_request_ip,omitempty"`
	MigrateRequestPort         *uint32                             `protobuf:"varint,5,opt,name=migrate_request_port,json=migrateRequestPort" json:"migrate_request_port,omitempty"`
	ScoringPenaltyRelayCluster *uint32                             `protobuf:"varint,6,opt,name=scoring_penalty_relay_cluster,json=scoringPenaltyRelayCluster" json:"scoring_penalty_relay_cluster,omitempty"`
	AckRelay                   []uint32                            `protobuf:"fixed32,7,rep,name=ack_relay,json=ackRelay" json:"ack_relay,omitempty"`
	LegacyAckE2E               []uint32                            `protobuf:"fixed32,8,rep,name=legacy_ack_e2e,json=legacyAckE2e" json:"legacy_ack_e2e,omitempty"`
	Flags                      *uint32                             `protobuf:"varint,9,opt,name=flags" json:"flags,omitempty"`
	AckForwardTargetRevision   *uint32                             `protobuf:"varint,10,opt,name=ack_forward_target_revision,json=ackForwardTargetRevision" json:"ack_forward_target_revision,omitempty"`
	Routes                     []byte                              `protobuf:"bytes,11,opt,name=routes" json:"routes,omitempty"`
	AckPeerRoutesRevision      *uint32                             `protobuf:"varint,12,opt,name=ack_peer_routes_revision,json=ackPeerRoutesRevision" json:"ack_peer_routes_revision,omitempty"`
	ConnectionId               *uint32                             `protobuf:"fixed32,13,opt,name=connection_id,json=connectionId" json:"connection_id,omitempty"`
	SeqNumR2C                  *uint32                             `protobuf:"varint,14,opt,name=seq_num_r2c,json=seqNumR2c" json:"seq_num_r2c,omitempty"`
	SeqNumE2E                  *uint32                             `protobuf:"varint,15,opt,name=seq_num_e2e,json=seqNumE2e" json:"seq_num_e2e,omitempty"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *CMsgSteamDatagramConnectionStatsP2PRouterToClient) Reset() {
	*x = CMsgSteamDatagramConnectionStatsP2PRouterToClient{}
	mi := &file_steamdatagram_messages_sdr_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSteamDatagramConnectionStatsP2PRouterToClient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramConnectionStatsP2PRouterToClient) ProtoMessage() {}

func (x *CMsgSteamDatagramConnectionStatsP2PRouterToClient) ProtoReflect() protoreflect.Message {
	mi := &file_steamdatagram_messages_sdr_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramConnectionStatsP2PRouterToClient.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramConnectionStatsP2PRouterToClient) Descriptor() ([]byte, []int) {
	return file_steamdatagram_messages_sdr_proto_rawDescGZIP(), []int{28}
}

func (x *CMsgSteamDatagramConnectionStatsP2PRouterToClient) GetQualityRelay() *CMsgSteamDatagramConnectionQuality {
	if x != nil {
		return x.QualityRelay
	}
	return nil
}

func (x *CMsgSteamDatagramConnectionStatsP2PRouterToClient) GetQualityE2E() *CMsgSteamDatagramConnectionQuality {
	if x != nil {
		return x.QualityE2E
	}
	return nil
}

func (x *CMsgSteamDatagramConnectionStatsP2PRouterToClient) GetSecondsUntilShutdown() uint32 {
	if x != nil && x.SecondsUntilShutdown != nil {
		return *x.SecondsUntilShutdown
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsP2PRouterToClient) GetMigrateRequestIp() uint32 {
	if x != nil && x.MigrateRequestIp != nil {
		return *x.MigrateRequestIp
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsP2PRouterToClient) GetMigrateRequestPort() uint32 {
	if x != nil && x.MigrateRequestPort != nil {
		return *x.MigrateRequestPort
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsP2PRouterToClient) GetScoringPenaltyRelayCluster() uint32 {
	if x != nil && x.ScoringPenaltyRelayCluster != nil {
		return *x.ScoringPenaltyRelayCluster
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsP2PRouterToClient) GetAckRelay() []uint32 {
	if x != nil {
		return x.AckRelay
	}
	return nil
}

func (x *CMsgSteamDatagramConnectionStatsP2PRouterToClient) GetLegacyAckE2E() []uint32 {
	if x != nil {
		return x.LegacyAckE2E
	}
	return nil
}

func (x *CMsgSteamDatagramConnectionStatsP2PRouterToClient) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsP2PRouterToClient) GetAckForwardTargetRevision() uint32 {
	if x != nil && x.AckForwardTargetRevision != nil {
		return *x.AckForwardTargetRevision
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsP2PRouterToClient) GetRoutes() []byte {
	if x != nil {
		return x.Routes
	}
	return nil
}

func (x *CMsgSteamDatagramConnectionStatsP2PRouterToClient) GetAckPeerRoutesRevision() uint32 {
	if x != nil && x.AckPeerRoutesRevision != nil {
		return *x.AckPeerRoutesRevision
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsP2PRouterToClient) GetConnectionId() uint32 {
	if x != nil && x.ConnectionId != nil {
		return *x.ConnectionId
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsP2PRouterToClient) GetSeqNumR2C() uint32 {
	if x != nil && x.SeqNumR2C != nil {
		return *x.SeqNumR2C
	}
	return 0
}

func (x *CMsgSteamDatagramConnectionStatsP2PRouterToClient) GetSeqNumE2E() uint32 {
	if x != nil && x.SeqNumE2E != nil {
		return *x.SeqNumE2E
	}
	return 0
}

type CMsgSteamDatagramP2PBadRouteRouterToClient struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	ConnectionId             *uint32                `protobuf:"fixed32,1,opt,name=connection_id,json=connectionId" json:"connection_id,omitempty"`
	FailedRelayRoutingToken  []byte                 `protobuf:"bytes,2,opt,name=failed_relay_routing_token,json=failedRelayRoutingToken" json:"failed_relay_routing_token,omitempty"`
	AckForwardTargetRevision *uint32                `protobuf:"varint,3,opt,name=ack_forward_target_revision,json=ackForwardTargetRevision" json:"ack_forward_target_revision,omitempty"`
	KludgePad                *uint64                `protobuf:"fixed64,99,opt,name=kludge_pad,json=kludgePad" json:"kludge_pad,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *CMsgSteamDatagramP2PBadRouteRouterToClient) Reset() {
	*x = CMsgSteamDatagramP2PBadRouteRouterToClient{}
	mi := &file_steamdatagram_messages_sdr_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSteamDatagramP2PBadRouteRouterToClient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramP2PBadRouteRouterToClient) ProtoMessage() {}

func (x *CMsgSteamDatagramP2PBadRouteRouterToClient) ProtoReflect() protoreflect.Message {
	mi := &file_steamdatagram_messages_sdr_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramP2PBadRouteRouterToClient.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramP2PBadRouteRouterToClient) Descriptor() ([]byte, []int) {
	return file_steamdatagram_messages_sdr_proto_rawDescGZIP(), []int{29}
}

func (x *CMsgSteamDatagramP2PBadRouteRouterToClient) GetConnectionId() uint32 {
	if x != nil && x.ConnectionId != nil {
		return *x.ConnectionId
	}
	return 0
}

func (x *CMsgSteamDatagramP2PBadRouteRouterToClient) GetFailedRelayRoutingToken() []byte {
	if x != nil {
		return x.FailedRelayRoutingToken
	}
	return nil
}

func (x *CMsgSteamDatagramP2PBadRouteRouterToClient) GetAckForwardTargetRevision() uint32 {
	if x != nil && x.AckForwardTargetRevision != nil {
		return *x.AckForwardTargetRevision
	}
	return 0
}

func (x *CMsgSteamDatagramP2PBadRouteRouterToClient) GetKludgePad() uint64 {
	if x != nil && x.KludgePad != nil {
		return *x.KludgePad
	}
	return 0
}

type CMsgSteamDatagramP2PRoutes struct {
	state         protoimpl.MessageState                     `protogen:"open.v1"`
	RelayClusters []*CMsgSteamDatagramP2PRoutes_RelayCluster `protobuf:"bytes,1,rep,name=relay_clusters,json=relayClusters" json:"relay_clusters,omitempty"`
	Routes        []*CMsgSteamDatagramP2PRoutes_Route        `protobuf:"bytes,2,rep,name=routes" json:"routes,omitempty"`
	Revision      *uint32                                    `protobuf:"varint,3,opt,name=revision" json:"revision,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgSteamDatagramP2PRoutes) Reset() {
	*x = CMsgSteamDatagramP2PRoutes{}
	mi := &file_steamdatagram_messages_sdr_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSteamDatagramP2PRoutes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramP2PRoutes) ProtoMessage() {}

func (x *CMsgSteamDatagramP2PRoutes) ProtoReflect() protoreflect.Message {
	mi := &file_steamdatagram_messages_sdr_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramP2PRoutes.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramP2PRoutes) Descriptor() ([]byte, []int) {
	return file_steamdatagram_messages_sdr_proto_rawDescGZIP(), []int{30}
}

func (x *CMsgSteamDatagramP2PRoutes) GetRelayClusters() []*CMsgSteamDatagramP2PRoutes_RelayCluster {
	if x != nil {
		return x.RelayClusters
	}
	return nil
}

func (x *CMsgSteamDatagramP2PRoutes) GetRoutes() []*CMsgSteamDatagramP2PRoutes_Route {
	if x != nil {
		return x.Routes
	}
	return nil
}

func (x *CMsgSteamDatagramP2PRoutes) GetRevision() uint32 {
	if x != nil && x.Revision != nil {
		return *x.Revision
	}
	return 0
}

type CMsgSteamDatagramSetSecondaryAddressRequest struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	ClientMainIp           *uint32                `protobuf:"fixed32,1,opt,name=client_main_ip,json=clientMainIp" json:"client_main_ip,omitempty"`
	ClientMainPort         *uint32                `protobuf:"fixed32,2,opt,name=client_main_port,json=clientMainPort" json:"client_main_port,omitempty"`
	ClientConnectionId     *uint32                `protobuf:"fixed32,3,opt,name=client_connection_id,json=clientConnectionId" json:"client_connection_id,omitempty"`
	ClientIdentity         *string                `protobuf:"bytes,4,opt,name=client_identity,json=clientIdentity" json:"client_identity,omitempty"`
	RequestSendDuplication *bool                  `protobuf:"varint,5,opt,name=request_send_duplication,json=requestSendDuplication" json:"request_send_duplication,omitempty"`
	KludgePad              []byte                 `protobuf:"bytes,99,opt,name=kludge_pad,json=kludgePad" json:"kludge_pad,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *CMsgSteamDatagramSetSecondaryAddressRequest) Reset() {
	*x = CMsgSteamDatagramSetSecondaryAddressRequest{}
	mi := &file_steamdatagram_messages_sdr_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSteamDatagramSetSecondaryAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramSetSecondaryAddressRequest) ProtoMessage() {}

func (x *CMsgSteamDatagramSetSecondaryAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_steamdatagram_messages_sdr_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramSetSecondaryAddressRequest.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramSetSecondaryAddressRequest) Descriptor() ([]byte, []int) {
	return file_steamdatagram_messages_sdr_proto_rawDescGZIP(), []int{31}
}

func (x *CMsgSteamDatagramSetSecondaryAddressRequest) GetClientMainIp() uint32 {
	if x != nil && x.ClientMainIp != nil {
		return *x.ClientMainIp
	}
	return 0
}

func (x *CMsgSteamDatagramSetSecondaryAddressRequest) GetClientMainPort() uint32 {
	if x != nil && x.ClientMainPort != nil {
		return *x.ClientMainPort
	}
	return 0
}

func (x *CMsgSteamDatagramSetSecondaryAddressRequest) GetClientConnectionId() uint32 {
	if x != nil && x.ClientConnectionId != nil {
		return *x.ClientConnectionId
	}
	return 0
}

func (x *CMsgSteamDatagramSetSecondaryAddressRequest) GetClientIdentity() string {
	if x != nil && x.ClientIdentity != nil {
		return *x.ClientIdentity
	}
	return ""
}

func (x *CMsgSteamDatagramSetSecondaryAddressRequest) GetRequestSendDuplication() bool {
	if x != nil && x.RequestSendDuplication != nil {
		return *x.RequestSendDuplication
	}
	return false
}

func (x *CMsgSteamDatagramSetSecondaryAddressRequest) GetKludgePad() []byte {
	if x != nil {
		return x.KludgePad
	}
	return nil
}

type CMsgSteamDatagramSetSecondaryAddressResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       *bool                  `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Message       *string                `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgSteamDatagramSetSecondaryAddressResult) Reset() {
	*x = CMsgSteamDatagramSetSecondaryAddressResult{}
	mi := &file_steamdatagram_messages_sdr_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSteamDatagramSetSecondaryAddressResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramSetSecondaryAddressResult) ProtoMessage() {}

func (x *CMsgSteamDatagramSetSecondaryAddressResult) ProtoReflect() protoreflect.Message {
	mi := &file_steamdatagram_messages_sdr_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramSetSecondaryAddressResult.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramSetSecondaryAddressResult) Descriptor() ([]byte, []int) {
	return file_steamdatagram_messages_sdr_proto_rawDescGZIP(), []int{32}
}

func (x *CMsgSteamDatagramSetSecondaryAddressResult) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

func (x *CMsgSteamDatagramSetSecondaryAddressResult) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

type CMsgSteamDatagramRouterPingReply_RouteException struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DataCenterId  *uint32                `protobuf:"fixed32,1,opt,name=data_center_id,json=dataCenterId" json:"data_center_id,omitempty"`
	Flags         *uint32                `protobuf:"varint,2,opt,name=flags" json:"flags,omitempty"`
	Penalty       *uint32                `protobuf:"varint,3,opt,name=penalty" json:"penalty,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgSteamDatagramRouterPingReply_RouteException) Reset() {
	*x = CMsgSteamDatagramRouterPingReply_RouteException{}
	mi := &file_steamdatagram_messages_sdr_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSteamDatagramRouterPingReply_RouteException) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramRouterPingReply_RouteException) ProtoMessage() {}

func (x *CMsgSteamDatagramRouterPingReply_RouteException) ProtoReflect() protoreflect.Message {
	mi := &file_steamdatagram_messages_sdr_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramRouterPingReply_RouteException.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramRouterPingReply_RouteException) Descriptor() ([]byte, []int) {
	return file_steamdatagram_messages_sdr_proto_rawDescGZIP(), []int{2, 0}
}

func (x *CMsgSteamDatagramRouterPingReply_RouteException) GetDataCenterId() uint32 {
	if x != nil && x.DataCenterId != nil {
		return *x.DataCenterId
	}
	return 0
}

func (x *CMsgSteamDatagramRouterPingReply_RouteException) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

func (x *CMsgSteamDatagramRouterPingReply_RouteException) GetPenalty() uint32 {
	if x != nil && x.Penalty != nil {
		return *x.Penalty
	}
	return 0
}

type CMsgSteamDatagramRouterPingReply_AltAddress struct {
	state         protoimpl.MessageState                                `protogen:"open.v1"`
	Ipv4          *uint32                                               `protobuf:"fixed32,1,opt,name=ipv4" json:"ipv4,omitempty"`
	Port          *uint32                                               `protobuf:"varint,2,opt,name=port" json:"port,omitempty"`
	Penalty       *uint32                                               `protobuf:"varint,3,opt,name=penalty" json:"penalty,omitempty"`
	Protocol      *CMsgSteamDatagramRouterPingReply_AltAddress_Protocol `protobuf:"varint,4,opt,name=protocol,enum=CMsgSteamDatagramRouterPingReply_AltAddress_Protocol,def=0" json:"protocol,omitempty"`
	Id            *string                                               `protobuf:"bytes,5,opt,name=id" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgSteamDatagramRouterPingReply_AltAddress fields.
const (
	Default_CMsgSteamDatagramRouterPingReply_AltAddress_Protocol = CMsgSteamDatagramRouterPingReply_AltAddress_DefaultProtocol
)

func (x *CMsgSteamDatagramRouterPingReply_AltAddress) Reset() {
	*x = CMsgSteamDatagramRouterPingReply_AltAddress{}
	mi := &file_steamdatagram_messages_sdr_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSteamDatagramRouterPingReply_AltAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramRouterPingReply_AltAddress) ProtoMessage() {}

func (x *CMsgSteamDatagramRouterPingReply_AltAddress) ProtoReflect() protoreflect.Message {
	mi := &file_steamdatagram_messages_sdr_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramRouterPingReply_AltAddress.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramRouterPingReply_AltAddress) Descriptor() ([]byte, []int) {
	return file_steamdatagram_messages_sdr_proto_rawDescGZIP(), []int{2, 1}
}

func (x *CMsgSteamDatagramRouterPingReply_AltAddress) GetIpv4() uint32 {
	if x != nil && x.Ipv4 != nil {
		return *x.Ipv4
	}
	return 0
}

func (x *CMsgSteamDatagramRouterPingReply_AltAddress) GetPort() uint32 {
	if x != nil && x.Port != nil {
		return *x.Port
	}
	return 0
}

func (x *CMsgSteamDatagramRouterPingReply_AltAddress) GetPenalty() uint32 {
	if x != nil && x.Penalty != nil {
		return *x.Penalty
	}
	return 0
}

func (x *CMsgSteamDatagramRouterPingReply_AltAddress) GetProtocol() CMsgSteamDatagramRouterPingReply_AltAddress_Protocol {
	if x != nil && x.Protocol != nil {
		return *x.Protocol
	}
	return Default_CMsgSteamDatagramRouterPingReply_AltAddress_Protocol
}

func (x *CMsgSteamDatagramRouterPingReply_AltAddress) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

type CMsgSteamDatagramClientPingSampleReply_POP struct {
	state                  protoimpl.MessageState                                   `protogen:"open.v1"`
	PopId                  *uint32                                                  `protobuf:"fixed32,1,opt,name=pop_id,json=popId" json:"pop_id,omitempty"`
	DefaultFrontPingMs     *uint32                                                  `protobuf:"varint,2,opt,name=default_front_ping_ms,json=defaultFrontPingMs" json:"default_front_ping_ms,omitempty"`
	ClusterPenalty         *uint32                                                  `protobuf:"varint,4,opt,name=cluster_penalty,json=clusterPenalty" json:"cluster_penalty,omitempty"`
	AltAddresses           []*CMsgSteamDatagramClientPingSampleReply_POP_AltAddress `protobuf:"bytes,7,rep,name=alt_addresses,json=altAddresses" json:"alt_addresses,omitempty"`
	DefaultE2EPingMs       *uint32                                                  `protobuf:"varint,3,opt,name=default_e2e_ping_ms,json=defaultE2ePingMs" json:"default_e2e_ping_ms,omitempty"`
	DefaultE2EScore        *uint32                                                  `protobuf:"varint,5,opt,name=default_e2e_score,json=defaultE2eScore" json:"default_e2e_score,omitempty"`
	P2PViaPeerRelayPopId   *uint32                                                  `protobuf:"fixed32,6,opt,name=p2p_via_peer_relay_pop_id,json=p2pViaPeerRelayPopId" json:"p2p_via_peer_relay_pop_id,omitempty"`
	BestDcPingMs           *uint32                                                  `protobuf:"varint,9,opt,name=best_dc_ping_ms,json=bestDcPingMs" json:"best_dc_ping_ms,omitempty"`
	BestDcScore            *uint32                                                  `protobuf:"varint,10,opt,name=best_dc_score,json=bestDcScore" json:"best_dc_score,omitempty"`
	BestDcViaRelayPopId    *uint32                                                  `protobuf:"fixed32,11,opt,name=best_dc_via_relay_pop_id,json=bestDcViaRelayPopId" json:"best_dc_via_relay_pop_id,omitempty"`
	DefaultDcPingMs        *uint32                                                  `protobuf:"varint,12,opt,name=default_dc_ping_ms,json=defaultDcPingMs" json:"default_dc_ping_ms,omitempty"`
	DefaultDcScore         *uint32                                                  `protobuf:"varint,13,opt,name=default_dc_score,json=defaultDcScore" json:"default_dc_score,omitempty"`
	DefaultDcViaRelayPopId *uint32                                                  `protobuf:"fixed32,14,opt,name=default_dc_via_relay_pop_id,json=defaultDcViaRelayPopId" json:"default_dc_via_relay_pop_id,omitempty"`
	TestDcPingMs           *uint32                                                  `protobuf:"varint,15,opt,name=test_dc_ping_ms,json=testDcPingMs" json:"test_dc_ping_ms,omitempty"`
	TestDcScore            *uint32                                                  `protobuf:"varint,16,opt,name=test_dc_score,json=testDcScore" json:"test_dc_score,omitempty"`
	TestDcViaRelayPopId    *uint32                                                  `protobuf:"fixed32,17,opt,name=test_dc_via_relay_pop_id,json=testDcViaRelayPopId" json:"test_dc_via_relay_pop_id,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *CMsgSteamDatagramClientPingSampleReply_POP) Reset() {
	*x = CMsgSteamDatagramClientPingSampleReply_POP{}
	mi := &file_steamdatagram_messages_sdr_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSteamDatagramClientPingSampleReply_POP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramClientPingSampleReply_POP) ProtoMessage() {}

func (x *CMsgSteamDatagramClientPingSampleReply_POP) ProtoReflect() protoreflect.Message {
	mi := &file_steamdatagram_messages_sdr_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramClientPingSampleReply_POP.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramClientPingSampleReply_POP) Descriptor() ([]byte, []int) {
	return file_steamdatagram_messages_sdr_proto_rawDescGZIP(), []int{10, 0}
}

func (x *CMsgSteamDatagramClientPingSampleReply_POP) GetPopId() uint32 {
	if x != nil && x.PopId != nil {
		return *x.PopId
	}
	return 0
}

func (x *CMsgSteamDatagramClientPingSampleReply_POP) GetDefaultFrontPingMs() uint32 {
	if x != nil && x.DefaultFrontPingMs != nil {
		return *x.DefaultFrontPingMs
	}
	return 0
}

func (x *CMsgSteamDatagramClientPingSampleReply_POP) GetClusterPenalty() uint32 {
	if x != nil && x.ClusterPenalty != nil {
		return *x.ClusterPenalty
	}
	return 0
}

func (x *CMsgSteamDatagramClientPingSampleReply_POP) GetAltAddresses() []*CMsgSteamDatagramClientPingSampleReply_POP_AltAddress {
	if x != nil {
		return x.AltAddresses
	}
	return nil
}

func (x *CMsgSteamDatagramClientPingSampleReply_POP) GetDefaultE2EPingMs() uint32 {
	if x != nil && x.DefaultE2EPingMs != nil {
		return *x.DefaultE2EPingMs
	}
	return 0
}

func (x *CMsgSteamDatagramClientPingSampleReply_POP) GetDefaultE2EScore() uint32 {
	if x != nil && x.DefaultE2EScore != nil {
		return *x.DefaultE2EScore
	}
	return 0
}

func (x *CMsgSteamDatagramClientPingSampleReply_POP) GetP2PViaPeerRelayPopId() uint32 {
	if x != nil && x.P2PViaPeerRelayPopId != nil {
		return *x.P2PViaPeerRelayPopId
	}
	return 0
}

func (x *CMsgSteamDatagramClientPingSampleReply_POP) GetBestDcPingMs() uint32 {
	if x != nil && x.BestDcPingMs != nil {
		return *x.BestDcPingMs
	}
	return 0
}

func (x *CMsgSteamDatagramClientPingSampleReply_POP) GetBestDcScore() uint32 {
	if x != nil && x.BestDcScore != nil {
		return *x.BestDcScore
	}
	return 0
}

func (x *CMsgSteamDatagramClientPingSampleReply_POP) GetBestDcViaRelayPopId() uint32 {
	if x != nil && x.BestDcViaRelayPopId != nil {
		return *x.BestDcViaRelayPopId
	}
	return 0
}

func (x *CMsgSteamDatagramClientPingSampleReply_POP) GetDefaultDcPingMs() uint32 {
	if x != nil && x.DefaultDcPingMs != nil {
		return *x.DefaultDcPingMs
	}
	return 0
}

func (x *CMsgSteamDatagramClientPingSampleReply_POP) GetDefaultDcScore() uint32 {
	if x != nil && x.DefaultDcScore != nil {
		return *x.DefaultDcScore
	}
	return 0
}

func (x *CMsgSteamDatagramClientPingSampleReply_POP) GetDefaultDcViaRelayPopId() uint32 {
	if x != nil && x.DefaultDcViaRelayPopId != nil {
		return *x.DefaultDcViaRelayPopId
	}
	return 0
}

func (x *CMsgSteamDatagramClientPingSampleReply_POP) GetTestDcPingMs() uint32 {
	if x != nil && x.TestDcPingMs != nil {
		return *x.TestDcPingMs
	}
	return 0
}

func (x *CMsgSteamDatagramClientPingSampleReply_POP) GetTestDcScore() uint32 {
	if x != nil && x.TestDcScore != nil {
		return *x.TestDcScore
	}
	return 0
}

func (x *CMsgSteamDatagramClientPingSampleReply_POP) GetTestDcViaRelayPopId() uint32 {
	if x != nil && x.TestDcViaRelayPopId != nil {
		return *x.TestDcViaRelayPopId
	}
	return 0
}

type CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	DataCenterId        *uint32                `protobuf:"fixed32,1,opt,name=data_center_id,json=dataCenterId" json:"data_center_id,omitempty"`
	BestDcViaRelayPopId *uint32                `protobuf:"fixed32,2,opt,name=best_dc_via_relay_pop_id,json=bestDcViaRelayPopId" json:"best_dc_via_relay_pop_id,omitempty"`
	BestDcPingMs        *uint32                `protobuf:"varint,3,opt,name=best_dc_ping_ms,json=bestDcPingMs" json:"best_dc_ping_ms,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter) Reset() {
	*x = CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter{}
	mi := &file_steamdatagram_messages_sdr_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter) ProtoMessage() {}

func (x *CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter) ProtoReflect() protoreflect.Message {
	mi := &file_steamdatagram_messages_sdr_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter) Descriptor() ([]byte, []int) {
	return file_steamdatagram_messages_sdr_proto_rawDescGZIP(), []int{10, 1}
}

func (x *CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter) GetDataCenterId() uint32 {
	if x != nil && x.DataCenterId != nil {
		return *x.DataCenterId
	}
	return 0
}

func (x *CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter) GetBestDcViaRelayPopId() uint32 {
	if x != nil && x.BestDcViaRelayPopId != nil {
		return *x.BestDcViaRelayPopId
	}
	return 0
}

func (x *CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter) GetBestDcPingMs() uint32 {
	if x != nil && x.BestDcPingMs != nil {
		return *x.BestDcPingMs
	}
	return 0
}

type CMsgSteamDatagramClientPingSampleReply_POP_AltAddress struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            *string                `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	FrontPingMs   *uint32                `protobuf:"varint,2,opt,name=front_ping_ms,json=frontPingMs" json:"front_ping_ms,omitempty"`
	Penalty       *uint32                `protobuf:"varint,3,opt,name=penalty" json:"penalty,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgSteamDatagramClientPingSampleReply_POP_AltAddress) Reset() {
	*x = CMsgSteamDatagramClientPingSampleReply_POP_AltAddress{}
	mi := &file_steamdatagram_messages_sdr_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSteamDatagramClientPingSampleReply_POP_AltAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramClientPingSampleReply_POP_AltAddress) ProtoMessage() {}

func (x *CMsgSteamDatagramClientPingSampleReply_POP_AltAddress) ProtoReflect() protoreflect.Message {
	mi := &file_steamdatagram_messages_sdr_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramClientPingSampleReply_POP_AltAddress.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramClientPingSampleReply_POP_AltAddress) Descriptor() ([]byte, []int) {
	return file_steamdatagram_messages_sdr_proto_rawDescGZIP(), []int{10, 0, 0}
}

func (x *CMsgSteamDatagramClientPingSampleReply_POP_AltAddress) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *CMsgSteamDatagramClientPingSampleReply_POP_AltAddress) GetFrontPingMs() uint32 {
	if x != nil && x.FrontPingMs != nil {
		return *x.FrontPingMs
	}
	return 0
}

func (x *CMsgSteamDatagramClientPingSampleReply_POP_AltAddress) GetPenalty() uint32 {
	if x != nil && x.Penalty != nil {
		return *x.Penalty
	}
	return 0
}

type CMsgSteamDatagramClientSwitchedPrimary_RouterQuality struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Score            *uint32                `protobuf:"varint,1,opt,name=score" json:"score,omitempty"`
	FrontPing        *uint32                `protobuf:"varint,2,opt,name=front_ping,json=frontPing" json:"front_ping,omitempty"`
	BackPing         *uint32                `protobuf:"varint,3,opt,name=back_ping,json=backPing" json:"back_ping,omitempty"`
	SecondsUntilDown *uint32                `protobuf:"varint,4,opt,name=seconds_until_down,json=secondsUntilDown" json:"seconds_until_down,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CMsgSteamDatagramClientSwitchedPrimary_RouterQuality) Reset() {
	*x = CMsgSteamDatagramClientSwitchedPrimary_RouterQuality{}
	mi := &file_steamdatagram_messages_sdr_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSteamDatagramClientSwitchedPrimary_RouterQuality) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramClientSwitchedPrimary_RouterQuality) ProtoMessage() {}

func (x *CMsgSteamDatagramClientSwitchedPrimary_RouterQuality) ProtoReflect() protoreflect.Message {
	mi := &file_steamdatagram_messages_sdr_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramClientSwitchedPrimary_RouterQuality.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramClientSwitchedPrimary_RouterQuality) Descriptor() ([]byte, []int) {
	return file_steamdatagram_messages_sdr_proto_rawDescGZIP(), []int{11, 0}
}

func (x *CMsgSteamDatagramClientSwitchedPrimary_RouterQuality) GetScore() uint32 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

func (x *CMsgSteamDatagramClientSwitchedPrimary_RouterQuality) GetFrontPing() uint32 {
	if x != nil && x.FrontPing != nil {
		return *x.FrontPing
	}
	return 0
}

func (x *CMsgSteamDatagramClientSwitchedPrimary_RouterQuality) GetBackPing() uint32 {
	if x != nil && x.BackPing != nil {
		return *x.BackPing
	}
	return 0
}

func (x *CMsgSteamDatagramClientSwitchedPrimary_RouterQuality) GetSecondsUntilDown() uint32 {
	if x != nil && x.SecondsUntilDown != nil {
		return *x.SecondsUntilDown
	}
	return 0
}

type CMsgSteamDatagramP2PSessionRequestBody_EncryptedData struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	PeerIdentityString *string                `protobuf:"bytes,1,opt,name=peer_identity_string,json=peerIdentityString" json:"peer_identity_string,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *CMsgSteamDatagramP2PSessionRequestBody_EncryptedData) Reset() {
	*x = CMsgSteamDatagramP2PSessionRequestBody_EncryptedData{}
	mi := &file_steamdatagram_messages_sdr_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSteamDatagramP2PSessionRequestBody_EncryptedData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramP2PSessionRequestBody_EncryptedData) ProtoMessage() {}

func (x *CMsgSteamDatagramP2PSessionRequestBody_EncryptedData) ProtoReflect() protoreflect.Message {
	mi := &file_steamdatagram_messages_sdr_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramP2PSessionRequestBody_EncryptedData.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramP2PSessionRequestBody_EncryptedData) Descriptor() ([]byte, []int) {
	return file_steamdatagram_messages_sdr_proto_rawDescGZIP(), []int{24, 0}
}

func (x *CMsgSteamDatagramP2PSessionRequestBody_EncryptedData) GetPeerIdentityString() string {
	if x != nil && x.PeerIdentityString != nil {
		return *x.PeerIdentityString
	}
	return ""
}

type CMsgSteamDatagramP2PRoutes_RelayCluster struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	PopId                    *uint32                `protobuf:"fixed32,1,opt,name=pop_id,json=popId" json:"pop_id,omitempty"`
	PingMs                   *uint32                `protobuf:"varint,2,opt,name=ping_ms,json=pingMs" json:"ping_ms,omitempty"`
	ScorePenalty             *uint32                `protobuf:"varint,3,opt,name=score_penalty,json=scorePenalty" json:"score_penalty,omitempty"`
	SessionRelayRoutingToken []byte                 `protobuf:"bytes,4,opt,name=session_relay_routing_token,json=sessionRelayRoutingToken" json:"session_relay_routing_token,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *CMsgSteamDatagramP2PRoutes_RelayCluster) Reset() {
	*x = CMsgSteamDatagramP2PRoutes_RelayCluster{}
	mi := &file_steamdatagram_messages_sdr_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSteamDatagramP2PRoutes_RelayCluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramP2PRoutes_RelayCluster) ProtoMessage() {}

func (x *CMsgSteamDatagramP2PRoutes_RelayCluster) ProtoReflect() protoreflect.Message {
	mi := &file_steamdatagram_messages_sdr_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramP2PRoutes_RelayCluster.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramP2PRoutes_RelayCluster) Descriptor() ([]byte, []int) {
	return file_steamdatagram_messages_sdr_proto_rawDescGZIP(), []int{30, 0}
}

func (x *CMsgSteamDatagramP2PRoutes_RelayCluster) GetPopId() uint32 {
	if x != nil && x.PopId != nil {
		return *x.PopId
	}
	return 0
}

func (x *CMsgSteamDatagramP2PRoutes_RelayCluster) GetPingMs() uint32 {
	if x != nil && x.PingMs != nil {
		return *x.PingMs
	}
	return 0
}

func (x *CMsgSteamDatagramP2PRoutes_RelayCluster) GetScorePenalty() uint32 {
	if x != nil && x.ScorePenalty != nil {
		return *x.ScorePenalty
	}
	return 0
}

func (x *CMsgSteamDatagramP2PRoutes_RelayCluster) GetSessionRelayRoutingToken() []byte {
	if x != nil {
		return x.SessionRelayRoutingToken
	}
	return nil
}

type CMsgSteamDatagramP2PRoutes_Route struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MyPopId       *uint32                `protobuf:"fixed32,1,opt,name=my_pop_id,json=myPopId" json:"my_pop_id,omitempty"`
	YourPopId     *uint32                `protobuf:"fixed32,2,opt,name=your_pop_id,json=yourPopId" json:"your_pop_id,omitempty"`
	LegacyScore   *uint32                `protobuf:"varint,3,opt,name=legacy_score,json=legacyScore" json:"legacy_score,omitempty"`
	InteriorScore *uint32                `protobuf:"varint,4,opt,name=interior_score,json=interiorScore" json:"interior_score,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgSteamDatagramP2PRoutes_Route) Reset() {
	*x = CMsgSteamDatagramP2PRoutes_Route{}
	mi := &file_steamdatagram_messages_sdr_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSteamDatagramP2PRoutes_Route) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSteamDatagramP2PRoutes_Route) ProtoMessage() {}

func (x *CMsgSteamDatagramP2PRoutes_Route) ProtoReflect() protoreflect.Message {
	mi := &file_steamdatagram_messages_sdr_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSteamDatagramP2PRoutes_Route.ProtoReflect.Descriptor instead.
func (*CMsgSteamDatagramP2PRoutes_Route) Descriptor() ([]byte, []int) {
	return file_steamdatagram_messages_sdr_proto_rawDescGZIP(), []int{30, 1}
}

func (x *CMsgSteamDatagramP2PRoutes_Route) GetMyPopId() uint32 {
	if x != nil && x.MyPopId != nil {
		return *x.MyPopId
	}
	return 0
}

func (x *CMsgSteamDatagramP2PRoutes_Route) GetYourPopId() uint32 {
	if x != nil && x.YourPopId != nil {
		return *x.YourPopId
	}
	return 0
}

func (x *CMsgSteamDatagramP2PRoutes_Route) GetLegacyScore() uint32 {
	if x != nil && x.LegacyScore != nil {
		return *x.LegacyScore
	}
	return 0
}

func (x *CMsgSteamDatagramP2PRoutes_Route) GetInteriorScore() uint32 {
	if x != nil && x.InteriorScore != nil {
		return *x.InteriorScore
	}
	return 0
}

var File_steamdatagram_messages_sdr_proto protoreflect.FileDescriptor

const file_steamdatagram_messages_sdr_proto_rawDesc = "" +
	"\n" +
	" steamdatagram_messages_sdr.proto\x1a+steamnetworkingsockets_messages_certs.proto\x1a%steamnetworkingsockets_messages.proto\">\n" +
	"\x1cCMsgSteamNetworkingIPAddress\x12\x0e\n" +
	"\x02v4\x18\x01 \x01(\aR\x02v4\x12\x0e\n" +
	"\x02v6\x18\x02 \x01(\fR\x02v6\"\xbd\x01\n" +
	"%CMsgSteamDatagramSignedMessageGeneric\x127\n" +
	"\x04cert\x18\x01 \x01(\v2#.CMsgSteamDatagramCertificateSignedR\x04cert\x12\x1f\n" +
	"\vsigned_data\x18\x02 \x01(\fR\n" +
	"signedData\x12\x1c\n" +
	"\tsignature\x18\x03 \x01(\fR\tsignature\x12\x1c\n" +
	"\tdummy_pad\x18\xff\a \x01(\fR\bdummyPad\"\x85\v\n" +
	" CMsgSteamDatagramRouterPingReply\x12)\n" +
	"\x10client_timestamp\x18\x01 \x01(\aR\x0fclientTimestamp\x128\n" +
	"\x16latency_datacenter_ids\x18\x02 \x03(\aB\x02\x10\x01R\x14latencyDatacenterIds\x12*\n" +
	"\x0flatency_ping_ms\x18\x03 \x03(\rB\x02\x10\x01R\rlatencyPingMs\x12?\n" +
	"\x1alatency_datacenter_ids_p2p\x18\x0e \x03(\aB\x02\x10\x01R\x17latencyDatacenterIdsP2p\x121\n" +
	"\x13latency_ping_ms_p2p\x18\x0f \x03(\rB\x02\x10\x01R\x10latencyPingMsP2p\x12$\n" +
	"\x0eyour_public_ip\x18\x04 \x01(\aR\fyourPublicIp\x12(\n" +
	"\x10your_public_port\x18\v \x01(\aR\x0eyourPublicPort\x12\x1f\n" +
	"\vserver_time\x18\x05 \x01(\aR\n" +
	"serverTime\x12\x1c\n" +
	"\tchallenge\x18\x06 \x01(\x06R\tchallenge\x124\n" +
	"\x16seconds_until_shutdown\x18\a \x01(\rR\x14secondsUntilShutdown\x12#\n" +
	"\rclient_cookie\x18\b \x01(\aR\fclientCookie\x12\x19\n" +
	"\brecv_tos\x18\x10 \x01(\rR\arecvTos\x12\"\n" +
	"\recho_sent_tos\x18\x11 \x01(\rR\vechoSentTos\x12\x19\n" +
	"\bsent_tos\x18\x12 \x01(\rR\asentTos\x123\n" +
	"\x16echo_request_reply_tos\x18\x13 \x01(\rR\x13echoRequestReplyTos\x12A\n" +
	"\x1dscoring_penalty_relay_cluster\x18\t \x01(\rR\x1ascoringPenaltyRelayCluster\x12\x14\n" +
	"\x05flags\x18\f \x01(\rR\x05flags\x12[\n" +
	"\x10route_exceptions\x18\n" +
	" \x03(\v20.CMsgSteamDatagramRouterPingReply.RouteExceptionR\x0frouteExceptions\x12Q\n" +
	"\ralt_addresses\x18\r \x03(\v2,.CMsgSteamDatagramRouterPingReply.AltAddressR\faltAddresses\x12\x1b\n" +
	"\tdummy_pad\x18c \x01(\fR\bdummyPad\x12!\n" +
	"\fdummy_varint\x18d \x01(\x04R\vdummyVarint\x1af\n" +
	"\x0eRouteException\x12$\n" +
	"\x0edata_center_id\x18\x01 \x01(\aR\fdataCenterId\x12\x14\n" +
	"\x05flags\x18\x02 \x01(\rR\x05flags\x12\x18\n" +
	"\apenalty\x18\x03 \x01(\rR\apenalty\x1a\xe3\x01\n" +
	"\n" +
	"AltAddress\x12\x12\n" +
	"\x04ipv4\x18\x01 \x01(\aR\x04ipv4\x12\x12\n" +
	"\x04port\x18\x02 \x01(\rR\x04port\x12\x18\n" +
	"\apenalty\x18\x03 \x01(\rR\apenalty\x12b\n" +
	"\bprotocol\x18\x04 \x01(\x0e25.CMsgSteamDatagramRouterPingReply.AltAddress.Protocol:\x0fDefaultProtocolR\bprotocol\x12\x0e\n" +
	"\x02id\x18\x05 \x01(\tR\x02id\"\x1f\n" +
	"\bProtocol\x12\x13\n" +
	"\x0fDefaultProtocol\x10\x00\"L\n" +
	"\x05Flags\x12 \n" +
	"\x1cFLAG_MAYBE_MORE_DATA_CENTERS\x10\x01\x12!\n" +
	"\x1dFLAG_MAYBE_MORE_ALT_ADDRESSES\x10\x02\"\xd5\x02\n" +
	"*CMsgSteamDatagramGameserverPingRequestBody\x12\x1f\n" +
	"\vrelay_popid\x18\x01 \x01(\aR\n" +
	"relayPopid\x12C\n" +
	"\x0eyour_public_ip\x18\x02 \x01(\v2\x1d.CMsgSteamNetworkingIPAddressR\fyourPublicIp\x12(\n" +
	"\x10your_public_port\x18\x03 \x01(\rR\x0eyourPublicPort\x12&\n" +
	"\x0frelay_unix_time\x18\x04 \x01(\x04R\rrelayUnixTime\x12%\n" +
	"\x0erouting_secret\x18\x05 \x01(\x06R\rroutingSecret\x124\n" +
	"\x06my_ips\x18\x06 \x03(\v2\x1d.CMsgSteamNetworkingIPAddressR\x05myIps\x12\x12\n" +
	"\x04echo\x18\b \x01(\fR\x04echo\"\xc8\x03\n" +
	".CMsgSteamDatagramGameserverPingRequestEnvelope\x127\n" +
	"\x04cert\x18\x06 \x01(\v2#.CMsgSteamDatagramCertificateSignedR\x04cert\x12\x1f\n" +
	"\vsigned_data\x18\a \x01(\fR\n" +
	"signedData\x12\x1c\n" +
	"\tsignature\x18\b \x01(\fR\tsignature\x121\n" +
	"\x15legacy_your_public_ip\x18\x01 \x01(\aR\x12legacyYourPublicIp\x125\n" +
	"\x17legacy_your_public_port\x18\x05 \x01(\aR\x14legacyYourPublicPort\x123\n" +
	"\x16legacy_relay_unix_time\x18\x02 \x01(\aR\x13legacyRelayUnixTime\x12)\n" +
	"\x10legacy_challenge\x18\x03 \x01(\x06R\x0flegacyChallenge\x126\n" +
	"\x17legacy_router_timestamp\x18\x04 \x01(\aR\x15legacyRouterTimestamp\x12\x1c\n" +
	"\tdummy_pad\x18\xff\a \x01(\fR\bdummyPad\"\xca\x03\n" +
	"(CMsgSteamDatagramGameserverPingReplyData\x12/\n" +
	"\x14echo_relay_unix_time\x18\x02 \x01(\aR\x11echoRelayUnixTime\x12\x12\n" +
	"\x04echo\x18\b \x01(\fR\x04echo\x12)\n" +
	"\x10legacy_challenge\x18\x03 \x01(\x06R\x0flegacyChallenge\x126\n" +
	"\x17legacy_router_timestamp\x18\x04 \x01(\aR\x15legacyRouterTimestamp\x12$\n" +
	"\x0edata_center_id\x18\x05 \x01(\aR\fdataCenterId\x12\x14\n" +
	"\x05appid\x18\x06 \x01(\rR\x05appid\x12)\n" +
	"\x10protocol_version\x18\a \x01(\rR\x0fprotocolVersion\x12\x14\n" +
	"\x05build\x18\t \x01(\tR\x05build\x124\n" +
	"\x16network_config_version\x18\n" +
	" \x01(\x04R\x14networkConfigVersion\x12 \n" +
	"\fmy_unix_time\x18\v \x01(\aR\n" +
	"myUnixTime\x12!\n" +
	"\frouting_blob\x18\f \x01(\fR\vroutingBlob\"\x93\x02\n" +
	"'CMsgSteamDatagramNoSessionRelayToClient\x12#\n" +
	"\rconnection_id\x18\a \x01(\aR\fconnectionId\x12$\n" +
	"\x0eyour_public_ip\x18\x02 \x01(\aR\fyourPublicIp\x12(\n" +
	"\x10your_public_port\x18\x06 \x01(\aR\x0eyourPublicPort\x12\x1f\n" +
	"\vserver_time\x18\x03 \x01(\aR\n" +
	"serverTime\x12\x1c\n" +
	"\tchallenge\x18\x04 \x01(\x06R\tchallenge\x124\n" +
	"\x16seconds_until_shutdown\x18\x05 \x01(\rR\x14secondsUntilShutdown\"\xde\x01\n" +
	"%CMsgSteamDatagramNoSessionRelayToPeer\x125\n" +
	"\x17legacy_relay_session_id\x18\x01 \x01(\rR\x14legacyRelaySessionId\x121\n" +
	"\x15from_relay_session_id\x18\x02 \x01(\aR\x12fromRelaySessionId\x12,\n" +
	"\x12from_connection_id\x18\a \x01(\aR\x10fromConnectionId\x12\x1d\n" +
	"\n" +
	"kludge_pad\x18c \x01(\x06R\tkludgePad\"k\n" +
	"\x10CMsgTOSTreatment\x12\x1d\n" +
	"\n" +
	"l4s_detect\x18\x01 \x01(\tR\tl4sDetect\x12\x17\n" +
	"\aup_ecn1\x18\x02 \x01(\tR\x06upEcn1\x12\x1f\n" +
	"\vdown_dscp45\x18\x03 \x01(\tR\n" +
	"downDscp45\"O\n" +
	"(CMsgSteamDatagramClientPingSampleRequest\x12#\n" +
	"\rconnection_id\x18\x01 \x01(\aR\fconnectionId\"\xca\n" +
	"\n" +
	"&CMsgSteamDatagramClientPingSampleReply\x12#\n" +
	"\rconnection_id\x18\x01 \x01(\aR\fconnectionId\x122\n" +
	"\x15relay_override_active\x18\x05 \x01(\bR\x13relayOverrideActive\x12#\n" +
	"\x03tos\x18\x06 \x01(\v2\x11.CMsgTOSTreatmentR\x03tos\x12?\n" +
	"\x04pops\x18\x02 \x03(\v2+.CMsgSteamDatagramClientPingSampleReply.POPR\x04pops\x12h\n" +
	"\x13legacy_data_centers\x18\x03 \x03(\v28.CMsgSteamDatagramClientPingSampleReply.LegacyDataCenterR\x11legacyDataCenters\x1a\xdd\x06\n" +
	"\x03POP\x12\x15\n" +
	"\x06pop_id\x18\x01 \x01(\aR\x05popId\x121\n" +
	"\x15default_front_ping_ms\x18\x02 \x01(\rR\x12defaultFrontPingMs\x12'\n" +
	"\x0fcluster_penalty\x18\x04 \x01(\rR\x0eclusterPenalty\x12[\n" +
	"\ralt_addresses\x18\a \x03(\v26.CMsgSteamDatagramClientPingSampleReply.POP.AltAddressR\faltAddresses\x12-\n" +
	"\x13default_e2e_ping_ms\x18\x03 \x01(\rR\x10defaultE2ePingMs\x12*\n" +
	"\x11default_e2e_score\x18\x05 \x01(\rR\x0fdefaultE2eScore\x127\n" +
	"\x19p2p_via_peer_relay_pop_id\x18\x06 \x01(\aR\x14p2pViaPeerRelayPopId\x12%\n" +
	"\x0fbest_dc_ping_ms\x18\t \x01(\rR\fbestDcPingMs\x12\"\n" +
	"\rbest_dc_score\x18\n" +
	" \x01(\rR\vbestDcScore\x125\n" +
	"\x18best_dc_via_relay_pop_id\x18\v \x01(\aR\x13bestDcViaRelayPopId\x12+\n" +
	"\x12default_dc_ping_ms\x18\f \x01(\rR\x0fdefaultDcPingMs\x12(\n" +
	"\x10default_dc_score\x18\r \x01(\rR\x0edefaultDcScore\x12;\n" +
	"\x1bdefault_dc_via_relay_pop_id\x18\x0e \x01(\aR\x16defaultDcViaRelayPopId\x12%\n" +
	"\x0ftest_dc_ping_ms\x18\x0f \x01(\rR\ftestDcPingMs\x12\"\n" +
	"\rtest_dc_score\x18\x10 \x01(\rR\vtestDcScore\x125\n" +
	"\x18test_dc_via_relay_pop_id\x18\x11 \x01(\aR\x13testDcViaRelayPopId\x1aZ\n" +
	"\n" +
	"AltAddress\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\"\n" +
	"\rfront_ping_ms\x18\x02 \x01(\rR\vfrontPingMs\x12\x18\n" +
	"\apenalty\x18\x03 \x01(\rR\apenalty\x1a\x96\x01\n" +
	"\x10LegacyDataCenter\x12$\n" +
	"\x0edata_center_id\x18\x01 \x01(\aR\fdataCenterId\x125\n" +
	"\x18best_dc_via_relay_pop_id\x18\x02 \x01(\aR\x13bestDcViaRelayPopId\x12%\n" +
	"\x0fbest_dc_ping_ms\x18\x03 \x01(\rR\fbestDcPingMs\"\xef\x06\n" +
	"&CMsgSteamDatagramClientSwitchedPrimary\x12#\n" +
	"\rconnection_id\x18\x01 \x01(\aR\fconnectionId\x12\x17\n" +
	"\afrom_ip\x18\x02 \x01(\aR\x06fromIp\x12\x1b\n" +
	"\tfrom_port\x18\x03 \x01(\rR\bfromPort\x12.\n" +
	"\x13from_router_cluster\x18\x04 \x01(\aR\x11fromRouterCluster\x12(\n" +
	"\x10from_active_time\x18\x05 \x01(\rR\x0efromActiveTime\x127\n" +
	"\x18from_active_packets_recv\x18\x06 \x01(\rR\x15fromActivePacketsRecv\x12.\n" +
	"\x13from_dropped_reason\x18\a \x01(\tR\x11fromDroppedReason\x12\x15\n" +
	"\x06gap_ms\x18\b \x01(\rR\x05gapMs\x12_\n" +
	"\x10from_quality_now\x18\t \x01(\v25.CMsgSteamDatagramClientSwitchedPrimary.RouterQualityR\x0efromQualityNow\x12[\n" +
	"\x0eto_quality_now\x18\n" +
	" \x01(\v25.CMsgSteamDatagramClientSwitchedPrimary.RouterQualityR\ftoQualityNow\x12a\n" +
	"\x11from_quality_then\x18\v \x01(\v25.CMsgSteamDatagramClientSwitchedPrimary.RouterQualityR\x0ffromQualityThen\x12]\n" +
	"\x0fto_quality_then\x18\f \x01(\v25.CMsgSteamDatagramClientSwitchedPrimary.RouterQualityR\rtoQualityThen\x1a\x8f\x01\n" +
	"\rRouterQuality\x12\x14\n" +
	"\x05score\x18\x01 \x01(\rR\x05score\x12\x1d\n" +
	"\n" +
	"front_ping\x18\x02 \x01(\rR\tfrontPing\x12\x1b\n" +
	"\tback_ping\x18\x03 \x01(\rR\bbackPing\x12,\n" +
	"\x12seconds_until_down\x18\x04 \x01(\rR\x10secondsUntilDown\"\xc0\x03\n" +
	"\x1fCMsgSteamDatagramConnectRequest\x12#\n" +
	"\rconnection_id\x18\x01 \x01(\aR\fconnectionId\x12!\n" +
	"\fmy_timestamp\x18\x04 \x01(\x06R\vmyTimestamp\x12\x1e\n" +
	"\vping_est_ms\x18\x05 \x01(\rR\tpingEstMs\x12!\n" +
	"\fvirtual_port\x18\t \x01(\rR\vvirtualPort\x12=\n" +
	"\x1bgameserver_relay_session_id\x18\x02 \x01(\rR\x18gameserverRelaySessionId\x12>\n" +
	"\x05crypt\x18\x06 \x01(\v2(.CMsgSteamDatagramSessionCryptInfoSignedR\x05crypt\x127\n" +
	"\x04cert\x18\a \x01(\v2#.CMsgSteamDatagramCertificateSignedR\x04cert\x12%\n" +
	"\x0erouting_secret\x18\n" +
	" \x01(\x06R\rroutingSecret\x123\n" +
	"\x16legacy_client_steam_id\x18\x03 \x01(\x06R\x13legacyClientSteamId\"\x87\x03\n" +
	"\x1aCMsgSteamDatagramConnectOK\x120\n" +
	"\x14client_connection_id\x18\x01 \x01(\aR\x12clientConnectionId\x120\n" +
	"\x14server_connection_id\x18\a \x01(\aR\x12serverConnectionId\x12%\n" +
	"\x0eyour_timestamp\x18\x03 \x01(\x06R\ryourTimestamp\x12&\n" +
	"\x0fdelay_time_usec\x18\x04 \x01(\rR\rdelayTimeUsec\x12=\n" +
	"\x1bgameserver_relay_session_id\x18\x02 \x01(\rR\x18gameserverRelaySessionId\x12>\n" +
	"\x05crypt\x18\x05 \x01(\v2(.CMsgSteamDatagramSessionCryptInfoSignedR\x05crypt\x127\n" +
	"\x04cert\x18\x06 \x01(\v2#.CMsgSteamDatagramCertificateSignedR\x04cert\"\xa0\x05\n" +
	"'CMsgSteamNetworkingP2PSDRRoutingSummary\x12!\n" +
	"\finitial_ping\x18\x01 \x01(\rR\vinitialPing\x127\n" +
	"\x18initial_ping_front_local\x18\x02 \x01(\rR\x15initialPingFrontLocal\x129\n" +
	"\x19initial_ping_front_remote\x18\x03 \x01(\rR\x16initialPingFrontRemote\x12#\n" +
	"\rinitial_score\x18\x04 \x01(\rR\finitialScore\x12*\n" +
	"\x11initial_pop_local\x18\x05 \x01(\aR\x0finitialPopLocal\x12,\n" +
	"\x12initial_pop_remote\x18\x06 \x01(\aR\x10initialPopRemote\x12\x1b\n" +
	"\tbest_ping\x18\v \x01(\rR\bbestPing\x121\n" +
	"\x15best_ping_front_local\x18\f \x01(\rR\x12bestPingFrontLocal\x123\n" +
	"\x16best_ping_front_remote\x18\r \x01(\rR\x13bestPingFrontRemote\x12\x1d\n" +
	"\n" +
	"best_score\x18\x0e \x01(\rR\tbestScore\x12$\n" +
	"\x0ebest_pop_local\x18\x0f \x01(\aR\fbestPopLocal\x12&\n" +
	"\x0fbest_pop_remote\x18\x10 \x01(\aR\rbestPopRemote\x12\x1b\n" +
	"\tbest_time\x18\x11 \x01(\rR\bbestTime\x12%\n" +
	"\x0enegotiation_ms\x18\a \x01(\rR\rnegotiationMs\x12)\n" +
	"\x10selected_seconds\x18\b \x01(\rR\x0fselectedSeconds\"\x99\x01\n" +
	"\"CMsgSteamDatagramP2PRoutingSummary\x127\n" +
	"\x03ice\x18\x02 \x01(\v2%.CMsgSteamNetworkingICESessionSummaryR\x03ice\x12:\n" +
	"\x03sdr\x18\x03 \x01(\v2(.CMsgSteamNetworkingP2PSDRRoutingSummaryR\x03sdr\"\xe0\t\n" +
	"!CMsgSteamDatagramConnectionClosed\x12(\n" +
	"\x10to_connection_id\x18\a \x01(\aR\x0etoConnectionId\x12,\n" +
	"\x12from_connection_id\x18\b \x01(\aR\x10fromConnectionId\x120\n" +
	"\x14from_identity_string\x18\x0f \x01(\tR\x12fromIdentityString\x12g\n" +
	"\x1blegacy_from_identity_binary\x18\r \x01(\v2(.CMsgSteamNetworkingIdentityLegacyBinaryR\x18legacyFromIdentityBinary\x12/\n" +
	"\x14legacy_from_steam_id\x18\x03 \x01(\x06R\x11legacyFromSteamId\x12J\n" +
	"\"legacy_gameserver_relay_session_id\x18\x02 \x01(\rR\x1elegacyGameserverRelaySessionId\x12-\n" +
	"\x13to_relay_session_id\x18\t \x01(\aR\x10toRelaySessionId\x121\n" +
	"\x15from_relay_session_id\x18\n" +
	" \x01(\aR\x12fromRelaySessionId\x12J\n" +
	"\"forward_target_relay_routing_token\x18\v \x01(\fR\x1eforwardTargetRelayRoutingToken\x126\n" +
	"\x17forward_target_revision\x18\f \x01(\rR\x15forwardTargetRevision\x12R\n" +
	"\n" +
	"relay_mode\x18\x04 \x01(\x0e2-.CMsgSteamDatagramConnectionClosed.ERelayMode:\x04NoneR\trelayMode\x12\x14\n" +
	"\x05debug\x18\x05 \x01(\tR\x05debug\x12\x1f\n" +
	"\vreason_code\x18\x06 \x01(\rR\n" +
	"reasonCode\x12%\n" +
	"\x0erouting_secret\x18\x0e \x01(\x06R\rroutingSecret\x12.\n" +
	"\x13not_primary_session\x18\x10 \x01(\bR\x11notPrimarySession\x122\n" +
	"\x15not_primary_transport\x18\x13 \x01(\bR\x13notPrimaryTransport\x122\n" +
	"\x15relay_override_active\x18\x16 \x01(\bR\x13relayOverrideActive\x12H\n" +
	"\rquality_relay\x18\x11 \x01(\v2#.CMsgSteamDatagramConnectionQualityR\fqualityRelay\x12D\n" +
	"\vquality_e2e\x18\x12 \x01(\v2#.CMsgSteamDatagramConnectionQualityR\n" +
	"qualityE2e\x12S\n" +
	"\x13p2p_routing_summary\x18\x15 \x01(\v2#.CMsgSteamDatagramP2PRoutingSummaryR\x11p2pRoutingSummary\"6\n" +
	"\n" +
	"ERelayMode\x12\b\n" +
	"\x04None\x10\x00\x12\f\n" +
	"\bEndToEnd\x10\x01\x12\x10\n" +
	"\fClosedByPeer\x10\x02\"\xe8\x06\n" +
	"\x1dCMsgSteamDatagramNoConnection\x12(\n" +
	"\x10to_connection_id\x18\x05 \x01(\aR\x0etoConnectionId\x12,\n" +
	"\x12from_connection_id\x18\x06 \x01(\aR\x10fromConnectionId\x12J\n" +
	"\"legacy_gameserver_relay_session_id\x18\x02 \x01(\rR\x1elegacyGameserverRelaySessionId\x12-\n" +
	"\x13to_relay_session_id\x18\t \x01(\aR\x10toRelaySessionId\x121\n" +
	"\x15from_relay_session_id\x18\n" +
	" \x01(\aR\x12fromRelaySessionId\x120\n" +
	"\x14from_identity_string\x18\a \x01(\tR\x12fromIdentityString\x12/\n" +
	"\x14legacy_from_steam_id\x18\x03 \x01(\x06R\x11legacyFromSteamId\x12\x1c\n" +
	"\n" +
	"end_to_end\x18\x04 \x01(\bR\bendToEnd\x12.\n" +
	"\x13not_primary_session\x18\f \x01(\bR\x11notPrimarySession\x122\n" +
	"\x15not_primary_transport\x18\x0f \x01(\bR\x13notPrimaryTransport\x122\n" +
	"\x15relay_override_active\x18\x11 \x01(\bR\x13relayOverrideActive\x12H\n" +
	"\rquality_relay\x18\r \x01(\v2#.CMsgSteamDatagramConnectionQualityR\fqualityRelay\x12D\n" +
	"\vquality_e2e\x18\x0e \x01(\v2#.CMsgSteamDatagramConnectionQualityR\n" +
	"qualityE2e\x12S\n" +
	"\x13p2p_routing_summary\x18\x10 \x01(\v2#.CMsgSteamDatagramP2PRoutingSummaryR\x11p2pRoutingSummary\x12%\n" +
	"\x0erouting_secret\x18\v \x01(\x06R\rroutingSecret\x12\x1c\n" +
	"\tdummy_pad\x18\xff\a \x01(\aR\bdummyPad\"\x84\x04\n" +
	")CMsgSteamDatagramGameserverSessionRequest\x12\x16\n" +
	"\x06ticket\x18\x01 \x01(\fR\x06ticket\x12%\n" +
	"\x0echallenge_time\x18\x03 \x01(\aR\rchallengeTime\x12\x1c\n" +
	"\tchallenge\x18\x04 \x01(\x06R\tchallenge\x120\n" +
	"\x14client_connection_id\x18\x05 \x01(\aR\x12clientConnectionId\x120\n" +
	"\x14server_connection_id\x18\b \x01(\aR\x12serverConnectionId\x124\n" +
	"\x16network_config_version\x18\x06 \x01(\x04R\x14networkConfigVersion\x12)\n" +
	"\x10protocol_version\x18\a \x01(\rR\x0fprotocolVersion\x12\x1a\n" +
	"\bplatform\x18\t \x01(\tR\bplatform\x12\x14\n" +
	"\x05build\x18\n" +
	" \x01(\tR\x05build\x126\n" +
	"\x17dev_gameserver_identity\x18d \x01(\tR\x15devGameserverIdentity\x12K\n" +
	"\x0fdev_client_cert\x18e \x01(\v2#.CMsgSteamDatagramCertificateSignedR\rdevClientCert\"\xe5\x02\n" +
	"-CMsgSteamDatagramGameserverSessionEstablished\x12#\n" +
	"\rconnection_id\x18\x01 \x01(\aR\fconnectionId\x12<\n" +
	"\x1agameserver_identity_string\x18\x02 \x01(\tR\x18gameserverIdentityString\x124\n" +
	"\x16seconds_until_shutdown\x18\x04 \x01(\rR\x14secondsUntilShutdown\x12\x1e\n" +
	"\vseq_num_r2c\x18\x06 \x01(\rR\tseqNumR2c\x12?\n" +
	"\x1cdummy_legacy_identity_binary\x18\a \x01(\fR\x19dummyLegacyIdentityBinary\x12:\n" +
	"\x19legacy_gameserver_steamid\x18\x03 \x01(\x06R\x17legacyGameserverSteamid\"\x90\x04\n" +
	".CMsgSteamDatagramConnectionStatsClientToRouter\x12H\n" +
	"\rquality_relay\x18\x01 \x01(\v2#.CMsgSteamDatagramConnectionQualityR\fqualityRelay\x12D\n" +
	"\vquality_e2e\x18\x02 \x01(\v2#.CMsgSteamDatagramConnectionQualityR\n" +
	"qualityE2e\x12\x1b\n" +
	"\tack_relay\x18\x04 \x03(\aR\backRelay\x12$\n" +
	"\x0elegacy_ack_e2e\x18\x05 \x03(\aR\flegacyAckE2e\x12\x14\n" +
	"\x05flags\x18\x06 \x01(\rR\x05flags\x120\n" +
	"\x14client_connection_id\x18\b \x01(\aR\x12clientConnectionId\x12\x1e\n" +
	"\vseq_num_c2r\x18\t \x01(\rR\tseqNumC2r\x12\x1e\n" +
	"\vseq_num_e2e\x18\n" +
	" \x01(\rR\tseqNumE2e\"\x82\x01\n" +
	"\x05Flags\x12\x15\n" +
	"\x11ACK_REQUEST_RELAY\x10\x01\x12\x13\n" +
	"\x0fACK_REQUEST_E2E\x10\x02\x12\x19\n" +
	"\x15ACK_REQUEST_IMMEDIATE\x10\x04\x12\x17\n" +
	"\x13NOT_PRIMARY_SESSION\x10\b\x12\x19\n" +
	"\x15CLIENT_RELAY_OVERRIDE\x10 \"\xb4\x05\n" +
	".CMsgSteamDatagramConnectionStatsRouterToClient\x12H\n" +
	"\rquality_relay\x18\x01 \x01(\v2#.CMsgSteamDatagramConnectionQualityR\fqualityRelay\x12D\n" +
	"\vquality_e2e\x18\x02 \x01(\v2#.CMsgSteamDatagramConnectionQualityR\n" +
	"qualityE2e\x124\n" +
	"\x16seconds_until_shutdown\x18\x06 \x01(\rR\x14secondsUntilShutdown\x12,\n" +
	"\x12migrate_request_ip\x18\n" +
	" \x01(\aR\x10migrateRequestIp\x120\n" +
	"\x14migrate_request_port\x18\v \x01(\rR\x12migrateRequestPort\x12A\n" +
	"\x1dscoring_penalty_relay_cluster\x18\f \x01(\rR\x1ascoringPenaltyRelayCluster\x12\x1b\n" +
	"\tack_relay\x18\r \x03(\aR\backRelay\x12$\n" +
	"\x0elegacy_ack_e2e\x18\x0e \x03(\aR\flegacyAckE2e\x12\x14\n" +
	"\x05flags\x18\x0f \x01(\rR\x05flags\x120\n" +
	"\x14client_connection_id\x18\a \x01(\aR\x12clientConnectionId\x12\x1e\n" +
	"\vseq_num_r2c\x18\b \x01(\rR\tseqNumR2c\x12\x1e\n" +
	"\vseq_num_e2e\x18\t \x01(\rR\tseqNumE2e\"N\n" +
	"\x05Flags\x12\x15\n" +
	"\x11ACK_REQUEST_RELAY\x10\x01\x12\x13\n" +
	"\x0fACK_REQUEST_E2E\x10\x02\x12\x19\n" +
	"\x15ACK_REQUEST_IMMEDIATE\x10\x04\"\xc9\x05\n" +
	".CMsgSteamDatagramConnectionStatsRouterToServer\x12H\n" +
	"\rquality_relay\x18\x01 \x01(\v2#.CMsgSteamDatagramConnectionQualityR\fqualityRelay\x12D\n" +
	"\vquality_e2e\x18\x02 \x01(\v2#.CMsgSteamDatagramConnectionQualityR\n" +
	"qualityE2e\x12\x1b\n" +
	"\tack_relay\x18\n" +
	" \x03(\aR\backRelay\x12$\n" +
	"\x0elegacy_ack_e2e\x18\v \x03(\aR\flegacyAckE2e\x12\x14\n" +
	"\x05flags\x18\f \x01(\rR\x05flags\x12\x1e\n" +
	"\vseq_num_r2s\x18\x05 \x01(\rR\tseqNumR2s\x12\x1e\n" +
	"\vseq_num_e2e\x18\x06 \x01(\rR\tseqNumE2e\x124\n" +
	"\x16client_identity_string\x18\x0f \x01(\tR\x14clientIdentityString\x123\n" +
	"\x16legacy_client_steam_id\x18\a \x01(\x06R\x13legacyClientSteamId\x12(\n" +
	"\x10relay_session_id\x18\b \x01(\rR\x0erelaySessionId\x120\n" +
	"\x14client_connection_id\x18\t \x01(\aR\x12clientConnectionId\x120\n" +
	"\x14server_connection_id\x18\r \x01(\aR\x12serverConnectionId\x12%\n" +
	"\x0erouting_secret\x18\x0e \x01(\x06R\rroutingSecret\"N\n" +
	"\x05Flags\x12\x15\n" +
	"\x11ACK_REQUEST_RELAY\x10\x01\x12\x13\n" +
	"\x0fACK_REQUEST_E2E\x10\x02\x12\x19\n" +
	"\x15ACK_REQUEST_IMMEDIATE\x10\x04\"\xb7\x04\n" +
	".CMsgSteamDatagramConnectionStatsServerToRouter\x12H\n" +
	"\rquality_relay\x18\x01 \x01(\v2#.CMsgSteamDatagramConnectionQualityR\fqualityRelay\x12D\n" +
	"\vquality_e2e\x18\x02 \x01(\v2#.CMsgSteamDatagramConnectionQualityR\n" +
	"qualityE2e\x12\x1b\n" +
	"\tack_relay\x18\b \x03(\aR\backRelay\x12$\n" +
	"\x0elegacy_ack_e2e\x18\t \x03(\aR\flegacyAckE2e\x12\x14\n" +
	"\x05flags\x18\n" +
	" \x01(\rR\x05flags\x12\x1e\n" +
	"\vseq_num_s2r\x18\x03 \x01(\rR\tseqNumS2r\x12\x1e\n" +
	"\vseq_num_e2e\x18\x04 \x01(\rR\tseqNumE2e\x12(\n" +
	"\x10relay_session_id\x18\x06 \x01(\rR\x0erelaySessionId\x120\n" +
	"\x14client_connection_id\x18\a \x01(\aR\x12clientConnectionId\x120\n" +
	"\x14server_connection_id\x18\v \x01(\aR\x12serverConnectionId\"N\n" +
	"\x05Flags\x12\x15\n" +
	"\x11ACK_REQUEST_RELAY\x10\x01\x12\x13\n" +
	"\x0fACK_REQUEST_E2E\x10\x02\x12\x19\n" +
	"\x15ACK_REQUEST_IMMEDIATE\x10\x04\"\xc8\x05\n" +
	"&CMsgSteamDatagramP2PSessionRequestBody\x12%\n" +
	"\x0echallenge_time\x18\x01 \x01(\aR\rchallengeTime\x12\x1c\n" +
	"\tchallenge\x18\x02 \x01(\x06R\tchallenge\x120\n" +
	"\x14client_connection_id\x18\x03 \x01(\aR\x12clientConnectionId\x12/\n" +
	"\x14legacy_peer_steam_id\x18\x04 \x01(\x06R\x11legacyPeerSteamId\x120\n" +
	"\x14peer_identity_string\x18\v \x01(\tR\x12peerIdentityString\x12,\n" +
	"\x12peer_connection_id\x18\x05 \x01(\aR\x10peerConnectionId\x12%\n" +
	"\x0eencrypted_data\x18\x0e \x01(\fR\rencryptedData\x12M\n" +
	"$encryption_your_public_key_lead_byte\x18\x0f \x01(\rR\x1fencryptionYourPublicKeyLeadByte\x12J\n" +
	"\"encryption_my_ephemeral_public_key\x18\x10 \x01(\fR\x1eencryptionMyEphemeralPublicKey\x12)\n" +
	"\x10protocol_version\x18\b \x01(\rR\x0fprotocolVersion\x124\n" +
	"\x16network_config_version\x18\t \x01(\x04R\x14networkConfigVersion\x12\x1a\n" +
	"\bplatform\x18\f \x01(\tR\bplatform\x12\x14\n" +
	"\x05build\x18\r \x01(\tR\x05build\x1aA\n" +
	"\rEncryptedData\x120\n" +
	"\x14peer_identity_string\x18\x01 \x01(\tR\x12peerIdentityString\"\x8f\x01\n" +
	"\"CMsgSteamDatagramP2PSessionRequest\x127\n" +
	"\x04cert\x18\x01 \x01(\v2#.CMsgSteamDatagramCertificateSignedR\x04cert\x12\x12\n" +
	"\x04body\x18\x02 \x01(\fR\x04body\x12\x1c\n" +
	"\tsignature\x18\x03 \x01(\fR\tsignature\"\xd3\x01\n" +
	"&CMsgSteamDatagramP2PSessionEstablished\x12#\n" +
	"\rconnection_id\x18\x01 \x01(\aR\fconnectionId\x124\n" +
	"\x16seconds_until_shutdown\x18\x03 \x01(\rR\x14secondsUntilShutdown\x12.\n" +
	"\x13relay_routing_token\x18\x04 \x01(\fR\x11relayRoutingToken\x12\x1e\n" +
	"\vseq_num_r2c\x18\x05 \x01(\rR\tseqNumR2c\"\xcf\x06\n" +
	"1CMsgSteamDatagramConnectionStatsP2PClientToRouter\x12H\n" +
	"\rquality_relay\x18\x01 \x01(\v2#.CMsgSteamDatagramConnectionQualityR\fqualityRelay\x12D\n" +
	"\vquality_e2e\x18\x02 \x01(\v2#.CMsgSteamDatagramConnectionQualityR\n" +
	"qualityE2e\x12S\n" +
	"\x13p2p_routing_summary\x18\x0e \x01(\v2#.CMsgSteamDatagramP2PRoutingSummaryR\x11p2pRoutingSummary\x12\x1b\n" +
	"\tack_relay\x18\x03 \x03(\aR\backRelay\x12$\n" +
	"\x0elegacy_ack_e2e\x18\x04 \x03(\aR\flegacyAckE2e\x12\x14\n" +
	"\x05flags\x18\x05 \x01(\rR\x05flags\x12J\n" +
	"\"forward_target_relay_routing_token\x18\x06 \x01(\fR\x1eforwardTargetRelayRoutingToken\x126\n" +
	"\x17forward_target_revision\x18\a \x01(\rR\x15forwardTargetRevision\x12\x16\n" +
	"\x06routes\x18\b \x01(\fR\x06routes\x127\n" +
	"\x18ack_peer_routes_revision\x18\t \x01(\rR\x15ackPeerRoutesRevision\x12#\n" +
	"\rconnection_id\x18\n" +
	" \x01(\aR\fconnectionId\x12\x1e\n" +
	"\vseq_num_c2r\x18\v \x01(\rR\tseqNumC2r\x12\x1e\n" +
	"\vseq_num_e2e\x18\f \x01(\rR\tseqNumE2e\"\xa1\x01\n" +
	"\x05Flags\x12\x15\n" +
	"\x11ACK_REQUEST_RELAY\x10\x01\x12\x13\n" +
	"\x0fACK_REQUEST_E2E\x10\x02\x12\x19\n" +
	"\x15ACK_REQUEST_IMMEDIATE\x10\x04\x12\x17\n" +
	"\x13NOT_PRIMARY_SESSION\x10\b\x12\x1d\n" +
	"\x19NOT_PRIMARY_TRANSPORT_E2E\x10\x10\x12\x19\n" +
	"\x15CLIENT_RELAY_OVERRIDE\x10 \"\xd9\x06\n" +
	"1CMsgSteamDatagramConnectionStatsP2PRouterToClient\x12H\n" +
	"\rquality_relay\x18\x01 \x01(\v2#.CMsgSteamDatagramConnectionQualityR\fqualityRelay\x12D\n" +
	"\vquality_e2e\x18\x02 \x01(\v2#.CMsgSteamDatagramConnectionQualityR\n" +
	"qualityE2e\x124\n" +
	"\x16seconds_until_shutdown\x18\x03 \x01(\rR\x14secondsUntilShutdown\x12,\n" +
	"\x12migrate_request_ip\x18\x04 \x01(\aR\x10migrateRequestIp\x120\n" +
	"\x14migrate_request_port\x18\x05 \x01(\rR\x12migrateRequestPort\x12A\n" +
	"\x1dscoring_penalty_relay_cluster\x18\x06 \x01(\rR\x1ascoringPenaltyRelayCluster\x12\x1b\n" +
	"\tack_relay\x18\a \x03(\aR\backRelay\x12$\n" +
	"\x0elegacy_ack_e2e\x18\b \x03(\aR\flegacyAckE2e\x12\x14\n" +
	"\x05flags\x18\t \x01(\rR\x05flags\x12=\n" +
	"\x1back_forward_target_revision\x18\n" +
	" \x01(\rR\x18ackForwardTargetRevision\x12\x16\n" +
	"\x06routes\x18\v \x01(\fR\x06routes\x127\n" +
	"\x18ack_peer_routes_revision\x18\f \x01(\rR\x15ackPeerRoutesRevision\x12#\n" +
	"\rconnection_id\x18\r \x01(\aR\fconnectionId\x12\x1e\n" +
	"\vseq_num_r2c\x18\x0e \x01(\rR\tseqNumR2c\x12\x1e\n" +
	"\vseq_num_e2e\x18\x0f \x01(\rR\tseqNumE2e\"m\n" +
	"\x05Flags\x12\x15\n" +
	"\x11ACK_REQUEST_RELAY\x10\x01\x12\x13\n" +
	"\x0fACK_REQUEST_E2E\x10\x02\x12\x19\n" +
	"\x15ACK_REQUEST_IMMEDIATE\x10\x04\x12\x1d\n" +
	"\x19NOT_PRIMARY_TRANSPORT_E2E\x10\x10\"\xec\x01\n" +
	"*CMsgSteamDatagramP2PBadRouteRouterToClient\x12#\n" +
	"\rconnection_id\x18\x01 \x01(\aR\fconnectionId\x12;\n" +
	"\x1afailed_relay_routing_token\x18\x02 \x01(\fR\x17failedRelayRoutingToken\x12=\n" +
	"\x1back_forward_target_revision\x18\x03 \x01(\rR\x18ackForwardTargetRevision\x12\x1d\n" +
	"\n" +
	"kludge_pad\x18c \x01(\x06R\tkludgePad\"\xf9\x03\n" +
	"\x1aCMsgSteamDatagramP2PRoutes\x12O\n" +
	"\x0erelay_clusters\x18\x01 \x03(\v2(.CMsgSteamDatagramP2PRoutes.RelayClusterR\rrelayClusters\x129\n" +
	"\x06routes\x18\x02 \x03(\v2!.CMsgSteamDatagramP2PRoutes.RouteR\x06routes\x12\x1a\n" +
	"\brevision\x18\x03 \x01(\rR\brevision\x1a\xa2\x01\n" +
	"\fRelayCluster\x12\x15\n" +
	"\x06pop_id\x18\x01 \x01(\aR\x05popId\x12\x17\n" +
	"\aping_ms\x18\x02 \x01(\rR\x06pingMs\x12#\n" +
	"\rscore_penalty\x18\x03 \x01(\rR\fscorePenalty\x12=\n" +
	"\x1bsession_relay_routing_token\x18\x04 \x01(\fR\x18sessionRelayRoutingToken\x1a\x8d\x01\n" +
	"\x05Route\x12\x1a\n" +
	"\tmy_pop_id\x18\x01 \x01(\aR\amyPopId\x12\x1e\n" +
	"\vyour_pop_id\x18\x02 \x01(\aR\tyourPopId\x12!\n" +
	"\flegacy_score\x18\x03 \x01(\rR\vlegacyScore\x12%\n" +
	"\x0einterior_score\x18\x04 \x01(\rR\rinteriorScore\"\xb1\x02\n" +
	"+CMsgSteamDatagramSetSecondaryAddressRequest\x12$\n" +
	"\x0eclient_main_ip\x18\x01 \x01(\aR\fclientMainIp\x12(\n" +
	"\x10client_main_port\x18\x02 \x01(\aR\x0eclientMainPort\x120\n" +
	"\x14client_connection_id\x18\x03 \x01(\aR\x12clientConnectionId\x12'\n" +
	"\x0fclient_identity\x18\x04 \x01(\tR\x0eclientIdentity\x128\n" +
	"\x18request_send_duplication\x18\x05 \x01(\bR\x16requestSendDuplication\x12\x1d\n" +
	"\n" +
	"kludge_pad\x18c \x01(\fR\tkludgePad\"`\n" +
	"*CMsgSteamDatagramSetSecondaryAddressResult\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage*\xe0\v\n" +
	"\x13ESteamDatagramMsgID\x12\x1f\n" +
	"\x1bk_ESteamDatagramMsg_Invalid\x10\x00\x12)\n" +
	"%k_ESteamDatagramMsg_RouterPingRequest\x10\x01\x12'\n" +
	"#k_ESteamDatagramMsg_RouterPingReply\x10\x02\x12-\n" +
	")k_ESteamDatagramMsg_GameserverPingRequest\x10\x03\x120\n" +
	",k_ESteamDatagramMsg_GameserverSessionRequest\x10\x05\x124\n" +
	"0k_ESteamDatagramMsg_GameserverSessionEstablished\x10\x06\x12!\n" +
	"\x1dk_ESteamDatagramMsg_NoSession\x10\a\x12\"\n" +
	"\x1ek_ESteamDatagramMsg_Diagnostic\x10\b\x12*\n" +
	"&k_ESteamDatagramMsg_DataClientToRouter\x10\t\x12*\n" +
	"&k_ESteamDatagramMsg_DataRouterToServer\x10\n" +
	"\x12*\n" +
	"&k_ESteamDatagramMsg_DataServerToRouter\x10\v\x12*\n" +
	"&k_ESteamDatagramMsg_DataRouterToClient\x10\f\x12\x1d\n" +
	"\x19k_ESteamDatagramMsg_Stats\x10\r\x12/\n" +
	"+k_ESteamDatagramMsg_ClientPingSampleRequest\x10\x0e\x12-\n" +
	")k_ESteamDatagramMsg_ClientPingSampleReply\x10\x0f\x125\n" +
	"1k_ESteamDatagramMsg_ClientToRouterSwitchedPrimary\x10\x10\x12#\n" +
	"\x1fk_ESteamDatagramMsg_RelayHealth\x10\x11\x12&\n" +
	"\"k_ESteamDatagramMsg_ConnectRequest\x10\x12\x12!\n" +
	"\x1dk_ESteamDatagramMsg_ConnectOK\x10\x13\x12(\n" +
	"$k_ESteamDatagramMsg_ConnectionClosed\x10\x14\x12$\n" +
	" k_ESteamDatagramMsg_NoConnection\x10\x15\x12,\n" +
	"(k_ESteamDatagramMsg_TicketDecryptRequest\x10\x16\x12*\n" +
	"&k_ESteamDatagramMsg_TicketDecryptReply\x10\x17\x12)\n" +
	"%k_ESteamDatagramMsg_P2PSessionRequest\x10\x18\x12-\n" +
	")k_ESteamDatagramMsg_P2PSessionEstablished\x10\x19\x12&\n" +
	"\"k_ESteamDatagramMsg_P2PStatsClient\x10\x1a\x12%\n" +
	"!k_ESteamDatagramMsg_P2PStatsRelay\x10\x1b\x12#\n" +
	"\x1fk_ESteamDatagramMsg_P2PBadRoute\x10\x1c\x12+\n" +
	"'k_ESteamDatagramMsg_GameserverPingReply\x10\x1d\x124\n" +
	"0k_ESteamDatagramMsg_LegacyGameserverRegistration\x10\x1e\x122\n" +
	".k_ESteamDatagramMsg_SetSecondaryAddressRequest\x10\x1f\x121\n" +
	"-k_ESteamDatagramMsg_SetSecondaryAddressResult\x10 \x12/\n" +
	"+k_ESteamDatagramMsg_RelayToRelayPingRequest\x10!\x12-\n" +
	")k_ESteamDatagramMsg_RelayToRelayPingReply\x10\"B\x05H\x01\x80\x01\x00"

var (
	file_steamdatagram_messages_sdr_proto_rawDescOnce sync.Once
	file_steamdatagram_messages_sdr_proto_rawDescData []byte
)

func file_steamdatagram_messages_sdr_proto_rawDescGZIP() []byte {
	file_steamdatagram_messages_sdr_proto_rawDescOnce.Do(func() {
		file_steamdatagram_messages_sdr_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_steamdatagram_messages_sdr_proto_rawDesc), len(file_steamdatagram_messages_sdr_proto_rawDesc)))
	})
	return file_steamdatagram_messages_sdr_proto_rawDescData
}

var file_steamdatagram_messages_sdr_proto_enumTypes = make([]protoimpl.EnumInfo, 10)
var file_steamdatagram_messages_sdr_proto_msgTypes = make([]protoimpl.MessageInfo, 42)
var file_steamdatagram_messages_sdr_proto_goTypes = []any{
	(ESteamDatagramMsgID)(0),                                        // 0: ESteamDatagramMsgID
	(CMsgSteamDatagramRouterPingReply_Flags)(0),                     // 1: CMsgSteamDatagramRouterPingReply.Flags
	(CMsgSteamDatagramRouterPingReply_AltAddress_Protocol)(0),       // 2: CMsgSteamDatagramRouterPingReply.AltAddress.Protocol
	(CMsgSteamDatagramConnectionClosed_ERelayMode)(0),               // 3: CMsgSteamDatagramConnectionClosed.ERelayMode
	(CMsgSteamDatagramConnectionStatsClientToRouter_Flags)(0),       // 4: CMsgSteamDatagramConnectionStatsClientToRouter.Flags
	(CMsgSteamDatagramConnectionStatsRouterToClient_Flags)(0),       // 5: CMsgSteamDatagramConnectionStatsRouterToClient.Flags
	(CMsgSteamDatagramConnectionStatsRouterToServer_Flags)(0),       // 6: CMsgSteamDatagramConnectionStatsRouterToServer.Flags
	(CMsgSteamDatagramConnectionStatsServerToRouter_Flags)(0),       // 7: CMsgSteamDatagramConnectionStatsServerToRouter.Flags
	(CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags)(0),    // 8: CMsgSteamDatagramConnectionStatsP2PClientToRouter.Flags
	(CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags)(0),    // 9: CMsgSteamDatagramConnectionStatsP2PRouterToClient.Flags
	(*CMsgSteamNetworkingIPAddress)(nil),                            // 10: CMsgSteamNetworkingIPAddress
	(*CMsgSteamDatagramSignedMessageGeneric)(nil),                   // 11: CMsgSteamDatagramSignedMessageGeneric
	(*CMsgSteamDatagramRouterPingReply)(nil),                        // 12: CMsgSteamDatagramRouterPingReply
	(*CMsgSteamDatagramGameserverPingRequestBody)(nil),              // 13: CMsgSteamDatagramGameserverPingRequestBody
	(*CMsgSteamDatagramGameserverPingRequestEnvelope)(nil),          // 14: CMsgSteamDatagramGameserverPingRequestEnvelope
	(*CMsgSteamDatagramGameserverPingReplyData)(nil),                // 15: CMsgSteamDatagramGameserverPingReplyData
	(*CMsgSteamDatagramNoSessionRelayToClient)(nil),                 // 16: CMsgSteamDatagramNoSessionRelayToClient
	(*CMsgSteamDatagramNoSessionRelayToPeer)(nil),                   // 17: CMsgSteamDatagramNoSessionRelayToPeer
	(*CMsgTOSTreatment)(nil),                                        // 18: CMsgTOSTreatment
	(*CMsgSteamDatagramClientPingSampleRequest)(nil),                // 19: CMsgSteamDatagramClientPingSampleRequest
	(*CMsgSteamDatagramClientPingSampleReply)(nil),                  // 20: CMsgSteamDatagramClientPingSampleReply
	(*CMsgSteamDatagramClientSwitchedPrimary)(nil),                  // 21: CMsgSteamDatagramClientSwitchedPrimary
	(*CMsgSteamDatagramConnectRequest)(nil),                         // 22: CMsgSteamDatagramConnectRequest
	(*CMsgSteamDatagramConnectOK)(nil),                              // 23: CMsgSteamDatagramConnectOK
	(*CMsgSteamNetworkingP2PSDRRoutingSummary)(nil),                 // 24: CMsgSteamNetworkingP2PSDRRoutingSummary
	(*CMsgSteamDatagramP2PRoutingSummary)(nil),                      // 25: CMsgSteamDatagramP2PRoutingSummary
	(*CMsgSteamDatagramConnectionClosed)(nil),                       // 26: CMsgSteamDatagramConnectionClosed
	(*CMsgSteamDatagramNoConnection)(nil),                           // 27: CMsgSteamDatagramNoConnection
	(*CMsgSteamDatagramGameserverSessionRequest)(nil),               // 28: CMsgSteamDatagramGameserverSessionRequest
	(*CMsgSteamDatagramGameserverSessionEstablished)(nil),           // 29: CMsgSteamDatagramGameserverSessionEstablished
	(*CMsgSteamDatagramConnectionStatsClientToRouter)(nil),          // 30: CMsgSteamDatagramConnectionStatsClientToRouter
	(*CMsgSteamDatagramConnectionStatsRouterToClient)(nil),          // 31: CMsgSteamDatagramConnectionStatsRouterToClient
	(*CMsgSteamDatagramConnectionStatsRouterToServer)(nil),          // 32: CMsgSteamDatagramConnectionStatsRouterToServer
	(*CMsgSteamDatagramConnectionStatsServerToRouter)(nil),          // 33: CMsgSteamDatagramConnectionStatsServerToRouter
	(*CMsgSteamDatagramP2PSessionRequestBody)(nil),                  // 34: CMsgSteamDatagramP2PSessionRequestBody
	(*CMsgSteamDatagramP2PSessionRequest)(nil),                      // 35: CMsgSteamDatagramP2PSessionRequest
	(*CMsgSteamDatagramP2PSessionEstablished)(nil),                  // 36: CMsgSteamDatagramP2PSessionEstablished
	(*CMsgSteamDatagramConnectionStatsP2PClientToRouter)(nil),       // 37: CMsgSteamDatagramConnectionStatsP2PClientToRouter
	(*CMsgSteamDatagramConnectionStatsP2PRouterToClient)(nil),       // 38: CMsgSteamDatagramConnectionStatsP2PRouterToClient
	(*CMsgSteamDatagramP2PBadRouteRouterToClient)(nil),              // 39: CMsgSteamDatagramP2PBadRouteRouterToClient
	(*CMsgSteamDatagramP2PRoutes)(nil),                              // 40: CMsgSteamDatagramP2PRoutes
	(*CMsgSteamDatagramSetSecondaryAddressRequest)(nil),             // 41: CMsgSteamDatagramSetSecondaryAddressRequest
	(*CMsgSteamDatagramSetSecondaryAddressResult)(nil),              // 42: CMsgSteamDatagramSetSecondaryAddressResult
	(*CMsgSteamDatagramRouterPingReply_RouteException)(nil),         // 43: CMsgSteamDatagramRouterPingReply.RouteException
	(*CMsgSteamDatagramRouterPingReply_AltAddress)(nil),             // 44: CMsgSteamDatagramRouterPingReply.AltAddress
	(*CMsgSteamDatagramClientPingSampleReply_POP)(nil),              // 45: CMsgSteamDatagramClientPingSampleReply.POP
	(*CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter)(nil), // 46: CMsgSteamDatagramClientPingSampleReply.LegacyDataCenter
	(*CMsgSteamDatagramClientPingSampleReply_POP_AltAddress)(nil),   // 47: CMsgSteamDatagramClientPingSampleReply.POP.AltAddress
	(*CMsgSteamDatagramClientSwitchedPrimary_RouterQuality)(nil),    // 48: CMsgSteamDatagramClientSwitchedPrimary.RouterQuality
	(*CMsgSteamDatagramP2PSessionRequestBody_EncryptedData)(nil),    // 49: CMsgSteamDatagramP2PSessionRequestBody.EncryptedData
	(*CMsgSteamDatagramP2PRoutes_RelayCluster)(nil),                 // 50: CMsgSteamDatagramP2PRoutes.RelayCluster
	(*CMsgSteamDatagramP2PRoutes_Route)(nil),                        // 51: CMsgSteamDatagramP2PRoutes.Route
	(*CMsgSteamDatagramCertificateSigned)(nil),                      // 52: CMsgSteamDatagramCertificateSigned
	(*CMsgSteamDatagramSessionCryptInfoSigned)(nil),                 // 53: CMsgSteamDatagramSessionCryptInfoSigned
	(*CMsgSteamNetworkingICESessionSummary)(nil),                    // 54: CMsgSteamNetworkingICESessionSummary
	(*CMsgSteamNetworkingIdentityLegacyBinary)(nil),                 // 55: CMsgSteamNetworkingIdentityLegacyBinary
	(*CMsgSteamDatagramConnectionQuality)(nil),                      // 56: CMsgSteamDatagramConnectionQuality
}
var file_steamdatagram_messages_sdr_proto_depIdxs = []int32{
	52, // 0: CMsgSteamDatagramSignedMessageGeneric.cert:type_name -> CMsgSteamDatagramCertificateSigned
	43, // 1: CMsgSteamDatagramRouterPingReply.route_exceptions:type_name -> CMsgSteamDatagramRouterPingReply.RouteException
	44, // 2: CMsgSteamDatagramRouterPingReply.alt_addresses:type_name -> CMsgSteamDatagramRouterPingReply.AltAddress
	10, // 3: CMsgSteamDatagramGameserverPingRequestBody.your_public_ip:type_name -> CMsgSteamNetworkingIPAddress
	10, // 4: CMsgSteamDatagramGameserverPingRequestBody.my_ips:type_name -> CMsgSteamNetworkingIPAddress
	52, // 5: CMsgSteamDatagramGameserverPingRequestEnvelope.cert:type_name -> CMsgSteamDatagramCertificateSigned
	18, // 6: CMsgSteamDatagramClientPingSampleReply.tos:type_name -> CMsgTOSTreatment
	45, // 7: CMsgSteamDatagramClientPingSampleReply.pops:type_name -> CMsgSteamDatagramClientPingSampleReply.POP
	46, // 8: CMsgSteamDatagramClientPingSampleReply.legacy_data_centers:type_name -> CMsgSteamDatagramClientPingSampleReply.LegacyDataCenter
	48, // 9: CMsgSteamDatagramClientSwitchedPrimary.from_quality_now:type_name -> CMsgSteamDatagramClientSwitchedPrimary.RouterQuality
	48, // 10: CMsgSteamDatagramClientSwitchedPrimary.to_quality_now:type_name -> CMsgSteamDatagramClientSwitchedPrimary.RouterQuality
	48, // 11: CMsgSteamDatagramClientSwitchedPrimary.from_quality_then:type_name -> CMsgSteamDatagramClientSwitchedPrimary.RouterQuality
	48, // 12: CMsgSteamDatagramClientSwitchedPrimary.to_quality_then:type_name -> CMsgSteamDatagramClientSwitchedPrimary.RouterQuality
	53, // 13: CMsgSteamDatagramConnectRequest.crypt:type_name -> CMsgSteamDatagramSessionCryptInfoSigned
	52, // 14: CMsgSteamDatagramConnectRequest.cert:type_name -> CMsgSteamDatagramCertificateSigned
	53, // 15: CMsgSteamDatagramConnectOK.crypt:type_name -> CMsgSteamDatagramSessionCryptInfoSigned
	52, // 16: CMsgSteamDatagramConnectOK.cert:type_name -> CMsgSteamDatagramCertificateSigned
	54, // 17: CMsgSteamDatagramP2PRoutingSummary.ice:type_name -> CMsgSteamNetworkingICESessionSummary
	24, // 18: CMsgSteamDatagramP2PRoutingSummary.sdr:type_name -> CMsgSteamNetworkingP2PSDRRoutingSummary
	55, // 19: CMsgSteamDatagramConnectionClosed.legacy_from_identity_binary:type_name -> CMsgSteamNetworkingIdentityLegacyBinary
	3,  // 20: CMsgSteamDatagramConnectionClosed.relay_mode:type_name -> CMsgSteamDatagramConnectionClosed.ERelayMode
	56, // 21: CMsgSteamDatagramConnectionClosed.quality_relay:type_name -> CMsgSteamDatagramConnectionQuality
	56, // 22: CMsgSteamDatagramConnectionClosed.quality_e2e:type_name -> CMsgSteamDatagramConnectionQuality
	25, // 23: CMsgSteamDatagramConnectionClosed.p2p_routing_summary:type_name -> CMsgSteamDatagramP2PRoutingSummary
	56, // 24: CMsgSteamDatagramNoConnection.quality_relay:type_name -> CMsgSteamDatagramConnectionQuality
	56, // 25: CMsgSteamDatagramNoConnection.quality_e2e:type_name -> CMsgSteamDatagramConnectionQuality
	25, // 26: CMsgSteamDatagramNoConnection.p2p_routing_summary:type_name -> CMsgSteamDatagramP2PRoutingSummary
	52, // 27: CMsgSteamDatagramGameserverSessionRequest.dev_client_cert:type_name -> CMsgSteamDatagramCertificateSigned
	56, // 28: CMsgSteamDatagramConnectionStatsClientToRouter.quality_relay:type_name -> CMsgSteamDatagramConnectionQuality
	56, // 29: CMsgSteamDatagramConnectionStatsClientToRouter.quality_e2e:type_name -> CMsgSteamDatagramConnectionQuality
	56, // 30: CMsgSteamDatagramConnectionStatsRouterToClient.quality_relay:type_name -> CMsgSteamDatagramConnectionQuality
	56, // 31: CMsgSteamDatagramConnectionStatsRouterToClient.quality_e2e:type_name -> CMsgSteamDatagramConnectionQuality
	56, // 32: CMsgSteamDatagramConnectionStatsRouterToServer.quality_relay:type_name -> CMsgSteamDatagramConnectionQuality
	56, // 33: CMsgSteamDatagramConnectionStatsRouterToServer.quality_e2e:type_name -> CMsgSteamDatagramConnectionQuality
	56, // 34: CMsgSteamDatagramConnectionStatsServerToRouter.quality_relay:type_name -> CMsgSteamDatagramConnectionQuality
	56, // 35: CMsgSteamDatagramConnectionStatsServerToRouter.quality_e2e:type_name -> CMsgSteamDatagramConnectionQuality
	52, // 36: CMsgSteamDatagramP2PSessionRequest.cert:type_name -> CMsgSteamDatagramCertificateSigned
	56, // 37: CMsgSteamDatagramConnectionStatsP2PClientToRouter.quality_relay:type_name -> CMsgSteamDatagramConnectionQuality
	56, // 38: CMsgSteamDatagramConnectionStatsP2PClientToRouter.quality_e2e:type_name -> CMsgSteamDatagramConnectionQuality
	25, // 39: CMsgSteamDatagramConnectionStatsP2PClientToRouter.p2p_routing_summary:type_name -> CMsgSteamDatagramP2PRoutingSummary
	56, // 40: CMsgSteamDatagramConnectionStatsP2PRouterToClient.quality_relay:type_name -> CMsgSteamDatagramConnectionQuality
	56, // 41: CMsgSteamDatagramConnectionStatsP2PRouterToClient.quality_e2e:type_name -> CMsgSteamDatagramConnectionQuality
	50, // 42: CMsgSteamDatagramP2PRoutes.relay_clusters:type_name -> CMsgSteamDatagramP2PRoutes.RelayCluster
	51, // 43: CMsgSteamDatagramP2PRoutes.routes:type_name -> CMsgSteamDatagramP2PRoutes.Route
	2,  // 44: CMsgSteamDatagramRouterPingReply.AltAddress.protocol:type_name -> CMsgSteamDatagramRouterPingReply.AltAddress.Protocol
	47, // 45: CMsgSteamDatagramClientPingSampleReply.POP.alt_addresses:type_name -> CMsgSteamDatagramClientPingSampleReply.POP.AltAddress
	46, // [46:46] is the sub-list for method output_type
	46, // [46:46] is the sub-list for method input_type
	46, // [46:46] is the sub-list for extension type_name
	46, // [46:46] is the sub-list for extension extendee
	0,  // [0:46] is the sub-list for field type_name
}

func init() { file_steamdatagram_messages_sdr_proto_init() }
func file_steamdatagram_messages_sdr_proto_init() {
	if File_steamdatagram_messages_sdr_proto != nil {
		return
	}
	file_steamnetworkingsockets_messages_certs_proto_init()
	file_steamnetworkingsockets_messages_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_steamdatagram_messages_sdr_proto_rawDesc), len(file_steamdatagram_messages_sdr_proto_rawDesc)),
			NumEnums:      10,
			NumMessages:   42,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_steamdatagram_messages_sdr_proto_goTypes,
		DependencyIndexes: file_steamdatagram_messages_sdr_proto_depIdxs,
		EnumInfos:         file_steamdatagram_messages_sdr_proto_enumTypes,
		MessageInfos:      file_steamdatagram_messages_sdr_proto_msgTypes,
	}.Build()
	File_steamdatagram_messages_sdr_proto = out.File
	file_steamdatagram_messages_sdr_proto_goTypes = nil
	file_steamdatagram_messages_sdr_proto_depIdxs = nil
}
