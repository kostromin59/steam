// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v6.32.0
// source: steammessages_lobbymatchmaking.steamclient.proto

package steampb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ELobbyStatus int32

const (
	ELobbyStatus_k_ELobbyStatusInvalid      ELobbyStatus = 0
	ELobbyStatus_k_ELobbyStatusExists       ELobbyStatus = 1
	ELobbyStatus_k_ELobbyStatusDoesNotExist ELobbyStatus = 2
	ELobbyStatus_k_ELobbyStatusNotAMember   ELobbyStatus = 3
)

// Enum value maps for ELobbyStatus.
var (
	ELobbyStatus_name = map[int32]string{
		0: "k_ELobbyStatusInvalid",
		1: "k_ELobbyStatusExists",
		2: "k_ELobbyStatusDoesNotExist",
		3: "k_ELobbyStatusNotAMember",
	}
	ELobbyStatus_value = map[string]int32{
		"k_ELobbyStatusInvalid":      0,
		"k_ELobbyStatusExists":       1,
		"k_ELobbyStatusDoesNotExist": 2,
		"k_ELobbyStatusNotAMember":   3,
	}
)

func (x ELobbyStatus) Enum() *ELobbyStatus {
	p := new(ELobbyStatus)
	*p = x
	return p
}

func (x ELobbyStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ELobbyStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_steammessages_lobbymatchmaking_steamclient_proto_enumTypes[0].Descriptor()
}

func (ELobbyStatus) Type() protoreflect.EnumType {
	return &file_steammessages_lobbymatchmaking_steamclient_proto_enumTypes[0]
}

func (x ELobbyStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ELobbyStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ELobbyStatus(num)
	return nil
}

// Deprecated: Use ELobbyStatus.Descriptor instead.
func (ELobbyStatus) EnumDescriptor() ([]byte, []int) {
	return file_steammessages_lobbymatchmaking_steamclient_proto_rawDescGZIP(), []int{0}
}

type LobbyMatchmakingLegacy_GetLobbyStatus_Request struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	AppId           *uint32                `protobuf:"varint,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	SteamidLobby    *uint64                `protobuf:"fixed64,2,opt,name=steamid_lobby,json=steamidLobby" json:"steamid_lobby,omitempty"`
	ClaimOwnership  *bool                  `protobuf:"varint,3,opt,name=claim_ownership,json=claimOwnership" json:"claim_ownership,omitempty"`
	ClaimMembership *bool                  `protobuf:"varint,4,opt,name=claim_membership,json=claimMembership" json:"claim_membership,omitempty"`
	VersionNum      *uint32                `protobuf:"varint,5,opt,name=version_num,json=versionNum" json:"version_num,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *LobbyMatchmakingLegacy_GetLobbyStatus_Request) Reset() {
	*x = LobbyMatchmakingLegacy_GetLobbyStatus_Request{}
	mi := &file_steammessages_lobbymatchmaking_steamclient_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LobbyMatchmakingLegacy_GetLobbyStatus_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LobbyMatchmakingLegacy_GetLobbyStatus_Request) ProtoMessage() {}

func (x *LobbyMatchmakingLegacy_GetLobbyStatus_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_lobbymatchmaking_steamclient_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LobbyMatchmakingLegacy_GetLobbyStatus_Request.ProtoReflect.Descriptor instead.
func (*LobbyMatchmakingLegacy_GetLobbyStatus_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_lobbymatchmaking_steamclient_proto_rawDescGZIP(), []int{0}
}

func (x *LobbyMatchmakingLegacy_GetLobbyStatus_Request) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *LobbyMatchmakingLegacy_GetLobbyStatus_Request) GetSteamidLobby() uint64 {
	if x != nil && x.SteamidLobby != nil {
		return *x.SteamidLobby
	}
	return 0
}

func (x *LobbyMatchmakingLegacy_GetLobbyStatus_Request) GetClaimOwnership() bool {
	if x != nil && x.ClaimOwnership != nil {
		return *x.ClaimOwnership
	}
	return false
}

func (x *LobbyMatchmakingLegacy_GetLobbyStatus_Request) GetClaimMembership() bool {
	if x != nil && x.ClaimMembership != nil {
		return *x.ClaimMembership
	}
	return false
}

func (x *LobbyMatchmakingLegacy_GetLobbyStatus_Request) GetVersionNum() uint32 {
	if x != nil && x.VersionNum != nil {
		return *x.VersionNum
	}
	return 0
}

type LobbyMatchmakingLegacy_GetLobbyStatus_Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AppId         *uint32                `protobuf:"varint,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	SteamidLobby  *uint64                `protobuf:"fixed64,2,opt,name=steamid_lobby,json=steamidLobby" json:"steamid_lobby,omitempty"`
	LobbyStatus   *ELobbyStatus          `protobuf:"varint,3,opt,name=lobby_status,json=lobbyStatus,enum=ELobbyStatus,def=0" json:"lobby_status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for LobbyMatchmakingLegacy_GetLobbyStatus_Response fields.
const (
	Default_LobbyMatchmakingLegacy_GetLobbyStatus_Response_LobbyStatus = ELobbyStatus_k_ELobbyStatusInvalid
)

func (x *LobbyMatchmakingLegacy_GetLobbyStatus_Response) Reset() {
	*x = LobbyMatchmakingLegacy_GetLobbyStatus_Response{}
	mi := &file_steammessages_lobbymatchmaking_steamclient_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LobbyMatchmakingLegacy_GetLobbyStatus_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LobbyMatchmakingLegacy_GetLobbyStatus_Response) ProtoMessage() {}

func (x *LobbyMatchmakingLegacy_GetLobbyStatus_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_lobbymatchmaking_steamclient_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LobbyMatchmakingLegacy_GetLobbyStatus_Response.ProtoReflect.Descriptor instead.
func (*LobbyMatchmakingLegacy_GetLobbyStatus_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_lobbymatchmaking_steamclient_proto_rawDescGZIP(), []int{1}
}

func (x *LobbyMatchmakingLegacy_GetLobbyStatus_Response) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *LobbyMatchmakingLegacy_GetLobbyStatus_Response) GetSteamidLobby() uint64 {
	if x != nil && x.SteamidLobby != nil {
		return *x.SteamidLobby
	}
	return 0
}

func (x *LobbyMatchmakingLegacy_GetLobbyStatus_Response) GetLobbyStatus() ELobbyStatus {
	if x != nil && x.LobbyStatus != nil {
		return *x.LobbyStatus
	}
	return Default_LobbyMatchmakingLegacy_GetLobbyStatus_Response_LobbyStatus
}

var File_steammessages_lobbymatchmaking_steamclient_proto protoreflect.FileDescriptor

const file_steammessages_lobbymatchmaking_steamclient_proto_rawDesc = "" +
	"\n" +
	"0steammessages_lobbymatchmaking.steamclient.proto\x1a\x18steammessages_base.proto\x1a,steammessages_unified_base.steamclient.proto\"\xe0\x01\n" +
	"-LobbyMatchmakingLegacy_GetLobbyStatus_Request\x12\x15\n" +
	"\x06app_id\x18\x01 \x01(\rR\x05appId\x12#\n" +
	"\rsteamid_lobby\x18\x02 \x01(\x06R\fsteamidLobby\x12'\n" +
	"\x0fclaim_ownership\x18\x03 \x01(\bR\x0eclaimOwnership\x12)\n" +
	"\x10claim_membership\x18\x04 \x01(\bR\x0fclaimMembership\x12\x1f\n" +
	"\vversion_num\x18\x05 \x01(\rR\n" +
	"versionNum\"\xb5\x01\n" +
	".LobbyMatchmakingLegacy_GetLobbyStatus_Response\x12\x15\n" +
	"\x06app_id\x18\x01 \x01(\rR\x05appId\x12#\n" +
	"\rsteamid_lobby\x18\x02 \x01(\x06R\fsteamidLobby\x12G\n" +
	"\flobby_status\x18\x03 \x01(\x0e2\r.ELobbyStatus:\x15k_ELobbyStatusInvalidR\vlobbyStatus*\x81\x01\n" +
	"\fELobbyStatus\x12\x19\n" +
	"\x15k_ELobbyStatusInvalid\x10\x00\x12\x18\n" +
	"\x14k_ELobbyStatusExists\x10\x01\x12\x1e\n" +
	"\x1ak_ELobbyStatusDoesNotExist\x10\x02\x12\x1c\n" +
	"\x18k_ELobbyStatusNotAMember\x10\x032\x8b\x01\n" +
	"\x16LobbyMatchmakingLegacy\x12q\n" +
	"\x0eGetLobbyStatus\x12..LobbyMatchmakingLegacy_GetLobbyStatus_Request\x1a/.LobbyMatchmakingLegacy_GetLobbyStatus_ResponseB\x03\x80\x01\x01"

var (
	file_steammessages_lobbymatchmaking_steamclient_proto_rawDescOnce sync.Once
	file_steammessages_lobbymatchmaking_steamclient_proto_rawDescData []byte
)

func file_steammessages_lobbymatchmaking_steamclient_proto_rawDescGZIP() []byte {
	file_steammessages_lobbymatchmaking_steamclient_proto_rawDescOnce.Do(func() {
		file_steammessages_lobbymatchmaking_steamclient_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_steammessages_lobbymatchmaking_steamclient_proto_rawDesc), len(file_steammessages_lobbymatchmaking_steamclient_proto_rawDesc)))
	})
	return file_steammessages_lobbymatchmaking_steamclient_proto_rawDescData
}

var file_steammessages_lobbymatchmaking_steamclient_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_steammessages_lobbymatchmaking_steamclient_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_steammessages_lobbymatchmaking_steamclient_proto_goTypes = []any{
	(ELobbyStatus)(0), // 0: ELobbyStatus
	(*LobbyMatchmakingLegacy_GetLobbyStatus_Request)(nil),  // 1: LobbyMatchmakingLegacy_GetLobbyStatus_Request
	(*LobbyMatchmakingLegacy_GetLobbyStatus_Response)(nil), // 2: LobbyMatchmakingLegacy_GetLobbyStatus_Response
}
var file_steammessages_lobbymatchmaking_steamclient_proto_depIdxs = []int32{
	0, // 0: LobbyMatchmakingLegacy_GetLobbyStatus_Response.lobby_status:type_name -> ELobbyStatus
	1, // 1: LobbyMatchmakingLegacy.GetLobbyStatus:input_type -> LobbyMatchmakingLegacy_GetLobbyStatus_Request
	2, // 2: LobbyMatchmakingLegacy.GetLobbyStatus:output_type -> LobbyMatchmakingLegacy_GetLobbyStatus_Response
	2, // [2:3] is the sub-list for method output_type
	1, // [1:2] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_steammessages_lobbymatchmaking_steamclient_proto_init() }
func file_steammessages_lobbymatchmaking_steamclient_proto_init() {
	if File_steammessages_lobbymatchmaking_steamclient_proto != nil {
		return
	}
	file_steammessages_base_proto_init()
	file_steammessages_unified_base_steamclient_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_steammessages_lobbymatchmaking_steamclient_proto_rawDesc), len(file_steammessages_lobbymatchmaking_steamclient_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_steammessages_lobbymatchmaking_steamclient_proto_goTypes,
		DependencyIndexes: file_steammessages_lobbymatchmaking_steamclient_proto_depIdxs,
		EnumInfos:         file_steammessages_lobbymatchmaking_steamclient_proto_enumTypes,
		MessageInfos:      file_steammessages_lobbymatchmaking_steamclient_proto_msgTypes,
	}.Build()
	File_steammessages_lobbymatchmaking_steamclient_proto = out.File
	file_steammessages_lobbymatchmaking_steamclient_proto_goTypes = nil
	file_steammessages_lobbymatchmaking_steamclient_proto_depIdxs = nil
}
