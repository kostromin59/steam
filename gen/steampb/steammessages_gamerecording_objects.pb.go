// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v6.32.0
// source: steammessages_gamerecording_objects.proto

package steampb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CGameRecording_AudioSessionsChanged_Notification struct {
	state         protoimpl.MessageState                                      `protogen:"open.v1"`
	Sessions      []*CGameRecording_AudioSessionsChanged_Notification_Session `protobuf:"bytes,1,rep,name=sessions" json:"sessions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CGameRecording_AudioSessionsChanged_Notification) Reset() {
	*x = CGameRecording_AudioSessionsChanged_Notification{}
	mi := &file_steammessages_gamerecording_objects_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameRecording_AudioSessionsChanged_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_AudioSessionsChanged_Notification) ProtoMessage() {}

func (x *CGameRecording_AudioSessionsChanged_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_gamerecording_objects_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_AudioSessionsChanged_Notification.ProtoReflect.Descriptor instead.
func (*CGameRecording_AudioSessionsChanged_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_gamerecording_objects_proto_rawDescGZIP(), []int{0}
}

func (x *CGameRecording_AudioSessionsChanged_Notification) GetSessions() []*CGameRecording_AudioSessionsChanged_Notification_Session {
	if x != nil {
		return x.Sessions
	}
	return nil
}

type CGameRecording_AudioSessionsChanged_Notification_Session struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            *string                `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name          *string                `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	IsSystem      *bool                  `protobuf:"varint,3,opt,name=is_system,json=isSystem" json:"is_system,omitempty"`
	IsMuted       *bool                  `protobuf:"varint,4,opt,name=is_muted,json=isMuted" json:"is_muted,omitempty"`
	IsActive      *bool                  `protobuf:"varint,5,opt,name=is_active,json=isActive" json:"is_active,omitempty"`
	IsCaptured    *bool                  `protobuf:"varint,6,opt,name=is_captured,json=isCaptured" json:"is_captured,omitempty"`
	RecentPeak    *float32               `protobuf:"fixed32,7,opt,name=recent_peak,json=recentPeak" json:"recent_peak,omitempty"`
	IsGame        *bool                  `protobuf:"varint,8,opt,name=is_game,json=isGame" json:"is_game,omitempty"`
	IsSteam       *bool                  `protobuf:"varint,9,opt,name=is_steam,json=isSteam" json:"is_steam,omitempty"`
	IsSaved       *bool                  `protobuf:"varint,10,opt,name=is_saved,json=isSaved" json:"is_saved,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CGameRecording_AudioSessionsChanged_Notification_Session) Reset() {
	*x = CGameRecording_AudioSessionsChanged_Notification_Session{}
	mi := &file_steammessages_gamerecording_objects_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameRecording_AudioSessionsChanged_Notification_Session) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecording_AudioSessionsChanged_Notification_Session) ProtoMessage() {}

func (x *CGameRecording_AudioSessionsChanged_Notification_Session) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_gamerecording_objects_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecording_AudioSessionsChanged_Notification_Session.ProtoReflect.Descriptor instead.
func (*CGameRecording_AudioSessionsChanged_Notification_Session) Descriptor() ([]byte, []int) {
	return file_steammessages_gamerecording_objects_proto_rawDescGZIP(), []int{0, 0}
}

func (x *CGameRecording_AudioSessionsChanged_Notification_Session) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *CGameRecording_AudioSessionsChanged_Notification_Session) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CGameRecording_AudioSessionsChanged_Notification_Session) GetIsSystem() bool {
	if x != nil && x.IsSystem != nil {
		return *x.IsSystem
	}
	return false
}

func (x *CGameRecording_AudioSessionsChanged_Notification_Session) GetIsMuted() bool {
	if x != nil && x.IsMuted != nil {
		return *x.IsMuted
	}
	return false
}

func (x *CGameRecording_AudioSessionsChanged_Notification_Session) GetIsActive() bool {
	if x != nil && x.IsActive != nil {
		return *x.IsActive
	}
	return false
}

func (x *CGameRecording_AudioSessionsChanged_Notification_Session) GetIsCaptured() bool {
	if x != nil && x.IsCaptured != nil {
		return *x.IsCaptured
	}
	return false
}

func (x *CGameRecording_AudioSessionsChanged_Notification_Session) GetRecentPeak() float32 {
	if x != nil && x.RecentPeak != nil {
		return *x.RecentPeak
	}
	return 0
}

func (x *CGameRecording_AudioSessionsChanged_Notification_Session) GetIsGame() bool {
	if x != nil && x.IsGame != nil {
		return *x.IsGame
	}
	return false
}

func (x *CGameRecording_AudioSessionsChanged_Notification_Session) GetIsSteam() bool {
	if x != nil && x.IsSteam != nil {
		return *x.IsSteam
	}
	return false
}

func (x *CGameRecording_AudioSessionsChanged_Notification_Session) GetIsSaved() bool {
	if x != nil && x.IsSaved != nil {
		return *x.IsSaved
	}
	return false
}

var File_steammessages_gamerecording_objects_proto protoreflect.FileDescriptor

const file_steammessages_gamerecording_objects_proto_rawDesc = "" +
	"\n" +
	")steammessages_gamerecording_objects.proto\x1a\venums.proto\"\x9f\x03\n" +
	"0CGameRecording_AudioSessionsChanged_Notification\x12U\n" +
	"\bsessions\x18\x01 \x03(\v29.CGameRecording_AudioSessionsChanged_Notification.SessionR\bsessions\x1a\x93\x02\n" +
	"\aSession\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x1b\n" +
	"\tis_system\x18\x03 \x01(\bR\bisSystem\x12\x19\n" +
	"\bis_muted\x18\x04 \x01(\bR\aisMuted\x12\x1b\n" +
	"\tis_active\x18\x05 \x01(\bR\bisActive\x12\x1f\n" +
	"\vis_captured\x18\x06 \x01(\bR\n" +
	"isCaptured\x12\x1f\n" +
	"\vrecent_peak\x18\a \x01(\x02R\n" +
	"recentPeak\x12\x17\n" +
	"\ais_game\x18\b \x01(\bR\x06isGame\x12\x19\n" +
	"\bis_steam\x18\t \x01(\bR\aisSteam\x12\x19\n" +
	"\bis_saved\x18\n" +
	" \x01(\bR\aisSavedB\x05H\x01\x80\x01\x00"

var (
	file_steammessages_gamerecording_objects_proto_rawDescOnce sync.Once
	file_steammessages_gamerecording_objects_proto_rawDescData []byte
)

func file_steammessages_gamerecording_objects_proto_rawDescGZIP() []byte {
	file_steammessages_gamerecording_objects_proto_rawDescOnce.Do(func() {
		file_steammessages_gamerecording_objects_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_steammessages_gamerecording_objects_proto_rawDesc), len(file_steammessages_gamerecording_objects_proto_rawDesc)))
	})
	return file_steammessages_gamerecording_objects_proto_rawDescData
}

var file_steammessages_gamerecording_objects_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_steammessages_gamerecording_objects_proto_goTypes = []any{
	(*CGameRecording_AudioSessionsChanged_Notification)(nil),         // 0: CGameRecording_AudioSessionsChanged_Notification
	(*CGameRecording_AudioSessionsChanged_Notification_Session)(nil), // 1: CGameRecording_AudioSessionsChanged_Notification.Session
}
var file_steammessages_gamerecording_objects_proto_depIdxs = []int32{
	1, // 0: CGameRecording_AudioSessionsChanged_Notification.sessions:type_name -> CGameRecording_AudioSessionsChanged_Notification.Session
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_steammessages_gamerecording_objects_proto_init() }
func file_steammessages_gamerecording_objects_proto_init() {
	if File_steammessages_gamerecording_objects_proto != nil {
		return
	}
	file_enums_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_steammessages_gamerecording_objects_proto_rawDesc), len(file_steammessages_gamerecording_objects_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_steammessages_gamerecording_objects_proto_goTypes,
		DependencyIndexes: file_steammessages_gamerecording_objects_proto_depIdxs,
		MessageInfos:      file_steammessages_gamerecording_objects_proto_msgTypes,
	}.Build()
	File_steammessages_gamerecording_objects_proto = out.File
	file_steammessages_gamerecording_objects_proto_goTypes = nil
	file_steammessages_gamerecording_objects_proto_depIdxs = nil
}
