// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v6.32.0
// source: webuimessages_gamerecordingfiles.proto

package steampb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CGameRecordingFile struct {
	state          protoimpl.MessageState            `protogen:"open.v1"`
	Timelines      []*CGameRecordingTimelineMetadata `protobuf:"bytes,1,rep,name=timelines" json:"timelines,omitempty"`
	PostgameEvents []*CGameRecordingPostGameSummary  `protobuf:"bytes,2,rep,name=postgame_events,json=postgameEvents" json:"postgame_events,omitempty"`
	TemporaryClips []string                          `protobuf:"bytes,3,rep,name=temporary_clips,json=temporaryClips" json:"temporary_clips,omitempty"`
	Tags           []*CGameRecordingTag              `protobuf:"bytes,4,rep,name=tags" json:"tags,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CGameRecordingFile) Reset() {
	*x = CGameRecordingFile{}
	mi := &file_webuimessages_gamerecordingfiles_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameRecordingFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecordingFile) ProtoMessage() {}

func (x *CGameRecordingFile) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_gamerecordingfiles_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecordingFile.ProtoReflect.Descriptor instead.
func (*CGameRecordingFile) Descriptor() ([]byte, []int) {
	return file_webuimessages_gamerecordingfiles_proto_rawDescGZIP(), []int{0}
}

func (x *CGameRecordingFile) GetTimelines() []*CGameRecordingTimelineMetadata {
	if x != nil {
		return x.Timelines
	}
	return nil
}

func (x *CGameRecordingFile) GetPostgameEvents() []*CGameRecordingPostGameSummary {
	if x != nil {
		return x.PostgameEvents
	}
	return nil
}

func (x *CGameRecordingFile) GetTemporaryClips() []string {
	if x != nil {
		return x.TemporaryClips
	}
	return nil
}

func (x *CGameRecordingFile) GetTags() []*CGameRecordingTag {
	if x != nil {
		return x.Tags
	}
	return nil
}

type CGameRecordingClipFile struct {
	state                      protoimpl.MessageState            `protogen:"open.v1"`
	Timelines                  []*CGameRecordingTimelineMetadata `protobuf:"bytes,1,rep,name=timelines" json:"timelines,omitempty"`
	FirstTimelineStartOffsetMs *uint64                           `protobuf:"varint,2,opt,name=first_timeline_start_offset_ms,json=firstTimelineStartOffsetMs" json:"first_timeline_start_offset_ms,omitempty"`
	DateRecorded               *uint32                           `protobuf:"varint,3,opt,name=date_recorded,json=dateRecorded" json:"date_recorded,omitempty"`
	GameId                     *uint64                           `protobuf:"varint,4,opt,name=game_id,json=gameId" json:"game_id,omitempty"`
	PublishedFileId            *uint64                           `protobuf:"fixed64,5,opt,name=published_file_id,json=publishedFileId" json:"published_file_id,omitempty"`
	SizeInBytes                *uint64                           `protobuf:"varint,6,opt,name=size_in_bytes,json=sizeInBytes" json:"size_in_bytes,omitempty"`
	Name                       *string                           `protobuf:"bytes,7,opt,name=name" json:"name,omitempty"`
	Temporary                  *bool                             `protobuf:"varint,8,opt,name=temporary" json:"temporary,omitempty"`
	OriginalDevice             *string                           `protobuf:"bytes,9,opt,name=original_device,json=originalDevice" json:"original_device,omitempty"`
	OriginalGamingDeviceType   *uint32                           `protobuf:"varint,10,opt,name=original_gaming_device_type,json=originalGamingDeviceType" json:"original_gaming_device_type,omitempty"`
	DateDownloaded             *uint32                           `protobuf:"varint,11,opt,name=date_downloaded,json=dateDownloaded" json:"date_downloaded,omitempty"`
	ThumbnailWidth             *uint32                           `protobuf:"varint,12,opt,name=thumbnail_width,json=thumbnailWidth" json:"thumbnail_width,omitempty"`
	ThumbnailHeight            *uint32                           `protobuf:"varint,13,opt,name=thumbnail_height,json=thumbnailHeight" json:"thumbnail_height,omitempty"`
	Tags                       []*CGameRecordingTag              `protobuf:"bytes,14,rep,name=tags" json:"tags,omitempty"`
	Phases                     []*CGameRecordingPhase            `protobuf:"bytes,15,rep,name=phases" json:"phases,omitempty"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *CGameRecordingClipFile) Reset() {
	*x = CGameRecordingClipFile{}
	mi := &file_webuimessages_gamerecordingfiles_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameRecordingClipFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecordingClipFile) ProtoMessage() {}

func (x *CGameRecordingClipFile) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_gamerecordingfiles_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecordingClipFile.ProtoReflect.Descriptor instead.
func (*CGameRecordingClipFile) Descriptor() ([]byte, []int) {
	return file_webuimessages_gamerecordingfiles_proto_rawDescGZIP(), []int{1}
}

func (x *CGameRecordingClipFile) GetTimelines() []*CGameRecordingTimelineMetadata {
	if x != nil {
		return x.Timelines
	}
	return nil
}

func (x *CGameRecordingClipFile) GetFirstTimelineStartOffsetMs() uint64 {
	if x != nil && x.FirstTimelineStartOffsetMs != nil {
		return *x.FirstTimelineStartOffsetMs
	}
	return 0
}

func (x *CGameRecordingClipFile) GetDateRecorded() uint32 {
	if x != nil && x.DateRecorded != nil {
		return *x.DateRecorded
	}
	return 0
}

func (x *CGameRecordingClipFile) GetGameId() uint64 {
	if x != nil && x.GameId != nil {
		return *x.GameId
	}
	return 0
}

func (x *CGameRecordingClipFile) GetPublishedFileId() uint64 {
	if x != nil && x.PublishedFileId != nil {
		return *x.PublishedFileId
	}
	return 0
}

func (x *CGameRecordingClipFile) GetSizeInBytes() uint64 {
	if x != nil && x.SizeInBytes != nil {
		return *x.SizeInBytes
	}
	return 0
}

func (x *CGameRecordingClipFile) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CGameRecordingClipFile) GetTemporary() bool {
	if x != nil && x.Temporary != nil {
		return *x.Temporary
	}
	return false
}

func (x *CGameRecordingClipFile) GetOriginalDevice() string {
	if x != nil && x.OriginalDevice != nil {
		return *x.OriginalDevice
	}
	return ""
}

func (x *CGameRecordingClipFile) GetOriginalGamingDeviceType() uint32 {
	if x != nil && x.OriginalGamingDeviceType != nil {
		return *x.OriginalGamingDeviceType
	}
	return 0
}

func (x *CGameRecordingClipFile) GetDateDownloaded() uint32 {
	if x != nil && x.DateDownloaded != nil {
		return *x.DateDownloaded
	}
	return 0
}

func (x *CGameRecordingClipFile) GetThumbnailWidth() uint32 {
	if x != nil && x.ThumbnailWidth != nil {
		return *x.ThumbnailWidth
	}
	return 0
}

func (x *CGameRecordingClipFile) GetThumbnailHeight() uint32 {
	if x != nil && x.ThumbnailHeight != nil {
		return *x.ThumbnailHeight
	}
	return 0
}

func (x *CGameRecordingClipFile) GetTags() []*CGameRecordingTag {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *CGameRecordingClipFile) GetPhases() []*CGameRecordingPhase {
	if x != nil {
		return x.Phases
	}
	return nil
}

type CGameRecordingTimelineMetadata struct {
	state             protoimpl.MessageState                      `protogen:"open.v1"`
	TimelineId        *string                                     `protobuf:"bytes,1,opt,name=timeline_id,json=timelineId" json:"timeline_id,omitempty"`
	GameId            *uint64                                     `protobuf:"varint,2,opt,name=game_id,json=gameId" json:"game_id,omitempty"`
	DateRecorded      *uint32                                     `protobuf:"varint,3,opt,name=date_recorded,json=dateRecorded" json:"date_recorded,omitempty"`
	DurationMs        *uint64                                     `protobuf:"varint,4,opt,name=duration_ms,json=durationMs" json:"duration_ms,omitempty"`
	Recordings        []*CGameRecordingTimelineMetadata_Recording `protobuf:"bytes,5,rep,name=recordings" json:"recordings,omitempty"`
	Phases            []*CGameRecordingPhase                      `protobuf:"bytes,6,rep,name=phases" json:"phases,omitempty"`
	SignificantEvents []*CGameRecordingTimelineEvent              `protobuf:"bytes,7,rep,name=significant_events,json=significantEvents" json:"significant_events,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *CGameRecordingTimelineMetadata) Reset() {
	*x = CGameRecordingTimelineMetadata{}
	mi := &file_webuimessages_gamerecordingfiles_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameRecordingTimelineMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecordingTimelineMetadata) ProtoMessage() {}

func (x *CGameRecordingTimelineMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_gamerecordingfiles_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecordingTimelineMetadata.ProtoReflect.Descriptor instead.
func (*CGameRecordingTimelineMetadata) Descriptor() ([]byte, []int) {
	return file_webuimessages_gamerecordingfiles_proto_rawDescGZIP(), []int{2}
}

func (x *CGameRecordingTimelineMetadata) GetTimelineId() string {
	if x != nil && x.TimelineId != nil {
		return *x.TimelineId
	}
	return ""
}

func (x *CGameRecordingTimelineMetadata) GetGameId() uint64 {
	if x != nil && x.GameId != nil {
		return *x.GameId
	}
	return 0
}

func (x *CGameRecordingTimelineMetadata) GetDateRecorded() uint32 {
	if x != nil && x.DateRecorded != nil {
		return *x.DateRecorded
	}
	return 0
}

func (x *CGameRecordingTimelineMetadata) GetDurationMs() uint64 {
	if x != nil && x.DurationMs != nil {
		return *x.DurationMs
	}
	return 0
}

func (x *CGameRecordingTimelineMetadata) GetRecordings() []*CGameRecordingTimelineMetadata_Recording {
	if x != nil {
		return x.Recordings
	}
	return nil
}

func (x *CGameRecordingTimelineMetadata) GetPhases() []*CGameRecordingPhase {
	if x != nil {
		return x.Phases
	}
	return nil
}

func (x *CGameRecordingTimelineMetadata) GetSignificantEvents() []*CGameRecordingTimelineEvent {
	if x != nil {
		return x.SignificantEvents
	}
	return nil
}

type CGameRecordingPostGameSummary struct {
	state         protoimpl.MessageState         `protogen:"open.v1"`
	GameId        *uint64                        `protobuf:"varint,1,opt,name=game_id,json=gameId" json:"game_id,omitempty"`
	Events        []*CGameRecordingTimelineEvent `protobuf:"bytes,2,rep,name=events" json:"events,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CGameRecordingPostGameSummary) Reset() {
	*x = CGameRecordingPostGameSummary{}
	mi := &file_webuimessages_gamerecordingfiles_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameRecordingPostGameSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecordingPostGameSummary) ProtoMessage() {}

func (x *CGameRecordingPostGameSummary) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_gamerecordingfiles_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecordingPostGameSummary.ProtoReflect.Descriptor instead.
func (*CGameRecordingPostGameSummary) Descriptor() ([]byte, []int) {
	return file_webuimessages_gamerecordingfiles_proto_rawDescGZIP(), []int{3}
}

func (x *CGameRecordingPostGameSummary) GetGameId() uint64 {
	if x != nil && x.GameId != nil {
		return *x.GameId
	}
	return 0
}

func (x *CGameRecordingPostGameSummary) GetEvents() []*CGameRecordingTimelineEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

type CGameRecordingTimelineEvent struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	GameId           *uint64                `protobuf:"varint,1,opt,name=game_id,json=gameId" json:"game_id,omitempty"`
	RtCreated        *uint32                `protobuf:"varint,2,opt,name=rt_created,json=rtCreated" json:"rt_created,omitempty"`
	PossibleClip     *int32                 `protobuf:"varint,3,opt,name=possible_clip,json=possibleClip" json:"possible_clip,omitempty"`
	TimelineId       *string                `protobuf:"bytes,4,opt,name=timeline_id,json=timelineId" json:"timeline_id,omitempty"`
	EntryId          *uint64                `protobuf:"varint,5,opt,name=entry_id,json=entryId" json:"entry_id,omitempty"`
	TimelineOffsetMs *uint64                `protobuf:"varint,6,opt,name=timeline_offset_ms,json=timelineOffsetMs" json:"timeline_offset_ms,omitempty"`
	DurationMs       *uint64                `protobuf:"varint,7,opt,name=duration_ms,json=durationMs" json:"duration_ms,omitempty"`
	MarkerIcon       *string                `protobuf:"bytes,8,opt,name=marker_icon,json=markerIcon" json:"marker_icon,omitempty"`
	MarkerTitle      *string                `protobuf:"bytes,9,opt,name=marker_title,json=markerTitle" json:"marker_title,omitempty"`
	UserMarker       *bool                  `protobuf:"varint,10,opt,name=user_marker,json=userMarker" json:"user_marker,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CGameRecordingTimelineEvent) Reset() {
	*x = CGameRecordingTimelineEvent{}
	mi := &file_webuimessages_gamerecordingfiles_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameRecordingTimelineEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecordingTimelineEvent) ProtoMessage() {}

func (x *CGameRecordingTimelineEvent) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_gamerecordingfiles_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecordingTimelineEvent.ProtoReflect.Descriptor instead.
func (*CGameRecordingTimelineEvent) Descriptor() ([]byte, []int) {
	return file_webuimessages_gamerecordingfiles_proto_rawDescGZIP(), []int{4}
}

func (x *CGameRecordingTimelineEvent) GetGameId() uint64 {
	if x != nil && x.GameId != nil {
		return *x.GameId
	}
	return 0
}

func (x *CGameRecordingTimelineEvent) GetRtCreated() uint32 {
	if x != nil && x.RtCreated != nil {
		return *x.RtCreated
	}
	return 0
}

func (x *CGameRecordingTimelineEvent) GetPossibleClip() int32 {
	if x != nil && x.PossibleClip != nil {
		return *x.PossibleClip
	}
	return 0
}

func (x *CGameRecordingTimelineEvent) GetTimelineId() string {
	if x != nil && x.TimelineId != nil {
		return *x.TimelineId
	}
	return ""
}

func (x *CGameRecordingTimelineEvent) GetEntryId() uint64 {
	if x != nil && x.EntryId != nil {
		return *x.EntryId
	}
	return 0
}

func (x *CGameRecordingTimelineEvent) GetTimelineOffsetMs() uint64 {
	if x != nil && x.TimelineOffsetMs != nil {
		return *x.TimelineOffsetMs
	}
	return 0
}

func (x *CGameRecordingTimelineEvent) GetDurationMs() uint64 {
	if x != nil && x.DurationMs != nil {
		return *x.DurationMs
	}
	return 0
}

func (x *CGameRecordingTimelineEvent) GetMarkerIcon() string {
	if x != nil && x.MarkerIcon != nil {
		return *x.MarkerIcon
	}
	return ""
}

func (x *CGameRecordingTimelineEvent) GetMarkerTitle() string {
	if x != nil && x.MarkerTitle != nil {
		return *x.MarkerTitle
	}
	return ""
}

func (x *CGameRecordingTimelineEvent) GetUserMarker() bool {
	if x != nil && x.UserMarker != nil {
		return *x.UserMarker
	}
	return false
}

type CGameRecordingTag struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	GameId        *uint64                       `protobuf:"varint,1,opt,name=game_id,json=gameId" json:"game_id,omitempty"`
	Tag           *CTimelineTag                 `protobuf:"bytes,2,opt,name=tag" json:"tag,omitempty"`
	References    []*CGameRecordingTag_Timeline `protobuf:"bytes,3,rep,name=references" json:"references,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CGameRecordingTag) Reset() {
	*x = CGameRecordingTag{}
	mi := &file_webuimessages_gamerecordingfiles_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameRecordingTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecordingTag) ProtoMessage() {}

func (x *CGameRecordingTag) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_gamerecordingfiles_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecordingTag.ProtoReflect.Descriptor instead.
func (*CGameRecordingTag) Descriptor() ([]byte, []int) {
	return file_webuimessages_gamerecordingfiles_proto_rawDescGZIP(), []int{5}
}

func (x *CGameRecordingTag) GetGameId() uint64 {
	if x != nil && x.GameId != nil {
		return *x.GameId
	}
	return 0
}

func (x *CGameRecordingTag) GetTag() *CTimelineTag {
	if x != nil {
		return x.Tag
	}
	return nil
}

func (x *CGameRecordingTag) GetReferences() []*CGameRecordingTag_Timeline {
	if x != nil {
		return x.References
	}
	return nil
}

type CGameRecordingTagInstance struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	TimelineId       *string                `protobuf:"bytes,1,opt,name=timeline_id,json=timelineId" json:"timeline_id,omitempty"`
	EntryId          *uint64                `protobuf:"varint,2,opt,name=entry_id,json=entryId" json:"entry_id,omitempty"`
	TimelineOffsetMs *uint64                `protobuf:"varint,3,opt,name=timeline_offset_ms,json=timelineOffsetMs" json:"timeline_offset_ms,omitempty"`
	DurationMs       *uint64                `protobuf:"varint,4,opt,name=duration_ms,json=durationMs" json:"duration_ms,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CGameRecordingTagInstance) Reset() {
	*x = CGameRecordingTagInstance{}
	mi := &file_webuimessages_gamerecordingfiles_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameRecordingTagInstance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecordingTagInstance) ProtoMessage() {}

func (x *CGameRecordingTagInstance) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_gamerecordingfiles_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecordingTagInstance.ProtoReflect.Descriptor instead.
func (*CGameRecordingTagInstance) Descriptor() ([]byte, []int) {
	return file_webuimessages_gamerecordingfiles_proto_rawDescGZIP(), []int{6}
}

func (x *CGameRecordingTagInstance) GetTimelineId() string {
	if x != nil && x.TimelineId != nil {
		return *x.TimelineId
	}
	return ""
}

func (x *CGameRecordingTagInstance) GetEntryId() uint64 {
	if x != nil && x.EntryId != nil {
		return *x.EntryId
	}
	return 0
}

func (x *CGameRecordingTagInstance) GetTimelineOffsetMs() uint64 {
	if x != nil && x.TimelineOffsetMs != nil {
		return *x.TimelineOffsetMs
	}
	return 0
}

func (x *CGameRecordingTagInstance) GetDurationMs() uint64 {
	if x != nil && x.DurationMs != nil {
		return *x.DurationMs
	}
	return 0
}

type CGameRecordingPhase struct {
	state                    protoimpl.MessageState     `protogen:"open.v1"`
	PhaseId                  *string                    `protobuf:"bytes,4,opt,name=phase_id,json=phaseId" json:"phase_id,omitempty"`
	DurationMs               *uint64                    `protobuf:"varint,5,opt,name=duration_ms,json=durationMs" json:"duration_ms,omitempty"`
	Tags                     []*CGameRecordingPhase_Tag `protobuf:"bytes,6,rep,name=tags" json:"tags,omitempty"`
	ContainedTags            []*CGameRecordingPhase_Tag `protobuf:"bytes,7,rep,name=contained_tags,json=containedTags" json:"contained_tags,omitempty"`
	BackgroundTimelineOffset *uint64                    `protobuf:"varint,8,opt,name=background_timeline_offset,json=backgroundTimelineOffset" json:"background_timeline_offset,omitempty"`
	Attributes               []*CPhaseAttribute         `protobuf:"bytes,9,rep,name=attributes" json:"attributes,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *CGameRecordingPhase) Reset() {
	*x = CGameRecordingPhase{}
	mi := &file_webuimessages_gamerecordingfiles_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameRecordingPhase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecordingPhase) ProtoMessage() {}

func (x *CGameRecordingPhase) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_gamerecordingfiles_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecordingPhase.ProtoReflect.Descriptor instead.
func (*CGameRecordingPhase) Descriptor() ([]byte, []int) {
	return file_webuimessages_gamerecordingfiles_proto_rawDescGZIP(), []int{7}
}

func (x *CGameRecordingPhase) GetPhaseId() string {
	if x != nil && x.PhaseId != nil {
		return *x.PhaseId
	}
	return ""
}

func (x *CGameRecordingPhase) GetDurationMs() uint64 {
	if x != nil && x.DurationMs != nil {
		return *x.DurationMs
	}
	return 0
}

func (x *CGameRecordingPhase) GetTags() []*CGameRecordingPhase_Tag {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *CGameRecordingPhase) GetContainedTags() []*CGameRecordingPhase_Tag {
	if x != nil {
		return x.ContainedTags
	}
	return nil
}

func (x *CGameRecordingPhase) GetBackgroundTimelineOffset() uint64 {
	if x != nil && x.BackgroundTimelineOffset != nil {
		return *x.BackgroundTimelineOffset
	}
	return 0
}

func (x *CGameRecordingPhase) GetAttributes() []*CPhaseAttribute {
	if x != nil {
		return x.Attributes
	}
	return nil
}

type CTimelineTag struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          *string                `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Group         *string                `protobuf:"bytes,2,opt,name=group" json:"group,omitempty"`
	Icon          *string                `protobuf:"bytes,3,opt,name=icon" json:"icon,omitempty"`
	Priority      *uint32                `protobuf:"varint,4,opt,name=priority" json:"priority,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CTimelineTag) Reset() {
	*x = CTimelineTag{}
	mi := &file_webuimessages_gamerecordingfiles_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CTimelineTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTimelineTag) ProtoMessage() {}

func (x *CTimelineTag) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_gamerecordingfiles_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTimelineTag.ProtoReflect.Descriptor instead.
func (*CTimelineTag) Descriptor() ([]byte, []int) {
	return file_webuimessages_gamerecordingfiles_proto_rawDescGZIP(), []int{8}
}

func (x *CTimelineTag) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CTimelineTag) GetGroup() string {
	if x != nil && x.Group != nil {
		return *x.Group
	}
	return ""
}

func (x *CTimelineTag) GetIcon() string {
	if x != nil && x.Icon != nil {
		return *x.Icon
	}
	return ""
}

func (x *CTimelineTag) GetPriority() uint32 {
	if x != nil && x.Priority != nil {
		return *x.Priority
	}
	return 0
}

type CPhaseAttribute struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Group         *string                `protobuf:"bytes,1,opt,name=group" json:"group,omitempty"`
	Value         *string                `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	Priority      *uint32                `protobuf:"varint,3,opt,name=priority" json:"priority,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPhaseAttribute) Reset() {
	*x = CPhaseAttribute{}
	mi := &file_webuimessages_gamerecordingfiles_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPhaseAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPhaseAttribute) ProtoMessage() {}

func (x *CPhaseAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_gamerecordingfiles_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPhaseAttribute.ProtoReflect.Descriptor instead.
func (*CPhaseAttribute) Descriptor() ([]byte, []int) {
	return file_webuimessages_gamerecordingfiles_proto_rawDescGZIP(), []int{9}
}

func (x *CPhaseAttribute) GetGroup() string {
	if x != nil && x.Group != nil {
		return *x.Group
	}
	return ""
}

func (x *CPhaseAttribute) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

func (x *CPhaseAttribute) GetPriority() uint32 {
	if x != nil && x.Priority != nil {
		return *x.Priority
	}
	return 0
}

type CGameRecordingTimelineMetadata_Recording struct {
	state                         protoimpl.MessageState `protogen:"open.v1"`
	RecordingId                   *string                `protobuf:"bytes,1,opt,name=recording_id,json=recordingId" json:"recording_id,omitempty"`
	StartOffsetMs                 *uint64                `protobuf:"varint,2,opt,name=start_offset_ms,json=startOffsetMs" json:"start_offset_ms,omitempty"`
	DurationMs                    *uint64                `protobuf:"varint,3,opt,name=duration_ms,json=durationMs" json:"duration_ms,omitempty"`
	RecordingType                 *EGameRecordingType    `protobuf:"varint,4,opt,name=recording_type,json=recordingType,enum=EGameRecordingType,def=0" json:"recording_type,omitempty"`
	DeleteOnCleanup               *bool                  `protobuf:"varint,5,opt,name=delete_on_cleanup,json=deleteOnCleanup" json:"delete_on_cleanup,omitempty"`
	VideoManagerClipId            *uint64                `protobuf:"varint,6,opt,name=video_manager_clip_id,json=videoManagerClipId" json:"video_manager_clip_id,omitempty"`
	VideoManagerVideoId           *uint64                `protobuf:"varint,7,opt,name=video_manager_video_id,json=videoManagerVideoId" json:"video_manager_video_id,omitempty"`
	CdnManifestUrl                *string                `protobuf:"bytes,8,opt,name=cdn_manifest_url,json=cdnManifestUrl" json:"cdn_manifest_url,omitempty"`
	FileSize                      *uint64                `protobuf:"varint,9,opt,name=file_size,json=fileSize" json:"file_size,omitempty"`
	RecordingZeroTimelineOffsetMs *uint64                `protobuf:"varint,10,opt,name=recording_zero_timeline_offset_ms,json=recordingZeroTimelineOffsetMs" json:"recording_zero_timeline_offset_ms,omitempty"`
	unknownFields                 protoimpl.UnknownFields
	sizeCache                     protoimpl.SizeCache
}

// Default values for CGameRecordingTimelineMetadata_Recording fields.
const (
	Default_CGameRecordingTimelineMetadata_Recording_RecordingType = EGameRecordingType_k_EGameRecordingType_Unknown
)

func (x *CGameRecordingTimelineMetadata_Recording) Reset() {
	*x = CGameRecordingTimelineMetadata_Recording{}
	mi := &file_webuimessages_gamerecordingfiles_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameRecordingTimelineMetadata_Recording) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecordingTimelineMetadata_Recording) ProtoMessage() {}

func (x *CGameRecordingTimelineMetadata_Recording) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_gamerecordingfiles_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecordingTimelineMetadata_Recording.ProtoReflect.Descriptor instead.
func (*CGameRecordingTimelineMetadata_Recording) Descriptor() ([]byte, []int) {
	return file_webuimessages_gamerecordingfiles_proto_rawDescGZIP(), []int{2, 0}
}

func (x *CGameRecordingTimelineMetadata_Recording) GetRecordingId() string {
	if x != nil && x.RecordingId != nil {
		return *x.RecordingId
	}
	return ""
}

func (x *CGameRecordingTimelineMetadata_Recording) GetStartOffsetMs() uint64 {
	if x != nil && x.StartOffsetMs != nil {
		return *x.StartOffsetMs
	}
	return 0
}

func (x *CGameRecordingTimelineMetadata_Recording) GetDurationMs() uint64 {
	if x != nil && x.DurationMs != nil {
		return *x.DurationMs
	}
	return 0
}

func (x *CGameRecordingTimelineMetadata_Recording) GetRecordingType() EGameRecordingType {
	if x != nil && x.RecordingType != nil {
		return *x.RecordingType
	}
	return Default_CGameRecordingTimelineMetadata_Recording_RecordingType
}

func (x *CGameRecordingTimelineMetadata_Recording) GetDeleteOnCleanup() bool {
	if x != nil && x.DeleteOnCleanup != nil {
		return *x.DeleteOnCleanup
	}
	return false
}

func (x *CGameRecordingTimelineMetadata_Recording) GetVideoManagerClipId() uint64 {
	if x != nil && x.VideoManagerClipId != nil {
		return *x.VideoManagerClipId
	}
	return 0
}

func (x *CGameRecordingTimelineMetadata_Recording) GetVideoManagerVideoId() uint64 {
	if x != nil && x.VideoManagerVideoId != nil {
		return *x.VideoManagerVideoId
	}
	return 0
}

func (x *CGameRecordingTimelineMetadata_Recording) GetCdnManifestUrl() string {
	if x != nil && x.CdnManifestUrl != nil {
		return *x.CdnManifestUrl
	}
	return ""
}

func (x *CGameRecordingTimelineMetadata_Recording) GetFileSize() uint64 {
	if x != nil && x.FileSize != nil {
		return *x.FileSize
	}
	return 0
}

func (x *CGameRecordingTimelineMetadata_Recording) GetRecordingZeroTimelineOffsetMs() uint64 {
	if x != nil && x.RecordingZeroTimelineOffsetMs != nil {
		return *x.RecordingZeroTimelineOffsetMs
	}
	return 0
}

type CGameRecordingTag_Timeline struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ClipId        *string                `protobuf:"bytes,1,opt,name=clip_id,json=clipId" json:"clip_id,omitempty"`
	TimelineId    *string                `protobuf:"bytes,2,opt,name=timeline_id,json=timelineId" json:"timeline_id,omitempty"`
	OffsetMs      *uint64                `protobuf:"varint,3,opt,name=offset_ms,json=offsetMs" json:"offset_ms,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CGameRecordingTag_Timeline) Reset() {
	*x = CGameRecordingTag_Timeline{}
	mi := &file_webuimessages_gamerecordingfiles_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameRecordingTag_Timeline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecordingTag_Timeline) ProtoMessage() {}

func (x *CGameRecordingTag_Timeline) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_gamerecordingfiles_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecordingTag_Timeline.ProtoReflect.Descriptor instead.
func (*CGameRecordingTag_Timeline) Descriptor() ([]byte, []int) {
	return file_webuimessages_gamerecordingfiles_proto_rawDescGZIP(), []int{5, 0}
}

func (x *CGameRecordingTag_Timeline) GetClipId() string {
	if x != nil && x.ClipId != nil {
		return *x.ClipId
	}
	return ""
}

func (x *CGameRecordingTag_Timeline) GetTimelineId() string {
	if x != nil && x.TimelineId != nil {
		return *x.TimelineId
	}
	return ""
}

func (x *CGameRecordingTag_Timeline) GetOffsetMs() uint64 {
	if x != nil && x.OffsetMs != nil {
		return *x.OffsetMs
	}
	return 0
}

type CGameRecordingPhase_Tag struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          *string                `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Group         *string                `protobuf:"bytes,2,opt,name=group" json:"group,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CGameRecordingPhase_Tag) Reset() {
	*x = CGameRecordingPhase_Tag{}
	mi := &file_webuimessages_gamerecordingfiles_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CGameRecordingPhase_Tag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameRecordingPhase_Tag) ProtoMessage() {}

func (x *CGameRecordingPhase_Tag) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_gamerecordingfiles_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameRecordingPhase_Tag.ProtoReflect.Descriptor instead.
func (*CGameRecordingPhase_Tag) Descriptor() ([]byte, []int) {
	return file_webuimessages_gamerecordingfiles_proto_rawDescGZIP(), []int{7, 0}
}

func (x *CGameRecordingPhase_Tag) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CGameRecordingPhase_Tag) GetGroup() string {
	if x != nil && x.Group != nil {
		return *x.Group
	}
	return ""
}

var File_webuimessages_gamerecordingfiles_proto protoreflect.FileDescriptor

const file_webuimessages_gamerecordingfiles_proto_rawDesc = "" +
	"\n" +
	"&webuimessages_gamerecordingfiles.proto\x1a\venums.proto\x1a\x18steammessages_base.proto\x1a\x18webuimessages_base.proto\"\xed\x01\n" +
	"\x12CGameRecordingFile\x12=\n" +
	"\ttimelines\x18\x01 \x03(\v2\x1f.CGameRecordingTimelineMetadataR\ttimelines\x12G\n" +
	"\x0fpostgame_events\x18\x02 \x03(\v2\x1e.CGameRecordingPostGameSummaryR\x0epostgameEvents\x12'\n" +
	"\x0ftemporary_clips\x18\x03 \x03(\tR\x0etemporaryClips\x12&\n" +
	"\x04tags\x18\x04 \x03(\v2\x12.CGameRecordingTagR\x04tags\"\x96\x05\n" +
	"\x16CGameRecordingClipFile\x12=\n" +
	"\ttimelines\x18\x01 \x03(\v2\x1f.CGameRecordingTimelineMetadataR\ttimelines\x12B\n" +
	"\x1efirst_timeline_start_offset_ms\x18\x02 \x01(\x04R\x1afirstTimelineStartOffsetMs\x12#\n" +
	"\rdate_recorded\x18\x03 \x01(\rR\fdateRecorded\x12\x17\n" +
	"\agame_id\x18\x04 \x01(\x04R\x06gameId\x12*\n" +
	"\x11published_file_id\x18\x05 \x01(\x06R\x0fpublishedFileId\x12\"\n" +
	"\rsize_in_bytes\x18\x06 \x01(\x04R\vsizeInBytes\x12\x12\n" +
	"\x04name\x18\a \x01(\tR\x04name\x12\x1c\n" +
	"\ttemporary\x18\b \x01(\bR\ttemporary\x12'\n" +
	"\x0foriginal_device\x18\t \x01(\tR\x0eoriginalDevice\x12=\n" +
	"\x1boriginal_gaming_device_type\x18\n" +
	" \x01(\rR\x18originalGamingDeviceType\x12'\n" +
	"\x0fdate_downloaded\x18\v \x01(\rR\x0edateDownloaded\x12'\n" +
	"\x0fthumbnail_width\x18\f \x01(\rR\x0ethumbnailWidth\x12)\n" +
	"\x10thumbnail_height\x18\r \x01(\rR\x0fthumbnailHeight\x12&\n" +
	"\x04tags\x18\x0e \x03(\v2\x12.CGameRecordingTagR\x04tags\x12,\n" +
	"\x06phases\x18\x0f \x03(\v2\x14.CGameRecordingPhaseR\x06phases\"\xdf\x06\n" +
	"\x1eCGameRecordingTimelineMetadata\x12\x1f\n" +
	"\vtimeline_id\x18\x01 \x01(\tR\n" +
	"timelineId\x12\x17\n" +
	"\agame_id\x18\x02 \x01(\x04R\x06gameId\x12#\n" +
	"\rdate_recorded\x18\x03 \x01(\rR\fdateRecorded\x12\x1f\n" +
	"\vduration_ms\x18\x04 \x01(\x04R\n" +
	"durationMs\x12I\n" +
	"\n" +
	"recordings\x18\x05 \x03(\v2).CGameRecordingTimelineMetadata.RecordingR\n" +
	"recordings\x12,\n" +
	"\x06phases\x18\x06 \x03(\v2\x14.CGameRecordingPhaseR\x06phases\x12K\n" +
	"\x12significant_events\x18\a \x03(\v2\x1c.CGameRecordingTimelineEventR\x11significantEvents\x1a\xf6\x03\n" +
	"\tRecording\x12!\n" +
	"\frecording_id\x18\x01 \x01(\tR\vrecordingId\x12&\n" +
	"\x0fstart_offset_ms\x18\x02 \x01(\x04R\rstartOffsetMs\x12\x1f\n" +
	"\vduration_ms\x18\x03 \x01(\x04R\n" +
	"durationMs\x12X\n" +
	"\x0erecording_type\x18\x04 \x01(\x0e2\x13.EGameRecordingType:\x1ck_EGameRecordingType_UnknownR\rrecordingType\x12*\n" +
	"\x11delete_on_cleanup\x18\x05 \x01(\bR\x0fdeleteOnCleanup\x121\n" +
	"\x15video_manager_clip_id\x18\x06 \x01(\x04R\x12videoManagerClipId\x123\n" +
	"\x16video_manager_video_id\x18\a \x01(\x04R\x13videoManagerVideoId\x12(\n" +
	"\x10cdn_manifest_url\x18\b \x01(\tR\x0ecdnManifestUrl\x12\x1b\n" +
	"\tfile_size\x18\t \x01(\x04R\bfileSize\x12H\n" +
	"!recording_zero_timeline_offset_ms\x18\n" +
	" \x01(\x04R\x1drecordingZeroTimelineOffsetMs\"n\n" +
	"\x1dCGameRecordingPostGameSummary\x12\x17\n" +
	"\agame_id\x18\x01 \x01(\x04R\x06gameId\x124\n" +
	"\x06events\x18\x02 \x03(\v2\x1c.CGameRecordingTimelineEventR\x06events\"\xea\x02\n" +
	"\x1bCGameRecordingTimelineEvent\x12\x17\n" +
	"\agame_id\x18\x01 \x01(\x04R\x06gameId\x12\x1d\n" +
	"\n" +
	"rt_created\x18\x02 \x01(\rR\trtCreated\x12#\n" +
	"\rpossible_clip\x18\x03 \x01(\x05R\fpossibleClip\x12\x1f\n" +
	"\vtimeline_id\x18\x04 \x01(\tR\n" +
	"timelineId\x12\x19\n" +
	"\bentry_id\x18\x05 \x01(\x04R\aentryId\x12,\n" +
	"\x12timeline_offset_ms\x18\x06 \x01(\x04R\x10timelineOffsetMs\x12\x1f\n" +
	"\vduration_ms\x18\a \x01(\x04R\n" +
	"durationMs\x12\x1f\n" +
	"\vmarker_icon\x18\b \x01(\tR\n" +
	"markerIcon\x12!\n" +
	"\fmarker_title\x18\t \x01(\tR\vmarkerTitle\x12\x1f\n" +
	"\vuser_marker\x18\n" +
	" \x01(\bR\n" +
	"userMarker\"\xed\x01\n" +
	"\x11CGameRecordingTag\x12\x17\n" +
	"\agame_id\x18\x01 \x01(\x04R\x06gameId\x12\x1f\n" +
	"\x03tag\x18\x02 \x01(\v2\r.CTimelineTagR\x03tag\x12;\n" +
	"\n" +
	"references\x18\x03 \x03(\v2\x1b.CGameRecordingTag.TimelineR\n" +
	"references\x1aa\n" +
	"\bTimeline\x12\x17\n" +
	"\aclip_id\x18\x01 \x01(\tR\x06clipId\x12\x1f\n" +
	"\vtimeline_id\x18\x02 \x01(\tR\n" +
	"timelineId\x12\x1b\n" +
	"\toffset_ms\x18\x03 \x01(\x04R\boffsetMs\"\xa6\x01\n" +
	"\x19CGameRecordingTagInstance\x12\x1f\n" +
	"\vtimeline_id\x18\x01 \x01(\tR\n" +
	"timelineId\x12\x19\n" +
	"\bentry_id\x18\x02 \x01(\x04R\aentryId\x12,\n" +
	"\x12timeline_offset_ms\x18\x03 \x01(\x04R\x10timelineOffsetMs\x12\x1f\n" +
	"\vduration_ms\x18\x04 \x01(\x04R\n" +
	"durationMs\"\xe1\x02\n" +
	"\x13CGameRecordingPhase\x12\x19\n" +
	"\bphase_id\x18\x04 \x01(\tR\aphaseId\x12\x1f\n" +
	"\vduration_ms\x18\x05 \x01(\x04R\n" +
	"durationMs\x12,\n" +
	"\x04tags\x18\x06 \x03(\v2\x18.CGameRecordingPhase.TagR\x04tags\x12?\n" +
	"\x0econtained_tags\x18\a \x03(\v2\x18.CGameRecordingPhase.TagR\rcontainedTags\x12<\n" +
	"\x1abackground_timeline_offset\x18\b \x01(\x04R\x18backgroundTimelineOffset\x120\n" +
	"\n" +
	"attributes\x18\t \x03(\v2\x10.CPhaseAttributeR\n" +
	"attributes\x1a/\n" +
	"\x03Tag\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x14\n" +
	"\x05group\x18\x02 \x01(\tR\x05group\"h\n" +
	"\fCTimelineTag\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x14\n" +
	"\x05group\x18\x02 \x01(\tR\x05group\x12\x12\n" +
	"\x04icon\x18\x03 \x01(\tR\x04icon\x12\x1a\n" +
	"\bpriority\x18\x04 \x01(\rR\bpriority\"Y\n" +
	"\x0fCPhaseAttribute\x12\x14\n" +
	"\x05group\x18\x01 \x01(\tR\x05group\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value\x12\x1a\n" +
	"\bpriority\x18\x03 \x01(\rR\bpriorityB\x05H\x01\x80\x01\x01"

var (
	file_webuimessages_gamerecordingfiles_proto_rawDescOnce sync.Once
	file_webuimessages_gamerecordingfiles_proto_rawDescData []byte
)

func file_webuimessages_gamerecordingfiles_proto_rawDescGZIP() []byte {
	file_webuimessages_gamerecordingfiles_proto_rawDescOnce.Do(func() {
		file_webuimessages_gamerecordingfiles_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_webuimessages_gamerecordingfiles_proto_rawDesc), len(file_webuimessages_gamerecordingfiles_proto_rawDesc)))
	})
	return file_webuimessages_gamerecordingfiles_proto_rawDescData
}

var file_webuimessages_gamerecordingfiles_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_webuimessages_gamerecordingfiles_proto_goTypes = []any{
	(*CGameRecordingFile)(nil),                       // 0: CGameRecordingFile
	(*CGameRecordingClipFile)(nil),                   // 1: CGameRecordingClipFile
	(*CGameRecordingTimelineMetadata)(nil),           // 2: CGameRecordingTimelineMetadata
	(*CGameRecordingPostGameSummary)(nil),            // 3: CGameRecordingPostGameSummary
	(*CGameRecordingTimelineEvent)(nil),              // 4: CGameRecordingTimelineEvent
	(*CGameRecordingTag)(nil),                        // 5: CGameRecordingTag
	(*CGameRecordingTagInstance)(nil),                // 6: CGameRecordingTagInstance
	(*CGameRecordingPhase)(nil),                      // 7: CGameRecordingPhase
	(*CTimelineTag)(nil),                             // 8: CTimelineTag
	(*CPhaseAttribute)(nil),                          // 9: CPhaseAttribute
	(*CGameRecordingTimelineMetadata_Recording)(nil), // 10: CGameRecordingTimelineMetadata.Recording
	(*CGameRecordingTag_Timeline)(nil),               // 11: CGameRecordingTag.Timeline
	(*CGameRecordingPhase_Tag)(nil),                  // 12: CGameRecordingPhase.Tag
	(EGameRecordingType)(0),                          // 13: EGameRecordingType
}
var file_webuimessages_gamerecordingfiles_proto_depIdxs = []int32{
	2,  // 0: CGameRecordingFile.timelines:type_name -> CGameRecordingTimelineMetadata
	3,  // 1: CGameRecordingFile.postgame_events:type_name -> CGameRecordingPostGameSummary
	5,  // 2: CGameRecordingFile.tags:type_name -> CGameRecordingTag
	2,  // 3: CGameRecordingClipFile.timelines:type_name -> CGameRecordingTimelineMetadata
	5,  // 4: CGameRecordingClipFile.tags:type_name -> CGameRecordingTag
	7,  // 5: CGameRecordingClipFile.phases:type_name -> CGameRecordingPhase
	10, // 6: CGameRecordingTimelineMetadata.recordings:type_name -> CGameRecordingTimelineMetadata.Recording
	7,  // 7: CGameRecordingTimelineMetadata.phases:type_name -> CGameRecordingPhase
	4,  // 8: CGameRecordingTimelineMetadata.significant_events:type_name -> CGameRecordingTimelineEvent
	4,  // 9: CGameRecordingPostGameSummary.events:type_name -> CGameRecordingTimelineEvent
	8,  // 10: CGameRecordingTag.tag:type_name -> CTimelineTag
	11, // 11: CGameRecordingTag.references:type_name -> CGameRecordingTag.Timeline
	12, // 12: CGameRecordingPhase.tags:type_name -> CGameRecordingPhase.Tag
	12, // 13: CGameRecordingPhase.contained_tags:type_name -> CGameRecordingPhase.Tag
	9,  // 14: CGameRecordingPhase.attributes:type_name -> CPhaseAttribute
	13, // 15: CGameRecordingTimelineMetadata.Recording.recording_type:type_name -> EGameRecordingType
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_webuimessages_gamerecordingfiles_proto_init() }
func file_webuimessages_gamerecordingfiles_proto_init() {
	if File_webuimessages_gamerecordingfiles_proto != nil {
		return
	}
	file_enums_proto_init()
	file_steammessages_base_proto_init()
	file_webuimessages_base_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_webuimessages_gamerecordingfiles_proto_rawDesc), len(file_webuimessages_gamerecordingfiles_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_webuimessages_gamerecordingfiles_proto_goTypes,
		DependencyIndexes: file_webuimessages_gamerecordingfiles_proto_depIdxs,
		MessageInfos:      file_webuimessages_gamerecordingfiles_proto_msgTypes,
	}.Build()
	File_webuimessages_gamerecordingfiles_proto = out.File
	file_webuimessages_gamerecordingfiles_proto_goTypes = nil
	file_webuimessages_gamerecordingfiles_proto_depIdxs = nil
}
