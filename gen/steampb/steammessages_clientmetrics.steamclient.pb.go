// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v6.32.0
// source: steammessages_clientmetrics.steamclient.proto

package steampb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ESteamPipeWorkType int32

const (
	ESteamPipeWorkType_k_ESteamPipeClientWorkType_Invalid              ESteamPipeWorkType = 0
	ESteamPipeWorkType_k_ESteamPipeClientWorkType_StageFromChunkStores ESteamPipeWorkType = 1
)

// Enum value maps for ESteamPipeWorkType.
var (
	ESteamPipeWorkType_name = map[int32]string{
		0: "k_ESteamPipeClientWorkType_Invalid",
		1: "k_ESteamPipeClientWorkType_StageFromChunkStores",
	}
	ESteamPipeWorkType_value = map[string]int32{
		"k_ESteamPipeClientWorkType_Invalid":              0,
		"k_ESteamPipeClientWorkType_StageFromChunkStores": 1,
	}
)

func (x ESteamPipeWorkType) Enum() *ESteamPipeWorkType {
	p := new(ESteamPipeWorkType)
	*p = x
	return p
}

func (x ESteamPipeWorkType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ESteamPipeWorkType) Descriptor() protoreflect.EnumDescriptor {
	return file_steammessages_clientmetrics_steamclient_proto_enumTypes[0].Descriptor()
}

func (ESteamPipeWorkType) Type() protoreflect.EnumType {
	return &file_steammessages_clientmetrics_steamclient_proto_enumTypes[0]
}

func (x ESteamPipeWorkType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ESteamPipeWorkType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ESteamPipeWorkType(num)
	return nil
}

// Deprecated: Use ESteamPipeWorkType.Descriptor instead.
func (ESteamPipeWorkType) EnumDescriptor() ([]byte, []int) {
	return file_steammessages_clientmetrics_steamclient_proto_rawDescGZIP(), []int{0}
}

type ESteamPipeOperationType int32

const (
	ESteamPipeOperationType_k_ESteamPipeOperationType_Invalid    ESteamPipeOperationType = 0
	ESteamPipeOperationType_k_ESteamPipeOperationType_DecryptCPU ESteamPipeOperationType = 1
	ESteamPipeOperationType_k_ESteamPipeOperationType_DiskRead   ESteamPipeOperationType = 2
	ESteamPipeOperationType_k_ESteamPipeOperationType_DiskWrite  ESteamPipeOperationType = 3
)

// Enum value maps for ESteamPipeOperationType.
var (
	ESteamPipeOperationType_name = map[int32]string{
		0: "k_ESteamPipeOperationType_Invalid",
		1: "k_ESteamPipeOperationType_DecryptCPU",
		2: "k_ESteamPipeOperationType_DiskRead",
		3: "k_ESteamPipeOperationType_DiskWrite",
	}
	ESteamPipeOperationType_value = map[string]int32{
		"k_ESteamPipeOperationType_Invalid":    0,
		"k_ESteamPipeOperationType_DecryptCPU": 1,
		"k_ESteamPipeOperationType_DiskRead":   2,
		"k_ESteamPipeOperationType_DiskWrite":  3,
	}
)

func (x ESteamPipeOperationType) Enum() *ESteamPipeOperationType {
	p := new(ESteamPipeOperationType)
	*p = x
	return p
}

func (x ESteamPipeOperationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ESteamPipeOperationType) Descriptor() protoreflect.EnumDescriptor {
	return file_steammessages_clientmetrics_steamclient_proto_enumTypes[1].Descriptor()
}

func (ESteamPipeOperationType) Type() protoreflect.EnumType {
	return &file_steammessages_clientmetrics_steamclient_proto_enumTypes[1]
}

func (x ESteamPipeOperationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ESteamPipeOperationType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ESteamPipeOperationType(num)
	return nil
}

// Deprecated: Use ESteamPipeOperationType.Descriptor instead.
func (ESteamPipeOperationType) EnumDescriptor() ([]byte, []int) {
	return file_steammessages_clientmetrics_steamclient_proto_rawDescGZIP(), []int{1}
}

type EClipShareMethod int32

const (
	EClipShareMethod_k_EClipShareMethod_Chat        EClipShareMethod = 1
	EClipShareMethod_k_EClipShareMethod_Clipboard   EClipShareMethod = 2
	EClipShareMethod_k_EClipShareMethod_File        EClipShareMethod = 3
	EClipShareMethod_k_EClipShareMethod_SendClip    EClipShareMethod = 4
	EClipShareMethod_k_EClipShareMethod_SaveToMedia EClipShareMethod = 5
	EClipShareMethod_k_EClipShareMethod_CreateLink  EClipShareMethod = 6
)

// Enum value maps for EClipShareMethod.
var (
	EClipShareMethod_name = map[int32]string{
		1: "k_EClipShareMethod_Chat",
		2: "k_EClipShareMethod_Clipboard",
		3: "k_EClipShareMethod_File",
		4: "k_EClipShareMethod_SendClip",
		5: "k_EClipShareMethod_SaveToMedia",
		6: "k_EClipShareMethod_CreateLink",
	}
	EClipShareMethod_value = map[string]int32{
		"k_EClipShareMethod_Chat":        1,
		"k_EClipShareMethod_Clipboard":   2,
		"k_EClipShareMethod_File":        3,
		"k_EClipShareMethod_SendClip":    4,
		"k_EClipShareMethod_SaveToMedia": 5,
		"k_EClipShareMethod_CreateLink":  6,
	}
)

func (x EClipShareMethod) Enum() *EClipShareMethod {
	p := new(EClipShareMethod)
	*p = x
	return p
}

func (x EClipShareMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EClipShareMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_steammessages_clientmetrics_steamclient_proto_enumTypes[2].Descriptor()
}

func (EClipShareMethod) Type() protoreflect.EnumType {
	return &file_steammessages_clientmetrics_steamclient_proto_enumTypes[2]
}

func (x EClipShareMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EClipShareMethod) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EClipShareMethod(num)
	return nil
}

// Deprecated: Use EClipShareMethod.Descriptor instead.
func (EClipShareMethod) EnumDescriptor() ([]byte, []int) {
	return file_steammessages_clientmetrics_steamclient_proto_rawDescGZIP(), []int{2}
}

type EClipRangeMethod int32

const (
	EClipRangeMethod_k_EClipRangeMethod_CreateClipButton EClipRangeMethod = 1
	EClipRangeMethod_k_EClipRangeMethod_Highlight        EClipRangeMethod = 2
	EClipRangeMethod_k_EClipRangeMethod_BeginEndButtons  EClipRangeMethod = 3
	EClipRangeMethod_k_EClipRangeMethod_ContextMenu      EClipRangeMethod = 4
	EClipRangeMethod_k_EClipRangeMethod_Drag             EClipRangeMethod = 5
	EClipRangeMethod_k_EClipRangeMethod_EntireClip       EClipRangeMethod = 6
	EClipRangeMethod_k_EClipRangeMethod_PhaseRecording   EClipRangeMethod = 7
)

// Enum value maps for EClipRangeMethod.
var (
	EClipRangeMethod_name = map[int32]string{
		1: "k_EClipRangeMethod_CreateClipButton",
		2: "k_EClipRangeMethod_Highlight",
		3: "k_EClipRangeMethod_BeginEndButtons",
		4: "k_EClipRangeMethod_ContextMenu",
		5: "k_EClipRangeMethod_Drag",
		6: "k_EClipRangeMethod_EntireClip",
		7: "k_EClipRangeMethod_PhaseRecording",
	}
	EClipRangeMethod_value = map[string]int32{
		"k_EClipRangeMethod_CreateClipButton": 1,
		"k_EClipRangeMethod_Highlight":        2,
		"k_EClipRangeMethod_BeginEndButtons":  3,
		"k_EClipRangeMethod_ContextMenu":      4,
		"k_EClipRangeMethod_Drag":             5,
		"k_EClipRangeMethod_EntireClip":       6,
		"k_EClipRangeMethod_PhaseRecording":   7,
	}
)

func (x EClipRangeMethod) Enum() *EClipRangeMethod {
	p := new(EClipRangeMethod)
	*p = x
	return p
}

func (x EClipRangeMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EClipRangeMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_steammessages_clientmetrics_steamclient_proto_enumTypes[3].Descriptor()
}

func (EClipRangeMethod) Type() protoreflect.EnumType {
	return &file_steammessages_clientmetrics_steamclient_proto_enumTypes[3]
}

func (x EClipRangeMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EClipRangeMethod) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EClipRangeMethod(num)
	return nil
}

// Deprecated: Use EClipRangeMethod.Descriptor instead.
func (EClipRangeMethod) EnumDescriptor() ([]byte, []int) {
	return file_steammessages_clientmetrics_steamclient_proto_rawDescGZIP(), []int{3}
}

type CClientMetrics_AppInterfaceCreation struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	RawVersion             *string                `protobuf:"bytes,1,opt,name=raw_version,json=rawVersion" json:"raw_version,omitempty"`
	RequestedInterfaceType *string                `protobuf:"bytes,2,opt,name=requested_interface_type,json=requestedInterfaceType" json:"requested_interface_type,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *CClientMetrics_AppInterfaceCreation) Reset() {
	*x = CClientMetrics_AppInterfaceCreation{}
	mi := &file_steammessages_clientmetrics_steamclient_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CClientMetrics_AppInterfaceCreation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientMetrics_AppInterfaceCreation) ProtoMessage() {}

func (x *CClientMetrics_AppInterfaceCreation) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientmetrics_steamclient_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientMetrics_AppInterfaceCreation.ProtoReflect.Descriptor instead.
func (*CClientMetrics_AppInterfaceCreation) Descriptor() ([]byte, []int) {
	return file_steammessages_clientmetrics_steamclient_proto_rawDescGZIP(), []int{0}
}

func (x *CClientMetrics_AppInterfaceCreation) GetRawVersion() string {
	if x != nil && x.RawVersion != nil {
		return *x.RawVersion
	}
	return ""
}

func (x *CClientMetrics_AppInterfaceCreation) GetRequestedInterfaceType() string {
	if x != nil && x.RequestedInterfaceType != nil {
		return *x.RequestedInterfaceType
	}
	return ""
}

type CClientMetrics_AppInterfaceMethodCounts struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	InterfaceName *string                `protobuf:"bytes,1,opt,name=interface_name,json=interfaceName" json:"interface_name,omitempty"`
	MethodName    *string                `protobuf:"bytes,2,opt,name=method_name,json=methodName" json:"method_name,omitempty"`
	CallCount     *uint32                `protobuf:"varint,3,opt,name=call_count,json=callCount" json:"call_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CClientMetrics_AppInterfaceMethodCounts) Reset() {
	*x = CClientMetrics_AppInterfaceMethodCounts{}
	mi := &file_steammessages_clientmetrics_steamclient_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CClientMetrics_AppInterfaceMethodCounts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientMetrics_AppInterfaceMethodCounts) ProtoMessage() {}

func (x *CClientMetrics_AppInterfaceMethodCounts) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientmetrics_steamclient_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientMetrics_AppInterfaceMethodCounts.ProtoReflect.Descriptor instead.
func (*CClientMetrics_AppInterfaceMethodCounts) Descriptor() ([]byte, []int) {
	return file_steammessages_clientmetrics_steamclient_proto_rawDescGZIP(), []int{1}
}

func (x *CClientMetrics_AppInterfaceMethodCounts) GetInterfaceName() string {
	if x != nil && x.InterfaceName != nil {
		return *x.InterfaceName
	}
	return ""
}

func (x *CClientMetrics_AppInterfaceMethodCounts) GetMethodName() string {
	if x != nil && x.MethodName != nil {
		return *x.MethodName
	}
	return ""
}

func (x *CClientMetrics_AppInterfaceMethodCounts) GetCallCount() uint32 {
	if x != nil && x.CallCount != nil {
		return *x.CallCount
	}
	return 0
}

type CClientMetrics_AppInterfaceStats_Notification struct {
	state                protoimpl.MessageState                     `protogen:"open.v1"`
	GameId               *uint64                                    `protobuf:"varint,1,opt,name=game_id,json=gameId" json:"game_id,omitempty"`
	InterfacesCreated    []*CClientMetrics_AppInterfaceCreation     `protobuf:"bytes,2,rep,name=interfaces_created,json=interfacesCreated" json:"interfaces_created,omitempty"`
	MethodsCalled        []*CClientMetrics_AppInterfaceMethodCounts `protobuf:"bytes,3,rep,name=methods_called,json=methodsCalled" json:"methods_called,omitempty"`
	SessionLengthSeconds *uint32                                    `protobuf:"varint,4,opt,name=session_length_seconds,json=sessionLengthSeconds" json:"session_length_seconds,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *CClientMetrics_AppInterfaceStats_Notification) Reset() {
	*x = CClientMetrics_AppInterfaceStats_Notification{}
	mi := &file_steammessages_clientmetrics_steamclient_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CClientMetrics_AppInterfaceStats_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientMetrics_AppInterfaceStats_Notification) ProtoMessage() {}

func (x *CClientMetrics_AppInterfaceStats_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientmetrics_steamclient_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientMetrics_AppInterfaceStats_Notification.ProtoReflect.Descriptor instead.
func (*CClientMetrics_AppInterfaceStats_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_clientmetrics_steamclient_proto_rawDescGZIP(), []int{2}
}

func (x *CClientMetrics_AppInterfaceStats_Notification) GetGameId() uint64 {
	if x != nil && x.GameId != nil {
		return *x.GameId
	}
	return 0
}

func (x *CClientMetrics_AppInterfaceStats_Notification) GetInterfacesCreated() []*CClientMetrics_AppInterfaceCreation {
	if x != nil {
		return x.InterfacesCreated
	}
	return nil
}

func (x *CClientMetrics_AppInterfaceStats_Notification) GetMethodsCalled() []*CClientMetrics_AppInterfaceMethodCounts {
	if x != nil {
		return x.MethodsCalled
	}
	return nil
}

func (x *CClientMetrics_AppInterfaceStats_Notification) GetSessionLengthSeconds() uint32 {
	if x != nil && x.SessionLengthSeconds != nil {
		return *x.SessionLengthSeconds
	}
	return 0
}

type CClientMetrics_IPv6Connectivity_Result struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	ProtocolTested    *uint32                `protobuf:"varint,1,opt,name=protocol_tested,json=protocolTested" json:"protocol_tested,omitempty"`
	ConnectivityState *uint32                `protobuf:"varint,2,opt,name=connectivity_state,json=connectivityState" json:"connectivity_state,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *CClientMetrics_IPv6Connectivity_Result) Reset() {
	*x = CClientMetrics_IPv6Connectivity_Result{}
	mi := &file_steammessages_clientmetrics_steamclient_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CClientMetrics_IPv6Connectivity_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientMetrics_IPv6Connectivity_Result) ProtoMessage() {}

func (x *CClientMetrics_IPv6Connectivity_Result) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientmetrics_steamclient_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientMetrics_IPv6Connectivity_Result.ProtoReflect.Descriptor instead.
func (*CClientMetrics_IPv6Connectivity_Result) Descriptor() ([]byte, []int) {
	return file_steammessages_clientmetrics_steamclient_proto_rawDescGZIP(), []int{3}
}

func (x *CClientMetrics_IPv6Connectivity_Result) GetProtocolTested() uint32 {
	if x != nil && x.ProtocolTested != nil {
		return *x.ProtocolTested
	}
	return 0
}

func (x *CClientMetrics_IPv6Connectivity_Result) GetConnectivityState() uint32 {
	if x != nil && x.ConnectivityState != nil {
		return *x.ConnectivityState
	}
	return 0
}

type CClientMetrics_IPv6Connectivity_Notification struct {
	state              protoimpl.MessageState                    `protogen:"open.v1"`
	CellId             *uint32                                   `protobuf:"varint,1,opt,name=cell_id,json=cellId" json:"cell_id,omitempty"`
	Results            []*CClientMetrics_IPv6Connectivity_Result `protobuf:"bytes,2,rep,name=results" json:"results,omitempty"`
	PrivateIpIsRfc6598 *bool                                     `protobuf:"varint,3,opt,name=private_ip_is_rfc6598,json=privateIpIsRfc6598" json:"private_ip_is_rfc6598,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *CClientMetrics_IPv6Connectivity_Notification) Reset() {
	*x = CClientMetrics_IPv6Connectivity_Notification{}
	mi := &file_steammessages_clientmetrics_steamclient_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CClientMetrics_IPv6Connectivity_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientMetrics_IPv6Connectivity_Notification) ProtoMessage() {}

func (x *CClientMetrics_IPv6Connectivity_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientmetrics_steamclient_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientMetrics_IPv6Connectivity_Notification.ProtoReflect.Descriptor instead.
func (*CClientMetrics_IPv6Connectivity_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_clientmetrics_steamclient_proto_rawDescGZIP(), []int{4}
}

func (x *CClientMetrics_IPv6Connectivity_Notification) GetCellId() uint32 {
	if x != nil && x.CellId != nil {
		return *x.CellId
	}
	return 0
}

func (x *CClientMetrics_IPv6Connectivity_Notification) GetResults() []*CClientMetrics_IPv6Connectivity_Result {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *CClientMetrics_IPv6Connectivity_Notification) GetPrivateIpIsRfc6598() bool {
	if x != nil && x.PrivateIpIsRfc6598 != nil {
		return *x.PrivateIpIsRfc6598
	}
	return false
}

type CClientMetrics_SteamPipeWorkStats_Operation struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Type          *ESteamPipeOperationType `protobuf:"varint,1,opt,name=type,enum=ESteamPipeOperationType,def=0" json:"type,omitempty"`
	NumOps        *uint32                  `protobuf:"varint,2,opt,name=num_ops,json=numOps" json:"num_ops,omitempty"`
	NumBytes      *uint64                  `protobuf:"varint,3,opt,name=num_bytes,json=numBytes" json:"num_bytes,omitempty"`
	BusyTimeMs    *uint64                  `protobuf:"varint,4,opt,name=busy_time_ms,json=busyTimeMs" json:"busy_time_ms,omitempty"`
	IdleTimeMs    *uint64                  `protobuf:"varint,5,opt,name=idle_time_ms,json=idleTimeMs" json:"idle_time_ms,omitempty"`
	SumRunTimeMs  *uint64                  `protobuf:"varint,6,opt,name=sum_run_time_ms,json=sumRunTimeMs" json:"sum_run_time_ms,omitempty"`
	SumWaitTimeMs *uint64                  `protobuf:"varint,7,opt,name=sum_wait_time_ms,json=sumWaitTimeMs" json:"sum_wait_time_ms,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CClientMetrics_SteamPipeWorkStats_Operation fields.
const (
	Default_CClientMetrics_SteamPipeWorkStats_Operation_Type = ESteamPipeOperationType_k_ESteamPipeOperationType_Invalid
)

func (x *CClientMetrics_SteamPipeWorkStats_Operation) Reset() {
	*x = CClientMetrics_SteamPipeWorkStats_Operation{}
	mi := &file_steammessages_clientmetrics_steamclient_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CClientMetrics_SteamPipeWorkStats_Operation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientMetrics_SteamPipeWorkStats_Operation) ProtoMessage() {}

func (x *CClientMetrics_SteamPipeWorkStats_Operation) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientmetrics_steamclient_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientMetrics_SteamPipeWorkStats_Operation.ProtoReflect.Descriptor instead.
func (*CClientMetrics_SteamPipeWorkStats_Operation) Descriptor() ([]byte, []int) {
	return file_steammessages_clientmetrics_steamclient_proto_rawDescGZIP(), []int{5}
}

func (x *CClientMetrics_SteamPipeWorkStats_Operation) GetType() ESteamPipeOperationType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_CClientMetrics_SteamPipeWorkStats_Operation_Type
}

func (x *CClientMetrics_SteamPipeWorkStats_Operation) GetNumOps() uint32 {
	if x != nil && x.NumOps != nil {
		return *x.NumOps
	}
	return 0
}

func (x *CClientMetrics_SteamPipeWorkStats_Operation) GetNumBytes() uint64 {
	if x != nil && x.NumBytes != nil {
		return *x.NumBytes
	}
	return 0
}

func (x *CClientMetrics_SteamPipeWorkStats_Operation) GetBusyTimeMs() uint64 {
	if x != nil && x.BusyTimeMs != nil {
		return *x.BusyTimeMs
	}
	return 0
}

func (x *CClientMetrics_SteamPipeWorkStats_Operation) GetIdleTimeMs() uint64 {
	if x != nil && x.IdleTimeMs != nil {
		return *x.IdleTimeMs
	}
	return 0
}

func (x *CClientMetrics_SteamPipeWorkStats_Operation) GetSumRunTimeMs() uint64 {
	if x != nil && x.SumRunTimeMs != nil {
		return *x.SumRunTimeMs
	}
	return 0
}

func (x *CClientMetrics_SteamPipeWorkStats_Operation) GetSumWaitTimeMs() uint64 {
	if x != nil && x.SumWaitTimeMs != nil {
		return *x.SumWaitTimeMs
	}
	return 0
}

type CClientMetrics_SteamPipeWorkStats_Notification struct {
	state         protoimpl.MessageState                         `protogen:"open.v1"`
	Appid         *uint32                                        `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	Depotid       *uint32                                        `protobuf:"varint,2,opt,name=depotid" json:"depotid,omitempty"`
	WorkType      *ESteamPipeWorkType                            `protobuf:"varint,3,opt,name=work_type,json=workType,enum=ESteamPipeWorkType,def=0" json:"work_type,omitempty"`
	Operations    []*CClientMetrics_SteamPipeWorkStats_Operation `protobuf:"bytes,4,rep,name=operations" json:"operations,omitempty"`
	HardwareType  *uint32                                        `protobuf:"varint,5,opt,name=hardware_type,json=hardwareType" json:"hardware_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CClientMetrics_SteamPipeWorkStats_Notification fields.
const (
	Default_CClientMetrics_SteamPipeWorkStats_Notification_WorkType = ESteamPipeWorkType_k_ESteamPipeClientWorkType_Invalid
)

func (x *CClientMetrics_SteamPipeWorkStats_Notification) Reset() {
	*x = CClientMetrics_SteamPipeWorkStats_Notification{}
	mi := &file_steammessages_clientmetrics_steamclient_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CClientMetrics_SteamPipeWorkStats_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientMetrics_SteamPipeWorkStats_Notification) ProtoMessage() {}

func (x *CClientMetrics_SteamPipeWorkStats_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientmetrics_steamclient_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientMetrics_SteamPipeWorkStats_Notification.ProtoReflect.Descriptor instead.
func (*CClientMetrics_SteamPipeWorkStats_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_clientmetrics_steamclient_proto_rawDescGZIP(), []int{6}
}

func (x *CClientMetrics_SteamPipeWorkStats_Notification) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CClientMetrics_SteamPipeWorkStats_Notification) GetDepotid() uint32 {
	if x != nil && x.Depotid != nil {
		return *x.Depotid
	}
	return 0
}

func (x *CClientMetrics_SteamPipeWorkStats_Notification) GetWorkType() ESteamPipeWorkType {
	if x != nil && x.WorkType != nil {
		return *x.WorkType
	}
	return Default_CClientMetrics_SteamPipeWorkStats_Notification_WorkType
}

func (x *CClientMetrics_SteamPipeWorkStats_Notification) GetOperations() []*CClientMetrics_SteamPipeWorkStats_Operation {
	if x != nil {
		return x.Operations
	}
	return nil
}

func (x *CClientMetrics_SteamPipeWorkStats_Notification) GetHardwareType() uint32 {
	if x != nil && x.HardwareType != nil {
		return *x.HardwareType
	}
	return 0
}

type CClientMetrics_ReportReactUsage_Notification struct {
	state         protoimpl.MessageState                                        `protogen:"open.v1"`
	Product       *string                                                       `protobuf:"bytes,1,opt,name=product" json:"product,omitempty"`
	Version       *string                                                       `protobuf:"bytes,2,opt,name=version" json:"version,omitempty"`
	Routes        []*CClientMetrics_ReportReactUsage_Notification_RouteData     `protobuf:"bytes,3,rep,name=routes" json:"routes,omitempty"`
	Components    []*CClientMetrics_ReportReactUsage_Notification_ComponentData `protobuf:"bytes,4,rep,name=components" json:"components,omitempty"`
	Actions       []*CClientMetrics_ReportReactUsage_Notification_ActionData    `protobuf:"bytes,5,rep,name=actions" json:"actions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CClientMetrics_ReportReactUsage_Notification) Reset() {
	*x = CClientMetrics_ReportReactUsage_Notification{}
	mi := &file_steammessages_clientmetrics_steamclient_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CClientMetrics_ReportReactUsage_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientMetrics_ReportReactUsage_Notification) ProtoMessage() {}

func (x *CClientMetrics_ReportReactUsage_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientmetrics_steamclient_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientMetrics_ReportReactUsage_Notification.ProtoReflect.Descriptor instead.
func (*CClientMetrics_ReportReactUsage_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_clientmetrics_steamclient_proto_rawDescGZIP(), []int{7}
}

func (x *CClientMetrics_ReportReactUsage_Notification) GetProduct() string {
	if x != nil && x.Product != nil {
		return *x.Product
	}
	return ""
}

func (x *CClientMetrics_ReportReactUsage_Notification) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

func (x *CClientMetrics_ReportReactUsage_Notification) GetRoutes() []*CClientMetrics_ReportReactUsage_Notification_RouteData {
	if x != nil {
		return x.Routes
	}
	return nil
}

func (x *CClientMetrics_ReportReactUsage_Notification) GetComponents() []*CClientMetrics_ReportReactUsage_Notification_ComponentData {
	if x != nil {
		return x.Components
	}
	return nil
}

func (x *CClientMetrics_ReportReactUsage_Notification) GetActions() []*CClientMetrics_ReportReactUsage_Notification_ActionData {
	if x != nil {
		return x.Actions
	}
	return nil
}

type CClientMetrics_ReportClientError_Notification struct {
	state         protoimpl.MessageState                                 `protogen:"open.v1"`
	Product       *string                                                `protobuf:"bytes,1,opt,name=product" json:"product,omitempty"`
	Version       *string                                                `protobuf:"bytes,2,opt,name=version" json:"version,omitempty"`
	Errors        []*CClientMetrics_ReportClientError_Notification_Error `protobuf:"bytes,3,rep,name=errors" json:"errors,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CClientMetrics_ReportClientError_Notification) Reset() {
	*x = CClientMetrics_ReportClientError_Notification{}
	mi := &file_steammessages_clientmetrics_steamclient_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CClientMetrics_ReportClientError_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientMetrics_ReportClientError_Notification) ProtoMessage() {}

func (x *CClientMetrics_ReportClientError_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientmetrics_steamclient_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientMetrics_ReportClientError_Notification.ProtoReflect.Descriptor instead.
func (*CClientMetrics_ReportClientError_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_clientmetrics_steamclient_proto_rawDescGZIP(), []int{8}
}

func (x *CClientMetrics_ReportClientError_Notification) GetProduct() string {
	if x != nil && x.Product != nil {
		return *x.Product
	}
	return ""
}

func (x *CClientMetrics_ReportClientError_Notification) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

func (x *CClientMetrics_ReportClientError_Notification) GetErrors() []*CClientMetrics_ReportClientError_Notification_Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

type CClientMetrics_ClientBootstrap_Notification struct {
	state         protoimpl.MessageState                  `protogen:"open.v1"`
	Summary       *CClientMetrics_ClientBootstrap_Summary `protobuf:"bytes,1,opt,name=summary" json:"summary,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CClientMetrics_ClientBootstrap_Notification) Reset() {
	*x = CClientMetrics_ClientBootstrap_Notification{}
	mi := &file_steammessages_clientmetrics_steamclient_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CClientMetrics_ClientBootstrap_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientMetrics_ClientBootstrap_Notification) ProtoMessage() {}

func (x *CClientMetrics_ClientBootstrap_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientmetrics_steamclient_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientMetrics_ClientBootstrap_Notification.ProtoReflect.Descriptor instead.
func (*CClientMetrics_ClientBootstrap_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_clientmetrics_steamclient_proto_rawDescGZIP(), []int{9}
}

func (x *CClientMetrics_ClientBootstrap_Notification) GetSummary() *CClientMetrics_ClientBootstrap_Summary {
	if x != nil {
		return x.Summary
	}
	return nil
}

type CClientMetrics_DownloadRates_Notification struct {
	state          protoimpl.MessageState                                 `protogen:"open.v1"`
	CellId         *uint32                                                `protobuf:"varint,1,opt,name=cell_id,json=cellId" json:"cell_id,omitempty"`
	Stats          []*CClientMetrics_DownloadRates_Notification_StatsInfo `protobuf:"bytes,2,rep,name=stats" json:"stats,omitempty"`
	ThrottlingKbps *uint32                                                `protobuf:"varint,3,opt,name=throttling_kbps,json=throttlingKbps" json:"throttling_kbps,omitempty"`
	OsType         *uint32                                                `protobuf:"varint,4,opt,name=os_type,json=osType" json:"os_type,omitempty"`
	DeviceType     *uint32                                                `protobuf:"varint,5,opt,name=device_type,json=deviceType" json:"device_type,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CClientMetrics_DownloadRates_Notification) Reset() {
	*x = CClientMetrics_DownloadRates_Notification{}
	mi := &file_steammessages_clientmetrics_steamclient_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CClientMetrics_DownloadRates_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientMetrics_DownloadRates_Notification) ProtoMessage() {}

func (x *CClientMetrics_DownloadRates_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientmetrics_steamclient_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientMetrics_DownloadRates_Notification.ProtoReflect.Descriptor instead.
func (*CClientMetrics_DownloadRates_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_clientmetrics_steamclient_proto_rawDescGZIP(), []int{10}
}

func (x *CClientMetrics_DownloadRates_Notification) GetCellId() uint32 {
	if x != nil && x.CellId != nil {
		return *x.CellId
	}
	return 0
}

func (x *CClientMetrics_DownloadRates_Notification) GetStats() []*CClientMetrics_DownloadRates_Notification_StatsInfo {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *CClientMetrics_DownloadRates_Notification) GetThrottlingKbps() uint32 {
	if x != nil && x.ThrottlingKbps != nil {
		return *x.ThrottlingKbps
	}
	return 0
}

func (x *CClientMetrics_DownloadRates_Notification) GetOsType() uint32 {
	if x != nil && x.OsType != nil {
		return *x.OsType
	}
	return 0
}

func (x *CClientMetrics_DownloadRates_Notification) GetDeviceType() uint32 {
	if x != nil && x.DeviceType != nil {
		return *x.DeviceType
	}
	return 0
}

type CClientMetrics_ContentValidation_Notification struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	ValidationResult     *int32                 `protobuf:"varint,1,opt,name=validation_result,json=validationResult" json:"validation_result,omitempty"`
	AppId                *uint32                `protobuf:"varint,2,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	StagedFiles          *bool                  `protobuf:"varint,3,opt,name=staged_files,json=stagedFiles" json:"staged_files,omitempty"`
	UserInitiated        *bool                  `protobuf:"varint,4,opt,name=user_initiated,json=userInitiated" json:"user_initiated,omitempty"`
	EarlyOut             *bool                  `protobuf:"varint,5,opt,name=early_out,json=earlyOut" json:"early_out,omitempty"`
	ChunksScanned        *uint32                `protobuf:"varint,6,opt,name=chunks_scanned,json=chunksScanned" json:"chunks_scanned,omitempty"`
	ChunksCorrupt        *uint32                `protobuf:"varint,7,opt,name=chunks_corrupt,json=chunksCorrupt" json:"chunks_corrupt,omitempty"`
	BytesScanned         *uint64                `protobuf:"varint,8,opt,name=bytes_scanned,json=bytesScanned" json:"bytes_scanned,omitempty"`
	ChunkBytesCorrupt    *uint64                `protobuf:"varint,9,opt,name=chunk_bytes_corrupt,json=chunkBytesCorrupt" json:"chunk_bytes_corrupt,omitempty"`
	TotalFileSizeCorrupt *uint64                `protobuf:"varint,10,opt,name=total_file_size_corrupt,json=totalFileSizeCorrupt" json:"total_file_size_corrupt,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *CClientMetrics_ContentValidation_Notification) Reset() {
	*x = CClientMetrics_ContentValidation_Notification{}
	mi := &file_steammessages_clientmetrics_steamclient_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CClientMetrics_ContentValidation_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientMetrics_ContentValidation_Notification) ProtoMessage() {}

func (x *CClientMetrics_ContentValidation_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientmetrics_steamclient_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientMetrics_ContentValidation_Notification.ProtoReflect.Descriptor instead.
func (*CClientMetrics_ContentValidation_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_clientmetrics_steamclient_proto_rawDescGZIP(), []int{11}
}

func (x *CClientMetrics_ContentValidation_Notification) GetValidationResult() int32 {
	if x != nil && x.ValidationResult != nil {
		return *x.ValidationResult
	}
	return 0
}

func (x *CClientMetrics_ContentValidation_Notification) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CClientMetrics_ContentValidation_Notification) GetStagedFiles() bool {
	if x != nil && x.StagedFiles != nil {
		return *x.StagedFiles
	}
	return false
}

func (x *CClientMetrics_ContentValidation_Notification) GetUserInitiated() bool {
	if x != nil && x.UserInitiated != nil {
		return *x.UserInitiated
	}
	return false
}

func (x *CClientMetrics_ContentValidation_Notification) GetEarlyOut() bool {
	if x != nil && x.EarlyOut != nil {
		return *x.EarlyOut
	}
	return false
}

func (x *CClientMetrics_ContentValidation_Notification) GetChunksScanned() uint32 {
	if x != nil && x.ChunksScanned != nil {
		return *x.ChunksScanned
	}
	return 0
}

func (x *CClientMetrics_ContentValidation_Notification) GetChunksCorrupt() uint32 {
	if x != nil && x.ChunksCorrupt != nil {
		return *x.ChunksCorrupt
	}
	return 0
}

func (x *CClientMetrics_ContentValidation_Notification) GetBytesScanned() uint64 {
	if x != nil && x.BytesScanned != nil {
		return *x.BytesScanned
	}
	return 0
}

func (x *CClientMetrics_ContentValidation_Notification) GetChunkBytesCorrupt() uint64 {
	if x != nil && x.ChunkBytesCorrupt != nil {
		return *x.ChunkBytesCorrupt
	}
	return 0
}

func (x *CClientMetrics_ContentValidation_Notification) GetTotalFileSizeCorrupt() uint64 {
	if x != nil && x.TotalFileSizeCorrupt != nil {
		return *x.TotalFileSizeCorrupt
	}
	return 0
}

type CClientMetrics_CloudAppSyncStats_Notification struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	AppId                   *uint32                `protobuf:"varint,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	PlatformType            *uint32                `protobuf:"varint,2,opt,name=platform_type,json=platformType" json:"platform_type,omitempty"`
	Preload                 *bool                  `protobuf:"varint,3,opt,name=preload" json:"preload,omitempty"`
	BlockingAppLaunch       *bool                  `protobuf:"varint,4,opt,name=blocking_app_launch,json=blockingAppLaunch" json:"blocking_app_launch,omitempty"`
	FilesUploaded           *uint32                `protobuf:"varint,5,opt,name=files_uploaded,json=filesUploaded" json:"files_uploaded,omitempty"`
	FilesDownloaded         *uint32                `protobuf:"varint,6,opt,name=files_downloaded,json=filesDownloaded" json:"files_downloaded,omitempty"`
	FilesDeleted            *uint32                `protobuf:"varint,7,opt,name=files_deleted,json=filesDeleted" json:"files_deleted,omitempty"`
	BytesUploaded           *uint64                `protobuf:"varint,8,opt,name=bytes_uploaded,json=bytesUploaded" json:"bytes_uploaded,omitempty"`
	BytesDownloaded         *uint64                `protobuf:"varint,9,opt,name=bytes_downloaded,json=bytesDownloaded" json:"bytes_downloaded,omitempty"`
	MicrosecTotal           *uint64                `protobuf:"varint,10,opt,name=microsec_total,json=microsecTotal" json:"microsec_total,omitempty"`
	MicrosecInitCaches      *uint64                `protobuf:"varint,11,opt,name=microsec_init_caches,json=microsecInitCaches" json:"microsec_init_caches,omitempty"`
	MicrosecValidateState   *uint64                `protobuf:"varint,12,opt,name=microsec_validate_state,json=microsecValidateState" json:"microsec_validate_state,omitempty"`
	MicrosecAcLaunch        *uint64                `protobuf:"varint,13,opt,name=microsec_ac_launch,json=microsecAcLaunch" json:"microsec_ac_launch,omitempty"`
	MicrosecAcPrepUserFiles *uint64                `protobuf:"varint,14,opt,name=microsec_ac_prep_user_files,json=microsecAcPrepUserFiles" json:"microsec_ac_prep_user_files,omitempty"`
	MicrosecAcExit          *uint64                `protobuf:"varint,15,opt,name=microsec_ac_exit,json=microsecAcExit" json:"microsec_ac_exit,omitempty"`
	MicrosecBuildSyncList   *uint64                `protobuf:"varint,16,opt,name=microsec_build_sync_list,json=microsecBuildSyncList" json:"microsec_build_sync_list,omitempty"`
	MicrosecDeleteFiles     *uint64                `protobuf:"varint,17,opt,name=microsec_delete_files,json=microsecDeleteFiles" json:"microsec_delete_files,omitempty"`
	MicrosecDownloadFiles   *uint64                `protobuf:"varint,18,opt,name=microsec_download_files,json=microsecDownloadFiles" json:"microsec_download_files,omitempty"`
	MicrosecUploadFiles     *uint64                `protobuf:"varint,19,opt,name=microsec_upload_files,json=microsecUploadFiles" json:"microsec_upload_files,omitempty"`
	HardwareType            *uint32                `protobuf:"varint,20,opt,name=hardware_type,json=hardwareType" json:"hardware_type,omitempty"`
	FilesManaged            *uint32                `protobuf:"varint,21,opt,name=files_managed,json=filesManaged" json:"files_managed,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *CClientMetrics_CloudAppSyncStats_Notification) Reset() {
	*x = CClientMetrics_CloudAppSyncStats_Notification{}
	mi := &file_steammessages_clientmetrics_steamclient_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CClientMetrics_CloudAppSyncStats_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientMetrics_CloudAppSyncStats_Notification) ProtoMessage() {}

func (x *CClientMetrics_CloudAppSyncStats_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientmetrics_steamclient_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientMetrics_CloudAppSyncStats_Notification.ProtoReflect.Descriptor instead.
func (*CClientMetrics_CloudAppSyncStats_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_clientmetrics_steamclient_proto_rawDescGZIP(), []int{12}
}

func (x *CClientMetrics_CloudAppSyncStats_Notification) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CClientMetrics_CloudAppSyncStats_Notification) GetPlatformType() uint32 {
	if x != nil && x.PlatformType != nil {
		return *x.PlatformType
	}
	return 0
}

func (x *CClientMetrics_CloudAppSyncStats_Notification) GetPreload() bool {
	if x != nil && x.Preload != nil {
		return *x.Preload
	}
	return false
}

func (x *CClientMetrics_CloudAppSyncStats_Notification) GetBlockingAppLaunch() bool {
	if x != nil && x.BlockingAppLaunch != nil {
		return *x.BlockingAppLaunch
	}
	return false
}

func (x *CClientMetrics_CloudAppSyncStats_Notification) GetFilesUploaded() uint32 {
	if x != nil && x.FilesUploaded != nil {
		return *x.FilesUploaded
	}
	return 0
}

func (x *CClientMetrics_CloudAppSyncStats_Notification) GetFilesDownloaded() uint32 {
	if x != nil && x.FilesDownloaded != nil {
		return *x.FilesDownloaded
	}
	return 0
}

func (x *CClientMetrics_CloudAppSyncStats_Notification) GetFilesDeleted() uint32 {
	if x != nil && x.FilesDeleted != nil {
		return *x.FilesDeleted
	}
	return 0
}

func (x *CClientMetrics_CloudAppSyncStats_Notification) GetBytesUploaded() uint64 {
	if x != nil && x.BytesUploaded != nil {
		return *x.BytesUploaded
	}
	return 0
}

func (x *CClientMetrics_CloudAppSyncStats_Notification) GetBytesDownloaded() uint64 {
	if x != nil && x.BytesDownloaded != nil {
		return *x.BytesDownloaded
	}
	return 0
}

func (x *CClientMetrics_CloudAppSyncStats_Notification) GetMicrosecTotal() uint64 {
	if x != nil && x.MicrosecTotal != nil {
		return *x.MicrosecTotal
	}
	return 0
}

func (x *CClientMetrics_CloudAppSyncStats_Notification) GetMicrosecInitCaches() uint64 {
	if x != nil && x.MicrosecInitCaches != nil {
		return *x.MicrosecInitCaches
	}
	return 0
}

func (x *CClientMetrics_CloudAppSyncStats_Notification) GetMicrosecValidateState() uint64 {
	if x != nil && x.MicrosecValidateState != nil {
		return *x.MicrosecValidateState
	}
	return 0
}

func (x *CClientMetrics_CloudAppSyncStats_Notification) GetMicrosecAcLaunch() uint64 {
	if x != nil && x.MicrosecAcLaunch != nil {
		return *x.MicrosecAcLaunch
	}
	return 0
}

func (x *CClientMetrics_CloudAppSyncStats_Notification) GetMicrosecAcPrepUserFiles() uint64 {
	if x != nil && x.MicrosecAcPrepUserFiles != nil {
		return *x.MicrosecAcPrepUserFiles
	}
	return 0
}

func (x *CClientMetrics_CloudAppSyncStats_Notification) GetMicrosecAcExit() uint64 {
	if x != nil && x.MicrosecAcExit != nil {
		return *x.MicrosecAcExit
	}
	return 0
}

func (x *CClientMetrics_CloudAppSyncStats_Notification) GetMicrosecBuildSyncList() uint64 {
	if x != nil && x.MicrosecBuildSyncList != nil {
		return *x.MicrosecBuildSyncList
	}
	return 0
}

func (x *CClientMetrics_CloudAppSyncStats_Notification) GetMicrosecDeleteFiles() uint64 {
	if x != nil && x.MicrosecDeleteFiles != nil {
		return *x.MicrosecDeleteFiles
	}
	return 0
}

func (x *CClientMetrics_CloudAppSyncStats_Notification) GetMicrosecDownloadFiles() uint64 {
	if x != nil && x.MicrosecDownloadFiles != nil {
		return *x.MicrosecDownloadFiles
	}
	return 0
}

func (x *CClientMetrics_CloudAppSyncStats_Notification) GetMicrosecUploadFiles() uint64 {
	if x != nil && x.MicrosecUploadFiles != nil {
		return *x.MicrosecUploadFiles
	}
	return 0
}

func (x *CClientMetrics_CloudAppSyncStats_Notification) GetHardwareType() uint32 {
	if x != nil && x.HardwareType != nil {
		return *x.HardwareType
	}
	return 0
}

func (x *CClientMetrics_CloudAppSyncStats_Notification) GetFilesManaged() uint32 {
	if x != nil && x.FilesManaged != nil {
		return *x.FilesManaged
	}
	return 0
}

type CClientMetrics_ContentDownloadResponse_Counts_Notification struct {
	state         protoimpl.MessageState                        `protogen:"open.v1"`
	CellId        *uint32                                       `protobuf:"varint,1,opt,name=cell_id,json=cellId" json:"cell_id,omitempty"`
	Data          *CClientMetrics_ContentDownloadResponse_Hosts `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CClientMetrics_ContentDownloadResponse_Counts_Notification) Reset() {
	*x = CClientMetrics_ContentDownloadResponse_Counts_Notification{}
	mi := &file_steammessages_clientmetrics_steamclient_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CClientMetrics_ContentDownloadResponse_Counts_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientMetrics_ContentDownloadResponse_Counts_Notification) ProtoMessage() {}

func (x *CClientMetrics_ContentDownloadResponse_Counts_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientmetrics_steamclient_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientMetrics_ContentDownloadResponse_Counts_Notification.ProtoReflect.Descriptor instead.
func (*CClientMetrics_ContentDownloadResponse_Counts_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_clientmetrics_steamclient_proto_rawDescGZIP(), []int{13}
}

func (x *CClientMetrics_ContentDownloadResponse_Counts_Notification) GetCellId() uint32 {
	if x != nil && x.CellId != nil {
		return *x.CellId
	}
	return 0
}

func (x *CClientMetrics_ContentDownloadResponse_Counts_Notification) GetData() *CClientMetrics_ContentDownloadResponse_Hosts {
	if x != nil {
		return x.Data
	}
	return nil
}

type CClientMetrics_ReportClientArgs_Notification struct {
	state                          protoimpl.MessageState `protogen:"open.v1"`
	ClientArgs                     []string               `protobuf:"bytes,1,rep,name=client_args,json=clientArgs" json:"client_args,omitempty"`
	GpuWebviewRegkeyDisabled       *bool                  `protobuf:"varint,2,opt,name=gpu_webview_regkey_disabled,json=gpuWebviewRegkeyDisabled" json:"gpu_webview_regkey_disabled,omitempty"`
	SuppressGpuChrome              *bool                  `protobuf:"varint,3,opt,name=suppress_gpu_chrome,json=suppressGpuChrome" json:"suppress_gpu_chrome,omitempty"`
	BrowserNotSupported            *bool                  `protobuf:"varint,4,opt,name=browser_not_supported,json=browserNotSupported" json:"browser_not_supported,omitempty"`
	HwAccelVideoRegkeyDisabled     *bool                  `protobuf:"varint,5,opt,name=hw_accel_video_regkey_disabled,json=hwAccelVideoRegkeyDisabled" json:"hw_accel_video_regkey_disabled,omitempty"`
	MiniModeEnabled                *bool                  `protobuf:"varint,6,opt,name=mini_mode_enabled,json=miniModeEnabled" json:"mini_mode_enabled,omitempty"`
	FpsCounterEnabled              *bool                  `protobuf:"varint,7,opt,name=fps_counter_enabled,json=fpsCounterEnabled" json:"fps_counter_enabled,omitempty"`
	LibraryLowBandwidthModeEnabled *bool                  `protobuf:"varint,8,opt,name=library_low_bandwidth_mode_enabled,json=libraryLowBandwidthModeEnabled" json:"library_low_bandwidth_mode_enabled,omitempty"`
	LibraryLowPerfModeEnabled      *bool                  `protobuf:"varint,9,opt,name=library_low_perf_mode_enabled,json=libraryLowPerfModeEnabled" json:"library_low_perf_mode_enabled,omitempty"`
	GrMode                         *int32                 `protobuf:"varint,10,opt,name=gr_mode,json=grMode" json:"gr_mode,omitempty"`
	unknownFields                  protoimpl.UnknownFields
	sizeCache                      protoimpl.SizeCache
}

func (x *CClientMetrics_ReportClientArgs_Notification) Reset() {
	*x = CClientMetrics_ReportClientArgs_Notification{}
	mi := &file_steammessages_clientmetrics_steamclient_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CClientMetrics_ReportClientArgs_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientMetrics_ReportClientArgs_Notification) ProtoMessage() {}

func (x *CClientMetrics_ReportClientArgs_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientmetrics_steamclient_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientMetrics_ReportClientArgs_Notification.ProtoReflect.Descriptor instead.
func (*CClientMetrics_ReportClientArgs_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_clientmetrics_steamclient_proto_rawDescGZIP(), []int{14}
}

func (x *CClientMetrics_ReportClientArgs_Notification) GetClientArgs() []string {
	if x != nil {
		return x.ClientArgs
	}
	return nil
}

func (x *CClientMetrics_ReportClientArgs_Notification) GetGpuWebviewRegkeyDisabled() bool {
	if x != nil && x.GpuWebviewRegkeyDisabled != nil {
		return *x.GpuWebviewRegkeyDisabled
	}
	return false
}

func (x *CClientMetrics_ReportClientArgs_Notification) GetSuppressGpuChrome() bool {
	if x != nil && x.SuppressGpuChrome != nil {
		return *x.SuppressGpuChrome
	}
	return false
}

func (x *CClientMetrics_ReportClientArgs_Notification) GetBrowserNotSupported() bool {
	if x != nil && x.BrowserNotSupported != nil {
		return *x.BrowserNotSupported
	}
	return false
}

func (x *CClientMetrics_ReportClientArgs_Notification) GetHwAccelVideoRegkeyDisabled() bool {
	if x != nil && x.HwAccelVideoRegkeyDisabled != nil {
		return *x.HwAccelVideoRegkeyDisabled
	}
	return false
}

func (x *CClientMetrics_ReportClientArgs_Notification) GetMiniModeEnabled() bool {
	if x != nil && x.MiniModeEnabled != nil {
		return *x.MiniModeEnabled
	}
	return false
}

func (x *CClientMetrics_ReportClientArgs_Notification) GetFpsCounterEnabled() bool {
	if x != nil && x.FpsCounterEnabled != nil {
		return *x.FpsCounterEnabled
	}
	return false
}

func (x *CClientMetrics_ReportClientArgs_Notification) GetLibraryLowBandwidthModeEnabled() bool {
	if x != nil && x.LibraryLowBandwidthModeEnabled != nil {
		return *x.LibraryLowBandwidthModeEnabled
	}
	return false
}

func (x *CClientMetrics_ReportClientArgs_Notification) GetLibraryLowPerfModeEnabled() bool {
	if x != nil && x.LibraryLowPerfModeEnabled != nil {
		return *x.LibraryLowPerfModeEnabled
	}
	return false
}

func (x *CClientMetrics_ReportClientArgs_Notification) GetGrMode() int32 {
	if x != nil && x.GrMode != nil {
		return *x.GrMode
	}
	return 0
}

type CClientMetrics_ReportLinuxStats_Notification struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	GlibcVersionMajor *int32                 `protobuf:"varint,1,opt,name=glibc_version_major,json=glibcVersionMajor" json:"glibc_version_major,omitempty"`
	GlibcVersionMinor *int32                 `protobuf:"varint,2,opt,name=glibc_version_minor,json=glibcVersionMinor" json:"glibc_version_minor,omitempty"`
	AccountType       *int32                 `protobuf:"varint,3,opt,name=account_type,json=accountType" json:"account_type,omitempty"`
	LauncherType      *int32                 `protobuf:"varint,4,opt,name=launcher_type,json=launcherType" json:"launcher_type,omitempty"`
	GameServerAppid   *int32                 `protobuf:"varint,5,opt,name=game_server_appid,json=gameServerAppid" json:"game_server_appid,omitempty"`
	ProcessName       *string                `protobuf:"bytes,6,opt,name=process_name,json=processName" json:"process_name,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *CClientMetrics_ReportLinuxStats_Notification) Reset() {
	*x = CClientMetrics_ReportLinuxStats_Notification{}
	mi := &file_steammessages_clientmetrics_steamclient_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CClientMetrics_ReportLinuxStats_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientMetrics_ReportLinuxStats_Notification) ProtoMessage() {}

func (x *CClientMetrics_ReportLinuxStats_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientmetrics_steamclient_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientMetrics_ReportLinuxStats_Notification.ProtoReflect.Descriptor instead.
func (*CClientMetrics_ReportLinuxStats_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_clientmetrics_steamclient_proto_rawDescGZIP(), []int{15}
}

func (x *CClientMetrics_ReportLinuxStats_Notification) GetGlibcVersionMajor() int32 {
	if x != nil && x.GlibcVersionMajor != nil {
		return *x.GlibcVersionMajor
	}
	return 0
}

func (x *CClientMetrics_ReportLinuxStats_Notification) GetGlibcVersionMinor() int32 {
	if x != nil && x.GlibcVersionMinor != nil {
		return *x.GlibcVersionMinor
	}
	return 0
}

func (x *CClientMetrics_ReportLinuxStats_Notification) GetAccountType() int32 {
	if x != nil && x.AccountType != nil {
		return *x.AccountType
	}
	return 0
}

func (x *CClientMetrics_ReportLinuxStats_Notification) GetLauncherType() int32 {
	if x != nil && x.LauncherType != nil {
		return *x.LauncherType
	}
	return 0
}

func (x *CClientMetrics_ReportLinuxStats_Notification) GetGameServerAppid() int32 {
	if x != nil && x.GameServerAppid != nil {
		return *x.GameServerAppid
	}
	return 0
}

func (x *CClientMetrics_ReportLinuxStats_Notification) GetProcessName() string {
	if x != nil && x.ProcessName != nil {
		return *x.ProcessName
	}
	return ""
}

type CClientMetrics_ReportAccessibilitySettings_Notification struct {
	state                            protoimpl.MessageState `protogen:"open.v1"`
	AccessibilityDesktopUiScale      *float32               `protobuf:"fixed32,1,opt,name=accessibility_desktop_ui_scale,json=accessibilityDesktopUiScale" json:"accessibility_desktop_ui_scale,omitempty"`
	AccessibilityScreenReaderEnabled *bool                  `protobuf:"varint,2,opt,name=accessibility_screen_reader_enabled,json=accessibilityScreenReaderEnabled" json:"accessibility_screen_reader_enabled,omitempty"`
	AccessibilityHighContrastMode    *bool                  `protobuf:"varint,3,opt,name=accessibility_high_contrast_mode,json=accessibilityHighContrastMode" json:"accessibility_high_contrast_mode,omitempty"`
	AccessibilityReduceMotion        *bool                  `protobuf:"varint,4,opt,name=accessibility_reduce_motion,json=accessibilityReduceMotion" json:"accessibility_reduce_motion,omitempty"`
	AccessibilityColorFilterName     *string                `protobuf:"bytes,5,opt,name=accessibility_color_filter_name,json=accessibilityColorFilterName" json:"accessibility_color_filter_name,omitempty"`
	unknownFields                    protoimpl.UnknownFields
	sizeCache                        protoimpl.SizeCache
}

func (x *CClientMetrics_ReportAccessibilitySettings_Notification) Reset() {
	*x = CClientMetrics_ReportAccessibilitySettings_Notification{}
	mi := &file_steammessages_clientmetrics_steamclient_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CClientMetrics_ReportAccessibilitySettings_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientMetrics_ReportAccessibilitySettings_Notification) ProtoMessage() {}

func (x *CClientMetrics_ReportAccessibilitySettings_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientmetrics_steamclient_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientMetrics_ReportAccessibilitySettings_Notification.ProtoReflect.Descriptor instead.
func (*CClientMetrics_ReportAccessibilitySettings_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_clientmetrics_steamclient_proto_rawDescGZIP(), []int{16}
}

func (x *CClientMetrics_ReportAccessibilitySettings_Notification) GetAccessibilityDesktopUiScale() float32 {
	if x != nil && x.AccessibilityDesktopUiScale != nil {
		return *x.AccessibilityDesktopUiScale
	}
	return 0
}

func (x *CClientMetrics_ReportAccessibilitySettings_Notification) GetAccessibilityScreenReaderEnabled() bool {
	if x != nil && x.AccessibilityScreenReaderEnabled != nil {
		return *x.AccessibilityScreenReaderEnabled
	}
	return false
}

func (x *CClientMetrics_ReportAccessibilitySettings_Notification) GetAccessibilityHighContrastMode() bool {
	if x != nil && x.AccessibilityHighContrastMode != nil {
		return *x.AccessibilityHighContrastMode
	}
	return false
}

func (x *CClientMetrics_ReportAccessibilitySettings_Notification) GetAccessibilityReduceMotion() bool {
	if x != nil && x.AccessibilityReduceMotion != nil {
		return *x.AccessibilityReduceMotion
	}
	return false
}

func (x *CClientMetrics_ReportAccessibilitySettings_Notification) GetAccessibilityColorFilterName() string {
	if x != nil && x.AccessibilityColorFilterName != nil {
		return *x.AccessibilityColorFilterName
	}
	return ""
}

type CClientMetrics_ClipShare_Notification struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Eresult       *uint32                `protobuf:"varint,1,opt,name=eresult,def=2" json:"eresult,omitempty"`
	ShareMethod   *EClipShareMethod      `protobuf:"varint,2,opt,name=share_method,json=shareMethod,enum=EClipShareMethod,def=1" json:"share_method,omitempty"`
	Seconds       *float32               `protobuf:"fixed32,3,opt,name=seconds" json:"seconds,omitempty"`
	Bytes         *uint64                `protobuf:"varint,4,opt,name=bytes" json:"bytes,omitempty"`
	Gameid        *uint64                `protobuf:"fixed64,5,opt,name=gameid" json:"gameid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CClientMetrics_ClipShare_Notification fields.
const (
	Default_CClientMetrics_ClipShare_Notification_Eresult     = uint32(2)
	Default_CClientMetrics_ClipShare_Notification_ShareMethod = EClipShareMethod_k_EClipShareMethod_Chat
)

func (x *CClientMetrics_ClipShare_Notification) Reset() {
	*x = CClientMetrics_ClipShare_Notification{}
	mi := &file_steammessages_clientmetrics_steamclient_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CClientMetrics_ClipShare_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientMetrics_ClipShare_Notification) ProtoMessage() {}

func (x *CClientMetrics_ClipShare_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientmetrics_steamclient_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientMetrics_ClipShare_Notification.ProtoReflect.Descriptor instead.
func (*CClientMetrics_ClipShare_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_clientmetrics_steamclient_proto_rawDescGZIP(), []int{17}
}

func (x *CClientMetrics_ClipShare_Notification) GetEresult() uint32 {
	if x != nil && x.Eresult != nil {
		return *x.Eresult
	}
	return Default_CClientMetrics_ClipShare_Notification_Eresult
}

func (x *CClientMetrics_ClipShare_Notification) GetShareMethod() EClipShareMethod {
	if x != nil && x.ShareMethod != nil {
		return *x.ShareMethod
	}
	return Default_CClientMetrics_ClipShare_Notification_ShareMethod
}

func (x *CClientMetrics_ClipShare_Notification) GetSeconds() float32 {
	if x != nil && x.Seconds != nil {
		return *x.Seconds
	}
	return 0
}

func (x *CClientMetrics_ClipShare_Notification) GetBytes() uint64 {
	if x != nil && x.Bytes != nil {
		return *x.Bytes
	}
	return 0
}

func (x *CClientMetrics_ClipShare_Notification) GetGameid() uint64 {
	if x != nil && x.Gameid != nil {
		return *x.Gameid
	}
	return 0
}

type CClientMetrics_ClipRange_Notification struct {
	state               protoimpl.MessageState                                   `protogen:"open.v1"`
	OriginalRangeMethod *EClipRangeMethod                                        `protobuf:"varint,1,opt,name=original_range_method,json=originalRangeMethod,enum=EClipRangeMethod,def=1" json:"original_range_method,omitempty"`
	Start               *CClientMetrics_ClipRange_Notification_RelativeRangeEdge `protobuf:"bytes,2,opt,name=start" json:"start,omitempty"`
	End                 *CClientMetrics_ClipRange_Notification_RelativeRangeEdge `protobuf:"bytes,3,opt,name=end" json:"end,omitempty"`
	Seconds             *float32                                                 `protobuf:"fixed32,4,opt,name=seconds" json:"seconds,omitempty"`
	Gameid              *uint64                                                  `protobuf:"fixed64,5,opt,name=gameid" json:"gameid,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

// Default values for CClientMetrics_ClipRange_Notification fields.
const (
	Default_CClientMetrics_ClipRange_Notification_OriginalRangeMethod = EClipRangeMethod_k_EClipRangeMethod_CreateClipButton
)

func (x *CClientMetrics_ClipRange_Notification) Reset() {
	*x = CClientMetrics_ClipRange_Notification{}
	mi := &file_steammessages_clientmetrics_steamclient_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CClientMetrics_ClipRange_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientMetrics_ClipRange_Notification) ProtoMessage() {}

func (x *CClientMetrics_ClipRange_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientmetrics_steamclient_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientMetrics_ClipRange_Notification.ProtoReflect.Descriptor instead.
func (*CClientMetrics_ClipRange_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_clientmetrics_steamclient_proto_rawDescGZIP(), []int{18}
}

func (x *CClientMetrics_ClipRange_Notification) GetOriginalRangeMethod() EClipRangeMethod {
	if x != nil && x.OriginalRangeMethod != nil {
		return *x.OriginalRangeMethod
	}
	return Default_CClientMetrics_ClipRange_Notification_OriginalRangeMethod
}

func (x *CClientMetrics_ClipRange_Notification) GetStart() *CClientMetrics_ClipRange_Notification_RelativeRangeEdge {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *CClientMetrics_ClipRange_Notification) GetEnd() *CClientMetrics_ClipRange_Notification_RelativeRangeEdge {
	if x != nil {
		return x.End
	}
	return nil
}

func (x *CClientMetrics_ClipRange_Notification) GetSeconds() float32 {
	if x != nil && x.Seconds != nil {
		return *x.Seconds
	}
	return 0
}

func (x *CClientMetrics_ClipRange_Notification) GetGameid() uint64 {
	if x != nil && x.Gameid != nil {
		return *x.Gameid
	}
	return 0
}

type CClientMetrics_EndGameRecording_Notification struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RecordingType *EGameRecordingType    `protobuf:"varint,1,opt,name=recording_type,json=recordingType,enum=EGameRecordingType,def=0" json:"recording_type,omitempty"`
	Seconds       *float32               `protobuf:"fixed32,2,opt,name=seconds" json:"seconds,omitempty"`
	Bytes         *uint64                `protobuf:"varint,3,opt,name=bytes" json:"bytes,omitempty"`
	Gameid        *uint64                `protobuf:"fixed64,4,opt,name=gameid" json:"gameid,omitempty"`
	InstantClip   *bool                  `protobuf:"varint,5,opt,name=instant_clip,json=instantClip" json:"instant_clip,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CClientMetrics_EndGameRecording_Notification fields.
const (
	Default_CClientMetrics_EndGameRecording_Notification_RecordingType = EGameRecordingType_k_EGameRecordingType_Unknown
)

func (x *CClientMetrics_EndGameRecording_Notification) Reset() {
	*x = CClientMetrics_EndGameRecording_Notification{}
	mi := &file_steammessages_clientmetrics_steamclient_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CClientMetrics_EndGameRecording_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientMetrics_EndGameRecording_Notification) ProtoMessage() {}

func (x *CClientMetrics_EndGameRecording_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientmetrics_steamclient_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientMetrics_EndGameRecording_Notification.ProtoReflect.Descriptor instead.
func (*CClientMetrics_EndGameRecording_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_clientmetrics_steamclient_proto_rawDescGZIP(), []int{19}
}

func (x *CClientMetrics_EndGameRecording_Notification) GetRecordingType() EGameRecordingType {
	if x != nil && x.RecordingType != nil {
		return *x.RecordingType
	}
	return Default_CClientMetrics_EndGameRecording_Notification_RecordingType
}

func (x *CClientMetrics_EndGameRecording_Notification) GetSeconds() float32 {
	if x != nil && x.Seconds != nil {
		return *x.Seconds
	}
	return 0
}

func (x *CClientMetrics_EndGameRecording_Notification) GetBytes() uint64 {
	if x != nil && x.Bytes != nil {
		return *x.Bytes
	}
	return 0
}

func (x *CClientMetrics_EndGameRecording_Notification) GetGameid() uint64 {
	if x != nil && x.Gameid != nil {
		return *x.Gameid
	}
	return 0
}

func (x *CClientMetrics_EndGameRecording_Notification) GetInstantClip() bool {
	if x != nil && x.InstantClip != nil {
		return *x.InstantClip
	}
	return false
}

type CClientMetrics_GamePerformance_Notification struct {
	state         protoimpl.MessageState                                         `protogen:"open.v1"`
	Reports       []*CClientMetrics_GamePerformance_Notification_FrameRateReport `protobuf:"bytes,1,rep,name=reports" json:"reports,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CClientMetrics_GamePerformance_Notification) Reset() {
	*x = CClientMetrics_GamePerformance_Notification{}
	mi := &file_steammessages_clientmetrics_steamclient_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CClientMetrics_GamePerformance_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientMetrics_GamePerformance_Notification) ProtoMessage() {}

func (x *CClientMetrics_GamePerformance_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientmetrics_steamclient_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientMetrics_GamePerformance_Notification.ProtoReflect.Descriptor instead.
func (*CClientMetrics_GamePerformance_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_clientmetrics_steamclient_proto_rawDescGZIP(), []int{20}
}

func (x *CClientMetrics_GamePerformance_Notification) GetReports() []*CClientMetrics_GamePerformance_Notification_FrameRateReport {
	if x != nil {
		return x.Reports
	}
	return nil
}

type CClientMetrics_ReportReactUsage_Notification_RouteData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Route         *string                `protobuf:"bytes,1,opt,name=route" json:"route,omitempty"`
	Count         *uint32                `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CClientMetrics_ReportReactUsage_Notification_RouteData) Reset() {
	*x = CClientMetrics_ReportReactUsage_Notification_RouteData{}
	mi := &file_steammessages_clientmetrics_steamclient_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CClientMetrics_ReportReactUsage_Notification_RouteData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientMetrics_ReportReactUsage_Notification_RouteData) ProtoMessage() {}

func (x *CClientMetrics_ReportReactUsage_Notification_RouteData) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientmetrics_steamclient_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientMetrics_ReportReactUsage_Notification_RouteData.ProtoReflect.Descriptor instead.
func (*CClientMetrics_ReportReactUsage_Notification_RouteData) Descriptor() ([]byte, []int) {
	return file_steammessages_clientmetrics_steamclient_proto_rawDescGZIP(), []int{7, 0}
}

func (x *CClientMetrics_ReportReactUsage_Notification_RouteData) GetRoute() string {
	if x != nil && x.Route != nil {
		return *x.Route
	}
	return ""
}

func (x *CClientMetrics_ReportReactUsage_Notification_RouteData) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

type CClientMetrics_ReportReactUsage_Notification_ComponentData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Component     *string                `protobuf:"bytes,1,opt,name=component" json:"component,omitempty"`
	Count         *uint32                `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CClientMetrics_ReportReactUsage_Notification_ComponentData) Reset() {
	*x = CClientMetrics_ReportReactUsage_Notification_ComponentData{}
	mi := &file_steammessages_clientmetrics_steamclient_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CClientMetrics_ReportReactUsage_Notification_ComponentData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientMetrics_ReportReactUsage_Notification_ComponentData) ProtoMessage() {}

func (x *CClientMetrics_ReportReactUsage_Notification_ComponentData) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientmetrics_steamclient_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientMetrics_ReportReactUsage_Notification_ComponentData.ProtoReflect.Descriptor instead.
func (*CClientMetrics_ReportReactUsage_Notification_ComponentData) Descriptor() ([]byte, []int) {
	return file_steammessages_clientmetrics_steamclient_proto_rawDescGZIP(), []int{7, 1}
}

func (x *CClientMetrics_ReportReactUsage_Notification_ComponentData) GetComponent() string {
	if x != nil && x.Component != nil {
		return *x.Component
	}
	return ""
}

func (x *CClientMetrics_ReportReactUsage_Notification_ComponentData) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

type CClientMetrics_ReportReactUsage_Notification_ActionData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Action        *string                `protobuf:"bytes,1,opt,name=action" json:"action,omitempty"`
	Count         *uint32                `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CClientMetrics_ReportReactUsage_Notification_ActionData) Reset() {
	*x = CClientMetrics_ReportReactUsage_Notification_ActionData{}
	mi := &file_steammessages_clientmetrics_steamclient_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CClientMetrics_ReportReactUsage_Notification_ActionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientMetrics_ReportReactUsage_Notification_ActionData) ProtoMessage() {}

func (x *CClientMetrics_ReportReactUsage_Notification_ActionData) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientmetrics_steamclient_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientMetrics_ReportReactUsage_Notification_ActionData.ProtoReflect.Descriptor instead.
func (*CClientMetrics_ReportReactUsage_Notification_ActionData) Descriptor() ([]byte, []int) {
	return file_steammessages_clientmetrics_steamclient_proto_rawDescGZIP(), []int{7, 2}
}

func (x *CClientMetrics_ReportReactUsage_Notification_ActionData) GetAction() string {
	if x != nil && x.Action != nil {
		return *x.Action
	}
	return ""
}

func (x *CClientMetrics_ReportReactUsage_Notification_ActionData) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

type CClientMetrics_ReportClientError_Notification_Error struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Identifier    *string                `protobuf:"bytes,1,opt,name=identifier" json:"identifier,omitempty"`
	Message       *string                `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	Count         *uint32                `protobuf:"varint,3,opt,name=count" json:"count,omitempty"`
	Context       *string                `protobuf:"bytes,4,opt,name=context" json:"context,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CClientMetrics_ReportClientError_Notification_Error) Reset() {
	*x = CClientMetrics_ReportClientError_Notification_Error{}
	mi := &file_steammessages_clientmetrics_steamclient_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CClientMetrics_ReportClientError_Notification_Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientMetrics_ReportClientError_Notification_Error) ProtoMessage() {}

func (x *CClientMetrics_ReportClientError_Notification_Error) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientmetrics_steamclient_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientMetrics_ReportClientError_Notification_Error.ProtoReflect.Descriptor instead.
func (*CClientMetrics_ReportClientError_Notification_Error) Descriptor() ([]byte, []int) {
	return file_steammessages_clientmetrics_steamclient_proto_rawDescGZIP(), []int{8, 0}
}

func (x *CClientMetrics_ReportClientError_Notification_Error) GetIdentifier() string {
	if x != nil && x.Identifier != nil {
		return *x.Identifier
	}
	return ""
}

func (x *CClientMetrics_ReportClientError_Notification_Error) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *CClientMetrics_ReportClientError_Notification_Error) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *CClientMetrics_ReportClientError_Notification_Error) GetContext() string {
	if x != nil && x.Context != nil {
		return *x.Context
	}
	return ""
}

type CClientMetrics_DownloadRates_Notification_StatsInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SourceType    *uint32                `protobuf:"varint,1,opt,name=source_type,json=sourceType" json:"source_type,omitempty"`
	SourceId      *uint32                `protobuf:"varint,2,opt,name=source_id,json=sourceId" json:"source_id,omitempty"`
	Bytes         *uint64                `protobuf:"varint,3,opt,name=bytes" json:"bytes,omitempty"`
	HostName      *string                `protobuf:"bytes,4,opt,name=host_name,json=hostName" json:"host_name,omitempty"`
	Microseconds  *uint64                `protobuf:"varint,5,opt,name=microseconds" json:"microseconds,omitempty"`
	UsedIpv6      *bool                  `protobuf:"varint,6,opt,name=used_ipv6,json=usedIpv6" json:"used_ipv6,omitempty"`
	Proxied       *bool                  `protobuf:"varint,7,opt,name=proxied" json:"proxied,omitempty"`
	UsedHttp2     *bool                  `protobuf:"varint,8,opt,name=used_http2,json=usedHttp2" json:"used_http2,omitempty"`
	CacheHits     *uint32                `protobuf:"varint,9,opt,name=cache_hits,json=cacheHits" json:"cache_hits,omitempty"`
	CacheMisses   *uint32                `protobuf:"varint,10,opt,name=cache_misses,json=cacheMisses" json:"cache_misses,omitempty"`
	HitBytes      *uint64                `protobuf:"varint,11,opt,name=hit_bytes,json=hitBytes" json:"hit_bytes,omitempty"`
	MissBytes     *uint64                `protobuf:"varint,12,opt,name=miss_bytes,json=missBytes" json:"miss_bytes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CClientMetrics_DownloadRates_Notification_StatsInfo) Reset() {
	*x = CClientMetrics_DownloadRates_Notification_StatsInfo{}
	mi := &file_steammessages_clientmetrics_steamclient_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CClientMetrics_DownloadRates_Notification_StatsInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientMetrics_DownloadRates_Notification_StatsInfo) ProtoMessage() {}

func (x *CClientMetrics_DownloadRates_Notification_StatsInfo) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientmetrics_steamclient_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientMetrics_DownloadRates_Notification_StatsInfo.ProtoReflect.Descriptor instead.
func (*CClientMetrics_DownloadRates_Notification_StatsInfo) Descriptor() ([]byte, []int) {
	return file_steammessages_clientmetrics_steamclient_proto_rawDescGZIP(), []int{10, 0}
}

func (x *CClientMetrics_DownloadRates_Notification_StatsInfo) GetSourceType() uint32 {
	if x != nil && x.SourceType != nil {
		return *x.SourceType
	}
	return 0
}

func (x *CClientMetrics_DownloadRates_Notification_StatsInfo) GetSourceId() uint32 {
	if x != nil && x.SourceId != nil {
		return *x.SourceId
	}
	return 0
}

func (x *CClientMetrics_DownloadRates_Notification_StatsInfo) GetBytes() uint64 {
	if x != nil && x.Bytes != nil {
		return *x.Bytes
	}
	return 0
}

func (x *CClientMetrics_DownloadRates_Notification_StatsInfo) GetHostName() string {
	if x != nil && x.HostName != nil {
		return *x.HostName
	}
	return ""
}

func (x *CClientMetrics_DownloadRates_Notification_StatsInfo) GetMicroseconds() uint64 {
	if x != nil && x.Microseconds != nil {
		return *x.Microseconds
	}
	return 0
}

func (x *CClientMetrics_DownloadRates_Notification_StatsInfo) GetUsedIpv6() bool {
	if x != nil && x.UsedIpv6 != nil {
		return *x.UsedIpv6
	}
	return false
}

func (x *CClientMetrics_DownloadRates_Notification_StatsInfo) GetProxied() bool {
	if x != nil && x.Proxied != nil {
		return *x.Proxied
	}
	return false
}

func (x *CClientMetrics_DownloadRates_Notification_StatsInfo) GetUsedHttp2() bool {
	if x != nil && x.UsedHttp2 != nil {
		return *x.UsedHttp2
	}
	return false
}

func (x *CClientMetrics_DownloadRates_Notification_StatsInfo) GetCacheHits() uint32 {
	if x != nil && x.CacheHits != nil {
		return *x.CacheHits
	}
	return 0
}

func (x *CClientMetrics_DownloadRates_Notification_StatsInfo) GetCacheMisses() uint32 {
	if x != nil && x.CacheMisses != nil {
		return *x.CacheMisses
	}
	return 0
}

func (x *CClientMetrics_DownloadRates_Notification_StatsInfo) GetHitBytes() uint64 {
	if x != nil && x.HitBytes != nil {
		return *x.HitBytes
	}
	return 0
}

func (x *CClientMetrics_DownloadRates_Notification_StatsInfo) GetMissBytes() uint64 {
	if x != nil && x.MissBytes != nil {
		return *x.MissBytes
	}
	return 0
}

type CClientMetrics_ClipRange_Notification_RelativeRangeEdge struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	OriginalRangeMethod *EClipRangeMethod      `protobuf:"varint,1,opt,name=original_range_method,json=originalRangeMethod,enum=EClipRangeMethod,def=1" json:"original_range_method,omitempty"`
	LatestRangeMethod   *EClipRangeMethod      `protobuf:"varint,2,opt,name=latest_range_method,json=latestRangeMethod,enum=EClipRangeMethod,def=1" json:"latest_range_method,omitempty"`
	DeltaMs             *int32                 `protobuf:"varint,3,opt,name=delta_ms,json=deltaMs" json:"delta_ms,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

// Default values for CClientMetrics_ClipRange_Notification_RelativeRangeEdge fields.
const (
	Default_CClientMetrics_ClipRange_Notification_RelativeRangeEdge_OriginalRangeMethod = EClipRangeMethod_k_EClipRangeMethod_CreateClipButton
	Default_CClientMetrics_ClipRange_Notification_RelativeRangeEdge_LatestRangeMethod   = EClipRangeMethod_k_EClipRangeMethod_CreateClipButton
)

func (x *CClientMetrics_ClipRange_Notification_RelativeRangeEdge) Reset() {
	*x = CClientMetrics_ClipRange_Notification_RelativeRangeEdge{}
	mi := &file_steammessages_clientmetrics_steamclient_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CClientMetrics_ClipRange_Notification_RelativeRangeEdge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientMetrics_ClipRange_Notification_RelativeRangeEdge) ProtoMessage() {}

func (x *CClientMetrics_ClipRange_Notification_RelativeRangeEdge) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientmetrics_steamclient_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientMetrics_ClipRange_Notification_RelativeRangeEdge.ProtoReflect.Descriptor instead.
func (*CClientMetrics_ClipRange_Notification_RelativeRangeEdge) Descriptor() ([]byte, []int) {
	return file_steammessages_clientmetrics_steamclient_proto_rawDescGZIP(), []int{18, 0}
}

func (x *CClientMetrics_ClipRange_Notification_RelativeRangeEdge) GetOriginalRangeMethod() EClipRangeMethod {
	if x != nil && x.OriginalRangeMethod != nil {
		return *x.OriginalRangeMethod
	}
	return Default_CClientMetrics_ClipRange_Notification_RelativeRangeEdge_OriginalRangeMethod
}

func (x *CClientMetrics_ClipRange_Notification_RelativeRangeEdge) GetLatestRangeMethod() EClipRangeMethod {
	if x != nil && x.LatestRangeMethod != nil {
		return *x.LatestRangeMethod
	}
	return Default_CClientMetrics_ClipRange_Notification_RelativeRangeEdge_LatestRangeMethod
}

func (x *CClientMetrics_ClipRange_Notification_RelativeRangeEdge) GetDeltaMs() int32 {
	if x != nil && x.DeltaMs != nil {
		return *x.DeltaMs
	}
	return 0
}

type CClientMetrics_GamePerformance_Notification_FrameRateReport struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Gameid         *uint64                `protobuf:"fixed64,1,opt,name=gameid" json:"gameid,omitempty"`
	FrameRate      *uint32                `protobuf:"varint,2,opt,name=frame_rate,json=frameRate" json:"frame_rate,omitempty"`
	Manufacturer   *string                `protobuf:"bytes,3,opt,name=manufacturer" json:"manufacturer,omitempty"`
	Model          *string                `protobuf:"bytes,4,opt,name=model" json:"model,omitempty"`
	DxVideoCard    *string                `protobuf:"bytes,5,opt,name=dx_video_card,json=dxVideoCard" json:"dx_video_card,omitempty"`
	DxVendorid     *int32                 `protobuf:"varint,6,opt,name=dx_vendorid,json=dxVendorid" json:"dx_vendorid,omitempty"`
	DxDeviceid     *int32                 `protobuf:"varint,7,opt,name=dx_deviceid,json=dxDeviceid" json:"dx_deviceid,omitempty"`
	NumGpu         *uint32                `protobuf:"varint,8,opt,name=num_gpu,json=numGpu" json:"num_gpu,omitempty"`
	SystemRam      *uint64                `protobuf:"varint,9,opt,name=system_ram,json=systemRam" json:"system_ram,omitempty"`
	SessionSeconds *int32                 `protobuf:"varint,10,opt,name=session_seconds,json=sessionSeconds" json:"session_seconds,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CClientMetrics_GamePerformance_Notification_FrameRateReport) Reset() {
	*x = CClientMetrics_GamePerformance_Notification_FrameRateReport{}
	mi := &file_steammessages_clientmetrics_steamclient_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CClientMetrics_GamePerformance_Notification_FrameRateReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientMetrics_GamePerformance_Notification_FrameRateReport) ProtoMessage() {}

func (x *CClientMetrics_GamePerformance_Notification_FrameRateReport) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientmetrics_steamclient_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientMetrics_GamePerformance_Notification_FrameRateReport.ProtoReflect.Descriptor instead.
func (*CClientMetrics_GamePerformance_Notification_FrameRateReport) Descriptor() ([]byte, []int) {
	return file_steammessages_clientmetrics_steamclient_proto_rawDescGZIP(), []int{20, 0}
}

func (x *CClientMetrics_GamePerformance_Notification_FrameRateReport) GetGameid() uint64 {
	if x != nil && x.Gameid != nil {
		return *x.Gameid
	}
	return 0
}

func (x *CClientMetrics_GamePerformance_Notification_FrameRateReport) GetFrameRate() uint32 {
	if x != nil && x.FrameRate != nil {
		return *x.FrameRate
	}
	return 0
}

func (x *CClientMetrics_GamePerformance_Notification_FrameRateReport) GetManufacturer() string {
	if x != nil && x.Manufacturer != nil {
		return *x.Manufacturer
	}
	return ""
}

func (x *CClientMetrics_GamePerformance_Notification_FrameRateReport) GetModel() string {
	if x != nil && x.Model != nil {
		return *x.Model
	}
	return ""
}

func (x *CClientMetrics_GamePerformance_Notification_FrameRateReport) GetDxVideoCard() string {
	if x != nil && x.DxVideoCard != nil {
		return *x.DxVideoCard
	}
	return ""
}

func (x *CClientMetrics_GamePerformance_Notification_FrameRateReport) GetDxVendorid() int32 {
	if x != nil && x.DxVendorid != nil {
		return *x.DxVendorid
	}
	return 0
}

func (x *CClientMetrics_GamePerformance_Notification_FrameRateReport) GetDxDeviceid() int32 {
	if x != nil && x.DxDeviceid != nil {
		return *x.DxDeviceid
	}
	return 0
}

func (x *CClientMetrics_GamePerformance_Notification_FrameRateReport) GetNumGpu() uint32 {
	if x != nil && x.NumGpu != nil {
		return *x.NumGpu
	}
	return 0
}

func (x *CClientMetrics_GamePerformance_Notification_FrameRateReport) GetSystemRam() uint64 {
	if x != nil && x.SystemRam != nil {
		return *x.SystemRam
	}
	return 0
}

func (x *CClientMetrics_GamePerformance_Notification_FrameRateReport) GetSessionSeconds() int32 {
	if x != nil && x.SessionSeconds != nil {
		return *x.SessionSeconds
	}
	return 0
}

var File_steammessages_clientmetrics_steamclient_proto protoreflect.FileDescriptor

const file_steammessages_clientmetrics_steamclient_proto_rawDesc = "" +
	"\n" +
	"-steammessages_clientmetrics.steamclient.proto\x1a\x18steammessages_base.proto\x1a,steammessages_unified_base.steamclient.proto\x1a\x13clientmetrics.proto\x1a\venums.proto\"\x80\x01\n" +
	"#CClientMetrics_AppInterfaceCreation\x12\x1f\n" +
	"\vraw_version\x18\x01 \x01(\tR\n" +
	"rawVersion\x128\n" +
	"\x18requested_interface_type\x18\x02 \x01(\tR\x16requestedInterfaceType\"\x90\x01\n" +
	"'CClientMetrics_AppInterfaceMethodCounts\x12%\n" +
	"\x0einterface_name\x18\x01 \x01(\tR\rinterfaceName\x12\x1f\n" +
	"\vmethod_name\x18\x02 \x01(\tR\n" +
	"methodName\x12\x1d\n" +
	"\n" +
	"call_count\x18\x03 \x01(\rR\tcallCount\"\xa4\x02\n" +
	"-CClientMetrics_AppInterfaceStats_Notification\x12\x17\n" +
	"\agame_id\x18\x01 \x01(\x04R\x06gameId\x12S\n" +
	"\x12interfaces_created\x18\x02 \x03(\v2$.CClientMetrics_AppInterfaceCreationR\x11interfacesCreated\x12O\n" +
	"\x0emethods_called\x18\x03 \x03(\v2(.CClientMetrics_AppInterfaceMethodCountsR\rmethodsCalled\x124\n" +
	"\x16session_length_seconds\x18\x04 \x01(\rR\x14sessionLengthSeconds\"\x80\x01\n" +
	"&CClientMetrics_IPv6Connectivity_Result\x12'\n" +
	"\x0fprotocol_tested\x18\x01 \x01(\rR\x0eprotocolTested\x12-\n" +
	"\x12connectivity_state\x18\x02 \x01(\rR\x11connectivityState\"\xbd\x01\n" +
	",CClientMetrics_IPv6Connectivity_Notification\x12\x17\n" +
	"\acell_id\x18\x01 \x01(\rR\x06cellId\x12A\n" +
	"\aresults\x18\x02 \x03(\v2'.CClientMetrics_IPv6Connectivity_ResultR\aresults\x121\n" +
	"\x15private_ip_is_rfc6598\x18\x03 \x01(\bR\x12privateIpIsRfc6598\"\xc8\x02\n" +
	"+CClientMetrics_SteamPipeWorkStats_Operation\x12O\n" +
	"\x04type\x18\x01 \x01(\x0e2\x18.ESteamPipeOperationType:!k_ESteamPipeOperationType_InvalidR\x04type\x12\x17\n" +
	"\anum_ops\x18\x02 \x01(\rR\x06numOps\x12\x1b\n" +
	"\tnum_bytes\x18\x03 \x01(\x04R\bnumBytes\x12 \n" +
	"\fbusy_time_ms\x18\x04 \x01(\x04R\n" +
	"busyTimeMs\x12 \n" +
	"\fidle_time_ms\x18\x05 \x01(\x04R\n" +
	"idleTimeMs\x12%\n" +
	"\x0fsum_run_time_ms\x18\x06 \x01(\x04R\fsumRunTimeMs\x12'\n" +
	"\x10sum_wait_time_ms\x18\a \x01(\x04R\rsumWaitTimeMs\"\xa9\x02\n" +
	".CClientMetrics_SteamPipeWorkStats_Notification\x12\x14\n" +
	"\x05appid\x18\x01 \x01(\rR\x05appid\x12\x18\n" +
	"\adepotid\x18\x02 \x01(\rR\adepotid\x12T\n" +
	"\twork_type\x18\x03 \x01(\x0e2\x13.ESteamPipeWorkType:\"k_ESteamPipeClientWorkType_InvalidR\bworkType\x12L\n" +
	"\n" +
	"operations\x18\x04 \x03(\v2,.CClientMetrics_SteamPipeWorkStats_OperationR\n" +
	"operations\x12#\n" +
	"\rhardware_type\x18\x05 \x01(\rR\fhardwareType\"\x9e\x04\n" +
	",CClientMetrics_ReportReactUsage_Notification\x12\x18\n" +
	"\aproduct\x18\x01 \x01(\tR\aproduct\x12\x18\n" +
	"\aversion\x18\x02 \x01(\tR\aversion\x12O\n" +
	"\x06routes\x18\x03 \x03(\v27.CClientMetrics_ReportReactUsage_Notification.RouteDataR\x06routes\x12[\n" +
	"\n" +
	"components\x18\x04 \x03(\v2;.CClientMetrics_ReportReactUsage_Notification.ComponentDataR\n" +
	"components\x12R\n" +
	"\aactions\x18\x05 \x03(\v28.CClientMetrics_ReportReactUsage_Notification.ActionDataR\aactions\x1a7\n" +
	"\tRouteData\x12\x14\n" +
	"\x05route\x18\x01 \x01(\tR\x05route\x12\x14\n" +
	"\x05count\x18\x02 \x01(\rR\x05count\x1aC\n" +
	"\rComponentData\x12\x1c\n" +
	"\tcomponent\x18\x01 \x01(\tR\tcomponent\x12\x14\n" +
	"\x05count\x18\x02 \x01(\rR\x05count\x1a:\n" +
	"\n" +
	"ActionData\x12\x16\n" +
	"\x06action\x18\x01 \x01(\tR\x06action\x12\x14\n" +
	"\x05count\x18\x02 \x01(\rR\x05count\"\xa4\x02\n" +
	"-CClientMetrics_ReportClientError_Notification\x12\x18\n" +
	"\aproduct\x18\x01 \x01(\tR\aproduct\x12\x18\n" +
	"\aversion\x18\x02 \x01(\tR\aversion\x12L\n" +
	"\x06errors\x18\x03 \x03(\v24.CClientMetrics_ReportClientError_Notification.ErrorR\x06errors\x1aq\n" +
	"\x05Error\x12\x1e\n" +
	"\n" +
	"identifier\x18\x01 \x01(\tR\n" +
	"identifier\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12\x14\n" +
	"\x05count\x18\x03 \x01(\rR\x05count\x12\x18\n" +
	"\acontext\x18\x04 \x01(\tR\acontext\"p\n" +
	"+CClientMetrics_ClientBootstrap_Notification\x12A\n" +
	"\asummary\x18\x01 \x01(\v2'.CClientMetrics_ClientBootstrap_SummaryR\asummary\"\xea\x04\n" +
	")CClientMetrics_DownloadRates_Notification\x12\x17\n" +
	"\acell_id\x18\x01 \x01(\rR\x06cellId\x12J\n" +
	"\x05stats\x18\x02 \x03(\v24.CClientMetrics_DownloadRates_Notification.StatsInfoR\x05stats\x12'\n" +
	"\x0fthrottling_kbps\x18\x03 \x01(\rR\x0ethrottlingKbps\x12\x17\n" +
	"\aos_type\x18\x04 \x01(\rR\x06osType\x12\x1f\n" +
	"\vdevice_type\x18\x05 \x01(\rR\n" +
	"deviceType\x1a\xf4\x02\n" +
	"\tStatsInfo\x12\x1f\n" +
	"\vsource_type\x18\x01 \x01(\rR\n" +
	"sourceType\x12\x1b\n" +
	"\tsource_id\x18\x02 \x01(\rR\bsourceId\x12\x14\n" +
	"\x05bytes\x18\x03 \x01(\x04R\x05bytes\x12\x1b\n" +
	"\thost_name\x18\x04 \x01(\tR\bhostName\x12\"\n" +
	"\fmicroseconds\x18\x05 \x01(\x04R\fmicroseconds\x12\x1b\n" +
	"\tused_ipv6\x18\x06 \x01(\bR\busedIpv6\x12\x18\n" +
	"\aproxied\x18\a \x01(\bR\aproxied\x12\x1d\n" +
	"\n" +
	"used_http2\x18\b \x01(\bR\tusedHttp2\x12\x1d\n" +
	"\n" +
	"cache_hits\x18\t \x01(\rR\tcacheHits\x12!\n" +
	"\fcache_misses\x18\n" +
	" \x01(\rR\vcacheMisses\x12\x1b\n" +
	"\thit_bytes\x18\v \x01(\x04R\bhitBytes\x12\x1d\n" +
	"\n" +
	"miss_bytes\x18\f \x01(\x04R\tmissBytes\"\xb4\x03\n" +
	"-CClientMetrics_ContentValidation_Notification\x12+\n" +
	"\x11validation_result\x18\x01 \x01(\x05R\x10validationResult\x12\x15\n" +
	"\x06app_id\x18\x02 \x01(\rR\x05appId\x12!\n" +
	"\fstaged_files\x18\x03 \x01(\bR\vstagedFiles\x12%\n" +
	"\x0euser_initiated\x18\x04 \x01(\bR\ruserInitiated\x12\x1b\n" +
	"\tearly_out\x18\x05 \x01(\bR\bearlyOut\x12%\n" +
	"\x0echunks_scanned\x18\x06 \x01(\rR\rchunksScanned\x12%\n" +
	"\x0echunks_corrupt\x18\a \x01(\rR\rchunksCorrupt\x12#\n" +
	"\rbytes_scanned\x18\b \x01(\x04R\fbytesScanned\x12.\n" +
	"\x13chunk_bytes_corrupt\x18\t \x01(\x04R\x11chunkBytesCorrupt\x125\n" +
	"\x17total_file_size_corrupt\x18\n" +
	" \x01(\x04R\x14totalFileSizeCorrupt\"\xc8\a\n" +
	"-CClientMetrics_CloudAppSyncStats_Notification\x12\x15\n" +
	"\x06app_id\x18\x01 \x01(\rR\x05appId\x12#\n" +
	"\rplatform_type\x18\x02 \x01(\rR\fplatformType\x12\x18\n" +
	"\apreload\x18\x03 \x01(\bR\apreload\x12.\n" +
	"\x13blocking_app_launch\x18\x04 \x01(\bR\x11blockingAppLaunch\x12%\n" +
	"\x0efiles_uploaded\x18\x05 \x01(\rR\rfilesUploaded\x12)\n" +
	"\x10files_downloaded\x18\x06 \x01(\rR\x0ffilesDownloaded\x12#\n" +
	"\rfiles_deleted\x18\a \x01(\rR\ffilesDeleted\x12%\n" +
	"\x0ebytes_uploaded\x18\b \x01(\x04R\rbytesUploaded\x12)\n" +
	"\x10bytes_downloaded\x18\t \x01(\x04R\x0fbytesDownloaded\x12%\n" +
	"\x0emicrosec_total\x18\n" +
	" \x01(\x04R\rmicrosecTotal\x120\n" +
	"\x14microsec_init_caches\x18\v \x01(\x04R\x12microsecInitCaches\x126\n" +
	"\x17microsec_validate_state\x18\f \x01(\x04R\x15microsecValidateState\x12,\n" +
	"\x12microsec_ac_launch\x18\r \x01(\x04R\x10microsecAcLaunch\x12<\n" +
	"\x1bmicrosec_ac_prep_user_files\x18\x0e \x01(\x04R\x17microsecAcPrepUserFiles\x12(\n" +
	"\x10microsec_ac_exit\x18\x0f \x01(\x04R\x0emicrosecAcExit\x127\n" +
	"\x18microsec_build_sync_list\x18\x10 \x01(\x04R\x15microsecBuildSyncList\x122\n" +
	"\x15microsec_delete_files\x18\x11 \x01(\x04R\x13microsecDeleteFiles\x126\n" +
	"\x17microsec_download_files\x18\x12 \x01(\x04R\x15microsecDownloadFiles\x122\n" +
	"\x15microsec_upload_files\x18\x13 \x01(\x04R\x13microsecUploadFiles\x12#\n" +
	"\rhardware_type\x18\x14 \x01(\rR\fhardwareType\x12#\n" +
	"\rfiles_managed\x18\x15 \x01(\rR\ffilesManaged\"\x98\x01\n" +
	":CClientMetrics_ContentDownloadResponse_Counts_Notification\x12\x17\n" +
	"\acell_id\x18\x01 \x01(\rR\x06cellId\x12A\n" +
	"\x04data\x18\x02 \x01(\v2-.CClientMetrics_ContentDownloadResponse_HostsR\x04data\"\xb9\x04\n" +
	",CClientMetrics_ReportClientArgs_Notification\x12\x1f\n" +
	"\vclient_args\x18\x01 \x03(\tR\n" +
	"clientArgs\x12=\n" +
	"\x1bgpu_webview_regkey_disabled\x18\x02 \x01(\bR\x18gpuWebviewRegkeyDisabled\x12.\n" +
	"\x13suppress_gpu_chrome\x18\x03 \x01(\bR\x11suppressGpuChrome\x122\n" +
	"\x15browser_not_supported\x18\x04 \x01(\bR\x13browserNotSupported\x12B\n" +
	"\x1ehw_accel_video_regkey_disabled\x18\x05 \x01(\bR\x1ahwAccelVideoRegkeyDisabled\x12*\n" +
	"\x11mini_mode_enabled\x18\x06 \x01(\bR\x0fminiModeEnabled\x12.\n" +
	"\x13fps_counter_enabled\x18\a \x01(\bR\x11fpsCounterEnabled\x12J\n" +
	"\"library_low_bandwidth_mode_enabled\x18\b \x01(\bR\x1elibraryLowBandwidthModeEnabled\x12@\n" +
	"\x1dlibrary_low_perf_mode_enabled\x18\t \x01(\bR\x19libraryLowPerfModeEnabled\x12\x17\n" +
	"\agr_mode\x18\n" +
	" \x01(\x05R\x06grMode\"\xa5\x02\n" +
	",CClientMetrics_ReportLinuxStats_Notification\x12.\n" +
	"\x13glibc_version_major\x18\x01 \x01(\x05R\x11glibcVersionMajor\x12.\n" +
	"\x13glibc_version_minor\x18\x02 \x01(\x05R\x11glibcVersionMinor\x12!\n" +
	"\faccount_type\x18\x03 \x01(\x05R\vaccountType\x12#\n" +
	"\rlauncher_type\x18\x04 \x01(\x05R\flauncherType\x12*\n" +
	"\x11game_server_appid\x18\x05 \x01(\x05R\x0fgameServerAppid\x12!\n" +
	"\fprocess_name\x18\x06 \x01(\tR\vprocessName\"\x9d\x03\n" +
	"7CClientMetrics_ReportAccessibilitySettings_Notification\x12C\n" +
	"\x1eaccessibility_desktop_ui_scale\x18\x01 \x01(\x02R\x1baccessibilityDesktopUiScale\x12M\n" +
	"#accessibility_screen_reader_enabled\x18\x02 \x01(\bR accessibilityScreenReaderEnabled\x12G\n" +
	" accessibility_high_contrast_mode\x18\x03 \x01(\bR\x1daccessibilityHighContrastMode\x12>\n" +
	"\x1baccessibility_reduce_motion\x18\x04 \x01(\bR\x19accessibilityReduceMotion\x12E\n" +
	"\x1faccessibility_color_filter_name\x18\x05 \x01(\tR\x1caccessibilityColorFilterName\"\xdb\x01\n" +
	"%CClientMetrics_ClipShare_Notification\x12\x1b\n" +
	"\aeresult\x18\x01 \x01(\r:\x012R\aeresult\x12M\n" +
	"\fshare_method\x18\x02 \x01(\x0e2\x11.EClipShareMethod:\x17k_EClipShareMethod_ChatR\vshareMethod\x12\x18\n" +
	"\aseconds\x18\x03 \x01(\x02R\aseconds\x12\x14\n" +
	"\x05bytes\x18\x04 \x01(\x04R\x05bytes\x12\x16\n" +
	"\x06gameid\x18\x05 \x01(\x06R\x06gameid\"\xe6\x04\n" +
	"%CClientMetrics_ClipRange_Notification\x12j\n" +
	"\x15original_range_method\x18\x01 \x01(\x0e2\x11.EClipRangeMethod:#k_EClipRangeMethod_CreateClipButtonR\x13originalRangeMethod\x12N\n" +
	"\x05start\x18\x02 \x01(\v28.CClientMetrics_ClipRange_Notification.RelativeRangeEdgeR\x05start\x12J\n" +
	"\x03end\x18\x03 \x01(\v28.CClientMetrics_ClipRange_Notification.RelativeRangeEdgeR\x03end\x12\x18\n" +
	"\aseconds\x18\x04 \x01(\x02R\aseconds\x12\x16\n" +
	"\x06gameid\x18\x05 \x01(\x06R\x06gameid\x1a\x82\x02\n" +
	"\x11RelativeRangeEdge\x12j\n" +
	"\x15original_range_method\x18\x01 \x01(\x0e2\x11.EClipRangeMethod:#k_EClipRangeMethod_CreateClipButtonR\x13originalRangeMethod\x12f\n" +
	"\x13latest_range_method\x18\x02 \x01(\x0e2\x11.EClipRangeMethod:#k_EClipRangeMethod_CreateClipButtonR\x11latestRangeMethod\x12\x19\n" +
	"\bdelta_ms\x18\x03 \x01(\x05R\adeltaMs\"\xf3\x01\n" +
	",CClientMetrics_EndGameRecording_Notification\x12X\n" +
	"\x0erecording_type\x18\x01 \x01(\x0e2\x13.EGameRecordingType:\x1ck_EGameRecordingType_UnknownR\rrecordingType\x12\x18\n" +
	"\aseconds\x18\x02 \x01(\x02R\aseconds\x12\x14\n" +
	"\x05bytes\x18\x03 \x01(\x04R\x05bytes\x12\x16\n" +
	"\x06gameid\x18\x04 \x01(\x06R\x06gameid\x12!\n" +
	"\finstant_clip\x18\x05 \x01(\bR\vinstantClip\"\xd1\x03\n" +
	"+CClientMetrics_GamePerformance_Notification\x12V\n" +
	"\areports\x18\x01 \x03(\v2<.CClientMetrics_GamePerformance_Notification.FrameRateReportR\areports\x1a\xc9\x02\n" +
	"\x0fFrameRateReport\x12\x16\n" +
	"\x06gameid\x18\x01 \x01(\x06R\x06gameid\x12\x1d\n" +
	"\n" +
	"frame_rate\x18\x02 \x01(\rR\tframeRate\x12\"\n" +
	"\fmanufacturer\x18\x03 \x01(\tR\fmanufacturer\x12\x14\n" +
	"\x05model\x18\x04 \x01(\tR\x05model\x12\"\n" +
	"\rdx_video_card\x18\x05 \x01(\tR\vdxVideoCard\x12\x1f\n" +
	"\vdx_vendorid\x18\x06 \x01(\x05R\n" +
	"dxVendorid\x12\x1f\n" +
	"\vdx_deviceid\x18\a \x01(\x05R\n" +
	"dxDeviceid\x12\x17\n" +
	"\anum_gpu\x18\b \x01(\rR\x06numGpu\x12\x1d\n" +
	"\n" +
	"system_ram\x18\t \x01(\x04R\tsystemRam\x12'\n" +
	"\x0fsession_seconds\x18\n" +
	" \x01(\x05R\x0esessionSeconds*q\n" +
	"\x12ESteamPipeWorkType\x12&\n" +
	"\"k_ESteamPipeClientWorkType_Invalid\x10\x00\x123\n" +
	"/k_ESteamPipeClientWorkType_StageFromChunkStores\x10\x01*\xbb\x01\n" +
	"\x17ESteamPipeOperationType\x12%\n" +
	"!k_ESteamPipeOperationType_Invalid\x10\x00\x12(\n" +
	"$k_ESteamPipeOperationType_DecryptCPU\x10\x01\x12&\n" +
	"\"k_ESteamPipeOperationType_DiskRead\x10\x02\x12'\n" +
	"#k_ESteamPipeOperationType_DiskWrite\x10\x03*\xd6\x01\n" +
	"\x10EClipShareMethod\x12\x1b\n" +
	"\x17k_EClipShareMethod_Chat\x10\x01\x12 \n" +
	"\x1ck_EClipShareMethod_Clipboard\x10\x02\x12\x1b\n" +
	"\x17k_EClipShareMethod_File\x10\x03\x12\x1f\n" +
	"\x1bk_EClipShareMethod_SendClip\x10\x04\x12\"\n" +
	"\x1ek_EClipShareMethod_SaveToMedia\x10\x05\x12!\n" +
	"\x1dk_EClipShareMethod_CreateLink\x10\x06*\x90\x02\n" +
	"\x10EClipRangeMethod\x12'\n" +
	"#k_EClipRangeMethod_CreateClipButton\x10\x01\x12 \n" +
	"\x1ck_EClipRangeMethod_Highlight\x10\x02\x12&\n" +
	"\"k_EClipRangeMethod_BeginEndButtons\x10\x03\x12\"\n" +
	"\x1ek_EClipRangeMethod_ContextMenu\x10\x04\x12\x1b\n" +
	"\x17k_EClipRangeMethod_Drag\x10\x05\x12!\n" +
	"\x1dk_EClipRangeMethod_EntireClip\x10\x06\x12%\n" +
	"!k_EClipRangeMethod_PhaseRecording\x10\a2\xd3\v\n" +
	"\rClientMetrics\x12\\\n" +
	"\x1dClientAppInterfaceStatsReport\x12..CClientMetrics_AppInterfaceStats_Notification\x1a\v.NoResponse\x12Z\n" +
	"\x1cClientIPv6ConnectivityReport\x12-.CClientMetrics_IPv6Connectivity_Notification\x1a\v.NoResponse\x12X\n" +
	"\x18SteamPipeWorkStatsReport\x12/.CClientMetrics_SteamPipeWorkStats_Notification\x1a\v.NoResponse\x12N\n" +
	"\x10ReportReactUsage\x12-.CClientMetrics_ReportReactUsage_Notification\x1a\v.NoResponse\x12P\n" +
	"\x11ReportClientError\x12..CClientMetrics_ReportClientError_Notification\x1a\v.NoResponse\x12R\n" +
	"\x15ClientBootstrapReport\x12,.CClientMetrics_ClientBootstrap_Notification\x1a\v.NoResponse\x12T\n" +
	"\x19ClientDownloadRatesReport\x12*.CClientMetrics_DownloadRates_Notification\x1a\v.NoResponse\x12\\\n" +
	"\x1dClientContentValidationReport\x12..CClientMetrics_ContentValidation_Notification\x1a\v.NoResponse\x12V\n" +
	"\x17ClientCloudAppSyncStats\x12..CClientMetrics_CloudAppSyncStats_Notification\x1a\v.NoResponse\x12l\n" +
	" ClientDownloadResponseCodeCounts\x12;.CClientMetrics_ContentDownloadResponse_Counts_Notification\x1a\v.NoResponse\x12N\n" +
	"\x10ReportClientArgs\x12-.CClientMetrics_ReportClientArgs_Notification\x1a\v.NoResponse\x12N\n" +
	"\x10ReportLinuxStats\x12-.CClientMetrics_ReportLinuxStats_Notification\x1a\v.NoResponse\x12d\n" +
	"\x1bReportAccessibilitySettings\x128.CClientMetrics_ReportAccessibilitySettings_Notification\x1a\v.NoResponse\x12F\n" +
	"\x0fReportClipShare\x12&.CClientMetrics_ClipShare_Notification\x1a\v.NoResponse\x12F\n" +
	"\x0fReportClipRange\x12&.CClientMetrics_ClipRange_Notification\x1a\v.NoResponse\x12T\n" +
	"\x16ReportEndGameRecording\x12-.CClientMetrics_EndGameRecording_Notification\x1a\v.NoResponse\x12R\n" +
	"\x15ReportGamePerformance\x12,.CClientMetrics_GamePerformance_Notification\x1a\v.NoResponseB\x03\x80\x01\x01"

var (
	file_steammessages_clientmetrics_steamclient_proto_rawDescOnce sync.Once
	file_steammessages_clientmetrics_steamclient_proto_rawDescData []byte
)

func file_steammessages_clientmetrics_steamclient_proto_rawDescGZIP() []byte {
	file_steammessages_clientmetrics_steamclient_proto_rawDescOnce.Do(func() {
		file_steammessages_clientmetrics_steamclient_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_steammessages_clientmetrics_steamclient_proto_rawDesc), len(file_steammessages_clientmetrics_steamclient_proto_rawDesc)))
	})
	return file_steammessages_clientmetrics_steamclient_proto_rawDescData
}

var file_steammessages_clientmetrics_steamclient_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_steammessages_clientmetrics_steamclient_proto_msgTypes = make([]protoimpl.MessageInfo, 28)
var file_steammessages_clientmetrics_steamclient_proto_goTypes = []any{
	(ESteamPipeWorkType)(0),                                             // 0: ESteamPipeWorkType
	(ESteamPipeOperationType)(0),                                        // 1: ESteamPipeOperationType
	(EClipShareMethod)(0),                                               // 2: EClipShareMethod
	(EClipRangeMethod)(0),                                               // 3: EClipRangeMethod
	(*CClientMetrics_AppInterfaceCreation)(nil),                         // 4: CClientMetrics_AppInterfaceCreation
	(*CClientMetrics_AppInterfaceMethodCounts)(nil),                     // 5: CClientMetrics_AppInterfaceMethodCounts
	(*CClientMetrics_AppInterfaceStats_Notification)(nil),               // 6: CClientMetrics_AppInterfaceStats_Notification
	(*CClientMetrics_IPv6Connectivity_Result)(nil),                      // 7: CClientMetrics_IPv6Connectivity_Result
	(*CClientMetrics_IPv6Connectivity_Notification)(nil),                // 8: CClientMetrics_IPv6Connectivity_Notification
	(*CClientMetrics_SteamPipeWorkStats_Operation)(nil),                 // 9: CClientMetrics_SteamPipeWorkStats_Operation
	(*CClientMetrics_SteamPipeWorkStats_Notification)(nil),              // 10: CClientMetrics_SteamPipeWorkStats_Notification
	(*CClientMetrics_ReportReactUsage_Notification)(nil),                // 11: CClientMetrics_ReportReactUsage_Notification
	(*CClientMetrics_ReportClientError_Notification)(nil),               // 12: CClientMetrics_ReportClientError_Notification
	(*CClientMetrics_ClientBootstrap_Notification)(nil),                 // 13: CClientMetrics_ClientBootstrap_Notification
	(*CClientMetrics_DownloadRates_Notification)(nil),                   // 14: CClientMetrics_DownloadRates_Notification
	(*CClientMetrics_ContentValidation_Notification)(nil),               // 15: CClientMetrics_ContentValidation_Notification
	(*CClientMetrics_CloudAppSyncStats_Notification)(nil),               // 16: CClientMetrics_CloudAppSyncStats_Notification
	(*CClientMetrics_ContentDownloadResponse_Counts_Notification)(nil),  // 17: CClientMetrics_ContentDownloadResponse_Counts_Notification
	(*CClientMetrics_ReportClientArgs_Notification)(nil),                // 18: CClientMetrics_ReportClientArgs_Notification
	(*CClientMetrics_ReportLinuxStats_Notification)(nil),                // 19: CClientMetrics_ReportLinuxStats_Notification
	(*CClientMetrics_ReportAccessibilitySettings_Notification)(nil),     // 20: CClientMetrics_ReportAccessibilitySettings_Notification
	(*CClientMetrics_ClipShare_Notification)(nil),                       // 21: CClientMetrics_ClipShare_Notification
	(*CClientMetrics_ClipRange_Notification)(nil),                       // 22: CClientMetrics_ClipRange_Notification
	(*CClientMetrics_EndGameRecording_Notification)(nil),                // 23: CClientMetrics_EndGameRecording_Notification
	(*CClientMetrics_GamePerformance_Notification)(nil),                 // 24: CClientMetrics_GamePerformance_Notification
	(*CClientMetrics_ReportReactUsage_Notification_RouteData)(nil),      // 25: CClientMetrics_ReportReactUsage_Notification.RouteData
	(*CClientMetrics_ReportReactUsage_Notification_ComponentData)(nil),  // 26: CClientMetrics_ReportReactUsage_Notification.ComponentData
	(*CClientMetrics_ReportReactUsage_Notification_ActionData)(nil),     // 27: CClientMetrics_ReportReactUsage_Notification.ActionData
	(*CClientMetrics_ReportClientError_Notification_Error)(nil),         // 28: CClientMetrics_ReportClientError_Notification.Error
	(*CClientMetrics_DownloadRates_Notification_StatsInfo)(nil),         // 29: CClientMetrics_DownloadRates_Notification.StatsInfo
	(*CClientMetrics_ClipRange_Notification_RelativeRangeEdge)(nil),     // 30: CClientMetrics_ClipRange_Notification.RelativeRangeEdge
	(*CClientMetrics_GamePerformance_Notification_FrameRateReport)(nil), // 31: CClientMetrics_GamePerformance_Notification.FrameRateReport
	(*CClientMetrics_ClientBootstrap_Summary)(nil),                      // 32: CClientMetrics_ClientBootstrap_Summary
	(*CClientMetrics_ContentDownloadResponse_Hosts)(nil),                // 33: CClientMetrics_ContentDownloadResponse_Hosts
	(EGameRecordingType)(0),                                             // 34: EGameRecordingType
	(*NoResponse)(nil),                                                  // 35: NoResponse
}
var file_steammessages_clientmetrics_steamclient_proto_depIdxs = []int32{
	4,  // 0: CClientMetrics_AppInterfaceStats_Notification.interfaces_created:type_name -> CClientMetrics_AppInterfaceCreation
	5,  // 1: CClientMetrics_AppInterfaceStats_Notification.methods_called:type_name -> CClientMetrics_AppInterfaceMethodCounts
	7,  // 2: CClientMetrics_IPv6Connectivity_Notification.results:type_name -> CClientMetrics_IPv6Connectivity_Result
	1,  // 3: CClientMetrics_SteamPipeWorkStats_Operation.type:type_name -> ESteamPipeOperationType
	0,  // 4: CClientMetrics_SteamPipeWorkStats_Notification.work_type:type_name -> ESteamPipeWorkType
	9,  // 5: CClientMetrics_SteamPipeWorkStats_Notification.operations:type_name -> CClientMetrics_SteamPipeWorkStats_Operation
	25, // 6: CClientMetrics_ReportReactUsage_Notification.routes:type_name -> CClientMetrics_ReportReactUsage_Notification.RouteData
	26, // 7: CClientMetrics_ReportReactUsage_Notification.components:type_name -> CClientMetrics_ReportReactUsage_Notification.ComponentData
	27, // 8: CClientMetrics_ReportReactUsage_Notification.actions:type_name -> CClientMetrics_ReportReactUsage_Notification.ActionData
	28, // 9: CClientMetrics_ReportClientError_Notification.errors:type_name -> CClientMetrics_ReportClientError_Notification.Error
	32, // 10: CClientMetrics_ClientBootstrap_Notification.summary:type_name -> CClientMetrics_ClientBootstrap_Summary
	29, // 11: CClientMetrics_DownloadRates_Notification.stats:type_name -> CClientMetrics_DownloadRates_Notification.StatsInfo
	33, // 12: CClientMetrics_ContentDownloadResponse_Counts_Notification.data:type_name -> CClientMetrics_ContentDownloadResponse_Hosts
	2,  // 13: CClientMetrics_ClipShare_Notification.share_method:type_name -> EClipShareMethod
	3,  // 14: CClientMetrics_ClipRange_Notification.original_range_method:type_name -> EClipRangeMethod
	30, // 15: CClientMetrics_ClipRange_Notification.start:type_name -> CClientMetrics_ClipRange_Notification.RelativeRangeEdge
	30, // 16: CClientMetrics_ClipRange_Notification.end:type_name -> CClientMetrics_ClipRange_Notification.RelativeRangeEdge
	34, // 17: CClientMetrics_EndGameRecording_Notification.recording_type:type_name -> EGameRecordingType
	31, // 18: CClientMetrics_GamePerformance_Notification.reports:type_name -> CClientMetrics_GamePerformance_Notification.FrameRateReport
	3,  // 19: CClientMetrics_ClipRange_Notification.RelativeRangeEdge.original_range_method:type_name -> EClipRangeMethod
	3,  // 20: CClientMetrics_ClipRange_Notification.RelativeRangeEdge.latest_range_method:type_name -> EClipRangeMethod
	6,  // 21: ClientMetrics.ClientAppInterfaceStatsReport:input_type -> CClientMetrics_AppInterfaceStats_Notification
	8,  // 22: ClientMetrics.ClientIPv6ConnectivityReport:input_type -> CClientMetrics_IPv6Connectivity_Notification
	10, // 23: ClientMetrics.SteamPipeWorkStatsReport:input_type -> CClientMetrics_SteamPipeWorkStats_Notification
	11, // 24: ClientMetrics.ReportReactUsage:input_type -> CClientMetrics_ReportReactUsage_Notification
	12, // 25: ClientMetrics.ReportClientError:input_type -> CClientMetrics_ReportClientError_Notification
	13, // 26: ClientMetrics.ClientBootstrapReport:input_type -> CClientMetrics_ClientBootstrap_Notification
	14, // 27: ClientMetrics.ClientDownloadRatesReport:input_type -> CClientMetrics_DownloadRates_Notification
	15, // 28: ClientMetrics.ClientContentValidationReport:input_type -> CClientMetrics_ContentValidation_Notification
	16, // 29: ClientMetrics.ClientCloudAppSyncStats:input_type -> CClientMetrics_CloudAppSyncStats_Notification
	17, // 30: ClientMetrics.ClientDownloadResponseCodeCounts:input_type -> CClientMetrics_ContentDownloadResponse_Counts_Notification
	18, // 31: ClientMetrics.ReportClientArgs:input_type -> CClientMetrics_ReportClientArgs_Notification
	19, // 32: ClientMetrics.ReportLinuxStats:input_type -> CClientMetrics_ReportLinuxStats_Notification
	20, // 33: ClientMetrics.ReportAccessibilitySettings:input_type -> CClientMetrics_ReportAccessibilitySettings_Notification
	21, // 34: ClientMetrics.ReportClipShare:input_type -> CClientMetrics_ClipShare_Notification
	22, // 35: ClientMetrics.ReportClipRange:input_type -> CClientMetrics_ClipRange_Notification
	23, // 36: ClientMetrics.ReportEndGameRecording:input_type -> CClientMetrics_EndGameRecording_Notification
	24, // 37: ClientMetrics.ReportGamePerformance:input_type -> CClientMetrics_GamePerformance_Notification
	35, // 38: ClientMetrics.ClientAppInterfaceStatsReport:output_type -> NoResponse
	35, // 39: ClientMetrics.ClientIPv6ConnectivityReport:output_type -> NoResponse
	35, // 40: ClientMetrics.SteamPipeWorkStatsReport:output_type -> NoResponse
	35, // 41: ClientMetrics.ReportReactUsage:output_type -> NoResponse
	35, // 42: ClientMetrics.ReportClientError:output_type -> NoResponse
	35, // 43: ClientMetrics.ClientBootstrapReport:output_type -> NoResponse
	35, // 44: ClientMetrics.ClientDownloadRatesReport:output_type -> NoResponse
	35, // 45: ClientMetrics.ClientContentValidationReport:output_type -> NoResponse
	35, // 46: ClientMetrics.ClientCloudAppSyncStats:output_type -> NoResponse
	35, // 47: ClientMetrics.ClientDownloadResponseCodeCounts:output_type -> NoResponse
	35, // 48: ClientMetrics.ReportClientArgs:output_type -> NoResponse
	35, // 49: ClientMetrics.ReportLinuxStats:output_type -> NoResponse
	35, // 50: ClientMetrics.ReportAccessibilitySettings:output_type -> NoResponse
	35, // 51: ClientMetrics.ReportClipShare:output_type -> NoResponse
	35, // 52: ClientMetrics.ReportClipRange:output_type -> NoResponse
	35, // 53: ClientMetrics.ReportEndGameRecording:output_type -> NoResponse
	35, // 54: ClientMetrics.ReportGamePerformance:output_type -> NoResponse
	38, // [38:55] is the sub-list for method output_type
	21, // [21:38] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_steammessages_clientmetrics_steamclient_proto_init() }
func file_steammessages_clientmetrics_steamclient_proto_init() {
	if File_steammessages_clientmetrics_steamclient_proto != nil {
		return
	}
	file_steammessages_base_proto_init()
	file_steammessages_unified_base_steamclient_proto_init()
	file_clientmetrics_proto_init()
	file_enums_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_steammessages_clientmetrics_steamclient_proto_rawDesc), len(file_steammessages_clientmetrics_steamclient_proto_rawDesc)),
			NumEnums:      4,
			NumMessages:   28,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_steammessages_clientmetrics_steamclient_proto_goTypes,
		DependencyIndexes: file_steammessages_clientmetrics_steamclient_proto_depIdxs,
		EnumInfos:         file_steammessages_clientmetrics_steamclient_proto_enumTypes,
		MessageInfos:      file_steammessages_clientmetrics_steamclient_proto_msgTypes,
	}.Build()
	File_steammessages_clientmetrics_steamclient_proto = out.File
	file_steammessages_clientmetrics_steamclient_proto_goTypes = nil
	file_steammessages_clientmetrics_steamclient_proto_depIdxs = nil
}
