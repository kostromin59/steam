// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v6.32.0
// source: steammessages_timedtrial.steamclient.proto

package steampb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CTimedTrial_GetTimeRemaining_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Appid         *uint32                `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CTimedTrial_GetTimeRemaining_Request) Reset() {
	*x = CTimedTrial_GetTimeRemaining_Request{}
	mi := &file_steammessages_timedtrial_steamclient_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CTimedTrial_GetTimeRemaining_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTimedTrial_GetTimeRemaining_Request) ProtoMessage() {}

func (x *CTimedTrial_GetTimeRemaining_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_timedtrial_steamclient_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTimedTrial_GetTimeRemaining_Request.ProtoReflect.Descriptor instead.
func (*CTimedTrial_GetTimeRemaining_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_timedtrial_steamclient_proto_rawDescGZIP(), []int{0}
}

func (x *CTimedTrial_GetTimeRemaining_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

type CTimedTrial_GetTimeRemaining_Response struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	SecondsPlayed  *uint32                `protobuf:"varint,1,opt,name=seconds_played,json=secondsPlayed" json:"seconds_played,omitempty"`
	SecondsAllowed *uint32                `protobuf:"varint,2,opt,name=seconds_allowed,json=secondsAllowed" json:"seconds_allowed,omitempty"`
	Packageid      *uint32                `protobuf:"varint,3,opt,name=packageid" json:"packageid,omitempty"`
	MastersubAppid *uint32                `protobuf:"varint,4,opt,name=mastersub_appid,json=mastersubAppid" json:"mastersub_appid,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CTimedTrial_GetTimeRemaining_Response) Reset() {
	*x = CTimedTrial_GetTimeRemaining_Response{}
	mi := &file_steammessages_timedtrial_steamclient_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CTimedTrial_GetTimeRemaining_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTimedTrial_GetTimeRemaining_Response) ProtoMessage() {}

func (x *CTimedTrial_GetTimeRemaining_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_timedtrial_steamclient_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTimedTrial_GetTimeRemaining_Response.ProtoReflect.Descriptor instead.
func (*CTimedTrial_GetTimeRemaining_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_timedtrial_steamclient_proto_rawDescGZIP(), []int{1}
}

func (x *CTimedTrial_GetTimeRemaining_Response) GetSecondsPlayed() uint32 {
	if x != nil && x.SecondsPlayed != nil {
		return *x.SecondsPlayed
	}
	return 0
}

func (x *CTimedTrial_GetTimeRemaining_Response) GetSecondsAllowed() uint32 {
	if x != nil && x.SecondsAllowed != nil {
		return *x.SecondsAllowed
	}
	return 0
}

func (x *CTimedTrial_GetTimeRemaining_Response) GetPackageid() uint32 {
	if x != nil && x.Packageid != nil {
		return *x.Packageid
	}
	return 0
}

func (x *CTimedTrial_GetTimeRemaining_Response) GetMastersubAppid() uint32 {
	if x != nil && x.MastersubAppid != nil {
		return *x.MastersubAppid
	}
	return 0
}

type CTimedTrial_RecordPlaytime_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Appid         *uint32                `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	SecondsPlayed *uint32                `protobuf:"varint,2,opt,name=seconds_played,json=secondsPlayed" json:"seconds_played,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CTimedTrial_RecordPlaytime_Request) Reset() {
	*x = CTimedTrial_RecordPlaytime_Request{}
	mi := &file_steammessages_timedtrial_steamclient_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CTimedTrial_RecordPlaytime_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTimedTrial_RecordPlaytime_Request) ProtoMessage() {}

func (x *CTimedTrial_RecordPlaytime_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_timedtrial_steamclient_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTimedTrial_RecordPlaytime_Request.ProtoReflect.Descriptor instead.
func (*CTimedTrial_RecordPlaytime_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_timedtrial_steamclient_proto_rawDescGZIP(), []int{2}
}

func (x *CTimedTrial_RecordPlaytime_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CTimedTrial_RecordPlaytime_Request) GetSecondsPlayed() uint32 {
	if x != nil && x.SecondsPlayed != nil {
		return *x.SecondsPlayed
	}
	return 0
}

type CTimedTrial_RecordPlaytime_Response struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	SecondsPlayed  *uint32                `protobuf:"varint,1,opt,name=seconds_played,json=secondsPlayed" json:"seconds_played,omitempty"`
	SecondsAllowed *uint32                `protobuf:"varint,2,opt,name=seconds_allowed,json=secondsAllowed" json:"seconds_allowed,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CTimedTrial_RecordPlaytime_Response) Reset() {
	*x = CTimedTrial_RecordPlaytime_Response{}
	mi := &file_steammessages_timedtrial_steamclient_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CTimedTrial_RecordPlaytime_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTimedTrial_RecordPlaytime_Response) ProtoMessage() {}

func (x *CTimedTrial_RecordPlaytime_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_timedtrial_steamclient_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTimedTrial_RecordPlaytime_Response.ProtoReflect.Descriptor instead.
func (*CTimedTrial_RecordPlaytime_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_timedtrial_steamclient_proto_rawDescGZIP(), []int{3}
}

func (x *CTimedTrial_RecordPlaytime_Response) GetSecondsPlayed() uint32 {
	if x != nil && x.SecondsPlayed != nil {
		return *x.SecondsPlayed
	}
	return 0
}

func (x *CTimedTrial_RecordPlaytime_Response) GetSecondsAllowed() uint32 {
	if x != nil && x.SecondsAllowed != nil {
		return *x.SecondsAllowed
	}
	return 0
}

type CTimedTrial_ResetPlaytime_Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Appid         *uint32                `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CTimedTrial_ResetPlaytime_Request) Reset() {
	*x = CTimedTrial_ResetPlaytime_Request{}
	mi := &file_steammessages_timedtrial_steamclient_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CTimedTrial_ResetPlaytime_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTimedTrial_ResetPlaytime_Request) ProtoMessage() {}

func (x *CTimedTrial_ResetPlaytime_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_timedtrial_steamclient_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTimedTrial_ResetPlaytime_Request.ProtoReflect.Descriptor instead.
func (*CTimedTrial_ResetPlaytime_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_timedtrial_steamclient_proto_rawDescGZIP(), []int{4}
}

func (x *CTimedTrial_ResetPlaytime_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

type CTimedTrial_ResetPlaytime_Response struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	SecondsPlayed  *uint32                `protobuf:"varint,1,opt,name=seconds_played,json=secondsPlayed" json:"seconds_played,omitempty"`
	SecondsAllowed *uint32                `protobuf:"varint,2,opt,name=seconds_allowed,json=secondsAllowed" json:"seconds_allowed,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CTimedTrial_ResetPlaytime_Response) Reset() {
	*x = CTimedTrial_ResetPlaytime_Response{}
	mi := &file_steammessages_timedtrial_steamclient_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CTimedTrial_ResetPlaytime_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTimedTrial_ResetPlaytime_Response) ProtoMessage() {}

func (x *CTimedTrial_ResetPlaytime_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_timedtrial_steamclient_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTimedTrial_ResetPlaytime_Response.ProtoReflect.Descriptor instead.
func (*CTimedTrial_ResetPlaytime_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_timedtrial_steamclient_proto_rawDescGZIP(), []int{5}
}

func (x *CTimedTrial_ResetPlaytime_Response) GetSecondsPlayed() uint32 {
	if x != nil && x.SecondsPlayed != nil {
		return *x.SecondsPlayed
	}
	return 0
}

func (x *CTimedTrial_ResetPlaytime_Response) GetSecondsAllowed() uint32 {
	if x != nil && x.SecondsAllowed != nil {
		return *x.SecondsAllowed
	}
	return 0
}

var File_steammessages_timedtrial_steamclient_proto protoreflect.FileDescriptor

const file_steammessages_timedtrial_steamclient_proto_rawDesc = "" +
	"\n" +
	"*steammessages_timedtrial.steamclient.proto\x1a\x18steammessages_base.proto\x1a,steammessages_unified_base.steamclient.proto\"<\n" +
	"$CTimedTrial_GetTimeRemaining_Request\x12\x14\n" +
	"\x05appid\x18\x01 \x01(\rR\x05appid\"\xbe\x01\n" +
	"%CTimedTrial_GetTimeRemaining_Response\x12%\n" +
	"\x0eseconds_played\x18\x01 \x01(\rR\rsecondsPlayed\x12'\n" +
	"\x0fseconds_allowed\x18\x02 \x01(\rR\x0esecondsAllowed\x12\x1c\n" +
	"\tpackageid\x18\x03 \x01(\rR\tpackageid\x12'\n" +
	"\x0fmastersub_appid\x18\x04 \x01(\rR\x0emastersubAppid\"a\n" +
	"\"CTimedTrial_RecordPlaytime_Request\x12\x14\n" +
	"\x05appid\x18\x01 \x01(\rR\x05appid\x12%\n" +
	"\x0eseconds_played\x18\x02 \x01(\rR\rsecondsPlayed\"u\n" +
	"#CTimedTrial_RecordPlaytime_Response\x12%\n" +
	"\x0eseconds_played\x18\x01 \x01(\rR\rsecondsPlayed\x12'\n" +
	"\x0fseconds_allowed\x18\x02 \x01(\rR\x0esecondsAllowed\"9\n" +
	"!CTimedTrial_ResetPlaytime_Request\x12\x14\n" +
	"\x05appid\x18\x01 \x01(\rR\x05appid\"t\n" +
	"\"CTimedTrial_ResetPlaytime_Response\x12%\n" +
	"\x0eseconds_played\x18\x01 \x01(\rR\rsecondsPlayed\x12'\n" +
	"\x0fseconds_allowed\x18\x02 \x01(\rR\x0esecondsAllowed2\xa6\x02\n" +
	"\n" +
	"TimedTrial\x12a\n" +
	"\x10GetTimeRemaining\x12%.CTimedTrial_GetTimeRemaining_Request\x1a&.CTimedTrial_GetTimeRemaining_Response\x12[\n" +
	"\x0eRecordPlaytime\x12#.CTimedTrial_RecordPlaytime_Request\x1a$.CTimedTrial_RecordPlaytime_Response\x12X\n" +
	"\rResetPlaytime\x12\".CTimedTrial_ResetPlaytime_Request\x1a#.CTimedTrial_ResetPlaytime_ResponseB\x03\x80\x01\x01"

var (
	file_steammessages_timedtrial_steamclient_proto_rawDescOnce sync.Once
	file_steammessages_timedtrial_steamclient_proto_rawDescData []byte
)

func file_steammessages_timedtrial_steamclient_proto_rawDescGZIP() []byte {
	file_steammessages_timedtrial_steamclient_proto_rawDescOnce.Do(func() {
		file_steammessages_timedtrial_steamclient_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_steammessages_timedtrial_steamclient_proto_rawDesc), len(file_steammessages_timedtrial_steamclient_proto_rawDesc)))
	})
	return file_steammessages_timedtrial_steamclient_proto_rawDescData
}

var file_steammessages_timedtrial_steamclient_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_steammessages_timedtrial_steamclient_proto_goTypes = []any{
	(*CTimedTrial_GetTimeRemaining_Request)(nil),  // 0: CTimedTrial_GetTimeRemaining_Request
	(*CTimedTrial_GetTimeRemaining_Response)(nil), // 1: CTimedTrial_GetTimeRemaining_Response
	(*CTimedTrial_RecordPlaytime_Request)(nil),    // 2: CTimedTrial_RecordPlaytime_Request
	(*CTimedTrial_RecordPlaytime_Response)(nil),   // 3: CTimedTrial_RecordPlaytime_Response
	(*CTimedTrial_ResetPlaytime_Request)(nil),     // 4: CTimedTrial_ResetPlaytime_Request
	(*CTimedTrial_ResetPlaytime_Response)(nil),    // 5: CTimedTrial_ResetPlaytime_Response
}
var file_steammessages_timedtrial_steamclient_proto_depIdxs = []int32{
	0, // 0: TimedTrial.GetTimeRemaining:input_type -> CTimedTrial_GetTimeRemaining_Request
	2, // 1: TimedTrial.RecordPlaytime:input_type -> CTimedTrial_RecordPlaytime_Request
	4, // 2: TimedTrial.ResetPlaytime:input_type -> CTimedTrial_ResetPlaytime_Request
	1, // 3: TimedTrial.GetTimeRemaining:output_type -> CTimedTrial_GetTimeRemaining_Response
	3, // 4: TimedTrial.RecordPlaytime:output_type -> CTimedTrial_RecordPlaytime_Response
	5, // 5: TimedTrial.ResetPlaytime:output_type -> CTimedTrial_ResetPlaytime_Response
	3, // [3:6] is the sub-list for method output_type
	0, // [0:3] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_steammessages_timedtrial_steamclient_proto_init() }
func file_steammessages_timedtrial_steamclient_proto_init() {
	if File_steammessages_timedtrial_steamclient_proto != nil {
		return
	}
	file_steammessages_base_proto_init()
	file_steammessages_unified_base_steamclient_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_steammessages_timedtrial_steamclient_proto_rawDesc), len(file_steammessages_timedtrial_steamclient_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_steammessages_timedtrial_steamclient_proto_goTypes,
		DependencyIndexes: file_steammessages_timedtrial_steamclient_proto_depIdxs,
		MessageInfos:      file_steammessages_timedtrial_steamclient_proto_msgTypes,
	}.Build()
	File_steammessages_timedtrial_steamclient_proto = out.File
	file_steammessages_timedtrial_steamclient_proto_goTypes = nil
	file_steammessages_timedtrial_steamclient_proto_depIdxs = nil
}
