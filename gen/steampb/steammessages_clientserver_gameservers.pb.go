// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v6.32.0
// source: steammessages_clientserver_gameservers.proto

package steampb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CMsgGMSClientServerQueryResponse_EFlags int32

const (
	CMsgGMSClientServerQueryResponse_k_EFlag_HasPassword CMsgGMSClientServerQueryResponse_EFlags = 1
	CMsgGMSClientServerQueryResponse_k_EFlag_Secure      CMsgGMSClientServerQueryResponse_EFlags = 2
)

// Enum value maps for CMsgGMSClientServerQueryResponse_EFlags.
var (
	CMsgGMSClientServerQueryResponse_EFlags_name = map[int32]string{
		1: "k_EFlag_HasPassword",
		2: "k_EFlag_Secure",
	}
	CMsgGMSClientServerQueryResponse_EFlags_value = map[string]int32{
		"k_EFlag_HasPassword": 1,
		"k_EFlag_Secure":      2,
	}
)

func (x CMsgGMSClientServerQueryResponse_EFlags) Enum() *CMsgGMSClientServerQueryResponse_EFlags {
	p := new(CMsgGMSClientServerQueryResponse_EFlags)
	*p = x
	return p
}

func (x CMsgGMSClientServerQueryResponse_EFlags) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMsgGMSClientServerQueryResponse_EFlags) Descriptor() protoreflect.EnumDescriptor {
	return file_steammessages_clientserver_gameservers_proto_enumTypes[0].Descriptor()
}

func (CMsgGMSClientServerQueryResponse_EFlags) Type() protoreflect.EnumType {
	return &file_steammessages_clientserver_gameservers_proto_enumTypes[0]
}

func (x CMsgGMSClientServerQueryResponse_EFlags) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMsgGMSClientServerQueryResponse_EFlags) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMsgGMSClientServerQueryResponse_EFlags(num)
	return nil
}

// Deprecated: Use CMsgGMSClientServerQueryResponse_EFlags.Descriptor instead.
func (CMsgGMSClientServerQueryResponse_EFlags) EnumDescriptor() ([]byte, []int) {
	return file_steammessages_clientserver_gameservers_proto_rawDescGZIP(), []int{8, 0}
}

type CMsgGSServerType struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	AppIdServed             *uint32                `protobuf:"varint,1,opt,name=app_id_served,json=appIdServed" json:"app_id_served,omitempty"`
	Flags                   *uint32                `protobuf:"varint,2,opt,name=flags" json:"flags,omitempty"`
	DeprecatedGameIpAddress *uint32                `protobuf:"varint,3,opt,name=deprecated_game_ip_address,json=deprecatedGameIpAddress" json:"deprecated_game_ip_address,omitempty"`
	GamePort                *uint32                `protobuf:"varint,4,opt,name=game_port,json=gamePort" json:"game_port,omitempty"`
	GameDir                 *string                `protobuf:"bytes,5,opt,name=game_dir,json=gameDir" json:"game_dir,omitempty"`
	GameVersion             *string                `protobuf:"bytes,6,opt,name=game_version,json=gameVersion" json:"game_version,omitempty"`
	GameQueryPort           *uint32                `protobuf:"varint,7,opt,name=game_query_port,json=gameQueryPort" json:"game_query_port,omitempty"`
	GamePortLocal           *uint32                `protobuf:"varint,10,opt,name=game_port_local,json=gamePortLocal" json:"game_port_local,omitempty"`
	SdrLogon                []byte                 `protobuf:"bytes,8,opt,name=sdr_logon,json=sdrLogon" json:"sdr_logon,omitempty"`
	FakeIp                  *uint32                `protobuf:"fixed32,9,opt,name=fake_ip,json=fakeIp" json:"fake_ip,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *CMsgGSServerType) Reset() {
	*x = CMsgGSServerType{}
	mi := &file_steammessages_clientserver_gameservers_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGSServerType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGSServerType) ProtoMessage() {}

func (x *CMsgGSServerType) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientserver_gameservers_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGSServerType.ProtoReflect.Descriptor instead.
func (*CMsgGSServerType) Descriptor() ([]byte, []int) {
	return file_steammessages_clientserver_gameservers_proto_rawDescGZIP(), []int{0}
}

func (x *CMsgGSServerType) GetAppIdServed() uint32 {
	if x != nil && x.AppIdServed != nil {
		return *x.AppIdServed
	}
	return 0
}

func (x *CMsgGSServerType) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

func (x *CMsgGSServerType) GetDeprecatedGameIpAddress() uint32 {
	if x != nil && x.DeprecatedGameIpAddress != nil {
		return *x.DeprecatedGameIpAddress
	}
	return 0
}

func (x *CMsgGSServerType) GetGamePort() uint32 {
	if x != nil && x.GamePort != nil {
		return *x.GamePort
	}
	return 0
}

func (x *CMsgGSServerType) GetGameDir() string {
	if x != nil && x.GameDir != nil {
		return *x.GameDir
	}
	return ""
}

func (x *CMsgGSServerType) GetGameVersion() string {
	if x != nil && x.GameVersion != nil {
		return *x.GameVersion
	}
	return ""
}

func (x *CMsgGSServerType) GetGameQueryPort() uint32 {
	if x != nil && x.GameQueryPort != nil {
		return *x.GameQueryPort
	}
	return 0
}

func (x *CMsgGSServerType) GetGamePortLocal() uint32 {
	if x != nil && x.GamePortLocal != nil {
		return *x.GamePortLocal
	}
	return 0
}

func (x *CMsgGSServerType) GetSdrLogon() []byte {
	if x != nil {
		return x.SdrLogon
	}
	return nil
}

func (x *CMsgGSServerType) GetFakeIp() uint32 {
	if x != nil && x.FakeIp != nil {
		return *x.FakeIp
	}
	return 0
}

type CMsgGSStatusReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IsSecure      *bool                  `protobuf:"varint,1,opt,name=is_secure,json=isSecure" json:"is_secure,omitempty"`
	IsValveds     *bool                  `protobuf:"varint,2,opt,name=is_valveds,json=isValveds" json:"is_valveds,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGSStatusReply) Reset() {
	*x = CMsgGSStatusReply{}
	mi := &file_steammessages_clientserver_gameservers_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGSStatusReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGSStatusReply) ProtoMessage() {}

func (x *CMsgGSStatusReply) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientserver_gameservers_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGSStatusReply.ProtoReflect.Descriptor instead.
func (*CMsgGSStatusReply) Descriptor() ([]byte, []int) {
	return file_steammessages_clientserver_gameservers_proto_rawDescGZIP(), []int{1}
}

func (x *CMsgGSStatusReply) GetIsSecure() bool {
	if x != nil && x.IsSecure != nil {
		return *x.IsSecure
	}
	return false
}

func (x *CMsgGSStatusReply) GetIsValveds() bool {
	if x != nil && x.IsValveds != nil {
		return *x.IsValveds
	}
	return false
}

type CMsgGSPlayerList struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	Players       []*CMsgGSPlayerList_Player `protobuf:"bytes,1,rep,name=players" json:"players,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGSPlayerList) Reset() {
	*x = CMsgGSPlayerList{}
	mi := &file_steammessages_clientserver_gameservers_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGSPlayerList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGSPlayerList) ProtoMessage() {}

func (x *CMsgGSPlayerList) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientserver_gameservers_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGSPlayerList.ProtoReflect.Descriptor instead.
func (*CMsgGSPlayerList) Descriptor() ([]byte, []int) {
	return file_steammessages_clientserver_gameservers_proto_rawDescGZIP(), []int{2}
}

func (x *CMsgGSPlayerList) GetPlayers() []*CMsgGSPlayerList_Player {
	if x != nil {
		return x.Players
	}
	return nil
}

type CMsgGSUserPlaying struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	SteamId            *uint64                `protobuf:"fixed64,1,opt,name=steam_id,json=steamId" json:"steam_id,omitempty"`
	DeprecatedPublicIp *uint32                `protobuf:"varint,2,opt,name=deprecated_public_ip,json=deprecatedPublicIp" json:"deprecated_public_ip,omitempty"`
	Token              []byte                 `protobuf:"bytes,3,opt,name=token" json:"token,omitempty"`
	PublicIp           *CMsgIPAddress         `protobuf:"bytes,4,opt,name=public_ip,json=publicIp" json:"public_ip,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *CMsgGSUserPlaying) Reset() {
	*x = CMsgGSUserPlaying{}
	mi := &file_steammessages_clientserver_gameservers_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGSUserPlaying) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGSUserPlaying) ProtoMessage() {}

func (x *CMsgGSUserPlaying) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientserver_gameservers_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGSUserPlaying.ProtoReflect.Descriptor instead.
func (*CMsgGSUserPlaying) Descriptor() ([]byte, []int) {
	return file_steammessages_clientserver_gameservers_proto_rawDescGZIP(), []int{3}
}

func (x *CMsgGSUserPlaying) GetSteamId() uint64 {
	if x != nil && x.SteamId != nil {
		return *x.SteamId
	}
	return 0
}

func (x *CMsgGSUserPlaying) GetDeprecatedPublicIp() uint32 {
	if x != nil && x.DeprecatedPublicIp != nil {
		return *x.DeprecatedPublicIp
	}
	return 0
}

func (x *CMsgGSUserPlaying) GetToken() []byte {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *CMsgGSUserPlaying) GetPublicIp() *CMsgIPAddress {
	if x != nil {
		return x.PublicIp
	}
	return nil
}

type CMsgGSDisconnectNotice struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SteamId       *uint64                `protobuf:"fixed64,1,opt,name=steam_id,json=steamId" json:"steam_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGSDisconnectNotice) Reset() {
	*x = CMsgGSDisconnectNotice{}
	mi := &file_steammessages_clientserver_gameservers_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGSDisconnectNotice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGSDisconnectNotice) ProtoMessage() {}

func (x *CMsgGSDisconnectNotice) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientserver_gameservers_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGSDisconnectNotice.ProtoReflect.Descriptor instead.
func (*CMsgGSDisconnectNotice) Descriptor() ([]byte, []int) {
	return file_steammessages_clientserver_gameservers_proto_rawDescGZIP(), []int{4}
}

func (x *CMsgGSDisconnectNotice) GetSteamId() uint64 {
	if x != nil && x.SteamId != nil {
		return *x.SteamId
	}
	return 0
}

type CMsgGameServerData struct {
	state               protoimpl.MessageState       `protogen:"open.v1"`
	Revision            *uint32                      `protobuf:"varint,24,opt,name=revision" json:"revision,omitempty"`
	QueryPort           *uint32                      `protobuf:"varint,3,opt,name=query_port,json=queryPort" json:"query_port,omitempty"`
	GamePort            *uint32                      `protobuf:"varint,4,opt,name=game_port,json=gamePort" json:"game_port,omitempty"`
	SpectatorPort       *uint32                      `protobuf:"varint,5,opt,name=spectator_port,json=spectatorPort" json:"spectator_port,omitempty"`
	ServerName          *string                      `protobuf:"bytes,22,opt,name=server_name,json=serverName" json:"server_name,omitempty"`
	GameDescription     *string                      `protobuf:"bytes,29,opt,name=game_description,json=gameDescription" json:"game_description,omitempty"`
	SpectatorServerName *string                      `protobuf:"bytes,27,opt,name=spectator_server_name,json=spectatorServerName" json:"spectator_server_name,omitempty"`
	FakeIp              *uint32                      `protobuf:"fixed32,28,opt,name=fake_ip,json=fakeIp" json:"fake_ip,omitempty"`
	SdrPingLocation     *string                      `protobuf:"bytes,30,opt,name=sdr_ping_location,json=sdrPingLocation" json:"sdr_ping_location,omitempty"`
	AppId               *uint32                      `protobuf:"varint,6,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	Gamedir             *string                      `protobuf:"bytes,7,opt,name=gamedir" json:"gamedir,omitempty"`
	Version             *string                      `protobuf:"bytes,8,opt,name=version" json:"version,omitempty"`
	Product             *string                      `protobuf:"bytes,9,opt,name=product" json:"product,omitempty"`
	Region              *string                      `protobuf:"bytes,10,opt,name=region" json:"region,omitempty"`
	Players             []*CMsgGameServerData_Player `protobuf:"bytes,11,rep,name=players" json:"players,omitempty"`
	MaxPlayers          *uint32                      `protobuf:"varint,12,opt,name=max_players,json=maxPlayers" json:"max_players,omitempty"`
	BotCount            *uint32                      `protobuf:"varint,13,opt,name=bot_count,json=botCount" json:"bot_count,omitempty"`
	Password            *bool                        `protobuf:"varint,14,opt,name=password" json:"password,omitempty"`
	Secure              *bool                        `protobuf:"varint,15,opt,name=secure" json:"secure,omitempty"`
	Dedicated           *bool                        `protobuf:"varint,16,opt,name=dedicated" json:"dedicated,omitempty"`
	Os                  *string                      `protobuf:"bytes,17,opt,name=os" json:"os,omitempty"`
	GameData            *string                      `protobuf:"bytes,18,opt,name=game_data,json=gameData" json:"game_data,omitempty"`
	GameType            *string                      `protobuf:"bytes,20,opt,name=game_type,json=gameType" json:"game_type,omitempty"`
	Map                 *string                      `protobuf:"bytes,21,opt,name=map" json:"map,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *CMsgGameServerData) Reset() {
	*x = CMsgGameServerData{}
	mi := &file_steammessages_clientserver_gameservers_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGameServerData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGameServerData) ProtoMessage() {}

func (x *CMsgGameServerData) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientserver_gameservers_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGameServerData.ProtoReflect.Descriptor instead.
func (*CMsgGameServerData) Descriptor() ([]byte, []int) {
	return file_steammessages_clientserver_gameservers_proto_rawDescGZIP(), []int{5}
}

func (x *CMsgGameServerData) GetRevision() uint32 {
	if x != nil && x.Revision != nil {
		return *x.Revision
	}
	return 0
}

func (x *CMsgGameServerData) GetQueryPort() uint32 {
	if x != nil && x.QueryPort != nil {
		return *x.QueryPort
	}
	return 0
}

func (x *CMsgGameServerData) GetGamePort() uint32 {
	if x != nil && x.GamePort != nil {
		return *x.GamePort
	}
	return 0
}

func (x *CMsgGameServerData) GetSpectatorPort() uint32 {
	if x != nil && x.SpectatorPort != nil {
		return *x.SpectatorPort
	}
	return 0
}

func (x *CMsgGameServerData) GetServerName() string {
	if x != nil && x.ServerName != nil {
		return *x.ServerName
	}
	return ""
}

func (x *CMsgGameServerData) GetGameDescription() string {
	if x != nil && x.GameDescription != nil {
		return *x.GameDescription
	}
	return ""
}

func (x *CMsgGameServerData) GetSpectatorServerName() string {
	if x != nil && x.SpectatorServerName != nil {
		return *x.SpectatorServerName
	}
	return ""
}

func (x *CMsgGameServerData) GetFakeIp() uint32 {
	if x != nil && x.FakeIp != nil {
		return *x.FakeIp
	}
	return 0
}

func (x *CMsgGameServerData) GetSdrPingLocation() string {
	if x != nil && x.SdrPingLocation != nil {
		return *x.SdrPingLocation
	}
	return ""
}

func (x *CMsgGameServerData) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CMsgGameServerData) GetGamedir() string {
	if x != nil && x.Gamedir != nil {
		return *x.Gamedir
	}
	return ""
}

func (x *CMsgGameServerData) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

func (x *CMsgGameServerData) GetProduct() string {
	if x != nil && x.Product != nil {
		return *x.Product
	}
	return ""
}

func (x *CMsgGameServerData) GetRegion() string {
	if x != nil && x.Region != nil {
		return *x.Region
	}
	return ""
}

func (x *CMsgGameServerData) GetPlayers() []*CMsgGameServerData_Player {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *CMsgGameServerData) GetMaxPlayers() uint32 {
	if x != nil && x.MaxPlayers != nil {
		return *x.MaxPlayers
	}
	return 0
}

func (x *CMsgGameServerData) GetBotCount() uint32 {
	if x != nil && x.BotCount != nil {
		return *x.BotCount
	}
	return 0
}

func (x *CMsgGameServerData) GetPassword() bool {
	if x != nil && x.Password != nil {
		return *x.Password
	}
	return false
}

func (x *CMsgGameServerData) GetSecure() bool {
	if x != nil && x.Secure != nil {
		return *x.Secure
	}
	return false
}

func (x *CMsgGameServerData) GetDedicated() bool {
	if x != nil && x.Dedicated != nil {
		return *x.Dedicated
	}
	return false
}

func (x *CMsgGameServerData) GetOs() string {
	if x != nil && x.Os != nil {
		return *x.Os
	}
	return ""
}

func (x *CMsgGameServerData) GetGameData() string {
	if x != nil && x.GameData != nil {
		return *x.GameData
	}
	return ""
}

func (x *CMsgGameServerData) GetGameType() string {
	if x != nil && x.GameType != nil {
		return *x.GameType
	}
	return ""
}

func (x *CMsgGameServerData) GetMap() string {
	if x != nil && x.Map != nil {
		return *x.Map
	}
	return ""
}

type CMsgGameServerRemove struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	LegacySteamIdGs *uint64                `protobuf:"fixed64,1,opt,name=legacy_steam_id_gs,json=legacySteamIdGs" json:"legacy_steam_id_gs,omitempty"`
	LegacyQueryPort *uint32                `protobuf:"varint,3,opt,name=legacy_query_port,json=legacyQueryPort" json:"legacy_query_port,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CMsgGameServerRemove) Reset() {
	*x = CMsgGameServerRemove{}
	mi := &file_steammessages_clientserver_gameservers_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGameServerRemove) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGameServerRemove) ProtoMessage() {}

func (x *CMsgGameServerRemove) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientserver_gameservers_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGameServerRemove.ProtoReflect.Descriptor instead.
func (*CMsgGameServerRemove) Descriptor() ([]byte, []int) {
	return file_steammessages_clientserver_gameservers_proto_rawDescGZIP(), []int{6}
}

func (x *CMsgGameServerRemove) GetLegacySteamIdGs() uint64 {
	if x != nil && x.LegacySteamIdGs != nil {
		return *x.LegacySteamIdGs
	}
	return 0
}

func (x *CMsgGameServerRemove) GetLegacyQueryPort() uint32 {
	if x != nil && x.LegacyQueryPort != nil {
		return *x.LegacyQueryPort
	}
	return 0
}

type CMsgClientGMSServerQuery struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	AppId           *uint32                `protobuf:"varint,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	GeoLocationIp   *uint32                `protobuf:"varint,2,opt,name=geo_location_ip,json=geoLocationIp" json:"geo_location_ip,omitempty"`
	RegionCode      *uint32                `protobuf:"varint,3,opt,name=region_code,json=regionCode" json:"region_code,omitempty"`
	FilterText      *string                `protobuf:"bytes,4,opt,name=filter_text,json=filterText" json:"filter_text,omitempty"`
	MaxServers      *uint32                `protobuf:"varint,5,opt,name=max_servers,json=maxServers" json:"max_servers,omitempty"`
	SdrPingLocation *string                `protobuf:"bytes,6,opt,name=sdr_ping_location,json=sdrPingLocation" json:"sdr_ping_location,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CMsgClientGMSServerQuery) Reset() {
	*x = CMsgClientGMSServerQuery{}
	mi := &file_steammessages_clientserver_gameservers_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientGMSServerQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientGMSServerQuery) ProtoMessage() {}

func (x *CMsgClientGMSServerQuery) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientserver_gameservers_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientGMSServerQuery.ProtoReflect.Descriptor instead.
func (*CMsgClientGMSServerQuery) Descriptor() ([]byte, []int) {
	return file_steammessages_clientserver_gameservers_proto_rawDescGZIP(), []int{7}
}

func (x *CMsgClientGMSServerQuery) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CMsgClientGMSServerQuery) GetGeoLocationIp() uint32 {
	if x != nil && x.GeoLocationIp != nil {
		return *x.GeoLocationIp
	}
	return 0
}

func (x *CMsgClientGMSServerQuery) GetRegionCode() uint32 {
	if x != nil && x.RegionCode != nil {
		return *x.RegionCode
	}
	return 0
}

func (x *CMsgClientGMSServerQuery) GetFilterText() string {
	if x != nil && x.FilterText != nil {
		return *x.FilterText
	}
	return ""
}

func (x *CMsgClientGMSServerQuery) GetMaxServers() uint32 {
	if x != nil && x.MaxServers != nil {
		return *x.MaxServers
	}
	return 0
}

func (x *CMsgClientGMSServerQuery) GetSdrPingLocation() string {
	if x != nil && x.SdrPingLocation != nil {
		return *x.SdrPingLocation
	}
	return ""
}

type CMsgGMSClientServerQueryResponse struct {
	state             protoimpl.MessageState                     `protogen:"open.v1"`
	Servers           []*CMsgGMSClientServerQueryResponse_Server `protobuf:"bytes,1,rep,name=servers" json:"servers,omitempty"`
	Error             *string                                    `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	DefaultServerData *CMsgGMSClientServerQueryResponse_Server   `protobuf:"bytes,3,opt,name=default_server_data,json=defaultServerData" json:"default_server_data,omitempty"`
	ServerStrings     []string                                   `protobuf:"bytes,4,rep,name=server_strings,json=serverStrings" json:"server_strings,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *CMsgGMSClientServerQueryResponse) Reset() {
	*x = CMsgGMSClientServerQueryResponse{}
	mi := &file_steammessages_clientserver_gameservers_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGMSClientServerQueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGMSClientServerQueryResponse) ProtoMessage() {}

func (x *CMsgGMSClientServerQueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientserver_gameservers_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGMSClientServerQueryResponse.ProtoReflect.Descriptor instead.
func (*CMsgGMSClientServerQueryResponse) Descriptor() ([]byte, []int) {
	return file_steammessages_clientserver_gameservers_proto_rawDescGZIP(), []int{8}
}

func (x *CMsgGMSClientServerQueryResponse) GetServers() []*CMsgGMSClientServerQueryResponse_Server {
	if x != nil {
		return x.Servers
	}
	return nil
}

func (x *CMsgGMSClientServerQueryResponse) GetError() string {
	if x != nil && x.Error != nil {
		return *x.Error
	}
	return ""
}

func (x *CMsgGMSClientServerQueryResponse) GetDefaultServerData() *CMsgGMSClientServerQueryResponse_Server {
	if x != nil {
		return x.DefaultServerData
	}
	return nil
}

func (x *CMsgGMSClientServerQueryResponse) GetServerStrings() []string {
	if x != nil {
		return x.ServerStrings
	}
	return nil
}

type CMsgGameServerOutOfDate struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SteamIdGs     *uint64                `protobuf:"fixed64,1,opt,name=steam_id_gs,json=steamIdGs" json:"steam_id_gs,omitempty"`
	Reject        *bool                  `protobuf:"varint,2,opt,name=reject" json:"reject,omitempty"`
	Message       *string                `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGameServerOutOfDate) Reset() {
	*x = CMsgGameServerOutOfDate{}
	mi := &file_steammessages_clientserver_gameservers_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGameServerOutOfDate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGameServerOutOfDate) ProtoMessage() {}

func (x *CMsgGameServerOutOfDate) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientserver_gameservers_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGameServerOutOfDate.ProtoReflect.Descriptor instead.
func (*CMsgGameServerOutOfDate) Descriptor() ([]byte, []int) {
	return file_steammessages_clientserver_gameservers_proto_rawDescGZIP(), []int{9}
}

func (x *CMsgGameServerOutOfDate) GetSteamIdGs() uint64 {
	if x != nil && x.SteamIdGs != nil {
		return *x.SteamIdGs
	}
	return 0
}

func (x *CMsgGameServerOutOfDate) GetReject() bool {
	if x != nil && x.Reject != nil {
		return *x.Reject
	}
	return false
}

func (x *CMsgGameServerOutOfDate) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

type CMsgGSAssociateWithClan struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SteamIdClan   *uint64                `protobuf:"fixed64,1,opt,name=steam_id_clan,json=steamIdClan" json:"steam_id_clan,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGSAssociateWithClan) Reset() {
	*x = CMsgGSAssociateWithClan{}
	mi := &file_steammessages_clientserver_gameservers_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGSAssociateWithClan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGSAssociateWithClan) ProtoMessage() {}

func (x *CMsgGSAssociateWithClan) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientserver_gameservers_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGSAssociateWithClan.ProtoReflect.Descriptor instead.
func (*CMsgGSAssociateWithClan) Descriptor() ([]byte, []int) {
	return file_steammessages_clientserver_gameservers_proto_rawDescGZIP(), []int{10}
}

func (x *CMsgGSAssociateWithClan) GetSteamIdClan() uint64 {
	if x != nil && x.SteamIdClan != nil {
		return *x.SteamIdClan
	}
	return 0
}

type CMsgGSAssociateWithClanResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SteamIdClan   *uint64                `protobuf:"fixed64,1,opt,name=steam_id_clan,json=steamIdClan" json:"steam_id_clan,omitempty"`
	Eresult       *uint32                `protobuf:"varint,2,opt,name=eresult,def=2" json:"eresult,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CMsgGSAssociateWithClanResponse fields.
const (
	Default_CMsgGSAssociateWithClanResponse_Eresult = uint32(2)
)

func (x *CMsgGSAssociateWithClanResponse) Reset() {
	*x = CMsgGSAssociateWithClanResponse{}
	mi := &file_steammessages_clientserver_gameservers_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGSAssociateWithClanResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGSAssociateWithClanResponse) ProtoMessage() {}

func (x *CMsgGSAssociateWithClanResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientserver_gameservers_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGSAssociateWithClanResponse.ProtoReflect.Descriptor instead.
func (*CMsgGSAssociateWithClanResponse) Descriptor() ([]byte, []int) {
	return file_steammessages_clientserver_gameservers_proto_rawDescGZIP(), []int{11}
}

func (x *CMsgGSAssociateWithClanResponse) GetSteamIdClan() uint64 {
	if x != nil && x.SteamIdClan != nil {
		return *x.SteamIdClan
	}
	return 0
}

func (x *CMsgGSAssociateWithClanResponse) GetEresult() uint32 {
	if x != nil && x.Eresult != nil {
		return *x.Eresult
	}
	return Default_CMsgGSAssociateWithClanResponse_Eresult
}

type CMsgGSComputeNewPlayerCompatibility struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	SteamIdCandidate *uint64                `protobuf:"fixed64,1,opt,name=steam_id_candidate,json=steamIdCandidate" json:"steam_id_candidate,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CMsgGSComputeNewPlayerCompatibility) Reset() {
	*x = CMsgGSComputeNewPlayerCompatibility{}
	mi := &file_steammessages_clientserver_gameservers_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGSComputeNewPlayerCompatibility) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGSComputeNewPlayerCompatibility) ProtoMessage() {}

func (x *CMsgGSComputeNewPlayerCompatibility) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientserver_gameservers_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGSComputeNewPlayerCompatibility.ProtoReflect.Descriptor instead.
func (*CMsgGSComputeNewPlayerCompatibility) Descriptor() ([]byte, []int) {
	return file_steammessages_clientserver_gameservers_proto_rawDescGZIP(), []int{12}
}

func (x *CMsgGSComputeNewPlayerCompatibility) GetSteamIdCandidate() uint64 {
	if x != nil && x.SteamIdCandidate != nil {
		return *x.SteamIdCandidate
	}
	return 0
}

type CMsgGSComputeNewPlayerCompatibilityResponse struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	SteamIdCandidate         *uint64                `protobuf:"fixed64,1,opt,name=steam_id_candidate,json=steamIdCandidate" json:"steam_id_candidate,omitempty"`
	Eresult                  *uint32                `protobuf:"varint,2,opt,name=eresult,def=2" json:"eresult,omitempty"`
	IsClanMember             *bool                  `protobuf:"varint,3,opt,name=is_clan_member,json=isClanMember" json:"is_clan_member,omitempty"`
	CtDontLikeYou            *int32                 `protobuf:"varint,4,opt,name=ct_dont_like_you,json=ctDontLikeYou" json:"ct_dont_like_you,omitempty"`
	CtYouDontLike            *int32                 `protobuf:"varint,5,opt,name=ct_you_dont_like,json=ctYouDontLike" json:"ct_you_dont_like,omitempty"`
	CtClanmembersDontLikeYou *int32                 `protobuf:"varint,6,opt,name=ct_clanmembers_dont_like_you,json=ctClanmembersDontLikeYou" json:"ct_clanmembers_dont_like_you,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

// Default values for CMsgGSComputeNewPlayerCompatibilityResponse fields.
const (
	Default_CMsgGSComputeNewPlayerCompatibilityResponse_Eresult = uint32(2)
)

func (x *CMsgGSComputeNewPlayerCompatibilityResponse) Reset() {
	*x = CMsgGSComputeNewPlayerCompatibilityResponse{}
	mi := &file_steammessages_clientserver_gameservers_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGSComputeNewPlayerCompatibilityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGSComputeNewPlayerCompatibilityResponse) ProtoMessage() {}

func (x *CMsgGSComputeNewPlayerCompatibilityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientserver_gameservers_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGSComputeNewPlayerCompatibilityResponse.ProtoReflect.Descriptor instead.
func (*CMsgGSComputeNewPlayerCompatibilityResponse) Descriptor() ([]byte, []int) {
	return file_steammessages_clientserver_gameservers_proto_rawDescGZIP(), []int{13}
}

func (x *CMsgGSComputeNewPlayerCompatibilityResponse) GetSteamIdCandidate() uint64 {
	if x != nil && x.SteamIdCandidate != nil {
		return *x.SteamIdCandidate
	}
	return 0
}

func (x *CMsgGSComputeNewPlayerCompatibilityResponse) GetEresult() uint32 {
	if x != nil && x.Eresult != nil {
		return *x.Eresult
	}
	return Default_CMsgGSComputeNewPlayerCompatibilityResponse_Eresult
}

func (x *CMsgGSComputeNewPlayerCompatibilityResponse) GetIsClanMember() bool {
	if x != nil && x.IsClanMember != nil {
		return *x.IsClanMember
	}
	return false
}

func (x *CMsgGSComputeNewPlayerCompatibilityResponse) GetCtDontLikeYou() int32 {
	if x != nil && x.CtDontLikeYou != nil {
		return *x.CtDontLikeYou
	}
	return 0
}

func (x *CMsgGSComputeNewPlayerCompatibilityResponse) GetCtYouDontLike() int32 {
	if x != nil && x.CtYouDontLike != nil {
		return *x.CtYouDontLike
	}
	return 0
}

func (x *CMsgGSComputeNewPlayerCompatibilityResponse) GetCtClanmembersDontLikeYou() int32 {
	if x != nil && x.CtClanmembersDontLikeYou != nil {
		return *x.CtClanmembersDontLikeYou
	}
	return 0
}

type CMsgGSPlayerList_Player struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	SteamId            *uint64                `protobuf:"varint,1,opt,name=steam_id,json=steamId" json:"steam_id,omitempty"`
	DeprecatedPublicIp *uint32                `protobuf:"varint,2,opt,name=deprecated_public_ip,json=deprecatedPublicIp" json:"deprecated_public_ip,omitempty"`
	Token              []byte                 `protobuf:"bytes,3,opt,name=token" json:"token,omitempty"`
	PublicIp           *CMsgIPAddress         `protobuf:"bytes,4,opt,name=public_ip,json=publicIp" json:"public_ip,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *CMsgGSPlayerList_Player) Reset() {
	*x = CMsgGSPlayerList_Player{}
	mi := &file_steammessages_clientserver_gameservers_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGSPlayerList_Player) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGSPlayerList_Player) ProtoMessage() {}

func (x *CMsgGSPlayerList_Player) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientserver_gameservers_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGSPlayerList_Player.ProtoReflect.Descriptor instead.
func (*CMsgGSPlayerList_Player) Descriptor() ([]byte, []int) {
	return file_steammessages_clientserver_gameservers_proto_rawDescGZIP(), []int{2, 0}
}

func (x *CMsgGSPlayerList_Player) GetSteamId() uint64 {
	if x != nil && x.SteamId != nil {
		return *x.SteamId
	}
	return 0
}

func (x *CMsgGSPlayerList_Player) GetDeprecatedPublicIp() uint32 {
	if x != nil && x.DeprecatedPublicIp != nil {
		return *x.DeprecatedPublicIp
	}
	return 0
}

func (x *CMsgGSPlayerList_Player) GetToken() []byte {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *CMsgGSPlayerList_Player) GetPublicIp() *CMsgIPAddress {
	if x != nil {
		return x.PublicIp
	}
	return nil
}

type CMsgGameServerData_Player struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SteamId       *uint64                `protobuf:"fixed64,1,opt,name=steam_id,json=steamId" json:"steam_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgGameServerData_Player) Reset() {
	*x = CMsgGameServerData_Player{}
	mi := &file_steammessages_clientserver_gameservers_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGameServerData_Player) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGameServerData_Player) ProtoMessage() {}

func (x *CMsgGameServerData_Player) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientserver_gameservers_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGameServerData_Player.ProtoReflect.Descriptor instead.
func (*CMsgGameServerData_Player) Descriptor() ([]byte, []int) {
	return file_steammessages_clientserver_gameservers_proto_rawDescGZIP(), []int{5, 0}
}

func (x *CMsgGameServerData_Player) GetSteamId() uint64 {
	if x != nil && x.SteamId != nil {
		return *x.SteamId
	}
	return 0
}

type CMsgGMSClientServerQueryResponse_Server struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	DeprecatedServerIp      *uint32                `protobuf:"varint,1,opt,name=deprecated_server_ip,json=deprecatedServerIp" json:"deprecated_server_ip,omitempty"`
	QueryPort               *uint32                `protobuf:"varint,2,opt,name=query_port,json=queryPort" json:"query_port,omitempty"`
	AuthPlayers             *uint32                `protobuf:"varint,3,opt,name=auth_players,json=authPlayers" json:"auth_players,omitempty"`
	ServerIp                *CMsgIPAddress         `protobuf:"bytes,4,opt,name=server_ip,json=serverIp" json:"server_ip,omitempty"`
	SteamId                 *uint64                `protobuf:"fixed64,6,opt,name=steam_id,json=steamId" json:"steam_id,omitempty"`
	Revision                *uint32                `protobuf:"varint,7,opt,name=revision" json:"revision,omitempty"`
	Players                 *uint32                `protobuf:"varint,8,opt,name=players" json:"players,omitempty"`
	GamePort                *uint32                `protobuf:"varint,9,opt,name=game_port,json=gamePort" json:"game_port,omitempty"`
	SdrPopid                *uint32                `protobuf:"fixed32,10,opt,name=sdr_popid,json=sdrPopid" json:"sdr_popid,omitempty"`
	SdrPingLocation         *string                `protobuf:"bytes,32,opt,name=sdr_ping_location,json=sdrPingLocation" json:"sdr_ping_location,omitempty"`
	Flags                   *uint32                `protobuf:"varint,11,opt,name=flags" json:"flags,omitempty"`
	AppId                   *uint32                `protobuf:"varint,12,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	MaxPlayers              *uint32                `protobuf:"varint,13,opt,name=max_players,json=maxPlayers" json:"max_players,omitempty"`
	Bots                    *uint32                `protobuf:"varint,14,opt,name=bots" json:"bots,omitempty"`
	SpectatorPort           *uint32                `protobuf:"varint,15,opt,name=spectator_port,json=spectatorPort" json:"spectator_port,omitempty"`
	GamedirStr              *string                `protobuf:"bytes,16,opt,name=gamedir_str,json=gamedirStr" json:"gamedir_str,omitempty"`
	GamedirStrindex         *uint32                `protobuf:"varint,17,opt,name=gamedir_strindex,json=gamedirStrindex" json:"gamedir_strindex,omitempty"`
	MapStr                  *string                `protobuf:"bytes,18,opt,name=map_str,json=mapStr" json:"map_str,omitempty"`
	MapStrindex             *uint32                `protobuf:"varint,19,opt,name=map_strindex,json=mapStrindex" json:"map_strindex,omitempty"`
	NameStr                 *string                `protobuf:"bytes,20,opt,name=name_str,json=nameStr" json:"name_str,omitempty"`
	NameStrindex            *uint32                `protobuf:"varint,21,opt,name=name_strindex,json=nameStrindex" json:"name_strindex,omitempty"`
	GameDescriptionStr      *string                `protobuf:"bytes,22,opt,name=game_description_str,json=gameDescriptionStr" json:"game_description_str,omitempty"`
	GameDescriptionStrindex *uint32                `protobuf:"varint,23,opt,name=game_description_strindex,json=gameDescriptionStrindex" json:"game_description_strindex,omitempty"`
	VersionStr              *string                `protobuf:"bytes,24,opt,name=version_str,json=versionStr" json:"version_str,omitempty"`
	VersionStrindex         *uint32                `protobuf:"varint,25,opt,name=version_strindex,json=versionStrindex" json:"version_strindex,omitempty"`
	GametypeStr             *string                `protobuf:"bytes,26,opt,name=gametype_str,json=gametypeStr" json:"gametype_str,omitempty"`
	GametypeStrindex        *uint32                `protobuf:"varint,27,opt,name=gametype_strindex,json=gametypeStrindex" json:"gametype_strindex,omitempty"`
	SpectatorNameStr        *string                `protobuf:"bytes,30,opt,name=spectator_name_str,json=spectatorNameStr" json:"spectator_name_str,omitempty"`
	SpectatorNameStrindex   *uint32                `protobuf:"varint,31,opt,name=spectator_name_strindex,json=spectatorNameStrindex" json:"spectator_name_strindex,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *CMsgGMSClientServerQueryResponse_Server) Reset() {
	*x = CMsgGMSClientServerQueryResponse_Server{}
	mi := &file_steammessages_clientserver_gameservers_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgGMSClientServerQueryResponse_Server) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGMSClientServerQueryResponse_Server) ProtoMessage() {}

func (x *CMsgGMSClientServerQueryResponse_Server) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientserver_gameservers_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGMSClientServerQueryResponse_Server.ProtoReflect.Descriptor instead.
func (*CMsgGMSClientServerQueryResponse_Server) Descriptor() ([]byte, []int) {
	return file_steammessages_clientserver_gameservers_proto_rawDescGZIP(), []int{8, 0}
}

func (x *CMsgGMSClientServerQueryResponse_Server) GetDeprecatedServerIp() uint32 {
	if x != nil && x.DeprecatedServerIp != nil {
		return *x.DeprecatedServerIp
	}
	return 0
}

func (x *CMsgGMSClientServerQueryResponse_Server) GetQueryPort() uint32 {
	if x != nil && x.QueryPort != nil {
		return *x.QueryPort
	}
	return 0
}

func (x *CMsgGMSClientServerQueryResponse_Server) GetAuthPlayers() uint32 {
	if x != nil && x.AuthPlayers != nil {
		return *x.AuthPlayers
	}
	return 0
}

func (x *CMsgGMSClientServerQueryResponse_Server) GetServerIp() *CMsgIPAddress {
	if x != nil {
		return x.ServerIp
	}
	return nil
}

func (x *CMsgGMSClientServerQueryResponse_Server) GetSteamId() uint64 {
	if x != nil && x.SteamId != nil {
		return *x.SteamId
	}
	return 0
}

func (x *CMsgGMSClientServerQueryResponse_Server) GetRevision() uint32 {
	if x != nil && x.Revision != nil {
		return *x.Revision
	}
	return 0
}

func (x *CMsgGMSClientServerQueryResponse_Server) GetPlayers() uint32 {
	if x != nil && x.Players != nil {
		return *x.Players
	}
	return 0
}

func (x *CMsgGMSClientServerQueryResponse_Server) GetGamePort() uint32 {
	if x != nil && x.GamePort != nil {
		return *x.GamePort
	}
	return 0
}

func (x *CMsgGMSClientServerQueryResponse_Server) GetSdrPopid() uint32 {
	if x != nil && x.SdrPopid != nil {
		return *x.SdrPopid
	}
	return 0
}

func (x *CMsgGMSClientServerQueryResponse_Server) GetSdrPingLocation() string {
	if x != nil && x.SdrPingLocation != nil {
		return *x.SdrPingLocation
	}
	return ""
}

func (x *CMsgGMSClientServerQueryResponse_Server) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

func (x *CMsgGMSClientServerQueryResponse_Server) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CMsgGMSClientServerQueryResponse_Server) GetMaxPlayers() uint32 {
	if x != nil && x.MaxPlayers != nil {
		return *x.MaxPlayers
	}
	return 0
}

func (x *CMsgGMSClientServerQueryResponse_Server) GetBots() uint32 {
	if x != nil && x.Bots != nil {
		return *x.Bots
	}
	return 0
}

func (x *CMsgGMSClientServerQueryResponse_Server) GetSpectatorPort() uint32 {
	if x != nil && x.SpectatorPort != nil {
		return *x.SpectatorPort
	}
	return 0
}

func (x *CMsgGMSClientServerQueryResponse_Server) GetGamedirStr() string {
	if x != nil && x.GamedirStr != nil {
		return *x.GamedirStr
	}
	return ""
}

func (x *CMsgGMSClientServerQueryResponse_Server) GetGamedirStrindex() uint32 {
	if x != nil && x.GamedirStrindex != nil {
		return *x.GamedirStrindex
	}
	return 0
}

func (x *CMsgGMSClientServerQueryResponse_Server) GetMapStr() string {
	if x != nil && x.MapStr != nil {
		return *x.MapStr
	}
	return ""
}

func (x *CMsgGMSClientServerQueryResponse_Server) GetMapStrindex() uint32 {
	if x != nil && x.MapStrindex != nil {
		return *x.MapStrindex
	}
	return 0
}

func (x *CMsgGMSClientServerQueryResponse_Server) GetNameStr() string {
	if x != nil && x.NameStr != nil {
		return *x.NameStr
	}
	return ""
}

func (x *CMsgGMSClientServerQueryResponse_Server) GetNameStrindex() uint32 {
	if x != nil && x.NameStrindex != nil {
		return *x.NameStrindex
	}
	return 0
}

func (x *CMsgGMSClientServerQueryResponse_Server) GetGameDescriptionStr() string {
	if x != nil && x.GameDescriptionStr != nil {
		return *x.GameDescriptionStr
	}
	return ""
}

func (x *CMsgGMSClientServerQueryResponse_Server) GetGameDescriptionStrindex() uint32 {
	if x != nil && x.GameDescriptionStrindex != nil {
		return *x.GameDescriptionStrindex
	}
	return 0
}

func (x *CMsgGMSClientServerQueryResponse_Server) GetVersionStr() string {
	if x != nil && x.VersionStr != nil {
		return *x.VersionStr
	}
	return ""
}

func (x *CMsgGMSClientServerQueryResponse_Server) GetVersionStrindex() uint32 {
	if x != nil && x.VersionStrindex != nil {
		return *x.VersionStrindex
	}
	return 0
}

func (x *CMsgGMSClientServerQueryResponse_Server) GetGametypeStr() string {
	if x != nil && x.GametypeStr != nil {
		return *x.GametypeStr
	}
	return ""
}

func (x *CMsgGMSClientServerQueryResponse_Server) GetGametypeStrindex() uint32 {
	if x != nil && x.GametypeStrindex != nil {
		return *x.GametypeStrindex
	}
	return 0
}

func (x *CMsgGMSClientServerQueryResponse_Server) GetSpectatorNameStr() string {
	if x != nil && x.SpectatorNameStr != nil {
		return *x.SpectatorNameStr
	}
	return ""
}

func (x *CMsgGMSClientServerQueryResponse_Server) GetSpectatorNameStrindex() uint32 {
	if x != nil && x.SpectatorNameStrindex != nil {
		return *x.SpectatorNameStrindex
	}
	return 0
}

var File_steammessages_clientserver_gameservers_proto protoreflect.FileDescriptor

const file_steammessages_clientserver_gameservers_proto_rawDesc = "" +
	"\n" +
	",steammessages_clientserver_gameservers.proto\x1a\x18steammessages_base.proto\"\xea\x02\n" +
	"\x10CMsgGSServerType\x12\"\n" +
	"\rapp_id_served\x18\x01 \x01(\rR\vappIdServed\x12\x14\n" +
	"\x05flags\x18\x02 \x01(\rR\x05flags\x12;\n" +
	"\x1adeprecated_game_ip_address\x18\x03 \x01(\rR\x17deprecatedGameIpAddress\x12\x1b\n" +
	"\tgame_port\x18\x04 \x01(\rR\bgamePort\x12\x19\n" +
	"\bgame_dir\x18\x05 \x01(\tR\agameDir\x12!\n" +
	"\fgame_version\x18\x06 \x01(\tR\vgameVersion\x12&\n" +
	"\x0fgame_query_port\x18\a \x01(\rR\rgameQueryPort\x12&\n" +
	"\x0fgame_port_local\x18\n" +
	" \x01(\rR\rgamePortLocal\x12\x1b\n" +
	"\tsdr_logon\x18\b \x01(\fR\bsdrLogon\x12\x17\n" +
	"\afake_ip\x18\t \x01(\aR\x06fakeIp\"O\n" +
	"\x11CMsgGSStatusReply\x12\x1b\n" +
	"\tis_secure\x18\x01 \x01(\bR\bisSecure\x12\x1d\n" +
	"\n" +
	"is_valveds\x18\x02 \x01(\bR\tisValveds\"\xe1\x01\n" +
	"\x10CMsgGSPlayerList\x122\n" +
	"\aplayers\x18\x01 \x03(\v2\x18.CMsgGSPlayerList.PlayerR\aplayers\x1a\x98\x01\n" +
	"\x06Player\x12\x19\n" +
	"\bsteam_id\x18\x01 \x01(\x04R\asteamId\x120\n" +
	"\x14deprecated_public_ip\x18\x02 \x01(\rR\x12deprecatedPublicIp\x12\x14\n" +
	"\x05token\x18\x03 \x01(\fR\x05token\x12+\n" +
	"\tpublic_ip\x18\x04 \x01(\v2\x0e.CMsgIPAddressR\bpublicIp\"\xa3\x01\n" +
	"\x11CMsgGSUserPlaying\x12\x19\n" +
	"\bsteam_id\x18\x01 \x01(\x06R\asteamId\x120\n" +
	"\x14deprecated_public_ip\x18\x02 \x01(\rR\x12deprecatedPublicIp\x12\x14\n" +
	"\x05token\x18\x03 \x01(\fR\x05token\x12+\n" +
	"\tpublic_ip\x18\x04 \x01(\v2\x0e.CMsgIPAddressR\bpublicIp\"3\n" +
	"\x16CMsgGSDisconnectNotice\x12\x19\n" +
	"\bsteam_id\x18\x01 \x01(\x06R\asteamId\"\x9c\x06\n" +
	"\x12CMsgGameServerData\x12\x1a\n" +
	"\brevision\x18\x18 \x01(\rR\brevision\x12\x1d\n" +
	"\n" +
	"query_port\x18\x03 \x01(\rR\tqueryPort\x12\x1b\n" +
	"\tgame_port\x18\x04 \x01(\rR\bgamePort\x12%\n" +
	"\x0espectator_port\x18\x05 \x01(\rR\rspectatorPort\x12\x1f\n" +
	"\vserver_name\x18\x16 \x01(\tR\n" +
	"serverName\x12)\n" +
	"\x10game_description\x18\x1d \x01(\tR\x0fgameDescription\x122\n" +
	"\x15spectator_server_name\x18\x1b \x01(\tR\x13spectatorServerName\x12\x17\n" +
	"\afake_ip\x18\x1c \x01(\aR\x06fakeIp\x12*\n" +
	"\x11sdr_ping_location\x18\x1e \x01(\tR\x0fsdrPingLocation\x12\x15\n" +
	"\x06app_id\x18\x06 \x01(\rR\x05appId\x12\x18\n" +
	"\agamedir\x18\a \x01(\tR\agamedir\x12\x18\n" +
	"\aversion\x18\b \x01(\tR\aversion\x12\x18\n" +
	"\aproduct\x18\t \x01(\tR\aproduct\x12\x16\n" +
	"\x06region\x18\n" +
	" \x01(\tR\x06region\x124\n" +
	"\aplayers\x18\v \x03(\v2\x1a.CMsgGameServerData.PlayerR\aplayers\x12\x1f\n" +
	"\vmax_players\x18\f \x01(\rR\n" +
	"maxPlayers\x12\x1b\n" +
	"\tbot_count\x18\r \x01(\rR\bbotCount\x12\x1a\n" +
	"\bpassword\x18\x0e \x01(\bR\bpassword\x12\x16\n" +
	"\x06secure\x18\x0f \x01(\bR\x06secure\x12\x1c\n" +
	"\tdedicated\x18\x10 \x01(\bR\tdedicated\x12\x0e\n" +
	"\x02os\x18\x11 \x01(\tR\x02os\x12\x1b\n" +
	"\tgame_data\x18\x12 \x01(\tR\bgameData\x12\x1b\n" +
	"\tgame_type\x18\x14 \x01(\tR\bgameType\x12\x10\n" +
	"\x03map\x18\x15 \x01(\tR\x03map\x1a#\n" +
	"\x06Player\x12\x19\n" +
	"\bsteam_id\x18\x01 \x01(\x06R\asteamId\"o\n" +
	"\x14CMsgGameServerRemove\x12+\n" +
	"\x12legacy_steam_id_gs\x18\x01 \x01(\x06R\x0flegacySteamIdGs\x12*\n" +
	"\x11legacy_query_port\x18\x03 \x01(\rR\x0flegacyQueryPort\"\xe8\x01\n" +
	"\x18CMsgClientGMSServerQuery\x12\x15\n" +
	"\x06app_id\x18\x01 \x01(\rR\x05appId\x12&\n" +
	"\x0fgeo_location_ip\x18\x02 \x01(\rR\rgeoLocationIp\x12\x1f\n" +
	"\vregion_code\x18\x03 \x01(\rR\n" +
	"regionCode\x12\x1f\n" +
	"\vfilter_text\x18\x04 \x01(\tR\n" +
	"filterText\x12\x1f\n" +
	"\vmax_servers\x18\x05 \x01(\rR\n" +
	"maxServers\x12*\n" +
	"\x11sdr_ping_location\x18\x06 \x01(\tR\x0fsdrPingLocation\"\xd8\n" +
	"\n" +
	" CMsgGMSClientServerQueryResponse\x12B\n" +
	"\aservers\x18\x01 \x03(\v2(.CMsgGMSClientServerQueryResponse.ServerR\aservers\x12\x14\n" +
	"\x05error\x18\x02 \x01(\tR\x05error\x12X\n" +
	"\x13default_server_data\x18\x03 \x01(\v2(.CMsgGMSClientServerQueryResponse.ServerR\x11defaultServerData\x12%\n" +
	"\x0eserver_strings\x18\x04 \x03(\tR\rserverStrings\x1a\xa1\b\n" +
	"\x06Server\x120\n" +
	"\x14deprecated_server_ip\x18\x01 \x01(\rR\x12deprecatedServerIp\x12\x1d\n" +
	"\n" +
	"query_port\x18\x02 \x01(\rR\tqueryPort\x12!\n" +
	"\fauth_players\x18\x03 \x01(\rR\vauthPlayers\x12+\n" +
	"\tserver_ip\x18\x04 \x01(\v2\x0e.CMsgIPAddressR\bserverIp\x12\x19\n" +
	"\bsteam_id\x18\x06 \x01(\x06R\asteamId\x12\x1a\n" +
	"\brevision\x18\a \x01(\rR\brevision\x12\x18\n" +
	"\aplayers\x18\b \x01(\rR\aplayers\x12\x1b\n" +
	"\tgame_port\x18\t \x01(\rR\bgamePort\x12\x1b\n" +
	"\tsdr_popid\x18\n" +
	" \x01(\aR\bsdrPopid\x12*\n" +
	"\x11sdr_ping_location\x18  \x01(\tR\x0fsdrPingLocation\x12\x14\n" +
	"\x05flags\x18\v \x01(\rR\x05flags\x12\x15\n" +
	"\x06app_id\x18\f \x01(\rR\x05appId\x12\x1f\n" +
	"\vmax_players\x18\r \x01(\rR\n" +
	"maxPlayers\x12\x12\n" +
	"\x04bots\x18\x0e \x01(\rR\x04bots\x12%\n" +
	"\x0espectator_port\x18\x0f \x01(\rR\rspectatorPort\x12\x1f\n" +
	"\vgamedir_str\x18\x10 \x01(\tR\n" +
	"gamedirStr\x12)\n" +
	"\x10gamedir_strindex\x18\x11 \x01(\rR\x0fgamedirStrindex\x12\x17\n" +
	"\amap_str\x18\x12 \x01(\tR\x06mapStr\x12!\n" +
	"\fmap_strindex\x18\x13 \x01(\rR\vmapStrindex\x12\x19\n" +
	"\bname_str\x18\x14 \x01(\tR\anameStr\x12#\n" +
	"\rname_strindex\x18\x15 \x01(\rR\fnameStrindex\x120\n" +
	"\x14game_description_str\x18\x16 \x01(\tR\x12gameDescriptionStr\x12:\n" +
	"\x19game_description_strindex\x18\x17 \x01(\rR\x17gameDescriptionStrindex\x12\x1f\n" +
	"\vversion_str\x18\x18 \x01(\tR\n" +
	"versionStr\x12)\n" +
	"\x10version_strindex\x18\x19 \x01(\rR\x0fversionStrindex\x12!\n" +
	"\fgametype_str\x18\x1a \x01(\tR\vgametypeStr\x12+\n" +
	"\x11gametype_strindex\x18\x1b \x01(\rR\x10gametypeStrindex\x12,\n" +
	"\x12spectator_name_str\x18\x1e \x01(\tR\x10spectatorNameStr\x126\n" +
	"\x17spectator_name_strindex\x18\x1f \x01(\rR\x15spectatorNameStrindex\"5\n" +
	"\x06EFlags\x12\x17\n" +
	"\x13k_EFlag_HasPassword\x10\x01\x12\x12\n" +
	"\x0ek_EFlag_Secure\x10\x02\"k\n" +
	"\x17CMsgGameServerOutOfDate\x12\x1e\n" +
	"\vsteam_id_gs\x18\x01 \x01(\x06R\tsteamIdGs\x12\x16\n" +
	"\x06reject\x18\x02 \x01(\bR\x06reject\x12\x18\n" +
	"\amessage\x18\x03 \x01(\tR\amessage\"=\n" +
	"\x17CMsgGSAssociateWithClan\x12\"\n" +
	"\rsteam_id_clan\x18\x01 \x01(\x06R\vsteamIdClan\"b\n" +
	"\x1fCMsgGSAssociateWithClanResponse\x12\"\n" +
	"\rsteam_id_clan\x18\x01 \x01(\x06R\vsteamIdClan\x12\x1b\n" +
	"\aeresult\x18\x02 \x01(\r:\x012R\aeresult\"S\n" +
	"#CMsgGSComputeNewPlayerCompatibility\x12,\n" +
	"\x12steam_id_candidate\x18\x01 \x01(\x06R\x10steamIdCandidate\"\xb0\x02\n" +
	"+CMsgGSComputeNewPlayerCompatibilityResponse\x12,\n" +
	"\x12steam_id_candidate\x18\x01 \x01(\x06R\x10steamIdCandidate\x12\x1b\n" +
	"\aeresult\x18\x02 \x01(\r:\x012R\aeresult\x12$\n" +
	"\x0eis_clan_member\x18\x03 \x01(\bR\fisClanMember\x12'\n" +
	"\x10ct_dont_like_you\x18\x04 \x01(\x05R\rctDontLikeYou\x12'\n" +
	"\x10ct_you_dont_like\x18\x05 \x01(\x05R\rctYouDontLike\x12>\n" +
	"\x1cct_clanmembers_dont_like_you\x18\x06 \x01(\x05R\x18ctClanmembersDontLikeYouB\x05H\x01\x80\x01\x00"

var (
	file_steammessages_clientserver_gameservers_proto_rawDescOnce sync.Once
	file_steammessages_clientserver_gameservers_proto_rawDescData []byte
)

func file_steammessages_clientserver_gameservers_proto_rawDescGZIP() []byte {
	file_steammessages_clientserver_gameservers_proto_rawDescOnce.Do(func() {
		file_steammessages_clientserver_gameservers_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_steammessages_clientserver_gameservers_proto_rawDesc), len(file_steammessages_clientserver_gameservers_proto_rawDesc)))
	})
	return file_steammessages_clientserver_gameservers_proto_rawDescData
}

var file_steammessages_clientserver_gameservers_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_steammessages_clientserver_gameservers_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_steammessages_clientserver_gameservers_proto_goTypes = []any{
	(CMsgGMSClientServerQueryResponse_EFlags)(0),        // 0: CMsgGMSClientServerQueryResponse.EFlags
	(*CMsgGSServerType)(nil),                            // 1: CMsgGSServerType
	(*CMsgGSStatusReply)(nil),                           // 2: CMsgGSStatusReply
	(*CMsgGSPlayerList)(nil),                            // 3: CMsgGSPlayerList
	(*CMsgGSUserPlaying)(nil),                           // 4: CMsgGSUserPlaying
	(*CMsgGSDisconnectNotice)(nil),                      // 5: CMsgGSDisconnectNotice
	(*CMsgGameServerData)(nil),                          // 6: CMsgGameServerData
	(*CMsgGameServerRemove)(nil),                        // 7: CMsgGameServerRemove
	(*CMsgClientGMSServerQuery)(nil),                    // 8: CMsgClientGMSServerQuery
	(*CMsgGMSClientServerQueryResponse)(nil),            // 9: CMsgGMSClientServerQueryResponse
	(*CMsgGameServerOutOfDate)(nil),                     // 10: CMsgGameServerOutOfDate
	(*CMsgGSAssociateWithClan)(nil),                     // 11: CMsgGSAssociateWithClan
	(*CMsgGSAssociateWithClanResponse)(nil),             // 12: CMsgGSAssociateWithClanResponse
	(*CMsgGSComputeNewPlayerCompatibility)(nil),         // 13: CMsgGSComputeNewPlayerCompatibility
	(*CMsgGSComputeNewPlayerCompatibilityResponse)(nil), // 14: CMsgGSComputeNewPlayerCompatibilityResponse
	(*CMsgGSPlayerList_Player)(nil),                     // 15: CMsgGSPlayerList.Player
	(*CMsgGameServerData_Player)(nil),                   // 16: CMsgGameServerData.Player
	(*CMsgGMSClientServerQueryResponse_Server)(nil),     // 17: CMsgGMSClientServerQueryResponse.Server
	(*CMsgIPAddress)(nil),                               // 18: CMsgIPAddress
}
var file_steammessages_clientserver_gameservers_proto_depIdxs = []int32{
	15, // 0: CMsgGSPlayerList.players:type_name -> CMsgGSPlayerList.Player
	18, // 1: CMsgGSUserPlaying.public_ip:type_name -> CMsgIPAddress
	16, // 2: CMsgGameServerData.players:type_name -> CMsgGameServerData.Player
	17, // 3: CMsgGMSClientServerQueryResponse.servers:type_name -> CMsgGMSClientServerQueryResponse.Server
	17, // 4: CMsgGMSClientServerQueryResponse.default_server_data:type_name -> CMsgGMSClientServerQueryResponse.Server
	18, // 5: CMsgGSPlayerList.Player.public_ip:type_name -> CMsgIPAddress
	18, // 6: CMsgGMSClientServerQueryResponse.Server.server_ip:type_name -> CMsgIPAddress
	7,  // [7:7] is the sub-list for method output_type
	7,  // [7:7] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_steammessages_clientserver_gameservers_proto_init() }
func file_steammessages_clientserver_gameservers_proto_init() {
	if File_steammessages_clientserver_gameservers_proto != nil {
		return
	}
	file_steammessages_base_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_steammessages_clientserver_gameservers_proto_rawDesc), len(file_steammessages_clientserver_gameservers_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_steammessages_clientserver_gameservers_proto_goTypes,
		DependencyIndexes: file_steammessages_clientserver_gameservers_proto_depIdxs,
		EnumInfos:         file_steammessages_clientserver_gameservers_proto_enumTypes,
		MessageInfos:      file_steammessages_clientserver_gameservers_proto_msgTypes,
	}.Build()
	File_steammessages_clientserver_gameservers_proto = out.File
	file_steammessages_clientserver_gameservers_proto_goTypes = nil
	file_steammessages_clientserver_gameservers_proto_depIdxs = nil
}
