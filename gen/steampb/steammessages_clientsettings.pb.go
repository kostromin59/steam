// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v6.32.0
// source: steammessages_clientsettings.proto

package steampb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EClientSettingStore int32

const (
	EClientSettingStore_k_EClientSettingStore_Invalid                 EClientSettingStore = 0
	EClientSettingStore_k_EClientSettingStore_ConfigStore_Install     EClientSettingStore = 1
	EClientSettingStore_k_EClientSettingStore_ConfigStore_UserRoaming EClientSettingStore = 2
	EClientSettingStore_k_EClientSettingStore_ConfigStore_UserLocal   EClientSettingStore = 3
	EClientSettingStore_k_EClientSettingStore_Registry                EClientSettingStore = 4
	EClientSettingStore_k_EClientSettingStore_CustomFunc              EClientSettingStore = 5
)

// Enum value maps for EClientSettingStore.
var (
	EClientSettingStore_name = map[int32]string{
		0: "k_EClientSettingStore_Invalid",
		1: "k_EClientSettingStore_ConfigStore_Install",
		2: "k_EClientSettingStore_ConfigStore_UserRoaming",
		3: "k_EClientSettingStore_ConfigStore_UserLocal",
		4: "k_EClientSettingStore_Registry",
		5: "k_EClientSettingStore_CustomFunc",
	}
	EClientSettingStore_value = map[string]int32{
		"k_EClientSettingStore_Invalid":                 0,
		"k_EClientSettingStore_ConfigStore_Install":     1,
		"k_EClientSettingStore_ConfigStore_UserRoaming": 2,
		"k_EClientSettingStore_ConfigStore_UserLocal":   3,
		"k_EClientSettingStore_Registry":                4,
		"k_EClientSettingStore_CustomFunc":              5,
	}
)

func (x EClientSettingStore) Enum() *EClientSettingStore {
	p := new(EClientSettingStore)
	*p = x
	return p
}

func (x EClientSettingStore) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EClientSettingStore) Descriptor() protoreflect.EnumDescriptor {
	return file_steammessages_clientsettings_proto_enumTypes[0].Descriptor()
}

func (EClientSettingStore) Type() protoreflect.EnumType {
	return &file_steammessages_clientsettings_proto_enumTypes[0]
}

func (x EClientSettingStore) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EClientSettingStore) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EClientSettingStore(num)
	return nil
}

// Deprecated: Use EClientSettingStore.Descriptor instead.
func (EClientSettingStore) EnumDescriptor() ([]byte, []int) {
	return file_steammessages_clientsettings_proto_rawDescGZIP(), []int{0}
}

type EOverlayToggleBarLocation int32

const (
	EOverlayToggleBarLocation_k_EOverlayToggleBarLocation_Bottom EOverlayToggleBarLocation = 0
	EOverlayToggleBarLocation_k_EOverlayToggleBarLocation_Left   EOverlayToggleBarLocation = 1
	EOverlayToggleBarLocation_k_EOverlayToggleBarLocation_Right  EOverlayToggleBarLocation = 2
	EOverlayToggleBarLocation_k_EOverlayToggleBarLocation_Top    EOverlayToggleBarLocation = 3
)

// Enum value maps for EOverlayToggleBarLocation.
var (
	EOverlayToggleBarLocation_name = map[int32]string{
		0: "k_EOverlayToggleBarLocation_Bottom",
		1: "k_EOverlayToggleBarLocation_Left",
		2: "k_EOverlayToggleBarLocation_Right",
		3: "k_EOverlayToggleBarLocation_Top",
	}
	EOverlayToggleBarLocation_value = map[string]int32{
		"k_EOverlayToggleBarLocation_Bottom": 0,
		"k_EOverlayToggleBarLocation_Left":   1,
		"k_EOverlayToggleBarLocation_Right":  2,
		"k_EOverlayToggleBarLocation_Top":    3,
	}
)

func (x EOverlayToggleBarLocation) Enum() *EOverlayToggleBarLocation {
	p := new(EOverlayToggleBarLocation)
	*p = x
	return p
}

func (x EOverlayToggleBarLocation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EOverlayToggleBarLocation) Descriptor() protoreflect.EnumDescriptor {
	return file_steammessages_clientsettings_proto_enumTypes[1].Descriptor()
}

func (EOverlayToggleBarLocation) Type() protoreflect.EnumType {
	return &file_steammessages_clientsettings_proto_enumTypes[1]
}

func (x EOverlayToggleBarLocation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EOverlayToggleBarLocation) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EOverlayToggleBarLocation(num)
	return nil
}

// Deprecated: Use EOverlayToggleBarLocation.Descriptor instead.
func (EOverlayToggleBarLocation) EnumDescriptor() ([]byte, []int) {
	return file_steammessages_clientsettings_proto_rawDescGZIP(), []int{1}
}

type ESettingProfileMode int32

const (
	ESettingProfileMode_k_ESettingProfileMode_None              ESettingProfileMode = 0
	ESettingProfileMode_k_ESettingProfileMode_PerGame           ESettingProfileMode = 1
	ESettingProfileMode_k_ESettingProfileMode_PerGamePerDisplay ESettingProfileMode = 2
	ESettingProfileMode_k_ESettingProfileMode_PerDisplay        ESettingProfileMode = 3
)

// Enum value maps for ESettingProfileMode.
var (
	ESettingProfileMode_name = map[int32]string{
		0: "k_ESettingProfileMode_None",
		1: "k_ESettingProfileMode_PerGame",
		2: "k_ESettingProfileMode_PerGamePerDisplay",
		3: "k_ESettingProfileMode_PerDisplay",
	}
	ESettingProfileMode_value = map[string]int32{
		"k_ESettingProfileMode_None":              0,
		"k_ESettingProfileMode_PerGame":           1,
		"k_ESettingProfileMode_PerGamePerDisplay": 2,
		"k_ESettingProfileMode_PerDisplay":        3,
	}
)

func (x ESettingProfileMode) Enum() *ESettingProfileMode {
	p := new(ESettingProfileMode)
	*p = x
	return p
}

func (x ESettingProfileMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ESettingProfileMode) Descriptor() protoreflect.EnumDescriptor {
	return file_steammessages_clientsettings_proto_enumTypes[2].Descriptor()
}

func (ESettingProfileMode) Type() protoreflect.EnumType {
	return &file_steammessages_clientsettings_proto_enumTypes[2]
}

func (x ESettingProfileMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ESettingProfileMode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ESettingProfileMode(num)
	return nil
}

// Deprecated: Use ESettingProfileMode.Descriptor instead.
func (ESettingProfileMode) EnumDescriptor() ([]byte, []int) {
	return file_steammessages_clientsettings_proto_rawDescGZIP(), []int{2}
}

type EGRMode int32

const (
	EGRMode_k_EGRMode_Never  EGRMode = 0
	EGRMode_k_EGRMode_Always EGRMode = 1
	EGRMode_k_EGRMode_Manual EGRMode = 2
)

// Enum value maps for EGRMode.
var (
	EGRMode_name = map[int32]string{
		0: "k_EGRMode_Never",
		1: "k_EGRMode_Always",
		2: "k_EGRMode_Manual",
	}
	EGRMode_value = map[string]int32{
		"k_EGRMode_Never":  0,
		"k_EGRMode_Always": 1,
		"k_EGRMode_Manual": 2,
	}
)

func (x EGRMode) Enum() *EGRMode {
	p := new(EGRMode)
	*p = x
	return p
}

func (x EGRMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EGRMode) Descriptor() protoreflect.EnumDescriptor {
	return file_steammessages_clientsettings_proto_enumTypes[3].Descriptor()
}

func (EGRMode) Type() protoreflect.EnumType {
	return &file_steammessages_clientsettings_proto_enumTypes[3]
}

func (x EGRMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EGRMode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EGRMode(num)
	return nil
}

// Deprecated: Use EGRMode.Descriptor instead.
func (EGRMode) EnumDescriptor() ([]byte, []int) {
	return file_steammessages_clientsettings_proto_rawDescGZIP(), []int{3}
}

type EGRAudio int32

const (
	EGRAudio_k_EGRAudio_Game   EGRAudio = 0
	EGRAudio_k_EGRAudio_System EGRAudio = 1
	EGRAudio_k_EGRAudio_Select EGRAudio = 2
)

// Enum value maps for EGRAudio.
var (
	EGRAudio_name = map[int32]string{
		0: "k_EGRAudio_Game",
		1: "k_EGRAudio_System",
		2: "k_EGRAudio_Select",
	}
	EGRAudio_value = map[string]int32{
		"k_EGRAudio_Game":   0,
		"k_EGRAudio_System": 1,
		"k_EGRAudio_Select": 2,
	}
)

func (x EGRAudio) Enum() *EGRAudio {
	p := new(EGRAudio)
	*p = x
	return p
}

func (x EGRAudio) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EGRAudio) Descriptor() protoreflect.EnumDescriptor {
	return file_steammessages_clientsettings_proto_enumTypes[4].Descriptor()
}

func (EGRAudio) Type() protoreflect.EnumType {
	return &file_steammessages_clientsettings_proto_enumTypes[4]
}

func (x EGRAudio) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EGRAudio) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EGRAudio(num)
	return nil
}

// Deprecated: Use EGRAudio.Descriptor instead.
func (EGRAudio) EnumDescriptor() ([]byte, []int) {
	return file_steammessages_clientsettings_proto_rawDescGZIP(), []int{4}
}

type EGRExportLimitType int32

const (
	EGRExportLimitType_k_EGRExportLimitType_Native   EGRExportLimitType = 0
	EGRExportLimitType_k_EGRExportLimitType_FileSize EGRExportLimitType = 1
	EGRExportLimitType_k_EGRExportLimitType_Advanced EGRExportLimitType = 2
)

// Enum value maps for EGRExportLimitType.
var (
	EGRExportLimitType_name = map[int32]string{
		0: "k_EGRExportLimitType_Native",
		1: "k_EGRExportLimitType_FileSize",
		2: "k_EGRExportLimitType_Advanced",
	}
	EGRExportLimitType_value = map[string]int32{
		"k_EGRExportLimitType_Native":   0,
		"k_EGRExportLimitType_FileSize": 1,
		"k_EGRExportLimitType_Advanced": 2,
	}
)

func (x EGRExportLimitType) Enum() *EGRExportLimitType {
	p := new(EGRExportLimitType)
	*p = x
	return p
}

func (x EGRExportLimitType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EGRExportLimitType) Descriptor() protoreflect.EnumDescriptor {
	return file_steammessages_clientsettings_proto_enumTypes[5].Descriptor()
}

func (EGRExportLimitType) Type() protoreflect.EnumType {
	return &file_steammessages_clientsettings_proto_enumTypes[5]
}

func (x EGRExportLimitType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EGRExportLimitType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EGRExportLimitType(num)
	return nil
}

// Deprecated: Use EGRExportLimitType.Descriptor instead.
func (EGRExportLimitType) EnumDescriptor() ([]byte, []int) {
	return file_steammessages_clientsettings_proto_rawDescGZIP(), []int{5}
}

type CMsgHotkey struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	KeyCode       *uint32                `protobuf:"varint,1,opt,name=key_code,json=keyCode" json:"key_code,omitempty"`
	AltKey        *bool                  `protobuf:"varint,2,opt,name=alt_key,json=altKey" json:"alt_key,omitempty"`
	ShiftKey      *bool                  `protobuf:"varint,3,opt,name=shift_key,json=shiftKey" json:"shift_key,omitempty"`
	CtrlKey       *bool                  `protobuf:"varint,4,opt,name=ctrl_key,json=ctrlKey" json:"ctrl_key,omitempty"`
	MetaKey       *bool                  `protobuf:"varint,5,opt,name=meta_key,json=metaKey" json:"meta_key,omitempty"`
	DisplayName   *string                `protobuf:"bytes,6,opt,name=display_name,json=displayName" json:"display_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgHotkey) Reset() {
	*x = CMsgHotkey{}
	mi := &file_steammessages_clientsettings_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgHotkey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgHotkey) ProtoMessage() {}

func (x *CMsgHotkey) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientsettings_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgHotkey.ProtoReflect.Descriptor instead.
func (*CMsgHotkey) Descriptor() ([]byte, []int) {
	return file_steammessages_clientsettings_proto_rawDescGZIP(), []int{0}
}

func (x *CMsgHotkey) GetKeyCode() uint32 {
	if x != nil && x.KeyCode != nil {
		return *x.KeyCode
	}
	return 0
}

func (x *CMsgHotkey) GetAltKey() bool {
	if x != nil && x.AltKey != nil {
		return *x.AltKey
	}
	return false
}

func (x *CMsgHotkey) GetShiftKey() bool {
	if x != nil && x.ShiftKey != nil {
		return *x.ShiftKey
	}
	return false
}

func (x *CMsgHotkey) GetCtrlKey() bool {
	if x != nil && x.CtrlKey != nil {
		return *x.CtrlKey
	}
	return false
}

func (x *CMsgHotkey) GetMetaKey() bool {
	if x != nil && x.MetaKey != nil {
		return *x.MetaKey
	}
	return false
}

func (x *CMsgHotkey) GetDisplayName() string {
	if x != nil && x.DisplayName != nil {
		return *x.DisplayName
	}
	return ""
}

type CMsgSettingVariant struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Value:
	//
	//	*CMsgSettingVariant_ValueBool
	//	*CMsgSettingVariant_ValueInt32
	//	*CMsgSettingVariant_ValueUint32
	//	*CMsgSettingVariant_ValueUint64
	//	*CMsgSettingVariant_ValueFloat
	//	*CMsgSettingVariant_ValueString
	//	*CMsgSettingVariant_ValueHotkey
	Value         isCMsgSettingVariant_Value `protobuf_oneof:"value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgSettingVariant) Reset() {
	*x = CMsgSettingVariant{}
	mi := &file_steammessages_clientsettings_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgSettingVariant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSettingVariant) ProtoMessage() {}

func (x *CMsgSettingVariant) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientsettings_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSettingVariant.ProtoReflect.Descriptor instead.
func (*CMsgSettingVariant) Descriptor() ([]byte, []int) {
	return file_steammessages_clientsettings_proto_rawDescGZIP(), []int{1}
}

func (x *CMsgSettingVariant) GetValue() isCMsgSettingVariant_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *CMsgSettingVariant) GetValueBool() bool {
	if x != nil {
		if x, ok := x.Value.(*CMsgSettingVariant_ValueBool); ok {
			return x.ValueBool
		}
	}
	return false
}

func (x *CMsgSettingVariant) GetValueInt32() int32 {
	if x != nil {
		if x, ok := x.Value.(*CMsgSettingVariant_ValueInt32); ok {
			return x.ValueInt32
		}
	}
	return 0
}

func (x *CMsgSettingVariant) GetValueUint32() uint32 {
	if x != nil {
		if x, ok := x.Value.(*CMsgSettingVariant_ValueUint32); ok {
			return x.ValueUint32
		}
	}
	return 0
}

func (x *CMsgSettingVariant) GetValueUint64() int64 {
	if x != nil {
		if x, ok := x.Value.(*CMsgSettingVariant_ValueUint64); ok {
			return x.ValueUint64
		}
	}
	return 0
}

func (x *CMsgSettingVariant) GetValueFloat() float32 {
	if x != nil {
		if x, ok := x.Value.(*CMsgSettingVariant_ValueFloat); ok {
			return x.ValueFloat
		}
	}
	return 0
}

func (x *CMsgSettingVariant) GetValueString() string {
	if x != nil {
		if x, ok := x.Value.(*CMsgSettingVariant_ValueString); ok {
			return x.ValueString
		}
	}
	return ""
}

func (x *CMsgSettingVariant) GetValueHotkey() *CMsgHotkey {
	if x != nil {
		if x, ok := x.Value.(*CMsgSettingVariant_ValueHotkey); ok {
			return x.ValueHotkey
		}
	}
	return nil
}

type isCMsgSettingVariant_Value interface {
	isCMsgSettingVariant_Value()
}

type CMsgSettingVariant_ValueBool struct {
	ValueBool bool `protobuf:"varint,1,opt,name=value_bool,json=valueBool,oneof"`
}

type CMsgSettingVariant_ValueInt32 struct {
	ValueInt32 int32 `protobuf:"varint,2,opt,name=value_int32,json=valueInt32,oneof"`
}

type CMsgSettingVariant_ValueUint32 struct {
	ValueUint32 uint32 `protobuf:"varint,3,opt,name=value_uint32,json=valueUint32,oneof"`
}

type CMsgSettingVariant_ValueUint64 struct {
	ValueUint64 int64 `protobuf:"varint,5,opt,name=value_uint64,json=valueUint64,oneof"`
}

type CMsgSettingVariant_ValueFloat struct {
	ValueFloat float32 `protobuf:"fixed32,6,opt,name=value_float,json=valueFloat,oneof"`
}

type CMsgSettingVariant_ValueString struct {
	ValueString string `protobuf:"bytes,7,opt,name=value_string,json=valueString,oneof"`
}

type CMsgSettingVariant_ValueHotkey struct {
	ValueHotkey *CMsgHotkey `protobuf:"bytes,8,opt,name=value_hotkey,json=valueHotkey,oneof"`
}

func (*CMsgSettingVariant_ValueBool) isCMsgSettingVariant_Value() {}

func (*CMsgSettingVariant_ValueInt32) isCMsgSettingVariant_Value() {}

func (*CMsgSettingVariant_ValueUint32) isCMsgSettingVariant_Value() {}

func (*CMsgSettingVariant_ValueUint64) isCMsgSettingVariant_Value() {}

func (*CMsgSettingVariant_ValueFloat) isCMsgSettingVariant_Value() {}

func (*CMsgSettingVariant_ValueString) isCMsgSettingVariant_Value() {}

func (*CMsgSettingVariant_ValueHotkey) isCMsgSettingVariant_Value() {}

type CMsgClientSettings struct {
	state                                 protoimpl.MessageState    `protogen:"open.v1"`
	NoSavePersonalInfo                    *bool                     `protobuf:"varint,1,opt,name=no_save_personal_info,json=noSavePersonalInfo" json:"no_save_personal_info,omitempty"`
	OobeTestModeEnabled                   *bool                     `protobuf:"varint,2,opt,name=oobe_test_mode_enabled,json=oobeTestModeEnabled" json:"oobe_test_mode_enabled,omitempty"`
	InClientBeta                          *bool                     `protobuf:"varint,3,opt,name=in_client_beta,json=inClientBeta" json:"in_client_beta,omitempty"`
	IsSteamSideloaded                     *bool                     `protobuf:"varint,4,opt,name=is_steam_sideloaded,json=isSteamSideloaded" json:"is_steam_sideloaded,omitempty"`
	PreferredMonitor                      *string                   `protobuf:"bytes,5,opt,name=preferred_monitor,json=preferredMonitor" json:"preferred_monitor,omitempty"`
	SteamCefGpuBlocklistDisabled          *bool                     `protobuf:"varint,6,opt,name=steam_cef_gpu_blocklist_disabled,json=steamCefGpuBlocklistDisabled" json:"steam_cef_gpu_blocklist_disabled,omitempty"`
	BigpictureWindowed                    *bool                     `protobuf:"varint,7,opt,name=bigpicture_windowed,json=bigpictureWindowed" json:"bigpicture_windowed,omitempty"`
	DisplayName                           *string                   `protobuf:"bytes,8,opt,name=display_name,json=displayName" json:"display_name,omitempty"`
	IsExternalDisplay                     *bool                     `protobuf:"varint,9,opt,name=is_external_display,json=isExternalDisplay" json:"is_external_display,omitempty"`
	SteamOsUnderscanLevel                 *float32                  `protobuf:"fixed32,10,opt,name=steam_os_underscan_level,json=steamOsUnderscanLevel" json:"steam_os_underscan_level,omitempty"`
	SteamOsUnderscanEnabled               *bool                     `protobuf:"varint,11,opt,name=steam_os_underscan_enabled,json=steamOsUnderscanEnabled" json:"steam_os_underscan_enabled,omitempty"`
	MinScaleFactor                        *float32                  `protobuf:"fixed32,12,opt,name=min_scale_factor,json=minScaleFactor" json:"min_scale_factor,omitempty"`
	MaxScaleFactor                        *float32                  `protobuf:"fixed32,13,opt,name=max_scale_factor,json=maxScaleFactor" json:"max_scale_factor,omitempty"`
	AutoScaleFactor                       *float32                  `protobuf:"fixed32,14,opt,name=auto_scale_factor,json=autoScaleFactor" json:"auto_scale_factor,omitempty"`
	SmallMode                             *bool                     `protobuf:"varint,16,opt,name=small_mode,json=smallMode" json:"small_mode,omitempty"`
	SkipSteamvrInstallDialog              *bool                     `protobuf:"varint,19,opt,name=skip_steamvr_install_dialog,json=skipSteamvrInstallDialog" json:"skip_steamvr_install_dialog,omitempty"`
	AlwaysShowUserChooser                 *bool                     `protobuf:"varint,20,opt,name=always_show_user_chooser,json=alwaysShowUserChooser" json:"always_show_user_chooser,omitempty"`
	OsVersionUnsupported                  *bool                     `protobuf:"varint,21,opt,name=os_version_unsupported,json=osVersionUnsupported" json:"os_version_unsupported,omitempty"`
	ShowFamilySharingNotifications        *bool                     `protobuf:"varint,3000,opt,name=show_family_sharing_notifications,json=showFamilySharingNotifications" json:"show_family_sharing_notifications,omitempty"`
	ShowCopyCountInLibrary                *bool                     `protobuf:"varint,3001,opt,name=show_copy_count_in_library,json=showCopyCountInLibrary" json:"show_copy_count_in_library,omitempty"`
	OverlayFpsCounterCorner               *int32                    `protobuf:"varint,4000,opt,name=overlay_fps_counter_corner,json=overlayFpsCounterCorner" json:"overlay_fps_counter_corner,omitempty"`
	OverlayFpsCounterHighContrast         *bool                     `protobuf:"varint,4001,opt,name=overlay_fps_counter_high_contrast,json=overlayFpsCounterHighContrast" json:"overlay_fps_counter_high_contrast,omitempty"`
	OverlayKey                            *CMsgHotkey               `protobuf:"bytes,4002,opt,name=overlay_key,json=overlayKey" json:"overlay_key,omitempty"`
	ScreenshotKey                         *CMsgHotkey               `protobuf:"bytes,4003,opt,name=screenshot_key,json=screenshotKey" json:"screenshot_key,omitempty"`
	EnableOverlay                         *bool                     `protobuf:"varint,4004,opt,name=enable_overlay,json=enableOverlay" json:"enable_overlay,omitempty"`
	EnableScreenshotNotification          *bool                     `protobuf:"varint,4006,opt,name=enable_screenshot_notification,json=enableScreenshotNotification" json:"enable_screenshot_notification,omitempty"`
	EnableScreenshotSound                 *bool                     `protobuf:"varint,4007,opt,name=enable_screenshot_sound,json=enableScreenshotSound" json:"enable_screenshot_sound,omitempty"`
	SaveUncompressedScreenshots           *bool                     `protobuf:"varint,4008,opt,name=save_uncompressed_screenshots,json=saveUncompressedScreenshots" json:"save_uncompressed_screenshots,omitempty"`
	ScreenshotsPath                       *string                   `protobuf:"bytes,4009,opt,name=screenshots_path,json=screenshotsPath" json:"screenshots_path,omitempty"`
	DefaultPingRate                       *int32                    `protobuf:"varint,4010,opt,name=default_ping_rate,json=defaultPingRate" json:"default_ping_rate,omitempty"`
	ServerPingRate                        *int32                    `protobuf:"varint,4011,opt,name=server_ping_rate,json=serverPingRate" json:"server_ping_rate,omitempty"`
	SteamNetworkingShareIp                *int32                    `protobuf:"varint,4012,opt,name=steam_networking_share_ip,json=steamNetworkingShareIp" json:"steam_networking_share_ip,omitempty"`
	WebBrowserHome                        *string                   `protobuf:"bytes,4013,opt,name=web_browser_home,json=webBrowserHome" json:"web_browser_home,omitempty"`
	VoiceMicDeviceName                    *string                   `protobuf:"bytes,4014,opt,name=voice_mic_device_name,json=voiceMicDeviceName" json:"voice_mic_device_name,omitempty"`
	VoiceMicInputGain                     *float32                  `protobuf:"fixed32,4015,opt,name=voice_mic_input_gain,json=voiceMicInputGain" json:"voice_mic_input_gain,omitempty"`
	VoiceSpeakerOutputGain                *float32                  `protobuf:"fixed32,4016,opt,name=voice_speaker_output_gain,json=voiceSpeakerOutputGain" json:"voice_speaker_output_gain,omitempty"`
	VoicePushToTalkSetting                *int32                    `protobuf:"varint,4017,opt,name=voice_push_to_talk_setting,json=voicePushToTalkSetting" json:"voice_push_to_talk_setting,omitempty"`
	VoicePushToTalkKey                    *CMsgHotkey               `protobuf:"bytes,4018,opt,name=voice_push_to_talk_key,json=voicePushToTalkKey" json:"voice_push_to_talk_key,omitempty"`
	OverlayToolbarListView                *bool                     `protobuf:"varint,4019,opt,name=overlay_toolbar_list_view,json=overlayToolbarListView" json:"overlay_toolbar_list_view,omitempty"`
	AlwaysUseGamepaduiOverlay             *bool                     `protobuf:"varint,4020,opt,name=always_use_gamepadui_overlay,json=alwaysUseGamepaduiOverlay" json:"always_use_gamepadui_overlay,omitempty"`
	OverlayTabs                           *string                   `protobuf:"bytes,4021,opt,name=overlay_tabs,json=overlayTabs" json:"overlay_tabs,omitempty"`
	OverlayScaleInterface                 *bool                     `protobuf:"varint,4022,opt,name=overlay_scale_interface,json=overlayScaleInterface" json:"overlay_scale_interface,omitempty"`
	OverlayRestoreBrowserTabs             *bool                     `protobuf:"varint,4023,opt,name=overlay_restore_browser_tabs,json=overlayRestoreBrowserTabs" json:"overlay_restore_browser_tabs,omitempty"`
	EnableAvifScreenshots                 *bool                     `protobuf:"varint,4024,opt,name=enable_avif_screenshots,json=enableAvifScreenshots" json:"enable_avif_screenshots,omitempty"`
	OverlayFpsCounterDetailLevel          *int32                    `protobuf:"varint,4025,opt,name=overlay_fps_counter_detail_level,json=overlayFpsCounterDetailLevel" json:"overlay_fps_counter_detail_level,omitempty"`
	OverlayFpsCounterSaturationFactor     *float32                  `protobuf:"fixed32,4026,opt,name=overlay_fps_counter_saturation_factor,json=overlayFpsCounterSaturationFactor" json:"overlay_fps_counter_saturation_factor,omitempty"`
	OverlayFpsCounterBgopacity            *float32                  `protobuf:"fixed32,4027,opt,name=overlay_fps_counter_bgopacity,json=overlayFpsCounterBgopacity" json:"overlay_fps_counter_bgopacity,omitempty"`
	OverlayFpsCounterScaleFactor          *float32                  `protobuf:"fixed32,4028,opt,name=overlay_fps_counter_scale_factor,json=overlayFpsCounterScaleFactor" json:"overlay_fps_counter_scale_factor,omitempty"`
	OverlayFpsCounterKey                  *CMsgHotkey               `protobuf:"bytes,4029,opt,name=overlay_fps_counter_key,json=overlayFpsCounterKey" json:"overlay_fps_counter_key,omitempty"`
	OverlayFpsCounterFpsGraph             *bool                     `protobuf:"varint,4030,opt,name=overlay_fps_counter_fps_graph,json=overlayFpsCounterFpsGraph" json:"overlay_fps_counter_fps_graph,omitempty"`
	OverlayFpsCounterCpuGraph             *bool                     `protobuf:"varint,4031,opt,name=overlay_fps_counter_cpu_graph,json=overlayFpsCounterCpuGraph" json:"overlay_fps_counter_cpu_graph,omitempty"`
	OverlayFpsCounterAllowKmDriver        *bool                     `protobuf:"varint,4032,opt,name=overlay_fps_counter_allow_km_driver,json=overlayFpsCounterAllowKmDriver" json:"overlay_fps_counter_allow_km_driver,omitempty"`
	SmoothScrollWebviews                  *bool                     `protobuf:"varint,5000,opt,name=smooth_scroll_webviews,json=smoothScrollWebviews" json:"smooth_scroll_webviews,omitempty"`
	EnableGpuAcceleratedWebviews          *bool                     `protobuf:"varint,5001,opt,name=enable_gpu_accelerated_webviews,json=enableGpuAcceleratedWebviews" json:"enable_gpu_accelerated_webviews,omitempty"`
	EnableHardwareVideoDecoding           *bool                     `protobuf:"varint,5003,opt,name=enable_hardware_video_decoding,json=enableHardwareVideoDecoding" json:"enable_hardware_video_decoding,omitempty"`
	RunAtStartup                          *bool                     `protobuf:"varint,5004,opt,name=run_at_startup,json=runAtStartup" json:"run_at_startup,omitempty"`
	EnableDpiScaling                      *bool                     `protobuf:"varint,5005,opt,name=enable_dpi_scaling,json=enableDpiScaling" json:"enable_dpi_scaling,omitempty"`
	EnableMarketingMessages               *bool                     `protobuf:"varint,5006,opt,name=enable_marketing_messages,json=enableMarketingMessages" json:"enable_marketing_messages,omitempty"`
	StartInBigPictureMode                 *bool                     `protobuf:"varint,5007,opt,name=start_in_big_picture_mode,json=startInBigPictureMode" json:"start_in_big_picture_mode,omitempty"`
	JumplistFlags                         *uint32                   `protobuf:"varint,5008,opt,name=jumplist_flags,json=jumplistFlags" json:"jumplist_flags,omitempty"`
	EnableUiSounds                        *bool                     `protobuf:"varint,5009,opt,name=enable_ui_sounds,json=enableUiSounds" json:"enable_ui_sounds,omitempty"`
	DisableAllToasts                      *bool                     `protobuf:"varint,6000,opt,name=disable_all_toasts,json=disableAllToasts" json:"disable_all_toasts,omitempty"`
	DisableToastsInGame                   *bool                     `protobuf:"varint,6001,opt,name=disable_toasts_in_game,json=disableToastsInGame" json:"disable_toasts_in_game,omitempty"`
	PlaySoundOnToast                      *bool                     `protobuf:"varint,6002,opt,name=play_sound_on_toast,json=playSoundOnToast" json:"play_sound_on_toast,omitempty"`
	LibraryDisplaySize                    *int32                    `protobuf:"varint,7000,opt,name=library_display_size,json=libraryDisplaySize" json:"library_display_size,omitempty"`
	LibraryWhatsNewShowOnlyProductUpdates *bool                     `protobuf:"varint,7001,opt,name=library_whats_new_show_only_product_updates,json=libraryWhatsNewShowOnlyProductUpdates" json:"library_whats_new_show_only_product_updates,omitempty"`
	ShowStoreContentOnHome                *bool                     `protobuf:"varint,7002,opt,name=show_store_content_on_home,json=showStoreContentOnHome" json:"show_store_content_on_home,omitempty"`
	StartPage                             *string                   `protobuf:"bytes,7003,opt,name=start_page,json=startPage" json:"start_page,omitempty"`
	LibraryLowBandwidthMode               *bool                     `protobuf:"varint,7004,opt,name=library_low_bandwidth_mode,json=libraryLowBandwidthMode" json:"library_low_bandwidth_mode,omitempty"`
	LibraryLowPerfMode                    *bool                     `protobuf:"varint,7005,opt,name=library_low_perf_mode,json=libraryLowPerfMode" json:"library_low_perf_mode,omitempty"`
	LibraryDisableCommunityContent        *bool                     `protobuf:"varint,7006,opt,name=library_disable_community_content,json=libraryDisableCommunityContent" json:"library_disable_community_content,omitempty"`
	LibraryDisplayIconInGameList          *bool                     `protobuf:"varint,7007,opt,name=library_display_icon_in_game_list,json=libraryDisplayIconInGameList" json:"library_display_icon_in_game_list,omitempty"`
	ReadyToPlayIncludesStreaming          *bool                     `protobuf:"varint,7008,opt,name=ready_to_play_includes_streaming,json=readyToPlayIncludesStreaming" json:"ready_to_play_includes_streaming,omitempty"`
	ShowSteamDeckInfo                     *bool                     `protobuf:"varint,7009,opt,name=show_steam_deck_info,json=showSteamDeckInfo" json:"show_steam_deck_info,omitempty"`
	EnableShaderPrecache                  *bool                     `protobuf:"varint,8000,opt,name=enable_shader_precache,json=enableShaderPrecache" json:"enable_shader_precache,omitempty"`
	EnableShaderBackgroundProcessing      *bool                     `protobuf:"varint,8001,opt,name=enable_shader_background_processing,json=enableShaderBackgroundProcessing" json:"enable_shader_background_processing,omitempty"`
	ShaderPrecachedSize                   *uint64                   `protobuf:"varint,8002,opt,name=shader_precached_size,json=shaderPrecachedSize" json:"shader_precached_size,omitempty"`
	NeedsSteamServiceRepair               *bool                     `protobuf:"varint,8003,opt,name=needs_steam_service_repair,json=needsSteamServiceRepair" json:"needs_steam_service_repair,omitempty"`
	DownloadPeerContent                   *int32                    `protobuf:"varint,8004,opt,name=download_peer_content,json=downloadPeerContent" json:"download_peer_content,omitempty"`
	DownloadRateBitsPerS                  *bool                     `protobuf:"varint,8005,opt,name=download_rate_bits_per_s,json=downloadRateBitsPerS" json:"download_rate_bits_per_s,omitempty"`
	RestrictAutoUpdates                   *bool                     `protobuf:"varint,8006,opt,name=restrict_auto_updates,json=restrictAutoUpdates" json:"restrict_auto_updates,omitempty"`
	RestrictAutoUpdatesStart              *int32                    `protobuf:"varint,8007,opt,name=restrict_auto_updates_start,json=restrictAutoUpdatesStart" json:"restrict_auto_updates_start,omitempty"`
	RestrictAutoUpdatesEnd                *int32                    `protobuf:"varint,8008,opt,name=restrict_auto_updates_end,json=restrictAutoUpdatesEnd" json:"restrict_auto_updates_end,omitempty"`
	DownloadRegion                        *int32                    `protobuf:"varint,8009,opt,name=download_region,json=downloadRegion" json:"download_region,omitempty"`
	DownloadWhileAppRunning               *bool                     `protobuf:"varint,8010,opt,name=download_while_app_running,json=downloadWhileAppRunning" json:"download_while_app_running,omitempty"`
	DownloadThrottleWhileStreaming        *bool                     `protobuf:"varint,8011,opt,name=download_throttle_while_streaming,json=downloadThrottleWhileStreaming" json:"download_throttle_while_streaming,omitempty"`
	DownloadThrottleRate                  *int32                    `protobuf:"varint,8012,opt,name=download_throttle_rate,json=downloadThrottleRate" json:"download_throttle_rate,omitempty"`
	DefaultAppUpdateBehavior              *int32                    `protobuf:"varint,8013,opt,name=default_app_update_behavior,json=defaultAppUpdateBehavior" json:"default_app_update_behavior,omitempty"`
	CloudEnabled                          *bool                     `protobuf:"varint,10000,opt,name=cloud_enabled,json=cloudEnabled" json:"cloud_enabled,omitempty"`
	ShowScreenshotManager                 *bool                     `protobuf:"varint,10001,opt,name=show_screenshot_manager,json=showScreenshotManager" json:"show_screenshot_manager,omitempty"`
	MusicVolume                           *int32                    `protobuf:"varint,11000,opt,name=music_volume,json=musicVolume" json:"music_volume,omitempty"`
	MusicPauseOnAppStart                  *bool                     `protobuf:"varint,11001,opt,name=music_pause_on_app_start,json=musicPauseOnAppStart" json:"music_pause_on_app_start,omitempty"`
	MusicPauseOnVoiceChat                 *bool                     `protobuf:"varint,11002,opt,name=music_pause_on_voice_chat,json=musicPauseOnVoiceChat" json:"music_pause_on_voice_chat,omitempty"`
	MusicDownloadHighQuality              *bool                     `protobuf:"varint,11003,opt,name=music_download_high_quality,json=musicDownloadHighQuality" json:"music_download_high_quality,omitempty"`
	MusicPlaylistNotification             *bool                     `protobuf:"varint,11004,opt,name=music_playlist_notification,json=musicPlaylistNotification" json:"music_playlist_notification,omitempty"`
	BroadcastPermissions                  *EBroadcastPermission     `protobuf:"varint,12000,opt,name=broadcast_permissions,json=broadcastPermissions,enum=EBroadcastPermission,def=0" json:"broadcast_permissions,omitempty"`
	BroadcastOutputWidth                  *int32                    `protobuf:"varint,12001,opt,name=broadcast_output_width,json=broadcastOutputWidth" json:"broadcast_output_width,omitempty"`
	BroadcastOutputHeight                 *int32                    `protobuf:"varint,12002,opt,name=broadcast_output_height,json=broadcastOutputHeight" json:"broadcast_output_height,omitempty"`
	BroadcastBitrate                      *int32                    `protobuf:"varint,12003,opt,name=broadcast_bitrate,json=broadcastBitrate" json:"broadcast_bitrate,omitempty"`
	BroadcastEncodingOption               *EBroadcastEncoderSetting `protobuf:"varint,12004,opt,name=broadcast_encoding_option,json=broadcastEncodingOption,enum=EBroadcastEncoderSetting,def=0" json:"broadcast_encoding_option,omitempty"`
	BroadcastRecordAllVideo               *bool                     `protobuf:"varint,12005,opt,name=broadcast_record_all_video,json=broadcastRecordAllVideo" json:"broadcast_record_all_video,omitempty"`
	BroadcastRecordAllAudio               *bool                     `protobuf:"varint,12006,opt,name=broadcast_record_all_audio,json=broadcastRecordAllAudio" json:"broadcast_record_all_audio,omitempty"`
	BroadcastRecordMicrophone             *bool                     `protobuf:"varint,12007,opt,name=broadcast_record_microphone,json=broadcastRecordMicrophone" json:"broadcast_record_microphone,omitempty"`
	BroadcastShowUploadStats              *bool                     `protobuf:"varint,12008,opt,name=broadcast_show_upload_stats,json=broadcastShowUploadStats" json:"broadcast_show_upload_stats,omitempty"`
	BroadcastShowLiveReminder             *bool                     `protobuf:"varint,12009,opt,name=broadcast_show_live_reminder,json=broadcastShowLiveReminder" json:"broadcast_show_live_reminder,omitempty"`
	BroadcastChatCorner                   *int32                    `protobuf:"varint,12010,opt,name=broadcast_chat_corner,json=broadcastChatCorner" json:"broadcast_chat_corner,omitempty"`
	GamestreamHardwareVideoEncode         *bool                     `protobuf:"varint,13000,opt,name=gamestream_hardware_video_encode,json=gamestreamHardwareVideoEncode" json:"gamestream_hardware_video_encode,omitempty"`
	GamestreamEnableVideoH265             *bool                     `protobuf:"varint,13001,opt,name=gamestream_enable_video_h265,json=gamestreamEnableVideoH265" json:"gamestream_enable_video_h265,omitempty"`
	SteamInputConfiguratorErrorMsgEnable  *bool                     `protobuf:"varint,14001,opt,name=steam_input_configurator_error_msg_enable,json=steamInputConfiguratorErrorMsgEnable" json:"steam_input_configurator_error_msg_enable,omitempty"`
	ControllerGuideButtonFocusSteam       *bool                     `protobuf:"varint,14002,opt,name=controller_guide_button_focus_steam,json=controllerGuideButtonFocusSteam" json:"controller_guide_button_focus_steam,omitempty"`
	ControllerPsSupport                   *int32                    `protobuf:"varint,14003,opt,name=controller_ps_support,json=controllerPsSupport" json:"controller_ps_support,omitempty"`
	ControllerXboxSupport                 *bool                     `protobuf:"varint,14004,opt,name=controller_xbox_support,json=controllerXboxSupport" json:"controller_xbox_support,omitempty"`
	ControllerXboxDriver                  *bool                     `protobuf:"varint,14005,opt,name=controller_xbox_driver,json=controllerXboxDriver" json:"controller_xbox_driver,omitempty"`
	ControllerSwitchSupport               *bool                     `protobuf:"varint,14006,opt,name=controller_switch_support,json=controllerSwitchSupport" json:"controller_switch_support,omitempty"`
	ControllerGenericSupport              *bool                     `protobuf:"varint,14007,opt,name=controller_generic_support,json=controllerGenericSupport" json:"controller_generic_support,omitempty"`
	ControllerPowerOffTimeout             *int32                    `protobuf:"varint,14008,opt,name=controller_power_off_timeout,json=controllerPowerOffTimeout" json:"controller_power_off_timeout,omitempty"`
	TurnOffControllerOnExit               *bool                     `protobuf:"varint,14009,opt,name=turn_off_controller_on_exit,json=turnOffControllerOnExit" json:"turn_off_controller_on_exit,omitempty"`
	ControllerCombineNintendoJoycons      *bool                     `protobuf:"varint,14010,opt,name=controller_combine_nintendo_joycons,json=controllerCombineNintendoJoycons" json:"controller_combine_nintendo_joycons,omitempty"`
	ControllerEnableChord                 *bool                     `protobuf:"varint,140011,opt,name=controller_enable_chord,json=controllerEnableChord" json:"controller_enable_chord,omitempty"`
	ControllerPollRate                    *bool                     `protobuf:"varint,140012,opt,name=controller_poll_rate,json=controllerPollRate" json:"controller_poll_rate,omitempty"`
	StartupMovieId                        *uint64                   `protobuf:"varint,16000,opt,name=startup_movie_id,json=startupMovieId" json:"startup_movie_id,omitempty"`
	StartupMovieLocalPath                 *string                   `protobuf:"bytes,16001,opt,name=startup_movie_local_path,json=startupMovieLocalPath" json:"startup_movie_local_path,omitempty"`
	StartupMovieShuffle                   *bool                     `protobuf:"varint,16002,opt,name=startup_movie_shuffle,json=startupMovieShuffle" json:"startup_movie_shuffle,omitempty"`
	StartupMovieUsedForResume             *bool                     `protobuf:"varint,16003,opt,name=startup_movie_used_for_resume,json=startupMovieUsedForResume" json:"startup_movie_used_for_resume,omitempty"`
	GameNotesEnableSpellcheck             *bool                     `protobuf:"varint,17001,opt,name=game_notes_enable_spellcheck,json=gameNotesEnableSpellcheck" json:"game_notes_enable_spellcheck,omitempty"`
	ScreenshotItemsPerRow                 *int32                    `protobuf:"varint,18000,opt,name=screenshot_items_per_row,json=screenshotItemsPerRow" json:"screenshot_items_per_row,omitempty"`
	GamerecordingBackgroundPath           *string                   `protobuf:"bytes,18201,opt,name=gamerecording_background_path,json=gamerecordingBackgroundPath" json:"gamerecording_background_path,omitempty"`
	GamerecordingBackgroundMaxKeep        *string                   `protobuf:"bytes,18202,opt,name=gamerecording_background_max_keep,json=gamerecordingBackgroundMaxKeep" json:"gamerecording_background_max_keep,omitempty"`
	GamerecordingBackgroundTimeResolution *int32                    `protobuf:"varint,18203,opt,name=gamerecording_background_time_resolution,json=gamerecordingBackgroundTimeResolution" json:"gamerecording_background_time_resolution,omitempty"`
	GamerecordingBackgroundMk             *CMsgHotkey               `protobuf:"bytes,18207,opt,name=gamerecording_background_mk,json=gamerecordingBackgroundMk" json:"gamerecording_background_mk,omitempty"`
	GamerecordingBackgroundTg             *CMsgHotkey               `protobuf:"bytes,18208,opt,name=gamerecording_background_tg,json=gamerecordingBackgroundTg" json:"gamerecording_background_tg,omitempty"`
	GamerecordingBackgroundAM             *bool                     `protobuf:"varint,18209,opt,name=gamerecording_background_a_m,json=gamerecordingBackgroundAM" json:"gamerecording_background_a_m,omitempty"`
	GamerecordingVideoBitrate             *string                   `protobuf:"bytes,18210,opt,name=gamerecording_video_bitrate,json=gamerecordingVideoBitrate" json:"gamerecording_video_bitrate,omitempty"`
	GamerecordingBackgroundMode           *EGRMode                  `protobuf:"varint,18212,opt,name=gamerecording_background_mode,json=gamerecordingBackgroundMode,enum=EGRMode,def=0" json:"gamerecording_background_mode,omitempty"`
	GamerecordingBackgroundAudio          *EGRAudio                 `protobuf:"varint,18213,opt,name=gamerecording_background_audio,json=gamerecordingBackgroundAudio,enum=EGRAudio,def=0" json:"gamerecording_background_audio,omitempty"`
	GamerecordingMaxFps                   *int32                    `protobuf:"varint,18214,opt,name=gamerecording_max_fps,json=gamerecordingMaxFps" json:"gamerecording_max_fps,omitempty"`
	GamerecordingHotkeyIc                 *CMsgHotkey               `protobuf:"bytes,18215,opt,name=gamerecording_hotkey_ic,json=gamerecordingHotkeyIc" json:"gamerecording_hotkey_ic,omitempty"`
	GamerecordingIcSeconds                *float32                  `protobuf:"fixed32,18216,opt,name=gamerecording_ic_seconds,json=gamerecordingIcSeconds" json:"gamerecording_ic_seconds,omitempty"`
	GamerecordingExportLimitType          *EGRExportLimitType       `protobuf:"varint,18217,opt,name=gamerecording_export_limit_type,json=gamerecordingExportLimitType,enum=EGRExportLimitType,def=0" json:"gamerecording_export_limit_type,omitempty"`
	GamerecordingExportLimitSizeMb        *int32                    `protobuf:"varint,18218,opt,name=gamerecording_export_limit_size_mb,json=gamerecordingExportLimitSizeMb" json:"gamerecording_export_limit_size_mb,omitempty"`
	GamerecordingExportLimitBitrate       *int32                    `protobuf:"varint,18219,opt,name=gamerecording_export_limit_bitrate,json=gamerecordingExportLimitBitrate" json:"gamerecording_export_limit_bitrate,omitempty"`
	GamerecordingExportLimitWidth         *int32                    `protobuf:"varint,18220,opt,name=gamerecording_export_limit_width,json=gamerecordingExportLimitWidth" json:"gamerecording_export_limit_width,omitempty"`
	GamerecordingExportLimitHeight        *int32                    `protobuf:"varint,18221,opt,name=gamerecording_export_limit_height,json=gamerecordingExportLimitHeight" json:"gamerecording_export_limit_height,omitempty"`
	GamerecordingExportLimitFrameRate     *int32                    `protobuf:"varint,18222,opt,name=gamerecording_export_limit_frame_rate,json=gamerecordingExportLimitFrameRate" json:"gamerecording_export_limit_frame_rate,omitempty"`
	GamerecordingExportDirectory          *string                   `protobuf:"bytes,18223,opt,name=gamerecording_export_directory,json=gamerecordingExportDirectory" json:"gamerecording_export_directory,omitempty"`
	GamerecordingExportCodec              *EExportCodec             `protobuf:"varint,18224,opt,name=gamerecording_export_codec,json=gamerecordingExportCodec,enum=EExportCodec,def=0" json:"gamerecording_export_codec,omitempty"`
	GamerecordingVideoMaxheight           *int32                    `protobuf:"varint,18225,opt,name=gamerecording_video_maxheight,json=gamerecordingVideoMaxheight" json:"gamerecording_video_maxheight,omitempty"`
	GamerecordingForceMicMono             *bool                     `protobuf:"varint,18226,opt,name=gamerecording_force_mic_mono,json=gamerecordingForceMicMono" json:"gamerecording_force_mic_mono,omitempty"`
	GamerecordingAutomaticGainControl     *bool                     `protobuf:"varint,18227,opt,name=gamerecording_automatic_gain_control,json=gamerecordingAutomaticGainControl" json:"gamerecording_automatic_gain_control,omitempty"`
	ShowTimestampsInConsole               *bool                     `protobuf:"varint,20000,opt,name=show_timestamps_in_console,json=showTimestampsInConsole" json:"show_timestamps_in_console,omitempty"`
	ForceOobe                             *bool                     `protobuf:"varint,20001,opt,name=force_oobe,json=forceOobe" json:"force_oobe,omitempty"`
	OverrideBrowserComposerMode           *int32                    `protobuf:"varint,20002,opt,name=override_browser_composer_mode,json=overrideBrowserComposerMode" json:"override_browser_composer_mode,omitempty"`
	CefRemoteDebuggingEnabled             *bool                     `protobuf:"varint,20003,opt,name=cef_remote_debugging_enabled,json=cefRemoteDebuggingEnabled" json:"cef_remote_debugging_enabled,omitempty"`
	ForceDeckPerfTab                      *bool                     `protobuf:"varint,20004,opt,name=force_deck_perf_tab,json=forceDeckPerfTab" json:"force_deck_perf_tab,omitempty"`
	ForceFakeMandatoryUpdate              *bool                     `protobuf:"varint,20005,opt,name=force_fake_mandatory_update,json=forceFakeMandatoryUpdate" json:"force_fake_mandatory_update,omitempty"`
	HdrCompatTesting                      *bool                     `protobuf:"varint,20006,opt,name=hdr_compat_testing,json=hdrCompatTesting" json:"hdr_compat_testing,omitempty"`
	DeveloperModeEnabled                  *bool                     `protobuf:"varint,20007,opt,name=developer_mode_enabled,json=developerModeEnabled" json:"developer_mode_enabled,omitempty"`
	ShowAdvancedUpdateChannels            *bool                     `protobuf:"varint,20008,opt,name=show_advanced_update_channels,json=showAdvancedUpdateChannels" json:"show_advanced_update_channels,omitempty"`
	GamescopeHdrVisualization             *EHDRVisualization        `protobuf:"varint,21001,opt,name=gamescope_hdr_visualization,json=gamescopeHdrVisualization,enum=EHDRVisualization,def=0" json:"gamescope_hdr_visualization,omitempty"`
	GamescopeAppTargetFramerate           *int32                    `protobuf:"varint,21002,opt,name=gamescope_app_target_framerate,json=gamescopeAppTargetFramerate" json:"gamescope_app_target_framerate,omitempty"`
	GamescopeEnableAppTargetFramerate     *bool                     `protobuf:"varint,21003,opt,name=gamescope_enable_app_target_framerate,json=gamescopeEnableAppTargetFramerate" json:"gamescope_enable_app_target_framerate,omitempty"`
	GamescopeDisableFramelimit            *bool                     `protobuf:"varint,21004,opt,name=gamescope_disable_framelimit,json=gamescopeDisableFramelimit" json:"gamescope_disable_framelimit,omitempty"`
	GamescopeDisplayRefreshRate           *int32                    `protobuf:"varint,21005,opt,name=gamescope_display_refresh_rate,json=gamescopeDisplayRefreshRate" json:"gamescope_display_refresh_rate,omitempty"`
	GamescopeUseGameRefreshRateInSteam    *bool                     `protobuf:"varint,21006,opt,name=gamescope_use_game_refresh_rate_in_steam,json=gamescopeUseGameRefreshRateInSteam" json:"gamescope_use_game_refresh_rate_in_steam,omitempty"`
	GamescopeDisableMuraCorrection        *bool                     `protobuf:"varint,21007,opt,name=gamescope_disable_mura_correction,json=gamescopeDisableMuraCorrection" json:"gamescope_disable_mura_correction,omitempty"`
	GamescopeIncludeSteamuiInScreenshots  *bool                     `protobuf:"varint,21008,opt,name=gamescope_include_steamui_in_screenshots,json=gamescopeIncludeSteamuiInScreenshots" json:"gamescope_include_steamui_in_screenshots,omitempty"`
	GamescopeAllowTearing                 *bool                     `protobuf:"varint,21009,opt,name=gamescope_allow_tearing,json=gamescopeAllowTearing" json:"gamescope_allow_tearing,omitempty"`
	GamescopeCompositeDebug               *bool                     `protobuf:"varint,21010,opt,name=gamescope_composite_debug,json=gamescopeCompositeDebug" json:"gamescope_composite_debug,omitempty"`
	GamescopeForceComposite               *bool                     `protobuf:"varint,21011,opt,name=gamescope_force_composite,json=gamescopeForceComposite" json:"gamescope_force_composite,omitempty"`
	GamescopeGameResolutionGlobal         *string                   `protobuf:"bytes,21012,opt,name=gamescope_game_resolution_global,json=gamescopeGameResolutionGlobal" json:"gamescope_game_resolution_global,omitempty"`
	GamescopeGuideHotkey                  *CMsgHotkey               `protobuf:"bytes,21013,opt,name=gamescope_guide_hotkey,json=gamescopeGuideHotkey" json:"gamescope_guide_hotkey,omitempty"`
	GamescopeQamHotkey                    *CMsgHotkey               `protobuf:"bytes,21014,opt,name=gamescope_qam_hotkey,json=gamescopeQamHotkey" json:"gamescope_qam_hotkey,omitempty"`
	GamescopeHdrEnabled                   *bool                     `protobuf:"varint,21015,opt,name=gamescope_hdr_enabled,json=gamescopeHdrEnabled" json:"gamescope_hdr_enabled,omitempty"`
	GamescopeNativeExternalResInSteam     *bool                     `protobuf:"varint,21016,opt,name=gamescope_native_external_res_in_steam,json=gamescopeNativeExternalResInSteam" json:"gamescope_native_external_res_in_steam,omitempty"`
	SteamosStatusLedBrightness            *int32                    `protobuf:"varint,22000,opt,name=steamos_status_led_brightness,json=steamosStatusLedBrightness" json:"steamos_status_led_brightness,omitempty"`
	SteamosTdpLimitEnabled                *bool                     `protobuf:"varint,22001,opt,name=steamos_tdp_limit_enabled,json=steamosTdpLimitEnabled" json:"steamos_tdp_limit_enabled,omitempty"`
	SteamosTdpLimit                       *int32                    `protobuf:"varint,22002,opt,name=steamos_tdp_limit,json=steamosTdpLimit" json:"steamos_tdp_limit,omitempty"`
	SteamosCecEnabled                     *bool                     `protobuf:"varint,22003,opt,name=steamos_cec_enabled,json=steamosCecEnabled" json:"steamos_cec_enabled,omitempty"`
	SteamosCecWakeOnResume                *bool                     `protobuf:"varint,22004,opt,name=steamos_cec_wake_on_resume,json=steamosCecWakeOnResume" json:"steamos_cec_wake_on_resume,omitempty"`
	SteamosWifiDebug                      *bool                     `protobuf:"varint,22005,opt,name=steamos_wifi_debug,json=steamosWifiDebug" json:"steamos_wifi_debug,omitempty"`
	SteamosWifiForceWpaSupplicant         *bool                     `protobuf:"varint,22006,opt,name=steamos_wifi_force_wpa_supplicant,json=steamosWifiForceWpaSupplicant" json:"steamos_wifi_force_wpa_supplicant,omitempty"`
	SteamosMagnifierScale                 *int32                    `protobuf:"varint,22007,opt,name=steamos_magnifier_scale,json=steamosMagnifierScale" json:"steamos_magnifier_scale,omitempty"`
	SteamosManualGpuClockEnabled          *bool                     `protobuf:"varint,22008,opt,name=steamos_manual_gpu_clock_enabled,json=steamosManualGpuClockEnabled" json:"steamos_manual_gpu_clock_enabled,omitempty"`
	SteamosManualGpuClockHz               *int32                    `protobuf:"varint,22009,opt,name=steamos_manual_gpu_clock_hz,json=steamosManualGpuClockHz" json:"steamos_manual_gpu_clock_hz,omitempty"`
	SteamosPlatformPerformanceProfile     *string                   `protobuf:"bytes,22010,opt,name=steamos_platform_performance_profile,json=steamosPlatformPerformanceProfile" json:"steamos_platform_performance_profile,omitempty"`
	SteamosChargeLimitEnabled             *bool                     `protobuf:"varint,22011,opt,name=steamos_charge_limit_enabled,json=steamosChargeLimitEnabled" json:"steamos_charge_limit_enabled,omitempty"`
	SteamosChargeLimit                    *int32                    `protobuf:"varint,22012,opt,name=steamos_charge_limit,json=steamosChargeLimit" json:"steamos_charge_limit,omitempty"`
	SteamosChargeLimitDevmode             *bool                     `protobuf:"varint,22013,opt,name=steamos_charge_limit_devmode,json=steamosChargeLimitDevmode" json:"steamos_charge_limit_devmode,omitempty"`
	SettingValidationBool                 *bool                     `protobuf:"varint,23001,opt,name=setting_validation_bool,json=settingValidationBool" json:"setting_validation_bool,omitempty"`
	SettingValidationEnum                 *EHDRVisualization        `protobuf:"varint,23002,opt,name=setting_validation_enum,json=settingValidationEnum,enum=EHDRVisualization,def=0" json:"setting_validation_enum,omitempty"`
	SettingValidationInt32                *int32                    `protobuf:"varint,23003,opt,name=setting_validation_int32,json=settingValidationInt32" json:"setting_validation_int32,omitempty"`
	SettingValidationUint32               *uint32                   `protobuf:"varint,23004,opt,name=setting_validation_uint32,json=settingValidationUint32" json:"setting_validation_uint32,omitempty"`
	SettingValidationUint64               *uint64                   `protobuf:"varint,23005,opt,name=setting_validation_uint64,json=settingValidationUint64" json:"setting_validation_uint64,omitempty"`
	SettingValidationFloat                *float32                  `protobuf:"fixed32,23006,opt,name=setting_validation_float,json=settingValidationFloat" json:"setting_validation_float,omitempty"`
	SettingValidationString               *string                   `protobuf:"bytes,23007,opt,name=setting_validation_string,json=settingValidationString" json:"setting_validation_string,omitempty"`
	SettingValidationHotkey               *CMsgHotkey               `protobuf:"bytes,23008,opt,name=setting_validation_hotkey,json=settingValidationHotkey" json:"setting_validation_hotkey,omitempty"`
	SystemBluetoothEnabled                *bool                     `protobuf:"varint,24000,opt,name=system_bluetooth_enabled,json=systemBluetoothEnabled" json:"system_bluetooth_enabled,omitempty"`
	HardwareUpdaterEnabled                *bool                     `protobuf:"varint,24001,opt,name=hardware_updater_enabled,json=hardwareUpdaterEnabled" json:"hardware_updater_enabled,omitempty"`
	VrShowPerfGraphInHmd                  *bool                     `protobuf:"varint,25000,opt,name=vr_show_perf_graph_in_hmd,json=vrShowPerfGraphInHmd" json:"vr_show_perf_graph_in_hmd,omitempty"`
	AccessibilityDebugVisualizer          *bool                     `protobuf:"varint,26000,opt,name=accessibility_debug_visualizer,json=accessibilityDebugVisualizer" json:"accessibility_debug_visualizer,omitempty"`
	AccessibilityScreenReaderEnabled      *bool                     `protobuf:"varint,26001,opt,name=accessibility_screen_reader_enabled,json=accessibilityScreenReaderEnabled" json:"accessibility_screen_reader_enabled,omitempty"`
	AccessibilityScreenReaderRate         *float32                  `protobuf:"fixed32,26002,opt,name=accessibility_screen_reader_rate,json=accessibilityScreenReaderRate" json:"accessibility_screen_reader_rate,omitempty"`
	AccessibilityScreenReaderPitch        *float32                  `protobuf:"fixed32,26003,opt,name=accessibility_screen_reader_pitch,json=accessibilityScreenReaderPitch" json:"accessibility_screen_reader_pitch,omitempty"`
	AccessibilityScreenReaderVolume       *float32                  `protobuf:"fixed32,26004,opt,name=accessibility_screen_reader_volume,json=accessibilityScreenReaderVolume" json:"accessibility_screen_reader_volume,omitempty"`
	AccessibilityHighContrastMode         *bool                     `protobuf:"varint,26005,opt,name=accessibility_high_contrast_mode,json=accessibilityHighContrastMode" json:"accessibility_high_contrast_mode,omitempty"`
	AccessibilityReduceMotion             *bool                     `protobuf:"varint,26006,opt,name=accessibility_reduce_motion,json=accessibilityReduceMotion" json:"accessibility_reduce_motion,omitempty"`
	AccessibilityMinimumFontSize          *uint32                   `protobuf:"varint,26008,opt,name=accessibility_minimum_font_size,json=accessibilityMinimumFontSize" json:"accessibility_minimum_font_size,omitempty"`
	AccessibilityColorFilterName          *string                   `protobuf:"bytes,26009,opt,name=accessibility_color_filter_name,json=accessibilityColorFilterName" json:"accessibility_color_filter_name,omitempty"`
	AccessibilityDesktopUiScale           *float32                  `protobuf:"fixed32,26010,opt,name=accessibility_desktop_ui_scale,json=accessibilityDesktopUiScale" json:"accessibility_desktop_ui_scale,omitempty"`
	AccessibilityScreenReaderLocale       *string                   `protobuf:"bytes,26011,opt,name=accessibility_screen_reader_locale,json=accessibilityScreenReaderLocale" json:"accessibility_screen_reader_locale,omitempty"`
	unknownFields                         protoimpl.UnknownFields
	sizeCache                             protoimpl.SizeCache
}

// Default values for CMsgClientSettings fields.
const (
	Default_CMsgClientSettings_BroadcastPermissions         = EBroadcastPermission_k_EBroadcastPermissionDisabled
	Default_CMsgClientSettings_BroadcastEncodingOption      = EBroadcastEncoderSetting_k_EBroadcastEncoderBestQuality
	Default_CMsgClientSettings_GamerecordingBackgroundMode  = EGRMode_k_EGRMode_Never
	Default_CMsgClientSettings_GamerecordingBackgroundAudio = EGRAudio_k_EGRAudio_Game
	Default_CMsgClientSettings_GamerecordingExportLimitType = EGRExportLimitType_k_EGRExportLimitType_Native
	Default_CMsgClientSettings_GamerecordingExportCodec     = EExportCodec_k_EExportCodec_Default
	Default_CMsgClientSettings_GamescopeHdrVisualization    = EHDRVisualization_k_EHDRVisualization_None
	Default_CMsgClientSettings_SettingValidationEnum        = EHDRVisualization_k_EHDRVisualization_None
)

func (x *CMsgClientSettings) Reset() {
	*x = CMsgClientSettings{}
	mi := &file_steammessages_clientsettings_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientSettings) ProtoMessage() {}

func (x *CMsgClientSettings) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientsettings_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientSettings.ProtoReflect.Descriptor instead.
func (*CMsgClientSettings) Descriptor() ([]byte, []int) {
	return file_steammessages_clientsettings_proto_rawDescGZIP(), []int{2}
}

func (x *CMsgClientSettings) GetNoSavePersonalInfo() bool {
	if x != nil && x.NoSavePersonalInfo != nil {
		return *x.NoSavePersonalInfo
	}
	return false
}

func (x *CMsgClientSettings) GetOobeTestModeEnabled() bool {
	if x != nil && x.OobeTestModeEnabled != nil {
		return *x.OobeTestModeEnabled
	}
	return false
}

func (x *CMsgClientSettings) GetInClientBeta() bool {
	if x != nil && x.InClientBeta != nil {
		return *x.InClientBeta
	}
	return false
}

func (x *CMsgClientSettings) GetIsSteamSideloaded() bool {
	if x != nil && x.IsSteamSideloaded != nil {
		return *x.IsSteamSideloaded
	}
	return false
}

func (x *CMsgClientSettings) GetPreferredMonitor() string {
	if x != nil && x.PreferredMonitor != nil {
		return *x.PreferredMonitor
	}
	return ""
}

func (x *CMsgClientSettings) GetSteamCefGpuBlocklistDisabled() bool {
	if x != nil && x.SteamCefGpuBlocklistDisabled != nil {
		return *x.SteamCefGpuBlocklistDisabled
	}
	return false
}

func (x *CMsgClientSettings) GetBigpictureWindowed() bool {
	if x != nil && x.BigpictureWindowed != nil {
		return *x.BigpictureWindowed
	}
	return false
}

func (x *CMsgClientSettings) GetDisplayName() string {
	if x != nil && x.DisplayName != nil {
		return *x.DisplayName
	}
	return ""
}

func (x *CMsgClientSettings) GetIsExternalDisplay() bool {
	if x != nil && x.IsExternalDisplay != nil {
		return *x.IsExternalDisplay
	}
	return false
}

func (x *CMsgClientSettings) GetSteamOsUnderscanLevel() float32 {
	if x != nil && x.SteamOsUnderscanLevel != nil {
		return *x.SteamOsUnderscanLevel
	}
	return 0
}

func (x *CMsgClientSettings) GetSteamOsUnderscanEnabled() bool {
	if x != nil && x.SteamOsUnderscanEnabled != nil {
		return *x.SteamOsUnderscanEnabled
	}
	return false
}

func (x *CMsgClientSettings) GetMinScaleFactor() float32 {
	if x != nil && x.MinScaleFactor != nil {
		return *x.MinScaleFactor
	}
	return 0
}

func (x *CMsgClientSettings) GetMaxScaleFactor() float32 {
	if x != nil && x.MaxScaleFactor != nil {
		return *x.MaxScaleFactor
	}
	return 0
}

func (x *CMsgClientSettings) GetAutoScaleFactor() float32 {
	if x != nil && x.AutoScaleFactor != nil {
		return *x.AutoScaleFactor
	}
	return 0
}

func (x *CMsgClientSettings) GetSmallMode() bool {
	if x != nil && x.SmallMode != nil {
		return *x.SmallMode
	}
	return false
}

func (x *CMsgClientSettings) GetSkipSteamvrInstallDialog() bool {
	if x != nil && x.SkipSteamvrInstallDialog != nil {
		return *x.SkipSteamvrInstallDialog
	}
	return false
}

func (x *CMsgClientSettings) GetAlwaysShowUserChooser() bool {
	if x != nil && x.AlwaysShowUserChooser != nil {
		return *x.AlwaysShowUserChooser
	}
	return false
}

func (x *CMsgClientSettings) GetOsVersionUnsupported() bool {
	if x != nil && x.OsVersionUnsupported != nil {
		return *x.OsVersionUnsupported
	}
	return false
}

func (x *CMsgClientSettings) GetShowFamilySharingNotifications() bool {
	if x != nil && x.ShowFamilySharingNotifications != nil {
		return *x.ShowFamilySharingNotifications
	}
	return false
}

func (x *CMsgClientSettings) GetShowCopyCountInLibrary() bool {
	if x != nil && x.ShowCopyCountInLibrary != nil {
		return *x.ShowCopyCountInLibrary
	}
	return false
}

func (x *CMsgClientSettings) GetOverlayFpsCounterCorner() int32 {
	if x != nil && x.OverlayFpsCounterCorner != nil {
		return *x.OverlayFpsCounterCorner
	}
	return 0
}

func (x *CMsgClientSettings) GetOverlayFpsCounterHighContrast() bool {
	if x != nil && x.OverlayFpsCounterHighContrast != nil {
		return *x.OverlayFpsCounterHighContrast
	}
	return false
}

func (x *CMsgClientSettings) GetOverlayKey() *CMsgHotkey {
	if x != nil {
		return x.OverlayKey
	}
	return nil
}

func (x *CMsgClientSettings) GetScreenshotKey() *CMsgHotkey {
	if x != nil {
		return x.ScreenshotKey
	}
	return nil
}

func (x *CMsgClientSettings) GetEnableOverlay() bool {
	if x != nil && x.EnableOverlay != nil {
		return *x.EnableOverlay
	}
	return false
}

func (x *CMsgClientSettings) GetEnableScreenshotNotification() bool {
	if x != nil && x.EnableScreenshotNotification != nil {
		return *x.EnableScreenshotNotification
	}
	return false
}

func (x *CMsgClientSettings) GetEnableScreenshotSound() bool {
	if x != nil && x.EnableScreenshotSound != nil {
		return *x.EnableScreenshotSound
	}
	return false
}

func (x *CMsgClientSettings) GetSaveUncompressedScreenshots() bool {
	if x != nil && x.SaveUncompressedScreenshots != nil {
		return *x.SaveUncompressedScreenshots
	}
	return false
}

func (x *CMsgClientSettings) GetScreenshotsPath() string {
	if x != nil && x.ScreenshotsPath != nil {
		return *x.ScreenshotsPath
	}
	return ""
}

func (x *CMsgClientSettings) GetDefaultPingRate() int32 {
	if x != nil && x.DefaultPingRate != nil {
		return *x.DefaultPingRate
	}
	return 0
}

func (x *CMsgClientSettings) GetServerPingRate() int32 {
	if x != nil && x.ServerPingRate != nil {
		return *x.ServerPingRate
	}
	return 0
}

func (x *CMsgClientSettings) GetSteamNetworkingShareIp() int32 {
	if x != nil && x.SteamNetworkingShareIp != nil {
		return *x.SteamNetworkingShareIp
	}
	return 0
}

func (x *CMsgClientSettings) GetWebBrowserHome() string {
	if x != nil && x.WebBrowserHome != nil {
		return *x.WebBrowserHome
	}
	return ""
}

func (x *CMsgClientSettings) GetVoiceMicDeviceName() string {
	if x != nil && x.VoiceMicDeviceName != nil {
		return *x.VoiceMicDeviceName
	}
	return ""
}

func (x *CMsgClientSettings) GetVoiceMicInputGain() float32 {
	if x != nil && x.VoiceMicInputGain != nil {
		return *x.VoiceMicInputGain
	}
	return 0
}

func (x *CMsgClientSettings) GetVoiceSpeakerOutputGain() float32 {
	if x != nil && x.VoiceSpeakerOutputGain != nil {
		return *x.VoiceSpeakerOutputGain
	}
	return 0
}

func (x *CMsgClientSettings) GetVoicePushToTalkSetting() int32 {
	if x != nil && x.VoicePushToTalkSetting != nil {
		return *x.VoicePushToTalkSetting
	}
	return 0
}

func (x *CMsgClientSettings) GetVoicePushToTalkKey() *CMsgHotkey {
	if x != nil {
		return x.VoicePushToTalkKey
	}
	return nil
}

func (x *CMsgClientSettings) GetOverlayToolbarListView() bool {
	if x != nil && x.OverlayToolbarListView != nil {
		return *x.OverlayToolbarListView
	}
	return false
}

func (x *CMsgClientSettings) GetAlwaysUseGamepaduiOverlay() bool {
	if x != nil && x.AlwaysUseGamepaduiOverlay != nil {
		return *x.AlwaysUseGamepaduiOverlay
	}
	return false
}

func (x *CMsgClientSettings) GetOverlayTabs() string {
	if x != nil && x.OverlayTabs != nil {
		return *x.OverlayTabs
	}
	return ""
}

func (x *CMsgClientSettings) GetOverlayScaleInterface() bool {
	if x != nil && x.OverlayScaleInterface != nil {
		return *x.OverlayScaleInterface
	}
	return false
}

func (x *CMsgClientSettings) GetOverlayRestoreBrowserTabs() bool {
	if x != nil && x.OverlayRestoreBrowserTabs != nil {
		return *x.OverlayRestoreBrowserTabs
	}
	return false
}

func (x *CMsgClientSettings) GetEnableAvifScreenshots() bool {
	if x != nil && x.EnableAvifScreenshots != nil {
		return *x.EnableAvifScreenshots
	}
	return false
}

func (x *CMsgClientSettings) GetOverlayFpsCounterDetailLevel() int32 {
	if x != nil && x.OverlayFpsCounterDetailLevel != nil {
		return *x.OverlayFpsCounterDetailLevel
	}
	return 0
}

func (x *CMsgClientSettings) GetOverlayFpsCounterSaturationFactor() float32 {
	if x != nil && x.OverlayFpsCounterSaturationFactor != nil {
		return *x.OverlayFpsCounterSaturationFactor
	}
	return 0
}

func (x *CMsgClientSettings) GetOverlayFpsCounterBgopacity() float32 {
	if x != nil && x.OverlayFpsCounterBgopacity != nil {
		return *x.OverlayFpsCounterBgopacity
	}
	return 0
}

func (x *CMsgClientSettings) GetOverlayFpsCounterScaleFactor() float32 {
	if x != nil && x.OverlayFpsCounterScaleFactor != nil {
		return *x.OverlayFpsCounterScaleFactor
	}
	return 0
}

func (x *CMsgClientSettings) GetOverlayFpsCounterKey() *CMsgHotkey {
	if x != nil {
		return x.OverlayFpsCounterKey
	}
	return nil
}

func (x *CMsgClientSettings) GetOverlayFpsCounterFpsGraph() bool {
	if x != nil && x.OverlayFpsCounterFpsGraph != nil {
		return *x.OverlayFpsCounterFpsGraph
	}
	return false
}

func (x *CMsgClientSettings) GetOverlayFpsCounterCpuGraph() bool {
	if x != nil && x.OverlayFpsCounterCpuGraph != nil {
		return *x.OverlayFpsCounterCpuGraph
	}
	return false
}

func (x *CMsgClientSettings) GetOverlayFpsCounterAllowKmDriver() bool {
	if x != nil && x.OverlayFpsCounterAllowKmDriver != nil {
		return *x.OverlayFpsCounterAllowKmDriver
	}
	return false
}

func (x *CMsgClientSettings) GetSmoothScrollWebviews() bool {
	if x != nil && x.SmoothScrollWebviews != nil {
		return *x.SmoothScrollWebviews
	}
	return false
}

func (x *CMsgClientSettings) GetEnableGpuAcceleratedWebviews() bool {
	if x != nil && x.EnableGpuAcceleratedWebviews != nil {
		return *x.EnableGpuAcceleratedWebviews
	}
	return false
}

func (x *CMsgClientSettings) GetEnableHardwareVideoDecoding() bool {
	if x != nil && x.EnableHardwareVideoDecoding != nil {
		return *x.EnableHardwareVideoDecoding
	}
	return false
}

func (x *CMsgClientSettings) GetRunAtStartup() bool {
	if x != nil && x.RunAtStartup != nil {
		return *x.RunAtStartup
	}
	return false
}

func (x *CMsgClientSettings) GetEnableDpiScaling() bool {
	if x != nil && x.EnableDpiScaling != nil {
		return *x.EnableDpiScaling
	}
	return false
}

func (x *CMsgClientSettings) GetEnableMarketingMessages() bool {
	if x != nil && x.EnableMarketingMessages != nil {
		return *x.EnableMarketingMessages
	}
	return false
}

func (x *CMsgClientSettings) GetStartInBigPictureMode() bool {
	if x != nil && x.StartInBigPictureMode != nil {
		return *x.StartInBigPictureMode
	}
	return false
}

func (x *CMsgClientSettings) GetJumplistFlags() uint32 {
	if x != nil && x.JumplistFlags != nil {
		return *x.JumplistFlags
	}
	return 0
}

func (x *CMsgClientSettings) GetEnableUiSounds() bool {
	if x != nil && x.EnableUiSounds != nil {
		return *x.EnableUiSounds
	}
	return false
}

func (x *CMsgClientSettings) GetDisableAllToasts() bool {
	if x != nil && x.DisableAllToasts != nil {
		return *x.DisableAllToasts
	}
	return false
}

func (x *CMsgClientSettings) GetDisableToastsInGame() bool {
	if x != nil && x.DisableToastsInGame != nil {
		return *x.DisableToastsInGame
	}
	return false
}

func (x *CMsgClientSettings) GetPlaySoundOnToast() bool {
	if x != nil && x.PlaySoundOnToast != nil {
		return *x.PlaySoundOnToast
	}
	return false
}

func (x *CMsgClientSettings) GetLibraryDisplaySize() int32 {
	if x != nil && x.LibraryDisplaySize != nil {
		return *x.LibraryDisplaySize
	}
	return 0
}

func (x *CMsgClientSettings) GetLibraryWhatsNewShowOnlyProductUpdates() bool {
	if x != nil && x.LibraryWhatsNewShowOnlyProductUpdates != nil {
		return *x.LibraryWhatsNewShowOnlyProductUpdates
	}
	return false
}

func (x *CMsgClientSettings) GetShowStoreContentOnHome() bool {
	if x != nil && x.ShowStoreContentOnHome != nil {
		return *x.ShowStoreContentOnHome
	}
	return false
}

func (x *CMsgClientSettings) GetStartPage() string {
	if x != nil && x.StartPage != nil {
		return *x.StartPage
	}
	return ""
}

func (x *CMsgClientSettings) GetLibraryLowBandwidthMode() bool {
	if x != nil && x.LibraryLowBandwidthMode != nil {
		return *x.LibraryLowBandwidthMode
	}
	return false
}

func (x *CMsgClientSettings) GetLibraryLowPerfMode() bool {
	if x != nil && x.LibraryLowPerfMode != nil {
		return *x.LibraryLowPerfMode
	}
	return false
}

func (x *CMsgClientSettings) GetLibraryDisableCommunityContent() bool {
	if x != nil && x.LibraryDisableCommunityContent != nil {
		return *x.LibraryDisableCommunityContent
	}
	return false
}

func (x *CMsgClientSettings) GetLibraryDisplayIconInGameList() bool {
	if x != nil && x.LibraryDisplayIconInGameList != nil {
		return *x.LibraryDisplayIconInGameList
	}
	return false
}

func (x *CMsgClientSettings) GetReadyToPlayIncludesStreaming() bool {
	if x != nil && x.ReadyToPlayIncludesStreaming != nil {
		return *x.ReadyToPlayIncludesStreaming
	}
	return false
}

func (x *CMsgClientSettings) GetShowSteamDeckInfo() bool {
	if x != nil && x.ShowSteamDeckInfo != nil {
		return *x.ShowSteamDeckInfo
	}
	return false
}

func (x *CMsgClientSettings) GetEnableShaderPrecache() bool {
	if x != nil && x.EnableShaderPrecache != nil {
		return *x.EnableShaderPrecache
	}
	return false
}

func (x *CMsgClientSettings) GetEnableShaderBackgroundProcessing() bool {
	if x != nil && x.EnableShaderBackgroundProcessing != nil {
		return *x.EnableShaderBackgroundProcessing
	}
	return false
}

func (x *CMsgClientSettings) GetShaderPrecachedSize() uint64 {
	if x != nil && x.ShaderPrecachedSize != nil {
		return *x.ShaderPrecachedSize
	}
	return 0
}

func (x *CMsgClientSettings) GetNeedsSteamServiceRepair() bool {
	if x != nil && x.NeedsSteamServiceRepair != nil {
		return *x.NeedsSteamServiceRepair
	}
	return false
}

func (x *CMsgClientSettings) GetDownloadPeerContent() int32 {
	if x != nil && x.DownloadPeerContent != nil {
		return *x.DownloadPeerContent
	}
	return 0
}

func (x *CMsgClientSettings) GetDownloadRateBitsPerS() bool {
	if x != nil && x.DownloadRateBitsPerS != nil {
		return *x.DownloadRateBitsPerS
	}
	return false
}

func (x *CMsgClientSettings) GetRestrictAutoUpdates() bool {
	if x != nil && x.RestrictAutoUpdates != nil {
		return *x.RestrictAutoUpdates
	}
	return false
}

func (x *CMsgClientSettings) GetRestrictAutoUpdatesStart() int32 {
	if x != nil && x.RestrictAutoUpdatesStart != nil {
		return *x.RestrictAutoUpdatesStart
	}
	return 0
}

func (x *CMsgClientSettings) GetRestrictAutoUpdatesEnd() int32 {
	if x != nil && x.RestrictAutoUpdatesEnd != nil {
		return *x.RestrictAutoUpdatesEnd
	}
	return 0
}

func (x *CMsgClientSettings) GetDownloadRegion() int32 {
	if x != nil && x.DownloadRegion != nil {
		return *x.DownloadRegion
	}
	return 0
}

func (x *CMsgClientSettings) GetDownloadWhileAppRunning() bool {
	if x != nil && x.DownloadWhileAppRunning != nil {
		return *x.DownloadWhileAppRunning
	}
	return false
}

func (x *CMsgClientSettings) GetDownloadThrottleWhileStreaming() bool {
	if x != nil && x.DownloadThrottleWhileStreaming != nil {
		return *x.DownloadThrottleWhileStreaming
	}
	return false
}

func (x *CMsgClientSettings) GetDownloadThrottleRate() int32 {
	if x != nil && x.DownloadThrottleRate != nil {
		return *x.DownloadThrottleRate
	}
	return 0
}

func (x *CMsgClientSettings) GetDefaultAppUpdateBehavior() int32 {
	if x != nil && x.DefaultAppUpdateBehavior != nil {
		return *x.DefaultAppUpdateBehavior
	}
	return 0
}

func (x *CMsgClientSettings) GetCloudEnabled() bool {
	if x != nil && x.CloudEnabled != nil {
		return *x.CloudEnabled
	}
	return false
}

func (x *CMsgClientSettings) GetShowScreenshotManager() bool {
	if x != nil && x.ShowScreenshotManager != nil {
		return *x.ShowScreenshotManager
	}
	return false
}

func (x *CMsgClientSettings) GetMusicVolume() int32 {
	if x != nil && x.MusicVolume != nil {
		return *x.MusicVolume
	}
	return 0
}

func (x *CMsgClientSettings) GetMusicPauseOnAppStart() bool {
	if x != nil && x.MusicPauseOnAppStart != nil {
		return *x.MusicPauseOnAppStart
	}
	return false
}

func (x *CMsgClientSettings) GetMusicPauseOnVoiceChat() bool {
	if x != nil && x.MusicPauseOnVoiceChat != nil {
		return *x.MusicPauseOnVoiceChat
	}
	return false
}

func (x *CMsgClientSettings) GetMusicDownloadHighQuality() bool {
	if x != nil && x.MusicDownloadHighQuality != nil {
		return *x.MusicDownloadHighQuality
	}
	return false
}

func (x *CMsgClientSettings) GetMusicPlaylistNotification() bool {
	if x != nil && x.MusicPlaylistNotification != nil {
		return *x.MusicPlaylistNotification
	}
	return false
}

func (x *CMsgClientSettings) GetBroadcastPermissions() EBroadcastPermission {
	if x != nil && x.BroadcastPermissions != nil {
		return *x.BroadcastPermissions
	}
	return Default_CMsgClientSettings_BroadcastPermissions
}

func (x *CMsgClientSettings) GetBroadcastOutputWidth() int32 {
	if x != nil && x.BroadcastOutputWidth != nil {
		return *x.BroadcastOutputWidth
	}
	return 0
}

func (x *CMsgClientSettings) GetBroadcastOutputHeight() int32 {
	if x != nil && x.BroadcastOutputHeight != nil {
		return *x.BroadcastOutputHeight
	}
	return 0
}

func (x *CMsgClientSettings) GetBroadcastBitrate() int32 {
	if x != nil && x.BroadcastBitrate != nil {
		return *x.BroadcastBitrate
	}
	return 0
}

func (x *CMsgClientSettings) GetBroadcastEncodingOption() EBroadcastEncoderSetting {
	if x != nil && x.BroadcastEncodingOption != nil {
		return *x.BroadcastEncodingOption
	}
	return Default_CMsgClientSettings_BroadcastEncodingOption
}

func (x *CMsgClientSettings) GetBroadcastRecordAllVideo() bool {
	if x != nil && x.BroadcastRecordAllVideo != nil {
		return *x.BroadcastRecordAllVideo
	}
	return false
}

func (x *CMsgClientSettings) GetBroadcastRecordAllAudio() bool {
	if x != nil && x.BroadcastRecordAllAudio != nil {
		return *x.BroadcastRecordAllAudio
	}
	return false
}

func (x *CMsgClientSettings) GetBroadcastRecordMicrophone() bool {
	if x != nil && x.BroadcastRecordMicrophone != nil {
		return *x.BroadcastRecordMicrophone
	}
	return false
}

func (x *CMsgClientSettings) GetBroadcastShowUploadStats() bool {
	if x != nil && x.BroadcastShowUploadStats != nil {
		return *x.BroadcastShowUploadStats
	}
	return false
}

func (x *CMsgClientSettings) GetBroadcastShowLiveReminder() bool {
	if x != nil && x.BroadcastShowLiveReminder != nil {
		return *x.BroadcastShowLiveReminder
	}
	return false
}

func (x *CMsgClientSettings) GetBroadcastChatCorner() int32 {
	if x != nil && x.BroadcastChatCorner != nil {
		return *x.BroadcastChatCorner
	}
	return 0
}

func (x *CMsgClientSettings) GetGamestreamHardwareVideoEncode() bool {
	if x != nil && x.GamestreamHardwareVideoEncode != nil {
		return *x.GamestreamHardwareVideoEncode
	}
	return false
}

func (x *CMsgClientSettings) GetGamestreamEnableVideoH265() bool {
	if x != nil && x.GamestreamEnableVideoH265 != nil {
		return *x.GamestreamEnableVideoH265
	}
	return false
}

func (x *CMsgClientSettings) GetSteamInputConfiguratorErrorMsgEnable() bool {
	if x != nil && x.SteamInputConfiguratorErrorMsgEnable != nil {
		return *x.SteamInputConfiguratorErrorMsgEnable
	}
	return false
}

func (x *CMsgClientSettings) GetControllerGuideButtonFocusSteam() bool {
	if x != nil && x.ControllerGuideButtonFocusSteam != nil {
		return *x.ControllerGuideButtonFocusSteam
	}
	return false
}

func (x *CMsgClientSettings) GetControllerPsSupport() int32 {
	if x != nil && x.ControllerPsSupport != nil {
		return *x.ControllerPsSupport
	}
	return 0
}

func (x *CMsgClientSettings) GetControllerXboxSupport() bool {
	if x != nil && x.ControllerXboxSupport != nil {
		return *x.ControllerXboxSupport
	}
	return false
}

func (x *CMsgClientSettings) GetControllerXboxDriver() bool {
	if x != nil && x.ControllerXboxDriver != nil {
		return *x.ControllerXboxDriver
	}
	return false
}

func (x *CMsgClientSettings) GetControllerSwitchSupport() bool {
	if x != nil && x.ControllerSwitchSupport != nil {
		return *x.ControllerSwitchSupport
	}
	return false
}

func (x *CMsgClientSettings) GetControllerGenericSupport() bool {
	if x != nil && x.ControllerGenericSupport != nil {
		return *x.ControllerGenericSupport
	}
	return false
}

func (x *CMsgClientSettings) GetControllerPowerOffTimeout() int32 {
	if x != nil && x.ControllerPowerOffTimeout != nil {
		return *x.ControllerPowerOffTimeout
	}
	return 0
}

func (x *CMsgClientSettings) GetTurnOffControllerOnExit() bool {
	if x != nil && x.TurnOffControllerOnExit != nil {
		return *x.TurnOffControllerOnExit
	}
	return false
}

func (x *CMsgClientSettings) GetControllerCombineNintendoJoycons() bool {
	if x != nil && x.ControllerCombineNintendoJoycons != nil {
		return *x.ControllerCombineNintendoJoycons
	}
	return false
}

func (x *CMsgClientSettings) GetControllerEnableChord() bool {
	if x != nil && x.ControllerEnableChord != nil {
		return *x.ControllerEnableChord
	}
	return false
}

func (x *CMsgClientSettings) GetControllerPollRate() bool {
	if x != nil && x.ControllerPollRate != nil {
		return *x.ControllerPollRate
	}
	return false
}

func (x *CMsgClientSettings) GetStartupMovieId() uint64 {
	if x != nil && x.StartupMovieId != nil {
		return *x.StartupMovieId
	}
	return 0
}

func (x *CMsgClientSettings) GetStartupMovieLocalPath() string {
	if x != nil && x.StartupMovieLocalPath != nil {
		return *x.StartupMovieLocalPath
	}
	return ""
}

func (x *CMsgClientSettings) GetStartupMovieShuffle() bool {
	if x != nil && x.StartupMovieShuffle != nil {
		return *x.StartupMovieShuffle
	}
	return false
}

func (x *CMsgClientSettings) GetStartupMovieUsedForResume() bool {
	if x != nil && x.StartupMovieUsedForResume != nil {
		return *x.StartupMovieUsedForResume
	}
	return false
}

func (x *CMsgClientSettings) GetGameNotesEnableSpellcheck() bool {
	if x != nil && x.GameNotesEnableSpellcheck != nil {
		return *x.GameNotesEnableSpellcheck
	}
	return false
}

func (x *CMsgClientSettings) GetScreenshotItemsPerRow() int32 {
	if x != nil && x.ScreenshotItemsPerRow != nil {
		return *x.ScreenshotItemsPerRow
	}
	return 0
}

func (x *CMsgClientSettings) GetGamerecordingBackgroundPath() string {
	if x != nil && x.GamerecordingBackgroundPath != nil {
		return *x.GamerecordingBackgroundPath
	}
	return ""
}

func (x *CMsgClientSettings) GetGamerecordingBackgroundMaxKeep() string {
	if x != nil && x.GamerecordingBackgroundMaxKeep != nil {
		return *x.GamerecordingBackgroundMaxKeep
	}
	return ""
}

func (x *CMsgClientSettings) GetGamerecordingBackgroundTimeResolution() int32 {
	if x != nil && x.GamerecordingBackgroundTimeResolution != nil {
		return *x.GamerecordingBackgroundTimeResolution
	}
	return 0
}

func (x *CMsgClientSettings) GetGamerecordingBackgroundMk() *CMsgHotkey {
	if x != nil {
		return x.GamerecordingBackgroundMk
	}
	return nil
}

func (x *CMsgClientSettings) GetGamerecordingBackgroundTg() *CMsgHotkey {
	if x != nil {
		return x.GamerecordingBackgroundTg
	}
	return nil
}

func (x *CMsgClientSettings) GetGamerecordingBackgroundAM() bool {
	if x != nil && x.GamerecordingBackgroundAM != nil {
		return *x.GamerecordingBackgroundAM
	}
	return false
}

func (x *CMsgClientSettings) GetGamerecordingVideoBitrate() string {
	if x != nil && x.GamerecordingVideoBitrate != nil {
		return *x.GamerecordingVideoBitrate
	}
	return ""
}

func (x *CMsgClientSettings) GetGamerecordingBackgroundMode() EGRMode {
	if x != nil && x.GamerecordingBackgroundMode != nil {
		return *x.GamerecordingBackgroundMode
	}
	return Default_CMsgClientSettings_GamerecordingBackgroundMode
}

func (x *CMsgClientSettings) GetGamerecordingBackgroundAudio() EGRAudio {
	if x != nil && x.GamerecordingBackgroundAudio != nil {
		return *x.GamerecordingBackgroundAudio
	}
	return Default_CMsgClientSettings_GamerecordingBackgroundAudio
}

func (x *CMsgClientSettings) GetGamerecordingMaxFps() int32 {
	if x != nil && x.GamerecordingMaxFps != nil {
		return *x.GamerecordingMaxFps
	}
	return 0
}

func (x *CMsgClientSettings) GetGamerecordingHotkeyIc() *CMsgHotkey {
	if x != nil {
		return x.GamerecordingHotkeyIc
	}
	return nil
}

func (x *CMsgClientSettings) GetGamerecordingIcSeconds() float32 {
	if x != nil && x.GamerecordingIcSeconds != nil {
		return *x.GamerecordingIcSeconds
	}
	return 0
}

func (x *CMsgClientSettings) GetGamerecordingExportLimitType() EGRExportLimitType {
	if x != nil && x.GamerecordingExportLimitType != nil {
		return *x.GamerecordingExportLimitType
	}
	return Default_CMsgClientSettings_GamerecordingExportLimitType
}

func (x *CMsgClientSettings) GetGamerecordingExportLimitSizeMb() int32 {
	if x != nil && x.GamerecordingExportLimitSizeMb != nil {
		return *x.GamerecordingExportLimitSizeMb
	}
	return 0
}

func (x *CMsgClientSettings) GetGamerecordingExportLimitBitrate() int32 {
	if x != nil && x.GamerecordingExportLimitBitrate != nil {
		return *x.GamerecordingExportLimitBitrate
	}
	return 0
}

func (x *CMsgClientSettings) GetGamerecordingExportLimitWidth() int32 {
	if x != nil && x.GamerecordingExportLimitWidth != nil {
		return *x.GamerecordingExportLimitWidth
	}
	return 0
}

func (x *CMsgClientSettings) GetGamerecordingExportLimitHeight() int32 {
	if x != nil && x.GamerecordingExportLimitHeight != nil {
		return *x.GamerecordingExportLimitHeight
	}
	return 0
}

func (x *CMsgClientSettings) GetGamerecordingExportLimitFrameRate() int32 {
	if x != nil && x.GamerecordingExportLimitFrameRate != nil {
		return *x.GamerecordingExportLimitFrameRate
	}
	return 0
}

func (x *CMsgClientSettings) GetGamerecordingExportDirectory() string {
	if x != nil && x.GamerecordingExportDirectory != nil {
		return *x.GamerecordingExportDirectory
	}
	return ""
}

func (x *CMsgClientSettings) GetGamerecordingExportCodec() EExportCodec {
	if x != nil && x.GamerecordingExportCodec != nil {
		return *x.GamerecordingExportCodec
	}
	return Default_CMsgClientSettings_GamerecordingExportCodec
}

func (x *CMsgClientSettings) GetGamerecordingVideoMaxheight() int32 {
	if x != nil && x.GamerecordingVideoMaxheight != nil {
		return *x.GamerecordingVideoMaxheight
	}
	return 0
}

func (x *CMsgClientSettings) GetGamerecordingForceMicMono() bool {
	if x != nil && x.GamerecordingForceMicMono != nil {
		return *x.GamerecordingForceMicMono
	}
	return false
}

func (x *CMsgClientSettings) GetGamerecordingAutomaticGainControl() bool {
	if x != nil && x.GamerecordingAutomaticGainControl != nil {
		return *x.GamerecordingAutomaticGainControl
	}
	return false
}

func (x *CMsgClientSettings) GetShowTimestampsInConsole() bool {
	if x != nil && x.ShowTimestampsInConsole != nil {
		return *x.ShowTimestampsInConsole
	}
	return false
}

func (x *CMsgClientSettings) GetForceOobe() bool {
	if x != nil && x.ForceOobe != nil {
		return *x.ForceOobe
	}
	return false
}

func (x *CMsgClientSettings) GetOverrideBrowserComposerMode() int32 {
	if x != nil && x.OverrideBrowserComposerMode != nil {
		return *x.OverrideBrowserComposerMode
	}
	return 0
}

func (x *CMsgClientSettings) GetCefRemoteDebuggingEnabled() bool {
	if x != nil && x.CefRemoteDebuggingEnabled != nil {
		return *x.CefRemoteDebuggingEnabled
	}
	return false
}

func (x *CMsgClientSettings) GetForceDeckPerfTab() bool {
	if x != nil && x.ForceDeckPerfTab != nil {
		return *x.ForceDeckPerfTab
	}
	return false
}

func (x *CMsgClientSettings) GetForceFakeMandatoryUpdate() bool {
	if x != nil && x.ForceFakeMandatoryUpdate != nil {
		return *x.ForceFakeMandatoryUpdate
	}
	return false
}

func (x *CMsgClientSettings) GetHdrCompatTesting() bool {
	if x != nil && x.HdrCompatTesting != nil {
		return *x.HdrCompatTesting
	}
	return false
}

func (x *CMsgClientSettings) GetDeveloperModeEnabled() bool {
	if x != nil && x.DeveloperModeEnabled != nil {
		return *x.DeveloperModeEnabled
	}
	return false
}

func (x *CMsgClientSettings) GetShowAdvancedUpdateChannels() bool {
	if x != nil && x.ShowAdvancedUpdateChannels != nil {
		return *x.ShowAdvancedUpdateChannels
	}
	return false
}

func (x *CMsgClientSettings) GetGamescopeHdrVisualization() EHDRVisualization {
	if x != nil && x.GamescopeHdrVisualization != nil {
		return *x.GamescopeHdrVisualization
	}
	return Default_CMsgClientSettings_GamescopeHdrVisualization
}

func (x *CMsgClientSettings) GetGamescopeAppTargetFramerate() int32 {
	if x != nil && x.GamescopeAppTargetFramerate != nil {
		return *x.GamescopeAppTargetFramerate
	}
	return 0
}

func (x *CMsgClientSettings) GetGamescopeEnableAppTargetFramerate() bool {
	if x != nil && x.GamescopeEnableAppTargetFramerate != nil {
		return *x.GamescopeEnableAppTargetFramerate
	}
	return false
}

func (x *CMsgClientSettings) GetGamescopeDisableFramelimit() bool {
	if x != nil && x.GamescopeDisableFramelimit != nil {
		return *x.GamescopeDisableFramelimit
	}
	return false
}

func (x *CMsgClientSettings) GetGamescopeDisplayRefreshRate() int32 {
	if x != nil && x.GamescopeDisplayRefreshRate != nil {
		return *x.GamescopeDisplayRefreshRate
	}
	return 0
}

func (x *CMsgClientSettings) GetGamescopeUseGameRefreshRateInSteam() bool {
	if x != nil && x.GamescopeUseGameRefreshRateInSteam != nil {
		return *x.GamescopeUseGameRefreshRateInSteam
	}
	return false
}

func (x *CMsgClientSettings) GetGamescopeDisableMuraCorrection() bool {
	if x != nil && x.GamescopeDisableMuraCorrection != nil {
		return *x.GamescopeDisableMuraCorrection
	}
	return false
}

func (x *CMsgClientSettings) GetGamescopeIncludeSteamuiInScreenshots() bool {
	if x != nil && x.GamescopeIncludeSteamuiInScreenshots != nil {
		return *x.GamescopeIncludeSteamuiInScreenshots
	}
	return false
}

func (x *CMsgClientSettings) GetGamescopeAllowTearing() bool {
	if x != nil && x.GamescopeAllowTearing != nil {
		return *x.GamescopeAllowTearing
	}
	return false
}

func (x *CMsgClientSettings) GetGamescopeCompositeDebug() bool {
	if x != nil && x.GamescopeCompositeDebug != nil {
		return *x.GamescopeCompositeDebug
	}
	return false
}

func (x *CMsgClientSettings) GetGamescopeForceComposite() bool {
	if x != nil && x.GamescopeForceComposite != nil {
		return *x.GamescopeForceComposite
	}
	return false
}

func (x *CMsgClientSettings) GetGamescopeGameResolutionGlobal() string {
	if x != nil && x.GamescopeGameResolutionGlobal != nil {
		return *x.GamescopeGameResolutionGlobal
	}
	return ""
}

func (x *CMsgClientSettings) GetGamescopeGuideHotkey() *CMsgHotkey {
	if x != nil {
		return x.GamescopeGuideHotkey
	}
	return nil
}

func (x *CMsgClientSettings) GetGamescopeQamHotkey() *CMsgHotkey {
	if x != nil {
		return x.GamescopeQamHotkey
	}
	return nil
}

func (x *CMsgClientSettings) GetGamescopeHdrEnabled() bool {
	if x != nil && x.GamescopeHdrEnabled != nil {
		return *x.GamescopeHdrEnabled
	}
	return false
}

func (x *CMsgClientSettings) GetGamescopeNativeExternalResInSteam() bool {
	if x != nil && x.GamescopeNativeExternalResInSteam != nil {
		return *x.GamescopeNativeExternalResInSteam
	}
	return false
}

func (x *CMsgClientSettings) GetSteamosStatusLedBrightness() int32 {
	if x != nil && x.SteamosStatusLedBrightness != nil {
		return *x.SteamosStatusLedBrightness
	}
	return 0
}

func (x *CMsgClientSettings) GetSteamosTdpLimitEnabled() bool {
	if x != nil && x.SteamosTdpLimitEnabled != nil {
		return *x.SteamosTdpLimitEnabled
	}
	return false
}

func (x *CMsgClientSettings) GetSteamosTdpLimit() int32 {
	if x != nil && x.SteamosTdpLimit != nil {
		return *x.SteamosTdpLimit
	}
	return 0
}

func (x *CMsgClientSettings) GetSteamosCecEnabled() bool {
	if x != nil && x.SteamosCecEnabled != nil {
		return *x.SteamosCecEnabled
	}
	return false
}

func (x *CMsgClientSettings) GetSteamosCecWakeOnResume() bool {
	if x != nil && x.SteamosCecWakeOnResume != nil {
		return *x.SteamosCecWakeOnResume
	}
	return false
}

func (x *CMsgClientSettings) GetSteamosWifiDebug() bool {
	if x != nil && x.SteamosWifiDebug != nil {
		return *x.SteamosWifiDebug
	}
	return false
}

func (x *CMsgClientSettings) GetSteamosWifiForceWpaSupplicant() bool {
	if x != nil && x.SteamosWifiForceWpaSupplicant != nil {
		return *x.SteamosWifiForceWpaSupplicant
	}
	return false
}

func (x *CMsgClientSettings) GetSteamosMagnifierScale() int32 {
	if x != nil && x.SteamosMagnifierScale != nil {
		return *x.SteamosMagnifierScale
	}
	return 0
}

func (x *CMsgClientSettings) GetSteamosManualGpuClockEnabled() bool {
	if x != nil && x.SteamosManualGpuClockEnabled != nil {
		return *x.SteamosManualGpuClockEnabled
	}
	return false
}

func (x *CMsgClientSettings) GetSteamosManualGpuClockHz() int32 {
	if x != nil && x.SteamosManualGpuClockHz != nil {
		return *x.SteamosManualGpuClockHz
	}
	return 0
}

func (x *CMsgClientSettings) GetSteamosPlatformPerformanceProfile() string {
	if x != nil && x.SteamosPlatformPerformanceProfile != nil {
		return *x.SteamosPlatformPerformanceProfile
	}
	return ""
}

func (x *CMsgClientSettings) GetSteamosChargeLimitEnabled() bool {
	if x != nil && x.SteamosChargeLimitEnabled != nil {
		return *x.SteamosChargeLimitEnabled
	}
	return false
}

func (x *CMsgClientSettings) GetSteamosChargeLimit() int32 {
	if x != nil && x.SteamosChargeLimit != nil {
		return *x.SteamosChargeLimit
	}
	return 0
}

func (x *CMsgClientSettings) GetSteamosChargeLimitDevmode() bool {
	if x != nil && x.SteamosChargeLimitDevmode != nil {
		return *x.SteamosChargeLimitDevmode
	}
	return false
}

func (x *CMsgClientSettings) GetSettingValidationBool() bool {
	if x != nil && x.SettingValidationBool != nil {
		return *x.SettingValidationBool
	}
	return false
}

func (x *CMsgClientSettings) GetSettingValidationEnum() EHDRVisualization {
	if x != nil && x.SettingValidationEnum != nil {
		return *x.SettingValidationEnum
	}
	return Default_CMsgClientSettings_SettingValidationEnum
}

func (x *CMsgClientSettings) GetSettingValidationInt32() int32 {
	if x != nil && x.SettingValidationInt32 != nil {
		return *x.SettingValidationInt32
	}
	return 0
}

func (x *CMsgClientSettings) GetSettingValidationUint32() uint32 {
	if x != nil && x.SettingValidationUint32 != nil {
		return *x.SettingValidationUint32
	}
	return 0
}

func (x *CMsgClientSettings) GetSettingValidationUint64() uint64 {
	if x != nil && x.SettingValidationUint64 != nil {
		return *x.SettingValidationUint64
	}
	return 0
}

func (x *CMsgClientSettings) GetSettingValidationFloat() float32 {
	if x != nil && x.SettingValidationFloat != nil {
		return *x.SettingValidationFloat
	}
	return 0
}

func (x *CMsgClientSettings) GetSettingValidationString() string {
	if x != nil && x.SettingValidationString != nil {
		return *x.SettingValidationString
	}
	return ""
}

func (x *CMsgClientSettings) GetSettingValidationHotkey() *CMsgHotkey {
	if x != nil {
		return x.SettingValidationHotkey
	}
	return nil
}

func (x *CMsgClientSettings) GetSystemBluetoothEnabled() bool {
	if x != nil && x.SystemBluetoothEnabled != nil {
		return *x.SystemBluetoothEnabled
	}
	return false
}

func (x *CMsgClientSettings) GetHardwareUpdaterEnabled() bool {
	if x != nil && x.HardwareUpdaterEnabled != nil {
		return *x.HardwareUpdaterEnabled
	}
	return false
}

func (x *CMsgClientSettings) GetVrShowPerfGraphInHmd() bool {
	if x != nil && x.VrShowPerfGraphInHmd != nil {
		return *x.VrShowPerfGraphInHmd
	}
	return false
}

func (x *CMsgClientSettings) GetAccessibilityDebugVisualizer() bool {
	if x != nil && x.AccessibilityDebugVisualizer != nil {
		return *x.AccessibilityDebugVisualizer
	}
	return false
}

func (x *CMsgClientSettings) GetAccessibilityScreenReaderEnabled() bool {
	if x != nil && x.AccessibilityScreenReaderEnabled != nil {
		return *x.AccessibilityScreenReaderEnabled
	}
	return false
}

func (x *CMsgClientSettings) GetAccessibilityScreenReaderRate() float32 {
	if x != nil && x.AccessibilityScreenReaderRate != nil {
		return *x.AccessibilityScreenReaderRate
	}
	return 0
}

func (x *CMsgClientSettings) GetAccessibilityScreenReaderPitch() float32 {
	if x != nil && x.AccessibilityScreenReaderPitch != nil {
		return *x.AccessibilityScreenReaderPitch
	}
	return 0
}

func (x *CMsgClientSettings) GetAccessibilityScreenReaderVolume() float32 {
	if x != nil && x.AccessibilityScreenReaderVolume != nil {
		return *x.AccessibilityScreenReaderVolume
	}
	return 0
}

func (x *CMsgClientSettings) GetAccessibilityHighContrastMode() bool {
	if x != nil && x.AccessibilityHighContrastMode != nil {
		return *x.AccessibilityHighContrastMode
	}
	return false
}

func (x *CMsgClientSettings) GetAccessibilityReduceMotion() bool {
	if x != nil && x.AccessibilityReduceMotion != nil {
		return *x.AccessibilityReduceMotion
	}
	return false
}

func (x *CMsgClientSettings) GetAccessibilityMinimumFontSize() uint32 {
	if x != nil && x.AccessibilityMinimumFontSize != nil {
		return *x.AccessibilityMinimumFontSize
	}
	return 0
}

func (x *CMsgClientSettings) GetAccessibilityColorFilterName() string {
	if x != nil && x.AccessibilityColorFilterName != nil {
		return *x.AccessibilityColorFilterName
	}
	return ""
}

func (x *CMsgClientSettings) GetAccessibilityDesktopUiScale() float32 {
	if x != nil && x.AccessibilityDesktopUiScale != nil {
		return *x.AccessibilityDesktopUiScale
	}
	return 0
}

func (x *CMsgClientSettings) GetAccessibilityScreenReaderLocale() string {
	if x != nil && x.AccessibilityScreenReaderLocale != nil {
		return *x.AccessibilityScreenReaderLocale
	}
	return ""
}

var file_steammessages_clientsettings_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*EClientSettingStore)(nil),
		Field:         60000,
		Name:          "setting_store",
		Tag:           "varint,60000,opt,name=setting_store,enum=EClientSettingStore,def=0",
		Filename:      "steammessages_clientsettings.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*string)(nil),
		Field:         60001,
		Name:          "setting_name",
		Tag:           "bytes,60001,opt,name=setting_name",
		Filename:      "steammessages_clientsettings.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*bool)(nil),
		Field:         60002,
		Name:          "setting_pre_login",
		Tag:           "varint,60002,opt,name=setting_pre_login",
		Filename:      "steammessages_clientsettings.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*bool)(nil),
		Field:         60003,
		Name:          "setting_default_bool",
		Tag:           "varint,60003,opt,name=setting_default_bool",
		Filename:      "steammessages_clientsettings.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*int32)(nil),
		Field:         60004,
		Name:          "setting_default_int",
		Tag:           "varint,60004,opt,name=setting_default_int",
		Filename:      "steammessages_clientsettings.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*uint32)(nil),
		Field:         60005,
		Name:          "setting_default_uint",
		Tag:           "varint,60005,opt,name=setting_default_uint",
		Filename:      "steammessages_clientsettings.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*float32)(nil),
		Field:         60006,
		Name:          "setting_default_float",
		Tag:           "fixed32,60006,opt,name=setting_default_float",
		Filename:      "steammessages_clientsettings.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*string)(nil),
		Field:         60007,
		Name:          "setting_default_string",
		Tag:           "bytes,60007,opt,name=setting_default_string",
		Filename:      "steammessages_clientsettings.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*bool)(nil),
		Field:         60008,
		Name:          "setting_readonly",
		Tag:           "varint,60008,opt,name=setting_readonly",
		Filename:      "steammessages_clientsettings.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*string)(nil),
		Field:         60009,
		Name:          "setting_description",
		Tag:           "bytes,60009,opt,name=setting_description",
		Filename:      "steammessages_clientsettings.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*ESettingProfileMode)(nil),
		Field:         60010,
		Name:          "setting_profile_mode",
		Tag:           "varint,60010,opt,name=setting_profile_mode,enum=ESettingProfileMode,def=0",
		Filename:      "steammessages_clientsettings.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*int64)(nil),
		Field:         60011,
		Name:          "setting_clamp_min",
		Tag:           "varint,60011,opt,name=setting_clamp_min",
		Filename:      "steammessages_clientsettings.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*int64)(nil),
		Field:         60012,
		Name:          "setting_clamp_max",
		Tag:           "varint,60012,opt,name=setting_clamp_max",
		Filename:      "steammessages_clientsettings.proto",
	},
}

// Extension fields to descriptorpb.FieldOptions.
var (
	// optional EClientSettingStore setting_store = 60000;
	E_SettingStore = &file_steammessages_clientsettings_proto_extTypes[0]
	// optional string setting_name = 60001;
	E_SettingName = &file_steammessages_clientsettings_proto_extTypes[1]
	// optional bool setting_pre_login = 60002;
	E_SettingPreLogin = &file_steammessages_clientsettings_proto_extTypes[2]
	// optional bool setting_default_bool = 60003;
	E_SettingDefaultBool = &file_steammessages_clientsettings_proto_extTypes[3]
	// optional int32 setting_default_int = 60004;
	E_SettingDefaultInt = &file_steammessages_clientsettings_proto_extTypes[4]
	// optional uint32 setting_default_uint = 60005;
	E_SettingDefaultUint = &file_steammessages_clientsettings_proto_extTypes[5]
	// optional float setting_default_float = 60006;
	E_SettingDefaultFloat = &file_steammessages_clientsettings_proto_extTypes[6]
	// optional string setting_default_string = 60007;
	E_SettingDefaultString = &file_steammessages_clientsettings_proto_extTypes[7]
	// optional bool setting_readonly = 60008;
	E_SettingReadonly = &file_steammessages_clientsettings_proto_extTypes[8]
	// optional string setting_description = 60009;
	E_SettingDescription = &file_steammessages_clientsettings_proto_extTypes[9]
	// optional ESettingProfileMode setting_profile_mode = 60010;
	E_SettingProfileMode = &file_steammessages_clientsettings_proto_extTypes[10]
	// optional int64 setting_clamp_min = 60011;
	E_SettingClampMin = &file_steammessages_clientsettings_proto_extTypes[11]
	// optional int64 setting_clamp_max = 60012;
	E_SettingClampMax = &file_steammessages_clientsettings_proto_extTypes[12]
)

var File_steammessages_clientsettings_proto protoreflect.FileDescriptor

const file_steammessages_clientsettings_proto_rawDesc = "" +
	"\n" +
	"\"steammessages_clientsettings.proto\x1a google/protobuf/descriptor.proto\x1a\venums.proto\"\xb6\x01\n" +
	"\n" +
	"CMsgHotkey\x12\x19\n" +
	"\bkey_code\x18\x01 \x01(\rR\akeyCode\x12\x17\n" +
	"\aalt_key\x18\x02 \x01(\bR\x06altKey\x12\x1b\n" +
	"\tshift_key\x18\x03 \x01(\bR\bshiftKey\x12\x19\n" +
	"\bctrl_key\x18\x04 \x01(\bR\actrlKey\x12\x19\n" +
	"\bmeta_key\x18\x05 \x01(\bR\ametaKey\x12!\n" +
	"\fdisplay_name\x18\x06 \x01(\tR\vdisplayName\"\xa5\x02\n" +
	"\x12CMsgSettingVariant\x12\x1f\n" +
	"\n" +
	"value_bool\x18\x01 \x01(\bH\x00R\tvalueBool\x12!\n" +
	"\vvalue_int32\x18\x02 \x01(\x05H\x00R\n" +
	"valueInt32\x12#\n" +
	"\fvalue_uint32\x18\x03 \x01(\rH\x00R\vvalueUint32\x12#\n" +
	"\fvalue_uint64\x18\x05 \x01(\x03H\x00R\vvalueUint64\x12!\n" +
	"\vvalue_float\x18\x06 \x01(\x02H\x00R\n" +
	"valueFloat\x12#\n" +
	"\fvalue_string\x18\a \x01(\tH\x00R\vvalueString\x120\n" +
	"\fvalue_hotkey\x18\b \x01(\v2\v.CMsgHotkeyH\x00R\vvalueHotkeyB\a\n" +
	"\x05value\"\x8e\xa5\x01\n" +
	"\x12CMsgClientSettings\x12b\n" +
	"\x15no_save_personal_info\x18\x01 \x01(\bB/\x80\xa6\x1d\x01\x8a\xa6\x1d'Software\\Valve\\Steam\\NoSavePersonalInfoR\x12noSavePersonalInfo\x12e\n" +
	"\x16oobe_test_mode_enabled\x18\x02 \x01(\bB0\x80\xa6\x1d\x01\x8a\xa6\x1d(Software\\Valve\\Steam\\OOBETestModeEnabledR\x13oobeTestModeEnabled\x12.\n" +
	"\x0ein_client_beta\x18\x03 \x01(\bB\b\x80\xa6\x1d\x05\x90\xa6\x1d\x01R\finClientBeta\x128\n" +
	"\x13is_steam_sideloaded\x18\x04 \x01(\bB\b\x80\xa6\x1d\x05\x90\xa6\x1d\x01R\x11isSteamSideloaded\x12G\n" +
	"\x11preferred_monitor\x18\x05 \x01(\tB\x1a\x80\xa6\x1d\x01\x8a\xa6\x1d\x12BigPicture/MonitorR\x10preferredMonitor\x12\x8e\x01\n" +
	" steam_cef_gpu_blocklist_disabled\x18\x06 \x01(\bBF\x80\xa6\x1d\x04\x8a\xa6\x1d>HKEY_CURRENT_USER\\Software\\Valve\\Steam\\CEFGPUBlocklistDisabledR\x1csteamCefGpuBlocklistDisabled\x12P\n" +
	"\x13bigpicture_windowed\x18\a \x01(\bB\x1f\x80\xa6\x1d\x01\x8a\xa6\x1d\x13BigPicture/Windowed\x90\xa6\x1d\x01R\x12bigpictureWindowed\x12B\n" +
	"\fdisplay_name\x18\b \x01(\tB\x1f\x80\xa6\x1d\x01\x8a\xa6\x1d\x17UI/Display/Current/NameR\vdisplayName\x12\\\n" +
	"\x13is_external_display\x18\t \x01(\bB,\x80\xa6\x1d\x01\x8a\xa6\x1d$UI/Display/Current/IsExternalDisplayR\x11isExternalDisplay\x12\\\n" +
	"\x18steam_os_underscan_level\x18\n" +
	" \x01(\x02B#\x80\xa6\x1d\x01\x8a\xa6\x1d\x1bSteamOSScreenUnderscanLevelR\x15steamOsUnderscanLevel\x12b\n" +
	"\x1asteam_os_underscan_enabled\x18\v \x01(\bB%\x80\xa6\x1d\x01\x8a\xa6\x1d\x1dSteamOSScreenUnderscanEnabledR\x17steamOsUnderscanEnabled\x12S\n" +
	"\x10min_scale_factor\x18\f \x01(\x02B)\x80\xa6\x1d\x01\x8a\xa6\x1d!UI/Display/Current/MinScaleFactorR\x0eminScaleFactor\x12S\n" +
	"\x10max_scale_factor\x18\r \x01(\x02B)\x80\xa6\x1d\x01\x8a\xa6\x1d!UI/Display/Current/MaxScaleFactorR\x0emaxScaleFactor\x12V\n" +
	"\x11auto_scale_factor\x18\x0e \x01(\x02B*\x80\xa6\x1d\x01\x8a\xa6\x1d\"UI/Display/Current/AutoScaleFactorR\x0fautoScaleFactor\x12E\n" +
	"\n" +
	"small_mode\x18\x10 \x01(\bB&\x80\xa6\x1d\x03\x8a\xa6\x1d\x1eSoftware\\Valve\\Steam\\SmallModeR\tsmallMode\x12c\n" +
	"\x1bskip_steamvr_install_dialog\x18\x13 \x01(\bB$\x80\xa6\x1d\x03\x8a\xa6\x1d\x1csystem\\SteamVRHMDVGUIWarningR\x18skipSteamvrInstallDialog\x12f\n" +
	"\x18always_show_user_chooser\x18\x14 \x01(\bB-\x80\xa6\x1d\x01\x8a\xa6\x1d%WebStorage\\Auth\\AlwaysShowUserChooserR\x15alwaysShowUserChooser\x12y\n" +
	"\x16os_version_unsupported\x18\x15 \x01(\bBC\x80\xa6\x1d\x04\x8a\xa6\x1d;HKEY_CURRENT_USER\\Software\\Valve\\Steam\\OSVersionUnsupportedR\x14osVersionUnsupported\x12P\n" +
	"!show_family_sharing_notifications\x18\xb8\x17 \x01(\bB\x04\x80\xa6\x1d\x05R\x1eshowFamilySharingNotifications\x12_\n" +
	"\x1ashow_copy_count_in_library\x18\xb9\x17 \x01(\bB\"\x80\xa6\x1d\x03\x8a\xa6\x1d\x16ShowCopyCountInLibrary\x98\xa6\x1d\x01R\x16showCopyCountInLibrary\x12g\n" +
	"\x1aoverlay_fps_counter_corner\x18\xa0\x1f \x01(\x05B)\x80\xa6\x1d\x03\x8a\xa6\x1d!system\\InGameOverlayShowFPSCornerR\x17overlayFpsCounterCorner\x12v\n" +
	"!overlay_fps_counter_high_contrast\x18\xa1\x1f \x01(\bB+\x80\xa6\x1d\x03\x8a\xa6\x1d#system\\InGameOverlayShowFPSContrastR\x1doverlayFpsCounterHighContrast\x12g\n" +
	"\voverlay_key\x18\xa2\x1f \x01(\v2\v.CMsgHotkeyB8\x80\xa6\x1d\x03\x8a\xa6\x1d\x1fsystem\\InGameOverlayShortcutKey\xba\xa6\x1d\rShift\tKEY_TABR\n" +
	"overlayKey\x12l\n" +
	"\x0escreenshot_key\x18\xa3\x1f \x01(\v2\v.CMsgHotkeyB7\x80\xa6\x1d\x03\x8a\xa6\x1d$system\\InGameOverlayScreenshotHotKey\xba\xa6\x1d\aKEY_F12R\rscreenshotKey\x12L\n" +
	"\x0eenable_overlay\x18\xa4\x1f \x01(\bB$\x80\xa6\x1d\x03\x8a\xa6\x1d\x18system\\EnableGameOverlay\x98\xa6\x1d\x01R\renableOverlay\x12}\n" +
	"\x1eenable_screenshot_notification\x18\xa6\x1f \x01(\bB6\x80\xa6\x1d\x03\x8a\xa6\x1d*system\\InGameOverlayScreenshotNotification\x98\xa6\x1d\x01R\x1cenableScreenshotNotification\x12l\n" +
	"\x17enable_screenshot_sound\x18\xa7\x1f \x01(\bB3\x80\xa6\x1d\x03\x8a\xa6\x1d'system\\InGameOverlayScreenshotPlaySound\x98\xa6\x1d\x01R\x15enableScreenshotSound\x12{\n" +
	"\x1dsave_uncompressed_screenshots\x18\xa8\x1f \x01(\bB6\x80\xa6\x1d\x03\x8a\xa6\x1d.system\\InGameOverlayScreenshotSaveUncompressedR\x1bsaveUncompressedScreenshots\x120\n" +
	"\x10screenshots_path\x18\xa9\x1f \x01(\tB\x04\x80\xa6\x1d\x05R\x0fscreenshotsPath\x12}\n" +
	"\x11default_ping_rate\x18\xaa\x1f \x01(\x05BP\x80\xa6\x1d\x05\xc0\xa6\x1d\x01ʦ\x1dDComputed default (automatic) server ping rate based on network speedR\x0fdefaultPingRate\x12/\n" +
	"\x10server_ping_rate\x18\xab\x1f \x01(\x05B\x04\x80\xa6\x1d\x05R\x0eserverPingRate\x12@\n" +
	"\x19steam_networking_share_ip\x18\xac\x1f \x01(\x05B\x04\x80\xa6\x1d\x05R\x16steamNetworkingShareIp\x12/\n" +
	"\x10web_browser_home\x18\xad\x1f \x01(\tB\x04\x80\xa6\x1d\x05R\x0ewebBrowserHome\x128\n" +
	"\x15voice_mic_device_name\x18\xae\x1f \x01(\tB\x04\x80\xa6\x1d\x05R\x12voiceMicDeviceName\x126\n" +
	"\x14voice_mic_input_gain\x18\xaf\x1f \x01(\x02B\x04\x80\xa6\x1d\x05R\x11voiceMicInputGain\x12@\n" +
	"\x19voice_speaker_output_gain\x18\xb0\x1f \x01(\x02B\x04\x80\xa6\x1d\x05R\x16voiceSpeakerOutputGain\x12A\n" +
	"\x1avoice_push_to_talk_setting\x18\xb1\x1f \x01(\x05B\x04\x80\xa6\x1d\x05R\x16voicePushToTalkSetting\x12F\n" +
	"\x16voice_push_to_talk_key\x18\xb2\x1f \x01(\v2\v.CMsgHotkeyB\x04\x80\xa6\x1d\x05R\x12voicePushToTalkKey\x12Z\n" +
	"\x19overlay_toolbar_list_view\x18\xb3\x1f \x01(\bB\x1e\x80\xa6\x1d\x03\x8a\xa6\x1d\x16OverlayToolBarListViewR\x16overlayToolbarListView\x12o\n" +
	"\x1calways_use_gamepadui_overlay\x18\xb4\x1f \x01(\bB-\x80\xa6\x1d\x03\x8a\xa6\x1d%system\\EnableSCTenFootOverlayCheckNewR\x19alwaysUseGamepaduiOverlay\x127\n" +
	"\foverlay_tabs\x18\xb5\x1f \x01(\tB\x13\x80\xa6\x1d\x02\x8a\xa6\x1d\vOverlayTabsR\voverlayTabs\x12\x81\x01\n" +
	"\x17overlay_scale_interface\x18\xb6\x1f \x01(\bBH\x80\xa6\x1d\x04\x8a\xa6\x1d<HKEY_CURRENT_USER\\Software\\Valve\\Steam\\OverlayScaleInterface\x98\xa6\x1d\x01R\x15overlayScaleInterface\x12t\n" +
	"\x1coverlay_restore_browser_tabs\x18\xb7\x1f \x01(\bB2\x80\xa6\x1d\x03\x8a\xa6\x1d&system\\InGameOverlayRestoreBrowserTabs\x98\xa6\x1d\x01R\x19overlayRestoreBrowserTabs\x12i\n" +
	"\x17enable_avif_screenshots\x18\xb8\x1f \x01(\bB0\x80\xa6\x1d\x03\x8a\xa6\x1d(system\\InGameOverlayScreenshotEnableAVIFR\x15enableAvifScreenshots\x12{\n" +
	" overlay_fps_counter_detail_level\x18\xb9\x1f \x01(\x05B2\x80\xa6\x1d\x03\x8a\xa6\x1d&system\\InGameOverlayShowFPSDetailLevel\xa0\xa6\x1d\x01R\x1coverlayFpsCounterDetailLevel\x12\x87\x01\n" +
	"%overlay_fps_counter_saturation_factor\x18\xba\x1f \x01(\x02B4\x80\xa6\x1d\x03\x8a\xa6\x1d%system\\InGameOverlayShowFPSSaturation\xb5\xa6\x1d\x00\x00\x80?R!overlayFpsCounterSaturationFactor\x12w\n" +
	"\x1doverlay_fps_counter_bgopacity\x18\xbb\x1f \x01(\x02B3\x80\xa6\x1d\x03\x8a\xa6\x1d$system\\InGameOverlayShowFPSBGOpacity\xb5\xa6\x1d\xcd\xccL?R\x1aoverlayFpsCounterBgopacity\x12z\n" +
	" overlay_fps_counter_scale_factor\x18\xbc\x1f \x01(\x02B1\x80\xa6\x1d\x03\x8a\xa6\x1d\"system\\InGameOverlayShowFPSScaling\xb5\xa6\x1d333?R\x1coverlayFpsCounterScaleFactor\x12y\n" +
	"\x17overlay_fps_counter_key\x18\xbd\x1f \x01(\v2\v.CMsgHotkeyB4\x80\xa6\x1d\x03\x8a\xa6\x1d!system\\InGameOverlayShowFPSHotKey\xba\xa6\x1d\aDefaultR\x14overlayFpsCounterKey\x12r\n" +
	"\x1doverlay_fps_counter_fps_graph\x18\xbe\x1f \x01(\bB/\x80\xa6\x1d\x03\x8a\xa6\x1d#system\\InGameOverlayShowFPSGraphFPS\x98\xa6\x1d\x01R\x19overlayFpsCounterFpsGraph\x12r\n" +
	"\x1doverlay_fps_counter_cpu_graph\x18\xbf\x1f \x01(\bB/\x80\xa6\x1d\x03\x8a\xa6\x1d#system\\InGameOverlayShowFPSGraphCPU\x98\xa6\x1d\x01R\x19overlayFpsCounterCpuGraph\x12\x83\x01\n" +
	"#overlay_fps_counter_allow_km_driver\x18\xc0\x1f \x01(\bB5\x80\xa6\x1d\x03\x8a\xa6\x1d)system\\InGameOverlayAllowKMDriveOnWindows\x98\xa6\x1d\x01R\x1eoverlayFpsCounterAllowKmDriver\x12;\n" +
	"\x16smooth_scroll_webviews\x18\x88' \x01(\bB\x04\x80\xa6\x1d\x05R\x14smoothScrollWebviews\x12L\n" +
	"\x1fenable_gpu_accelerated_webviews\x18\x89' \x01(\bB\x04\x80\xa6\x1d\x05R\x1cenableGpuAcceleratedWebviews\x12J\n" +
	"\x1eenable_hardware_video_decoding\x18\x8b' \x01(\bB\x04\x80\xa6\x1d\x05R\x1benableHardwareVideoDecoding\x12+\n" +
	"\x0erun_at_startup\x18\x8c' \x01(\bB\x04\x80\xa6\x1d\x05R\frunAtStartup\x123\n" +
	"\x12enable_dpi_scaling\x18\x8d' \x01(\bB\x04\x80\xa6\x1d\x05R\x10enableDpiScaling\x12b\n" +
	"\x19enable_marketing_messages\x18\x8e' \x01(\bB%\x80\xa6\x1d\x03\x8a\xa6\x1d\x19news\\NotifyAvailableGames\x98\xa6\x1d\x01R\x17enableMarketingMessages\x12?\n" +
	"\x19start_in_big_picture_mode\x18\x8f' \x01(\bB\x04\x80\xa6\x1d\x05R\x15startInBigPictureMode\x12M\n" +
	"\x0ejumplist_flags\x18\x90' \x01(\rB%\x80\xa6\x1d\x03\x8a\xa6\x1d\x17system\\JumplistSettings\xa8\xa6\x1d\xf0\xde\x04R\rjumplistFlags\x12L\n" +
	"\x10enable_ui_sounds\x18\x91' \x01(\bB!\x80\xa6\x1d\x03\x8a\xa6\x1d\x15system\\EnableUISounds\x98\xa6\x1d\x01R\x0eenableUiSounds\x12G\n" +
	"\x12disable_all_toasts\x18\xf0. \x01(\bB\x18\x80\xa6\x1d\x02\x8a\xa6\x1d\x10DisableAllToastsR\x10disableAllToasts\x12Q\n" +
	"\x16disable_toasts_in_game\x18\xf1. \x01(\bB\x1b\x80\xa6\x1d\x02\x8a\xa6\x1d\x13DisableToastsInGameR\x13disableToastsInGame\x12L\n" +
	"\x13play_sound_on_toast\x18\xf2. \x01(\bB\x1c\x80\xa6\x1d\x02\x8a\xa6\x1d\x10PlaySoundOnToast\x98\xa6\x1d\x01R\x10playSoundOnToast\x12M\n" +
	"\x14library_display_size\x18\xd86 \x01(\x05B\x1a\x80\xa6\x1d\x03\x8a\xa6\x1d\x12LibraryDisplaySizeR\x12libraryDisplaySize\x12\x8a\x01\n" +
	"+library_whats_new_show_only_product_updates\x18\xd96 \x01(\bB-\x80\xa6\x1d\x02\x8a\xa6\x1d%LibraryWhatsNewShowOnlyProductUpdatesR%libraryWhatsNewShowOnlyProductUpdates\x12_\n" +
	"\x1ashow_store_content_on_home\x18\xda6 \x01(\bB\"\x80\xa6\x1d\x02\x8a\xa6\x1d\x16ShowStoreContentOnHome\x98\xa6\x1d\x01R\x16showStoreContentOnHome\x12$\n" +
	"\n" +
	"start_page\x18\xdb6 \x01(\tB\x04\x80\xa6\x1d\x05R\tstartPage\x12]\n" +
	"\x1alibrary_low_bandwidth_mode\x18\xdc6 \x01(\bB\x1f\x80\xa6\x1d\x03\x8a\xa6\x1d\x17LibraryLowBandwidthModeR\x17libraryLowBandwidthMode\x12N\n" +
	"\x15library_low_perf_mode\x18\xdd6 \x01(\bB\x1a\x80\xa6\x1d\x03\x8a\xa6\x1d\x12LibraryLowPerfModeR\x12libraryLowPerfMode\x12r\n" +
	"!library_disable_community_content\x18\xde6 \x01(\bB&\x80\xa6\x1d\x03\x8a\xa6\x1d\x1eLibraryDisableCommunityContentR\x1elibraryDisableCommunityContent\x12r\n" +
	"!library_display_icon_in_game_list\x18\xdf6 \x01(\bB(\x80\xa6\x1d\x03\x8a\xa6\x1d\x1cLibraryDisplayIconInGameList\x98\xa6\x1d\x01R\x1clibraryDisplayIconInGameList\x12m\n" +
	" ready_to_play_includes_streaming\x18\xe06 \x01(\bB$\x80\xa6\x1d\x05\x8a\xa6\x1d\x1cReadyToPlayIncludesStreamingR\x1creadyToPlayIncludesStreaming\x12T\n" +
	"\x14show_steam_deck_info\x18\xe16 \x01(\bB\"\x80\xa6\x1d\x03\x8a\xa6\x1d\x1aShowSteamDeckInfoInLibraryR\x11showSteamDeckInfo\x12;\n" +
	"\x16enable_shader_precache\x18\xc0> \x01(\bB\x04\x80\xa6\x1d\x05R\x14enableShaderPrecache\x12T\n" +
	"#enable_shader_background_processing\x18\xc1> \x01(\bB\x04\x80\xa6\x1d\x05R enableShaderBackgroundProcessing\x12=\n" +
	"\x15shader_precached_size\x18\xc2> \x01(\x04B\b\x80\xa6\x1d\x05\xc0\xa6\x1d\x01R\x13shaderPrecachedSize\x12F\n" +
	"\x1aneeds_steam_service_repair\x18\xc3> \x01(\bB\b\x80\xa6\x1d\x05\xc0\xa6\x1d\x01R\x17needsSteamServiceRepair\x129\n" +
	"\x15download_peer_content\x18\xc4> \x01(\x05B\x04\x80\xa6\x1d\x05R\x13downloadPeerContent\x12=\n" +
	"\x18download_rate_bits_per_s\x18\xc5> \x01(\bB\x04\x80\xa6\x1d\x05R\x14downloadRateBitsPerS\x129\n" +
	"\x15restrict_auto_updates\x18\xc6> \x01(\bB\x04\x80\xa6\x1d\x05R\x13restrictAutoUpdates\x12D\n" +
	"\x1brestrict_auto_updates_start\x18\xc7> \x01(\x05B\x04\x80\xa6\x1d\x05R\x18restrictAutoUpdatesStart\x12@\n" +
	"\x19restrict_auto_updates_end\x18\xc8> \x01(\x05B\x04\x80\xa6\x1d\x05R\x16restrictAutoUpdatesEnd\x12.\n" +
	"\x0fdownload_region\x18\xc9> \x01(\x05B\x04\x80\xa6\x1d\x05R\x0edownloadRegion\x12B\n" +
	"\x1adownload_while_app_running\x18\xca> \x01(\bB\x04\x80\xa6\x1d\x05R\x17downloadWhileAppRunning\x12P\n" +
	"!download_throttle_while_streaming\x18\xcb> \x01(\bB\x04\x80\xa6\x1d\x05R\x1edownloadThrottleWhileStreaming\x12;\n" +
	"\x16download_throttle_rate\x18\xcc> \x01(\x05B\x04\x80\xa6\x1d\x05R\x14downloadThrottleRate\x12D\n" +
	"\x1bdefault_app_update_behavior\x18\xcd> \x01(\x05B\x04\x80\xa6\x1d\x05R\x18defaultAppUpdateBehavior\x12*\n" +
	"\rcloud_enabled\x18\x90N \x01(\bB\x04\x80\xa6\x1d\x05R\fcloudEnabled\x12k\n" +
	"\x17show_screenshot_manager\x18\x91N \x01(\bB2\x80\xa6\x1d\x02\x8a\xa6\x1d*Software\\Valve\\Steam\\ShowScreenshotManagerR\x15showScreenshotManager\x12(\n" +
	"\fmusic_volume\x18\xf8U \x01(\x05B\x04\x80\xa6\x1d\x05R\vmusicVolume\x12_\n" +
	"\x18music_pause_on_app_start\x18\xf9U \x01(\bB&\x80\xa6\x1d\x01\x8a\xa6\x1d\x1eMusic\\PauseOnAppStartedProcessR\x14musicPauseOnAppStart\x12Y\n" +
	"\x19music_pause_on_voice_chat\x18\xfaU \x01(\bB\x1e\x80\xa6\x1d\x01\x8a\xa6\x1d\x16Music\\PauseOnVoiceChatR\x15musicPauseOnVoiceChat\x12q\n" +
	"\x1bmusic_download_high_quality\x18\xfbU \x01(\bB1\x80\xa6\x1d\x01\x8a\xa6\x1d)Music\\DownloadHighQualityAudioSoundtracksR\x18musicDownloadHighQuality\x12m\n" +
	"\x1bmusic_playlist_notification\x18\xfcU \x01(\bB,\x80\xa6\x1d\x01\x8a\xa6\x1d$Music\\PlaylistNowPlayingNotificationR\x19musicPlaylistNotification\x12\x8e\x01\n" +
	"\x15broadcast_permissions\x18\xe0] \x01(\x0e2\x15.EBroadcastPermission:\x1ek_EBroadcastPermissionDisabledB!\x80\xa6\x1d\x03\x8a\xa6\x1d\x15Broadcast\\Permissions\xa0\xa6\x1d\x01R\x14broadcastPermissions\x12T\n" +
	"\x16broadcast_output_width\x18\xe1] \x01(\x05B\x1d\x80\xa6\x1d\x03\x8a\xa6\x1d\x15Broadcast\\OutputWidthR\x14broadcastOutputWidth\x12\\\n" +
	"\x17broadcast_output_height\x18\xe2] \x01(\x05B#\x80\xa6\x1d\x03\x8a\xa6\x1d\x16Broadcast\\OutputHeight\xa0\xa6\x1d\xd0\x05R\x15broadcastOutputHeight\x12L\n" +
	"\x11broadcast_bitrate\x18\xe3] \x01(\x05B\x1e\x80\xa6\x1d\x03\x8a\xa6\x1d\x11Broadcast\\MaxKbps\xa0\xa6\x1d\xc4\x13R\x10broadcastBitrate\x12\x98\x01\n" +
	"\x19broadcast_encoding_option\x18\xe4] \x01(\x0e2\x19.EBroadcastEncoderSetting:\x1ek_EBroadcastEncoderBestQualityB \x80\xa6\x1d\x03\x8a\xa6\x1d\x18Broadcast\\EncoderSettingR\x17broadcastEncodingOption\x12^\n" +
	"\x1abroadcast_record_all_video\x18\xe5] \x01(\bB \x80\xa6\x1d\x03\x8a\xa6\x1d\x18Broadcast\\IncludeDesktopR\x17broadcastRecordAllVideo\x12a\n" +
	"\x1abroadcast_record_all_audio\x18\xe6] \x01(\bB#\x80\xa6\x1d\x03\x8a\xa6\x1d\x1bBroadcast\\RecordSystemAudioR\x17broadcastRecordAllAudio\x12\\\n" +
	"\x1bbroadcast_record_microphone\x18\xe7] \x01(\bB\x1b\x80\xa6\x1d\x03\x8a\xa6\x1d\x13Broadcast\\RecordMicR\x19broadcastRecordMicrophone\x12_\n" +
	"\x1bbroadcast_show_upload_stats\x18\xe8] \x01(\bB\x1f\x80\xa6\x1d\x03\x8a\xa6\x1d\x17Broadcast\\ShowDebugInfoR\x18broadcastShowUploadStats\x12d\n" +
	"\x1cbroadcast_show_live_reminder\x18\xe9] \x01(\bB\"\x80\xa6\x1d\x03\x8a\xa6\x1d\x16Broadcast\\ShowReminder\x98\xa6\x1d\x01R\x19broadcastShowLiveReminder\x12S\n" +
	"\x15broadcast_chat_corner\x18\xea] \x01(\x05B\x1e\x80\xa6\x1d\x03\x8a\xa6\x1d\x12Broadcast\\ShowChat\xa0\xa6\x1d\x01R\x13broadcastChatCorner\x12t\n" +
	" gamestream_hardware_video_encode\x18\xc8e \x01(\bB*\x80\xa6\x1d\x03\x8a\xa6\x1d\x1eGameStream\\HardwareVideoEncode\x98\xa6\x1d\x01R\x1dgamestreamHardwareVideoEncode\x12h\n" +
	"\x1cgamestream_enable_video_h265\x18\xc9e \x01(\bB&\x80\xa6\x1d\x03\x8a\xa6\x1d\x1aGameStream\\EnableVideoH265\x98\xa6\x1d\x01R\x19gamestreamEnableVideoH265\x12\x89\x01\n" +
	")steam_input_configurator_error_msg_enable\x18\xb1m \x01(\bB/\x80\xa6\x1d\x01\x8a\xa6\x1d'SteamInput/Configurator/ErrorMsgEnabledR$steamInputConfiguratorErrorMsgEnable\x12v\n" +
	"#controller_guide_button_focus_steam\x18\xb2m \x01(\bB'\x80\xa6\x1d\x03\x8a\xa6\x1d\x1bController_CheckGuideButton\x98\xa6\x1d\x01R\x1fcontrollerGuideButtonFocusSteam\x12Z\n" +
	"\x15controller_ps_support\x18\xb3m \x01(\x05B%\x80\xa6\x1d\x03\x8a\xa6\x1d\x19SteamController_PSSupport\xa0\xa6\x1d\x01R\x13controllerPsSupport\x12\\\n" +
	"\x17controller_xbox_support\x18\xb4m \x01(\bB#\x80\xa6\x1d\x03\x8a\xa6\x1d\x1bSteamController_XBoxSupportR\x15controllerXboxSupport\x12Y\n" +
	"\x16controller_xbox_driver\x18\xb5m \x01(\bB\"\x80\xa6\x1d\x03\x8a\xa6\x1d\x1aSteamController_XBoxDriverR\x14controllerXboxDriver\x12b\n" +
	"\x19controller_switch_support\x18\xb6m \x01(\bB%\x80\xa6\x1d\x03\x8a\xa6\x1d\x1dSteamController_SwitchSupportR\x17controllerSwitchSupport\x12l\n" +
	"\x1acontroller_generic_support\x18\xb7m \x01(\bB-\x80\xa6\x1d\x03\x8a\xa6\x1d%SteamController_GenericGamepadSupportR\x18controllerGenericSupport\x12r\n" +
	"\x1ccontroller_power_off_timeout\x18\xb8m \x01(\x05B0\x80\xa6\x1d\x03\x8a\xa6\x1d$CSettingsPanelGameController.Timeout\xa0\xa6\x1d\x0fR\x19controllerPowerOffTimeout\x12k\n" +
	"\x1bturn_off_controller_on_exit\x18\xb9m \x01(\bB,\x80\xa6\x1d\x03\x8a\xa6\x1d$CSettingsPanelGameController.TurnOffR\x17turnOffControllerOnExit\x12\x7f\n" +
	"#controller_combine_nintendo_joycons\x18\xbam \x01(\bB/\x80\xa6\x1d\x01\x8a\xa6\x1d'SteamInput/Configurator/CombinedJoyconsR controllerCombineNintendoJoycons\x12b\n" +
	"\x17controller_enable_chord\x18\xeb\xc5\b \x01(\bB(\x80\xa6\x1d\x03\x8a\xa6\x1d\x1cSteamController_Enable_Chord\x98\xa6\x1d\x01R\x15controllerEnableChord\x12Y\n" +
	"\x14controller_poll_rate\x18\xec\xc5\b \x01(\bB%\x80\xa6\x1d\x03\x8a\xa6\x1d\x19SteamController_Poll_Rate\xa0\xa6\x1d\x02R\x12controllerPollRate\x12Y\n" +
	"\x10startup_movie_id\x18\x80} \x01(\x04B.\x80\xa6\x1d\x01\x8a\xa6\x1d\"Customization/StartupMovie/MovieID\x90\xa6\x1d\x01R\x0estartupMovieId\x12j\n" +
	"\x18startup_movie_local_path\x18\x81} \x01(\tB0\x80\xa6\x1d\x01\x8a\xa6\x1d$Customization/StartupMovie/LocalPath\x90\xa6\x1d\x01R\x15startupMovieLocalPath\x12c\n" +
	"\x15startup_movie_shuffle\x18\x82} \x01(\bB.\x80\xa6\x1d\x01\x8a\xa6\x1d\"Customization/StartupMovie/Shuffle\x90\xa6\x1d\x01R\x13startupMovieShuffle\x12s\n" +
	"\x1dstartup_movie_used_for_resume\x18\x83} \x01(\bB0\x80\xa6\x1d\x03\x8a\xa6\x1d(Customization/StartupMovie/UsedForResumeR\x19startupMovieUsedForResume\x12h\n" +
	"\x1cgame_notes_enable_spellcheck\x18\xe9\x84\x01 \x01(\bB%\x80\xa6\x1d\x02\x8a\xa6\x1d\x19GameNotesEnableSpellcheck\x98\xa6\x1d\x01R\x19gameNotesEnableSpellcheck\x12`\n" +
	"\x18screenshot_items_per_row\x18Ќ\x01 \x01(\x05B%\x80\xa6\x1d\x02\x8a\xa6\x1d\x19ScreenshotViewItemsPerRow\xa0\xa6\x1d\x01R\x15screenshotItemsPerRow\x12J\n" +
	"\x1dgamerecording_background_path\x18\x99\x8e\x01 \x01(\tB\x04\x80\xa6\x1d\x05R\x1bgamerecordingBackgroundPath\x12~\n" +
	"!gamerecording_background_max_keep\x18\x9a\x8e\x01 \x01(\tB1\x80\xa6\x1d\x03\x8a\xa6\x1d\x1fGameRecording\\BackgroundMaxKeep\xba\xa6\x1d\x06120minR\x1egamerecordingBackgroundMaxKeep\x12\x90\x01\n" +
	"(gamerecording_background_time_resolution\x18\x9b\x8e\x01 \x01(\x05B5\x80\xa6\x1d\x03\x8a\xa6\x1d&GameRecording\\BackgroundTimeResolution\xb5\xa6\x1d\x00`jGR%gamerecordingBackgroundTimeResolution\x12~\n" +
	"\x1bgamerecording_background_mk\x18\x9f\x8e\x01 \x01(\v2\v.CMsgHotkeyB/\x80\xa6\x1d\x03\x8a\xa6\x1d\x17GameRecording\\MarkerKey\xba\xa6\x1d\fCtrl\tKEY_F12R\x19gamerecordingBackgroundMk\x12~\n" +
	"\x1bgamerecording_background_tg\x18\xa0\x8e\x01 \x01(\v2\v.CMsgHotkeyB/\x80\xa6\x1d\x03\x8a\xa6\x1d\x17GameRecording\\ToggleKey\xba\xa6\x1d\fCtrl\tKEY_F11R\x19gamerecordingBackgroundTg\x12f\n" +
	"\x1cgamerecording_background_a_m\x18\xa1\x8e\x01 \x01(\bB#\x80\xa6\x1d\x03\x8a\xa6\x1d\x17GameRecording\\Audio_Mic\x98\xa6\x1d\x00R\x19gamerecordingBackgroundAM\x12v\n" +
	"\x1bgamerecording_video_bitrate\x18\xa2\x8e\x01 \x01(\tB4\x80\xa6\x1d\x03\x8a\xa6\x1d\x1aGameRecording\\VideoBitRate\xba\xa6\x1d\x0epreset_defaultR\x19gamerecordingVideoBitrate\x12\x8f\x01\n" +
	"\x1dgamerecording_background_mode\x18\xa4\x8e\x01 \x01(\x0e2\b.EGRMode:\x0fk_EGRMode_NeverB.\x80\xa6\x1d\x03\x8a\xa6\x1d\"GameRecording\\BackgroundRecordMode\xa0\xa6\x1d\x00R\x1bgamerecordingBackgroundMode\x12\x94\x01\n" +
	"\x1egamerecording_background_audio\x18\xa5\x8e\x01 \x01(\x0e2\t.EGRAudio:\x0fk_EGRAudio_GameB0\x80\xa6\x1d\x03\x8a\xa6\x1d$GameRecording\\Recording_Audio_Option\xa0\xa6\x1d\x00R\x1cgamerecordingBackgroundAudio\x12^\n" +
	"\x15gamerecording_max_fps\x18\xa6\x8e\x01 \x01(\x05B(\x80\xa6\x1d\x03\x8a\xa6\x1d\x14GameRecording\\MaxFPS\xa0\xa6\x1d<ئ\x1d\x18\xe0\xa6\x1dxR\x13gamerecordingMaxFps\x12s\n" +
	"\x17gamerecording_hotkey_ic\x18\xa7\x8e\x01 \x01(\v2\v.CMsgHotkeyB,\x80\xa6\x1d\x03\x8a\xa6\x1d\x1cGameRecording\\InstantClipKey\xba\xa6\x1d\x04NoneR\x15gamerecordingHotkeyIc\x12l\n" +
	"\x18gamerecording_ic_seconds\x18\xa8\x8e\x01 \x01(\x02B0\x80\xa6\x1d\x03\x8a\xa6\x1d!GameRecording\\InstantClipDuration\xb5\xa6\x1d\x00\x00\xf0AR\x16gamerecordingIcSeconds\x12\xa0\x01\n" +
	"\x1fgamerecording_export_limit_type\x18\xa9\x8e\x01 \x01(\x0e2\x13.EGRExportLimitType:\x1bk_EGRExportLimitType_NativeB%\x80\xa6\x1d\x03\x8a\xa6\x1d\x1dGameRecording\\ExportLimitTypeR\x1cgamerecordingExportLimitType\x12w\n" +
	"\"gamerecording_export_limit_size_mb\x18\xaa\x8e\x01 \x01(\x05B)\x80\xa6\x1d\x03\x8a\xa6\x1d\x1dGameRecording\\ExportLimitSize\xa0\xa6\x1ddR\x1egamerecordingExportLimitSizeMb\x12{\n" +
	"\"gamerecording_export_limit_bitrate\x18\xab\x8e\x01 \x01(\x05B,\x80\xa6\x1d\x03\x8a\xa6\x1d GameRecording\\ExportLimitBitrate\xa0\xa6\x1d\x01R\x1fgamerecordingExportLimitBitrate\x12v\n" +
	" gamerecording_export_limit_width\x18\xac\x8e\x01 \x01(\x05B+\x80\xa6\x1d\x03\x8a\xa6\x1d\x1eGameRecording\\ExportLimitWidth\xa0\xa6\x1d\x80\x1eR\x1dgamerecordingExportLimitWidth\x12y\n" +
	"!gamerecording_export_limit_height\x18\xad\x8e\x01 \x01(\x05B,\x80\xa6\x1d\x03\x8a\xa6\x1d\x1fGameRecording\\ExportLimitHeight\xa0\xa6\x1d\xf0\x10R\x1egamerecordingExportLimitHeight\x12\x82\x01\n" +
	"%gamerecording_export_limit_frame_rate\x18\xae\x8e\x01 \x01(\x05B.\x80\xa6\x1d\x03\x8a\xa6\x1d\"GameRecording\\ExportLimitFrameRate\xa0\xa6\x1d<R!gamerecordingExportLimitFrameRate\x12m\n" +
	"\x1egamerecording_export_directory\x18\xaf\x8e\x01 \x01(\tB%\x80\xa6\x1d\x05\x8a\xa6\x1d\x1dGameRecording\\ExportDirectoryR\x1cgamerecordingExportDirectory\x12\x88\x01\n" +
	"\x1agamerecording_export_codec\x18\xb0\x8e\x01 \x01(\x0e2\r.EExportCodec:\x16k_EExportCodec_DefaultB!\x80\xa6\x1d\x03\x8a\xa6\x1d\x19GameRecording\\ExportCodecR\x18gamerecordingExportCodec\x12w\n" +
	"\x1dgamerecording_video_maxheight\x18\xb1\x8e\x01 \x01(\x05B1\x80\xa6\x1d\x03\x8a\xa6\x1d\x1cGameRecording\\VideoMaxHeight\xa0\xa6\x1d\x00ئ\x1d\x00\xe0\xa6\x1d\xf0\x10R\x1bgamerecordingVideoMaxheight\x12i\n" +
	"\x1cgamerecording_force_mic_mono\x18\xb2\x8e\x01 \x01(\bB&\x80\xa6\x1d\x03\x8a\xa6\x1d\x1aGameRecording\\ForceMicMono\x98\xa6\x1d\x00R\x19gamerecordingForceMicMono\x12\x81\x01\n" +
	"$gamerecording_automatic_gain_control\x18\xb3\x8e\x01 \x01(\bB.\x80\xa6\x1d\x03\x8a\xa6\x1d\"GameRecording\\AutomaticGainControl\x98\xa6\x1d\x01R!gamerecordingAutomaticGainControl\x12h\n" +
	"\x1ashow_timestamps_in_console\x18\xa0\x9c\x01 \x01(\bB)\x80\xa6\x1d\x03\x8a\xa6\x1d!Developer\\ShowTimestampsInConsoleR\x17showTimestampsInConsole\x12Y\n" +
	"\n" +
	"force_oobe\x18\xa1\x9c\x01 \x01(\bB8\x80\xa6\x1d\x04\x8a\xa6\x1d0HKEY_CURRENT_USER\\Software\\Valve\\Steam\\ForceOOBER\tforceOobe\x12K\n" +
	"\x1eoverride_browser_composer_mode\x18\xa2\x9c\x01 \x01(\x05B\x04\x80\xa6\x1d\x05R\x1boverrideBrowserComposerMode\x12G\n" +
	"\x1ccef_remote_debugging_enabled\x18\xa3\x9c\x01 \x01(\bB\x04\x80\xa6\x1d\x05R\x19cefRemoteDebuggingEnabled\x12S\n" +
	"\x13force_deck_perf_tab\x18\xa4\x9c\x01 \x01(\bB\"\x80\xa6\x1d\x01\x8a\xa6\x1d\x1aDeveloper/ForceDeckPerfTabR\x10forceDeckPerfTab\x12f\n" +
	"\x1bforce_fake_mandatory_update\x18\xa5\x9c\x01 \x01(\bB%\x80\xa6\x1d\x01\x8a\xa6\x1d\x1dDeveloper/FakeMandatoryUpdateR\x18forceFakeMandatoryUpdate\x12R\n" +
	"\x12hdr_compat_testing\x18\xa6\x9c\x01 \x01(\bB\"\x80\xa6\x1d\x01\x8a\xa6\x1d\x1aDeveloper/HDRCompatTestingR\x10hdrCompatTesting\x12X\n" +
	"\x16developer_mode_enabled\x18\xa7\x9c\x01 \x01(\bB \x80\xa6\x1d\x01\x8a\xa6\x1d\x18Developer/DevModeEnabledR\x14developerModeEnabled\x12q\n" +
	"\x1dshow_advanced_update_channels\x18\xa8\x9c\x01 \x01(\bB,\x80\xa6\x1d\x01\x8a\xa6\x1d$Developer/ShowAdvancedUpdateChannelsR\x1ashowAdvancedUpdateChannels\x12\x93\x01\n" +
	"\x1bgamescope_hdr_visualization\x18\x89\xa4\x01 \x01(\x0e2\x12.EHDRVisualization:\x18k_EHDRVisualization_NoneB#\x80\xa6\x1d\x03\x8a\xa6\x1d\x1bGamescope/HDRVisualization2R\x19gamescopeHdrVisualization\x12s\n" +
	"\x1egamescope_app_target_framerate\x18\x8a\xa4\x01 \x01(\x05B,\x80\xa6\x1d\x03\x8a\xa6\x1d\x1cGamescope/AppTargetFrameRate\xa0\xa6\x1d\x00Ц\x1d\x02R\x1bgamescopeAppTargetFramerate\x12\xab\x01\n" +
	"%gamescope_enable_app_target_framerate\x18\x8b\xa4\x01 \x01(\bBW\x80\xa6\x1d\x04\x8a\xa6\x1dKHKEY_CURRENT_USER\\Software\\Valve\\Steam\\GamescopeEnableAppTargetRefreshRate2\x98\xa6\x1d\x01R!gamescopeEnableAppTargetFramerate\x12o\n" +
	"\x1cgamescope_disable_framelimit\x18\x8c\xa4\x01 \x01(\bB+\x80\xa6\x1d\x03\x8a\xa6\x1d\x1bGamescope/DisableFrameLimit\x98\xa6\x1d\x00Ц\x1d\x02R\x1agamescopeDisableFramelimit\x12l\n" +
	"\x1egamescope_display_refresh_rate\x18\x8d\xa4\x01 \x01(\x05B%\x80\xa6\x1d\x03\x8a\xa6\x1d\x15Gamescope/RefreshRate\xa0\xa6\x1d\x00Ц\x1d\x02R\x1bgamescopeDisplayRefreshRate\x12\x87\x01\n" +
	"(gamescope_use_game_refresh_rate_in_steam\x18\x8e\xa4\x01 \x01(\bB/\x80\xa6\x1d\x03\x8a\xa6\x1d#Developer/DynamicRefreshRateInSteam\x98\xa6\x1d\x01R\"gamescopeUseGameRefreshRateInSteam\x12y\n" +
	"!gamescope_disable_mura_correction\x18\x8f\xa4\x01 \x01(\bB,\x80\xa6\x1d\x03\x8a\xa6\x1d Gamescope/MuraCorrectionDisabled\x98\xa6\x1d\x00R\x1egamescopeDisableMuraCorrection\x12\x8b\x01\n" +
	"(gamescope_include_steamui_in_screenshots\x18\x90\xa4\x01 \x01(\bB1\x80\xa6\x1d\x03\x8a\xa6\x1d%Gamescope/IncludeSteamUIInScreenshots\x98\xa6\x1d\x00R$gamescopeIncludeSteamuiInScreenshots\x12`\n" +
	"\x17gamescope_allow_tearing\x18\x91\xa4\x01 \x01(\bB&\x80\xa6\x1d\x03\x8a\xa6\x1d\x16Gamescope/AllowTearing\x98\xa6\x1d\x00Ц\x1d\x01R\x15gamescopeAllowTearing\x12b\n" +
	"\x19gamescope_composite_debug\x18\x92\xa4\x01 \x01(\bB$\x80\xa6\x1d\x03\x8a\xa6\x1d\x18Gamescope/CompositeDebug\x98\xa6\x1d\x00R\x17gamescopeCompositeDebug\x12b\n" +
	"\x19gamescope_force_composite\x18\x93\xa4\x01 \x01(\bB$\x80\xa6\x1d\x03\x8a\xa6\x1d\x18Gamescope/ForceComposite\x98\xa6\x1d\x00R\x17gamescopeForceComposite\x12|\n" +
	" gamescope_game_resolution_global\x18\x94\xa4\x01 \x01(\tB1\x80\xa6\x1d\x03\x8a\xa6\x1d\x1eGamescope/GameResolutionGlobal\xba\xa6\x1d\aDefaultR\x1dgamescopeGameResolutionGlobal\x12{\n" +
	"\x16gamescope_guide_hotkey\x18\x95\xa4\x01 \x01(\v2\v.CMsgHotkeyB6\x80\xa6\x1d\x03\x8a\xa6\x1d\x1dGamescope/GuideKeyboardHotkey\xba\xa6\x1d\rShift\tKEY_TABR\x14gamescopeGuideHotkey\x12z\n" +
	"\x14gamescope_qam_hotkey\x18\x96\xa4\x01 \x01(\v2\v.CMsgHotkeyB9\x80\xa6\x1d\x03\x8a\xa6\x1d\x1bGamescope/QAMKeyboardHotkey\xba\xa6\x1d\x12CTRL\tShift\tKEY_TABR\x12gamescopeQamHotkey\x12Z\n" +
	"\x15gamescope_hdr_enabled\x18\x97\xa4\x01 \x01(\bB$\x80\xa6\x1d\x01\x8a\xa6\x1d\x14Gamescope/HDREnabled\x98\xa6\x1d\x01Ц\x1d\x03R\x13gamescopeHdrEnabled\x12\x8a\x01\n" +
	"&gamescope_native_external_res_in_steam\x18\x98\xa4\x01 \x01(\bB5\x80\xa6\x1d\x01\x8a\xa6\x1d-Gamescope/EnableSteamNativeExternalResolutionR!gamescopeNativeExternalResInSteam\x12l\n" +
	"\x1dsteamos_status_led_brightness\x18\xf0\xab\x01 \x01(\x05B'\x80\xa6\x1d\x03\x8a\xa6\x1d\x1bSteamOS/StatusLEDBrightness\xa0\xa6\x1ddR\x1asteamosStatusLedBrightness\x12d\n" +
	"\x19steamos_tdp_limit_enabled\x18\xf1\xab\x01 \x01(\bB'\x80\xa6\x1d\x01\x8a\xa6\x1d\x17SteamOS/TDPLimitEnabled\x98\xa6\x1d\x00Ц\x1d\x01R\x16steamosTdpLimitEnabled\x12N\n" +
	"\x11steamos_tdp_limit\x18\xf2\xab\x01 \x01(\x05B \x80\xa6\x1d\x01\x8a\xa6\x1d\x10SteamOS/TDPLimit\xa0\xa6\x1d\x00Ц\x1d\x01R\x0fsteamosTdpLimit\x12P\n" +
	"\x13steamos_cec_enabled\x18\xf3\xab\x01 \x01(\bB\x1e\x80\xa6\x1d\x01\x8a\xa6\x1d\x12SteamOS/CECEnabled\x98\xa6\x1d\x01R\x11steamosCecEnabled\x12^\n" +
	"\x1asteamos_cec_wake_on_resume\x18\xf4\xab\x01 \x01(\bB \x80\xa6\x1d\x01\x8a\xa6\x1d\x14SteamOS/WakeOnResume\x98\xa6\x1d\x01R\x16steamosCecWakeOnResume\x12M\n" +
	"\x12steamos_wifi_debug\x18\xf5\xab\x01 \x01(\bB\x1d\x80\xa6\x1d\x01\x8a\xa6\x1d\x11SteamOS/WifiDebug\x98\xa6\x1d\x00R\x10steamosWifiDebug\x12v\n" +
	"!steamos_wifi_force_wpa_supplicant\x18\xf6\xab\x01 \x01(\bB*\x80\xa6\x1d\x01\x8a\xa6\x1d\x1eSteamOS/WifiForceWPASupplicant\x98\xa6\x1d\x00R\x1dsteamosWifiForceWpaSupplicant\x12]\n" +
	"\x17steamos_magnifier_scale\x18\xf7\xab\x01 \x01(\x05B#\x80\xa6\x1d\x03\x8a\xa6\x1d\x16SteamOS/MagnifierScale\xa0\xa6\x1d\x96\x01R\x15steamosMagnifierScale\x12w\n" +
	" steamos_manual_gpu_clock_enabled\x18\xf8\xab\x01 \x01(\bB-\x80\xa6\x1d\x01\x8a\xa6\x1d\x1dSteamOS/ManualGPUClockEnabled\x98\xa6\x1d\x00Ц\x1d\x01R\x1csteamosManualGpuClockEnabled\x12i\n" +
	"\x1bsteamos_manual_gpu_clock_hz\x18\xf9\xab\x01 \x01(\x05B)\x80\xa6\x1d\x01\x8a\xa6\x1d\x18SteamOS/ManualGPUClockHz\xa0\xa6\x1d\xe8\aЦ\x1d\x01R\x17steamosManualGpuClockHz\x12y\n" +
	"$steamos_platform_performance_profile\x18\xfa\xab\x01 \x01(\tB&\x80\xa6\x1d\x01\x8a\xa6\x1d\x1aSteamOS/PerformanceProfileЦ\x1d\x01R!steamosPlatformPerformanceProfile\x12i\n" +
	"\x1csteamos_charge_limit_enabled\x18\xfb\xab\x01 \x01(\bB&\x80\xa6\x1d\x01\x8a\xa6\x1d\x1aSteamOS/ChargeLimitEnabled\x98\xa6\x1d\x00R\x19steamosChargeLimitEnabled\x12S\n" +
	"\x14steamos_charge_limit\x18\xfc\xab\x01 \x01(\x05B\x1f\x80\xa6\x1d\x01\x8a\xa6\x1d\x13SteamOS/ChargeLimit\xa0\xa6\x1dPR\x12steamosChargeLimit\x12i\n" +
	"\x1csteamos_charge_limit_devmode\x18\xfd\xab\x01 \x01(\bB&\x80\xa6\x1d\x01\x8a\xa6\x1d\x1aSteamOS/ChargeLimitDevMode\x98\xa6\x1d\x00R\x19steamosChargeLimitDevmode\x12]\n" +
	"\x17setting_validation_bool\x18ٳ\x01 \x01(\bB#\x80\xa6\x1d\x01\x8a\xa6\x1d\x1bSettingValidation/DummyBoolR\x15settingValidationBool\x12\x8b\x01\n" +
	"\x17setting_validation_enum\x18ڳ\x01 \x01(\x0e2\x12.EHDRVisualization:\x18k_EHDRVisualization_NoneB#\x80\xa6\x1d\x01\x8a\xa6\x1d\x1bSettingValidation/DummyEnumR\x15settingValidationEnum\x12`\n" +
	"\x18setting_validation_int32\x18۳\x01 \x01(\x05B$\x80\xa6\x1d\x01\x8a\xa6\x1d\x1cSettingValidation/DummyInt32R\x16settingValidationInt32\x12c\n" +
	"\x19setting_validation_uint32\x18ܳ\x01 \x01(\rB%\x80\xa6\x1d\x01\x8a\xa6\x1d\x1dSettingValidation/DummyUInt32R\x17settingValidationUint32\x12c\n" +
	"\x19setting_validation_uint64\x18ݳ\x01 \x01(\x04B%\x80\xa6\x1d\x01\x8a\xa6\x1d\x1dSettingValidation/DummyUInt64R\x17settingValidationUint64\x12`\n" +
	"\x18setting_validation_float\x18\u07b3\x01 \x01(\x02B$\x80\xa6\x1d\x01\x8a\xa6\x1d\x1cSettingValidation/DummyFloatR\x16settingValidationFloat\x12c\n" +
	"\x19setting_validation_string\x18߳\x01 \x01(\tB%\x80\xa6\x1d\x01\x8a\xa6\x1d\x1dSettingValidation/DummyStringR\x17settingValidationString\x12p\n" +
	"\x19setting_validation_hotkey\x18\xe0\xb3\x01 \x01(\v2\v.CMsgHotkeyB%\x80\xa6\x1d\x01\x8a\xa6\x1d\x1dSettingValidation/DummyHotkeyR\x17settingValidationHotkey\x12`\n" +
	"\x18system_bluetooth_enabled\x18\xc0\xbb\x01 \x01(\bB$\x80\xa6\x1d\x01\x8a\xa6\x1d\x18System/Bluetooth/Enabled\x98\xa6\x1d\x00R\x16systemBluetoothEnabled\x12f\n" +
	"\x18hardware_updater_enabled\x18\xc1\xbb\x01 \x01(\bB*\x80\xa6\x1d\x01\x8a\xa6\x1d\x1eSystem/HardwareUpdater/Enabled\x98\xa6\x1d\x00R\x16hardwareUpdaterEnabled\x12\\\n" +
	"\x19vr_show_perf_graph_in_hmd\x18\xa8\xc3\x01 \x01(\bB!\x80\xa6\x1d\x03\x8a\xa6\x1d\x15VR/ShowPerfGraphInHMD\x98\xa6\x1d\x00R\x14vrShowPerfGraphInHmd\x12q\n" +
	"\x1eaccessibility_debug_visualizer\x18\x90\xcb\x01 \x01(\bB)\x80\xa6\x1d\x03\x8a\xa6\x1d\x1dAccessibility/DebugVisualizer\x98\xa6\x1d\x00R\x1caccessibilityDebugVisualizer\x12~\n" +
	"#accessibility_screen_reader_enabled\x18\x91\xcb\x01 \x01(\bB-\x80\xa6\x1d\x01\x8a\xa6\x1d!Accessibility/ScreenReaderEnabled\x98\xa6\x1d\x00R accessibilityScreenReaderEnabled\x12y\n" +
	" accessibility_screen_reader_rate\x18\x92\xcb\x01 \x01(\x02B.\x80\xa6\x1d\x03\x8a\xa6\x1d\x1fAccessibility/ScreenReaderPitch\xb5\xa6\x1d\x00\x00\x00?R\x1daccessibilityScreenReaderRate\x12z\n" +
	"!accessibility_screen_reader_pitch\x18\x93\xcb\x01 \x01(\x02B-\x80\xa6\x1d\x03\x8a\xa6\x1d\x1eAccessibility/ScreenReaderRate\xb5\xa6\x1d\x00\x00\x00?R\x1eaccessibilityScreenReaderPitch\x12~\n" +
	"\"accessibility_screen_reader_volume\x18\x94\xcb\x01 \x01(\x02B/\x80\xa6\x1d\x03\x8a\xa6\x1d Accessibility/ScreenReaderVolume\xb5\xa6\x1d\x00\x00\x80?R\x1faccessibilityScreenReaderVolume\x12u\n" +
	" accessibility_high_contrast_mode\x18\x95\xcb\x01 \x01(\bB*\x80\xa6\x1d\x03\x8a\xa6\x1d\x1eAccessibility/HighContrastMode\x98\xa6\x1d\x00R\x1daccessibilityHighContrastMode\x12h\n" +
	"\x1baccessibility_reduce_motion\x18\x96\xcb\x01 \x01(\bB&\x80\xa6\x1d\x03\x8a\xa6\x1d\x1aAccessibility/ReduceMotion\x98\xa6\x1d\x00R\x19accessibilityReduceMotion\x12r\n" +
	"\x1faccessibility_minimum_font_size\x18\x98\xcb\x01 \x01(\rB)\x80\xa6\x1d\x03\x8a\xa6\x1d\x1dAccessibility/MinimumFontSize\xa0\xa6\x1d\x00R\x1caccessibilityMinimumFontSize\x12r\n" +
	"\x1faccessibility_color_filter_name\x18\x99\xcb\x01 \x01(\tB)\x80\xa6\x1d\x01\x8a\xa6\x1d\x1dAccessibility/ColorFilterName\xba\xa6\x1d\x00R\x1caccessibilityColorFilterName\x12r\n" +
	"\x1eaccessibility_desktop_ui_scale\x18\x9a\xcb\x01 \x01(\x02B+\x80\xa6\x1d\x01\x8a\xa6\x1d\x1cAccessibility/DesktopUIScale\xb5\xa6\x1d\x00\x00\x80?R\x1baccessibilityDesktopUiScale\x12\x7f\n" +
	"\"accessibility_screen_reader_locale\x18\x9b\xcb\x01 \x01(\tB0\x80\xa6\x1d\x01\x8a\xa6\x1d Accessibility/ScreenReaderLocale\xba\xa6\x1d\x04autoR\x1faccessibilityScreenReaderLocale*\x95\x02\n" +
	"\x13EClientSettingStore\x12!\n" +
	"\x1dk_EClientSettingStore_Invalid\x10\x00\x12-\n" +
	")k_EClientSettingStore_ConfigStore_Install\x10\x01\x121\n" +
	"-k_EClientSettingStore_ConfigStore_UserRoaming\x10\x02\x12/\n" +
	"+k_EClientSettingStore_ConfigStore_UserLocal\x10\x03\x12\"\n" +
	"\x1ek_EClientSettingStore_Registry\x10\x04\x12$\n" +
	" k_EClientSettingStore_CustomFunc\x10\x05*\xb5\x01\n" +
	"\x19EOverlayToggleBarLocation\x12&\n" +
	"\"k_EOverlayToggleBarLocation_Bottom\x10\x00\x12$\n" +
	" k_EOverlayToggleBarLocation_Left\x10\x01\x12%\n" +
	"!k_EOverlayToggleBarLocation_Right\x10\x02\x12#\n" +
	"\x1fk_EOverlayToggleBarLocation_Top\x10\x03*\xab\x01\n" +
	"\x13ESettingProfileMode\x12\x1e\n" +
	"\x1ak_ESettingProfileMode_None\x10\x00\x12!\n" +
	"\x1dk_ESettingProfileMode_PerGame\x10\x01\x12+\n" +
	"'k_ESettingProfileMode_PerGamePerDisplay\x10\x02\x12$\n" +
	" k_ESettingProfileMode_PerDisplay\x10\x03*J\n" +
	"\aEGRMode\x12\x13\n" +
	"\x0fk_EGRMode_Never\x10\x00\x12\x14\n" +
	"\x10k_EGRMode_Always\x10\x01\x12\x14\n" +
	"\x10k_EGRMode_Manual\x10\x02*M\n" +
	"\bEGRAudio\x12\x13\n" +
	"\x0fk_EGRAudio_Game\x10\x00\x12\x15\n" +
	"\x11k_EGRAudio_System\x10\x01\x12\x15\n" +
	"\x11k_EGRAudio_Select\x10\x02*{\n" +
	"\x12EGRExportLimitType\x12\x1f\n" +
	"\x1bk_EGRExportLimitType_Native\x10\x00\x12!\n" +
	"\x1dk_EGRExportLimitType_FileSize\x10\x01\x12!\n" +
	"\x1dk_EGRExportLimitType_Advanced\x10\x02:y\n" +
	"\rsetting_store\x12\x1d.google.protobuf.FieldOptions\x18\xe0\xd4\x03 \x01(\x0e2\x14.EClientSettingStore:\x1dk_EClientSettingStore_InvalidR\fsettingStore:B\n" +
	"\fsetting_name\x12\x1d.google.protobuf.FieldOptions\x18\xe1\xd4\x03 \x01(\tR\vsettingName:K\n" +
	"\x11setting_pre_login\x12\x1d.google.protobuf.FieldOptions\x18\xe2\xd4\x03 \x01(\bR\x0fsettingPreLogin:Q\n" +
	"\x14setting_default_bool\x12\x1d.google.protobuf.FieldOptions\x18\xe3\xd4\x03 \x01(\bR\x12settingDefaultBool:O\n" +
	"\x13setting_default_int\x12\x1d.google.protobuf.FieldOptions\x18\xe4\xd4\x03 \x01(\x05R\x11settingDefaultInt:Q\n" +
	"\x14setting_default_uint\x12\x1d.google.protobuf.FieldOptions\x18\xe5\xd4\x03 \x01(\rR\x12settingDefaultUint:S\n" +
	"\x15setting_default_float\x12\x1d.google.protobuf.FieldOptions\x18\xe6\xd4\x03 \x01(\x02R\x13settingDefaultFloat:U\n" +
	"\x16setting_default_string\x12\x1d.google.protobuf.FieldOptions\x18\xe7\xd4\x03 \x01(\tR\x14settingDefaultString:J\n" +
	"\x10setting_readonly\x12\x1d.google.protobuf.FieldOptions\x18\xe8\xd4\x03 \x01(\bR\x0fsettingReadonly:P\n" +
	"\x13setting_description\x12\x1d.google.protobuf.FieldOptions\x18\xe9\xd4\x03 \x01(\tR\x12settingDescription:\x83\x01\n" +
	"\x14setting_profile_mode\x12\x1d.google.protobuf.FieldOptions\x18\xea\xd4\x03 \x01(\x0e2\x14.ESettingProfileMode:\x1ak_ESettingProfileMode_NoneR\x12settingProfileMode:K\n" +
	"\x11setting_clamp_min\x12\x1d.google.protobuf.FieldOptions\x18\xeb\xd4\x03 \x01(\x03R\x0fsettingClampMin:K\n" +
	"\x11setting_clamp_max\x12\x1d.google.protobuf.FieldOptions\x18\xec\xd4\x03 \x01(\x03R\x0fsettingClampMaxB\x05H\x01\x80\x01\x01"

var (
	file_steammessages_clientsettings_proto_rawDescOnce sync.Once
	file_steammessages_clientsettings_proto_rawDescData []byte
)

func file_steammessages_clientsettings_proto_rawDescGZIP() []byte {
	file_steammessages_clientsettings_proto_rawDescOnce.Do(func() {
		file_steammessages_clientsettings_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_steammessages_clientsettings_proto_rawDesc), len(file_steammessages_clientsettings_proto_rawDesc)))
	})
	return file_steammessages_clientsettings_proto_rawDescData
}

var file_steammessages_clientsettings_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_steammessages_clientsettings_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_steammessages_clientsettings_proto_goTypes = []any{
	(EClientSettingStore)(0),          // 0: EClientSettingStore
	(EOverlayToggleBarLocation)(0),    // 1: EOverlayToggleBarLocation
	(ESettingProfileMode)(0),          // 2: ESettingProfileMode
	(EGRMode)(0),                      // 3: EGRMode
	(EGRAudio)(0),                     // 4: EGRAudio
	(EGRExportLimitType)(0),           // 5: EGRExportLimitType
	(*CMsgHotkey)(nil),                // 6: CMsgHotkey
	(*CMsgSettingVariant)(nil),        // 7: CMsgSettingVariant
	(*CMsgClientSettings)(nil),        // 8: CMsgClientSettings
	(EBroadcastPermission)(0),         // 9: EBroadcastPermission
	(EBroadcastEncoderSetting)(0),     // 10: EBroadcastEncoderSetting
	(EExportCodec)(0),                 // 11: EExportCodec
	(EHDRVisualization)(0),            // 12: EHDRVisualization
	(*descriptorpb.FieldOptions)(nil), // 13: google.protobuf.FieldOptions
}
var file_steammessages_clientsettings_proto_depIdxs = []int32{
	6,  // 0: CMsgSettingVariant.value_hotkey:type_name -> CMsgHotkey
	6,  // 1: CMsgClientSettings.overlay_key:type_name -> CMsgHotkey
	6,  // 2: CMsgClientSettings.screenshot_key:type_name -> CMsgHotkey
	6,  // 3: CMsgClientSettings.voice_push_to_talk_key:type_name -> CMsgHotkey
	6,  // 4: CMsgClientSettings.overlay_fps_counter_key:type_name -> CMsgHotkey
	9,  // 5: CMsgClientSettings.broadcast_permissions:type_name -> EBroadcastPermission
	10, // 6: CMsgClientSettings.broadcast_encoding_option:type_name -> EBroadcastEncoderSetting
	6,  // 7: CMsgClientSettings.gamerecording_background_mk:type_name -> CMsgHotkey
	6,  // 8: CMsgClientSettings.gamerecording_background_tg:type_name -> CMsgHotkey
	3,  // 9: CMsgClientSettings.gamerecording_background_mode:type_name -> EGRMode
	4,  // 10: CMsgClientSettings.gamerecording_background_audio:type_name -> EGRAudio
	6,  // 11: CMsgClientSettings.gamerecording_hotkey_ic:type_name -> CMsgHotkey
	5,  // 12: CMsgClientSettings.gamerecording_export_limit_type:type_name -> EGRExportLimitType
	11, // 13: CMsgClientSettings.gamerecording_export_codec:type_name -> EExportCodec
	12, // 14: CMsgClientSettings.gamescope_hdr_visualization:type_name -> EHDRVisualization
	6,  // 15: CMsgClientSettings.gamescope_guide_hotkey:type_name -> CMsgHotkey
	6,  // 16: CMsgClientSettings.gamescope_qam_hotkey:type_name -> CMsgHotkey
	12, // 17: CMsgClientSettings.setting_validation_enum:type_name -> EHDRVisualization
	6,  // 18: CMsgClientSettings.setting_validation_hotkey:type_name -> CMsgHotkey
	13, // 19: setting_store:extendee -> google.protobuf.FieldOptions
	13, // 20: setting_name:extendee -> google.protobuf.FieldOptions
	13, // 21: setting_pre_login:extendee -> google.protobuf.FieldOptions
	13, // 22: setting_default_bool:extendee -> google.protobuf.FieldOptions
	13, // 23: setting_default_int:extendee -> google.protobuf.FieldOptions
	13, // 24: setting_default_uint:extendee -> google.protobuf.FieldOptions
	13, // 25: setting_default_float:extendee -> google.protobuf.FieldOptions
	13, // 26: setting_default_string:extendee -> google.protobuf.FieldOptions
	13, // 27: setting_readonly:extendee -> google.protobuf.FieldOptions
	13, // 28: setting_description:extendee -> google.protobuf.FieldOptions
	13, // 29: setting_profile_mode:extendee -> google.protobuf.FieldOptions
	13, // 30: setting_clamp_min:extendee -> google.protobuf.FieldOptions
	13, // 31: setting_clamp_max:extendee -> google.protobuf.FieldOptions
	0,  // 32: setting_store:type_name -> EClientSettingStore
	2,  // 33: setting_profile_mode:type_name -> ESettingProfileMode
	34, // [34:34] is the sub-list for method output_type
	34, // [34:34] is the sub-list for method input_type
	32, // [32:34] is the sub-list for extension type_name
	19, // [19:32] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_steammessages_clientsettings_proto_init() }
func file_steammessages_clientsettings_proto_init() {
	if File_steammessages_clientsettings_proto != nil {
		return
	}
	file_enums_proto_init()
	file_steammessages_clientsettings_proto_msgTypes[1].OneofWrappers = []any{
		(*CMsgSettingVariant_ValueBool)(nil),
		(*CMsgSettingVariant_ValueInt32)(nil),
		(*CMsgSettingVariant_ValueUint32)(nil),
		(*CMsgSettingVariant_ValueUint64)(nil),
		(*CMsgSettingVariant_ValueFloat)(nil),
		(*CMsgSettingVariant_ValueString)(nil),
		(*CMsgSettingVariant_ValueHotkey)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_steammessages_clientsettings_proto_rawDesc), len(file_steammessages_clientsettings_proto_rawDesc)),
			NumEnums:      6,
			NumMessages:   3,
			NumExtensions: 13,
			NumServices:   0,
		},
		GoTypes:           file_steammessages_clientsettings_proto_goTypes,
		DependencyIndexes: file_steammessages_clientsettings_proto_depIdxs,
		EnumInfos:         file_steammessages_clientsettings_proto_enumTypes,
		MessageInfos:      file_steammessages_clientsettings_proto_msgTypes,
		ExtensionInfos:    file_steammessages_clientsettings_proto_extTypes,
	}.Build()
	File_steammessages_clientsettings_proto = out.File
	file_steammessages_clientsettings_proto_goTypes = nil
	file_steammessages_clientsettings_proto_depIdxs = nil
}
