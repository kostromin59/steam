// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v6.32.0
// source: steammessages_clientlanp2p.proto

package steampb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CMsgClientLANP2PRequestChunks struct {
	state         protoimpl.MessageState                    `protogen:"open.v1"`
	ChunkKeys     []*CMsgClientLANP2PRequestChunks_ChunkKey `protobuf:"bytes,1,rep,name=chunk_keys,json=chunkKeys" json:"chunk_keys,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientLANP2PRequestChunks) Reset() {
	*x = CMsgClientLANP2PRequestChunks{}
	mi := &file_steammessages_clientlanp2p_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientLANP2PRequestChunks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientLANP2PRequestChunks) ProtoMessage() {}

func (x *CMsgClientLANP2PRequestChunks) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientlanp2p_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientLANP2PRequestChunks.ProtoReflect.Descriptor instead.
func (*CMsgClientLANP2PRequestChunks) Descriptor() ([]byte, []int) {
	return file_steammessages_clientlanp2p_proto_rawDescGZIP(), []int{0}
}

func (x *CMsgClientLANP2PRequestChunks) GetChunkKeys() []*CMsgClientLANP2PRequestChunks_ChunkKey {
	if x != nil {
		return x.ChunkKeys
	}
	return nil
}

type CMsgClientLANP2PRequestChunksResponse struct {
	state          protoimpl.MessageState                             `protogen:"open.v1"`
	ChunkResponses []*CMsgClientLANP2PRequestChunksResponse_ChunkData `protobuf:"bytes,1,rep,name=chunk_responses,json=chunkResponses" json:"chunk_responses,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CMsgClientLANP2PRequestChunksResponse) Reset() {
	*x = CMsgClientLANP2PRequestChunksResponse{}
	mi := &file_steammessages_clientlanp2p_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientLANP2PRequestChunksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientLANP2PRequestChunksResponse) ProtoMessage() {}

func (x *CMsgClientLANP2PRequestChunksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientlanp2p_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientLANP2PRequestChunksResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientLANP2PRequestChunksResponse) Descriptor() ([]byte, []int) {
	return file_steammessages_clientlanp2p_proto_rawDescGZIP(), []int{1}
}

func (x *CMsgClientLANP2PRequestChunksResponse) GetChunkResponses() []*CMsgClientLANP2PRequestChunksResponse_ChunkData {
	if x != nil {
		return x.ChunkResponses
	}
	return nil
}

type CMsgClientPeerChunkRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AppId         *uint32                `protobuf:"varint,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	DepotId       *uint32                `protobuf:"varint,2,opt,name=depot_id,json=depotId" json:"depot_id,omitempty"`
	Sha           []byte                 `protobuf:"bytes,3,opt,name=sha" json:"sha,omitempty"`
	AccessToken   *uint64                `protobuf:"varint,4,opt,name=access_token,json=accessToken" json:"access_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientPeerChunkRequest) Reset() {
	*x = CMsgClientPeerChunkRequest{}
	mi := &file_steammessages_clientlanp2p_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientPeerChunkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientPeerChunkRequest) ProtoMessage() {}

func (x *CMsgClientPeerChunkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientlanp2p_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientPeerChunkRequest.ProtoReflect.Descriptor instead.
func (*CMsgClientPeerChunkRequest) Descriptor() ([]byte, []int) {
	return file_steammessages_clientlanp2p_proto_rawDescGZIP(), []int{2}
}

func (x *CMsgClientPeerChunkRequest) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CMsgClientPeerChunkRequest) GetDepotId() uint32 {
	if x != nil && x.DepotId != nil {
		return *x.DepotId
	}
	return 0
}

func (x *CMsgClientPeerChunkRequest) GetSha() []byte {
	if x != nil {
		return x.Sha
	}
	return nil
}

func (x *CMsgClientPeerChunkRequest) GetAccessToken() uint64 {
	if x != nil && x.AccessToken != nil {
		return *x.AccessToken
	}
	return 0
}

type CMsgClientPeerChunkResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Result        *uint32                `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	AppId         *uint32                `protobuf:"varint,2,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	DepotId       *uint32                `protobuf:"varint,3,opt,name=depot_id,json=depotId" json:"depot_id,omitempty"`
	Sha           []byte                 `protobuf:"bytes,4,opt,name=sha" json:"sha,omitempty"`
	Encrypted     *bool                  `protobuf:"varint,5,opt,name=encrypted" json:"encrypted,omitempty"`
	Compressed    *bool                  `protobuf:"varint,6,opt,name=compressed" json:"compressed,omitempty"`
	ChunkData     []byte                 `protobuf:"bytes,7,opt,name=chunk_data,json=chunkData" json:"chunk_data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientPeerChunkResponse) Reset() {
	*x = CMsgClientPeerChunkResponse{}
	mi := &file_steammessages_clientlanp2p_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientPeerChunkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientPeerChunkResponse) ProtoMessage() {}

func (x *CMsgClientPeerChunkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientlanp2p_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientPeerChunkResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientPeerChunkResponse) Descriptor() ([]byte, []int) {
	return file_steammessages_clientlanp2p_proto_rawDescGZIP(), []int{3}
}

func (x *CMsgClientPeerChunkResponse) GetResult() uint32 {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return 0
}

func (x *CMsgClientPeerChunkResponse) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CMsgClientPeerChunkResponse) GetDepotId() uint32 {
	if x != nil && x.DepotId != nil {
		return *x.DepotId
	}
	return 0
}

func (x *CMsgClientPeerChunkResponse) GetSha() []byte {
	if x != nil {
		return x.Sha
	}
	return nil
}

func (x *CMsgClientPeerChunkResponse) GetEncrypted() bool {
	if x != nil && x.Encrypted != nil {
		return *x.Encrypted
	}
	return false
}

func (x *CMsgClientPeerChunkResponse) GetCompressed() bool {
	if x != nil && x.Compressed != nil {
		return *x.Compressed
	}
	return false
}

func (x *CMsgClientPeerChunkResponse) GetChunkData() []byte {
	if x != nil {
		return x.ChunkData
	}
	return nil
}

type CMsgClientLANP2PRequestChunks_ChunkKey struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DepotId       *uint32                `protobuf:"varint,1,opt,name=depot_id,json=depotId" json:"depot_id,omitempty"`
	Sha           []byte                 `protobuf:"bytes,2,opt,name=sha" json:"sha,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientLANP2PRequestChunks_ChunkKey) Reset() {
	*x = CMsgClientLANP2PRequestChunks_ChunkKey{}
	mi := &file_steammessages_clientlanp2p_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientLANP2PRequestChunks_ChunkKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientLANP2PRequestChunks_ChunkKey) ProtoMessage() {}

func (x *CMsgClientLANP2PRequestChunks_ChunkKey) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientlanp2p_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientLANP2PRequestChunks_ChunkKey.ProtoReflect.Descriptor instead.
func (*CMsgClientLANP2PRequestChunks_ChunkKey) Descriptor() ([]byte, []int) {
	return file_steammessages_clientlanp2p_proto_rawDescGZIP(), []int{0, 0}
}

func (x *CMsgClientLANP2PRequestChunks_ChunkKey) GetDepotId() uint32 {
	if x != nil && x.DepotId != nil {
		return *x.DepotId
	}
	return 0
}

func (x *CMsgClientLANP2PRequestChunks_ChunkKey) GetSha() []byte {
	if x != nil {
		return x.Sha
	}
	return nil
}

type CMsgClientLANP2PRequestChunksResponse_ChunkData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Result        *uint32                `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	DepotId       *uint32                `protobuf:"varint,2,opt,name=depot_id,json=depotId" json:"depot_id,omitempty"`
	Sha           []byte                 `protobuf:"bytes,3,opt,name=sha" json:"sha,omitempty"`
	ChunkData     []byte                 `protobuf:"bytes,4,opt,name=chunk_data,json=chunkData" json:"chunk_data,omitempty"`
	Encrypted     *bool                  `protobuf:"varint,5,opt,name=encrypted" json:"encrypted,omitempty"`
	Compressed    *bool                  `protobuf:"varint,6,opt,name=compressed" json:"compressed,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CMsgClientLANP2PRequestChunksResponse_ChunkData) Reset() {
	*x = CMsgClientLANP2PRequestChunksResponse_ChunkData{}
	mi := &file_steammessages_clientlanp2p_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CMsgClientLANP2PRequestChunksResponse_ChunkData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientLANP2PRequestChunksResponse_ChunkData) ProtoMessage() {}

func (x *CMsgClientLANP2PRequestChunksResponse_ChunkData) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientlanp2p_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientLANP2PRequestChunksResponse_ChunkData.ProtoReflect.Descriptor instead.
func (*CMsgClientLANP2PRequestChunksResponse_ChunkData) Descriptor() ([]byte, []int) {
	return file_steammessages_clientlanp2p_proto_rawDescGZIP(), []int{1, 0}
}

func (x *CMsgClientLANP2PRequestChunksResponse_ChunkData) GetResult() uint32 {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return 0
}

func (x *CMsgClientLANP2PRequestChunksResponse_ChunkData) GetDepotId() uint32 {
	if x != nil && x.DepotId != nil {
		return *x.DepotId
	}
	return 0
}

func (x *CMsgClientLANP2PRequestChunksResponse_ChunkData) GetSha() []byte {
	if x != nil {
		return x.Sha
	}
	return nil
}

func (x *CMsgClientLANP2PRequestChunksResponse_ChunkData) GetChunkData() []byte {
	if x != nil {
		return x.ChunkData
	}
	return nil
}

func (x *CMsgClientLANP2PRequestChunksResponse_ChunkData) GetEncrypted() bool {
	if x != nil && x.Encrypted != nil {
		return *x.Encrypted
	}
	return false
}

func (x *CMsgClientLANP2PRequestChunksResponse_ChunkData) GetCompressed() bool {
	if x != nil && x.Compressed != nil {
		return *x.Compressed
	}
	return false
}

var File_steammessages_clientlanp2p_proto protoreflect.FileDescriptor

const file_steammessages_clientlanp2p_proto_rawDesc = "" +
	"\n" +
	" steammessages_clientlanp2p.proto\x1a\x18steammessages_base.proto\"\xa0\x01\n" +
	"\x1dCMsgClientLANP2PRequestChunks\x12F\n" +
	"\n" +
	"chunk_keys\x18\x01 \x03(\v2'.CMsgClientLANP2PRequestChunks.ChunkKeyR\tchunkKeys\x1a7\n" +
	"\bChunkKey\x12\x19\n" +
	"\bdepot_id\x18\x01 \x01(\rR\adepotId\x12\x10\n" +
	"\x03sha\x18\x02 \x01(\fR\x03sha\"\xb2\x02\n" +
	"%CMsgClientLANP2PRequestChunksResponse\x12Y\n" +
	"\x0fchunk_responses\x18\x01 \x03(\v20.CMsgClientLANP2PRequestChunksResponse.ChunkDataR\x0echunkResponses\x1a\xad\x01\n" +
	"\tChunkData\x12\x16\n" +
	"\x06result\x18\x01 \x01(\rR\x06result\x12\x19\n" +
	"\bdepot_id\x18\x02 \x01(\rR\adepotId\x12\x10\n" +
	"\x03sha\x18\x03 \x01(\fR\x03sha\x12\x1d\n" +
	"\n" +
	"chunk_data\x18\x04 \x01(\fR\tchunkData\x12\x1c\n" +
	"\tencrypted\x18\x05 \x01(\bR\tencrypted\x12\x1e\n" +
	"\n" +
	"compressed\x18\x06 \x01(\bR\n" +
	"compressed\"\x83\x01\n" +
	"\x1aCMsgClientPeerChunkRequest\x12\x15\n" +
	"\x06app_id\x18\x01 \x01(\rR\x05appId\x12\x19\n" +
	"\bdepot_id\x18\x02 \x01(\rR\adepotId\x12\x10\n" +
	"\x03sha\x18\x03 \x01(\fR\x03sha\x12!\n" +
	"\faccess_token\x18\x04 \x01(\x04R\vaccessToken\"\xd6\x01\n" +
	"\x1bCMsgClientPeerChunkResponse\x12\x16\n" +
	"\x06result\x18\x01 \x01(\rR\x06result\x12\x15\n" +
	"\x06app_id\x18\x02 \x01(\rR\x05appId\x12\x19\n" +
	"\bdepot_id\x18\x03 \x01(\rR\adepotId\x12\x10\n" +
	"\x03sha\x18\x04 \x01(\fR\x03sha\x12\x1c\n" +
	"\tencrypted\x18\x05 \x01(\bR\tencrypted\x12\x1e\n" +
	"\n" +
	"compressed\x18\x06 \x01(\bR\n" +
	"compressed\x12\x1d\n" +
	"\n" +
	"chunk_data\x18\a \x01(\fR\tchunkDataB\x05H\x01\x80\x01\x00"

var (
	file_steammessages_clientlanp2p_proto_rawDescOnce sync.Once
	file_steammessages_clientlanp2p_proto_rawDescData []byte
)

func file_steammessages_clientlanp2p_proto_rawDescGZIP() []byte {
	file_steammessages_clientlanp2p_proto_rawDescOnce.Do(func() {
		file_steammessages_clientlanp2p_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_steammessages_clientlanp2p_proto_rawDesc), len(file_steammessages_clientlanp2p_proto_rawDesc)))
	})
	return file_steammessages_clientlanp2p_proto_rawDescData
}

var file_steammessages_clientlanp2p_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_steammessages_clientlanp2p_proto_goTypes = []any{
	(*CMsgClientLANP2PRequestChunks)(nil),                   // 0: CMsgClientLANP2PRequestChunks
	(*CMsgClientLANP2PRequestChunksResponse)(nil),           // 1: CMsgClientLANP2PRequestChunksResponse
	(*CMsgClientPeerChunkRequest)(nil),                      // 2: CMsgClientPeerChunkRequest
	(*CMsgClientPeerChunkResponse)(nil),                     // 3: CMsgClientPeerChunkResponse
	(*CMsgClientLANP2PRequestChunks_ChunkKey)(nil),          // 4: CMsgClientLANP2PRequestChunks.ChunkKey
	(*CMsgClientLANP2PRequestChunksResponse_ChunkData)(nil), // 5: CMsgClientLANP2PRequestChunksResponse.ChunkData
}
var file_steammessages_clientlanp2p_proto_depIdxs = []int32{
	4, // 0: CMsgClientLANP2PRequestChunks.chunk_keys:type_name -> CMsgClientLANP2PRequestChunks.ChunkKey
	5, // 1: CMsgClientLANP2PRequestChunksResponse.chunk_responses:type_name -> CMsgClientLANP2PRequestChunksResponse.ChunkData
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_steammessages_clientlanp2p_proto_init() }
func file_steammessages_clientlanp2p_proto_init() {
	if File_steammessages_clientlanp2p_proto != nil {
		return
	}
	file_steammessages_base_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_steammessages_clientlanp2p_proto_rawDesc), len(file_steammessages_clientlanp2p_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_steammessages_clientlanp2p_proto_goTypes,
		DependencyIndexes: file_steammessages_clientlanp2p_proto_depIdxs,
		MessageInfos:      file_steammessages_clientlanp2p_proto_msgTypes,
	}.Build()
	File_steammessages_clientlanp2p_proto = out.File
	file_steammessages_clientlanp2p_proto_goTypes = nil
	file_steammessages_clientlanp2p_proto_depIdxs = nil
}
